package itcurves.ncs;

import itcurves.ncs.bluebamboo.Command;
import itcurves.ncs.bluebamboo.StringUtil;
import itcurves.ncs.creditcard.cmt.CMTAcknowledgeAuthorization;
import itcurves.ncs.creditcard.cmt.CMTAdjustAuthorization;
import itcurves.ncs.creditcard.cmt.CMTAuthorizationCreditTrip;
import itcurves.ncs.creditcard.cmt.CMTSettlementAuthorization;
import itcurves.ncs.creditcard.mjm.CallingMJM_CreditCard;
import itcurves.ncs.creditcard.mjm.InvalidResponse;
import itcurves.ncs.creditcard.mjm.MJM_Authorize;
import itcurves.ncs.creditcard.mjm.MJM_CreditCardResponse;
import itcurves.ncs.org.apache.commons.collections4.comparators.ComparatorChain;
import itcurves.ncs.taximeter.messages.CreditCardDataMessage;
import itcurves.ncs.taximeter.messages.CustomMessage;
import itcurves.ncs.taximeter.messages.MessageId;
import itcurves.ncs.taximeter.messages.MeterBusyNotBusy;
import itcurves.ncs.taximeter.messages.MeterMessage;
import itcurves.ncs.taximeter.messages.MeterStateChangeMessage;
import itcurves.ncs.taximeter.messages.MeterTripData;
import itcurves.ncs.taximeter.messages.PrinterMessage;
import itcurves.ncs.taximeter.messages.VeriFonePaymentData;
import itcurves.ncs.vivotech.VivotechScreen;
import itcurves.ncs.vivotech.VivotechScreen.Screen;
import itcurves.ncs.voip.ScreenAV;
import itcurves.ncs.voip.StartAVActivityService;
import itcurves.ncs.webhandler.CallingWS;
import itcurves.ncs.webhandler.WS_Response;
import itcurves.ncs.wifihotspot.WIFI_AP_STATE;
import itcurves.ncs.wifihotspot.WifiApManager;
import itcurves.regencycab.R;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.URL;
import java.net.URLConnection;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import org.abtollc.sdk.AbtoApplication;
import org.abtollc.sdk.AbtoPhone;
import org.abtollc.sdk.OnIncomingCallListener;
import org.abtollc.sdk.OnInitializeListener;
import org.abtollc.sdk.OnRegistrationListener;
import org.abtollc.utils.codec.Codec;
import org.apache.http.util.ByteArrayBuffer;
import org.json.JSONException;
import org.json.JSONObject;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;
import org.xmlpull.v1.XmlPullParserException;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlarmManager;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.ProgressDialog;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.ActivityNotFoundException;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.ResolveInfo;
import android.content.res.Configuration;
import android.content.res.Resources.NotFoundException;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.PorterDuff.Mode;
import android.graphics.Typeface;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.location.LocationManager;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.media.SoundPool;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiManager;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.os.RemoteException;
import android.os.StrictMode;
import android.preference.PreferenceManager;
import android.speech.RecognizerIntent;
import android.speech.tts.TextToSpeech;
import android.telephony.TelephonyManager;
import android.text.Editable;
import android.text.Html;
import android.text.InputFilter;
import android.text.InputType;
import android.text.SpannableString;
import android.text.TextWatcher;
import android.text.format.DateFormat;
import android.text.method.LinkMovementMethod;
import android.text.method.NumberKeyListener;
import android.text.method.PasswordTransformationMethod;
import android.text.style.RelativeSizeSpan;
import android.util.Base64;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.ContextMenu;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.Display;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnKeyListener;
import android.view.View.OnLongClickListener;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.TabHost;
import android.widget.TabHost.OnTabChangeListener;
import android.widget.TabHost.TabContentFactory;
import android.widget.TabHost.TabSpec;
import android.widget.TabWidget;
import android.widget.TextView;
import android.widget.Toast;

import com.bbpos.swiper.SwiperController;
import com.bbpos.swiper.SwiperController.DecodeResult;
import com.bbpos.swiper.SwiperController.SwiperControllerState;
import com.bbpos.swiper.SwiperController.SwiperStateChangedListener;
import com.chargeanywhere.sdk.CreditCard;
import com.chargeanywhere.sdk.HostResponse;
import com.chargeanywhere.sdk.RegistrationException;
import com.chargeanywhere.sdk.RegistrationListener;
import com.chargeanywhere.sdk.Transaction;
import com.chargeanywhere.sdk.TransactionError;
import com.chargeanywhere.sdk.TransactionListener;
import com.chargeanywhere.sdk.TransactionType;
import com.chargeanywhere.sdk.peripherals.DeviceException;
import com.chargeanywhere.sdk.peripherals.DeviceUtils;
import com.chargeanywhere.sdk.peripherals.PeripheralDeviceListener;
import com.google.android.gms.maps.CameraUpdate;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.UiSettings;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.readystatesoftware.viewbadger.BadgeView;
import com.roamdata.android.roampayapi4x.api.RoamPayApi;
import com.roamdata.android.roampayapi4x.api.RoamPayApiHandler;
import com.roamdata.android.roampayapi4x.utils.RoamPayApiAction;
import com.roamdata.android.roampayapi4x.utils.RoamPayApiParams;
import com.roamdata.android.roampayapi4x.utils.RoamPayApiResponseCode;
import com.slimcd.library.transact.processtransaction.ProcessTransactionReply;
import com.slimcd.library.transact.processtransaction.ProcessTransactionRequest;
import IDTech.MSR.XMLManager.StructConfigParameters;
import IDTech.MSR.uniMag.uniMagReader;
import IDTech.MSR.uniMag.uniMagReaderMsg;
import IDTech.MSR.uniMag.UniMagTools.uniMagReaderToolsMsg;
import IDTech.MSR.uniMag.UniMagTools.uniMagSDKTools;

@SuppressWarnings("ALL")
@SuppressLint("InlinedApi")
public class TaxiPlexer extends Activity
        implements SendTransactionResponse, RegistrationListener, TransactionListener, IAVLServiceStatusListener, IMessageListener, TextToSpeech.OnInitListener, PeripheralDeviceListener,uniMagReaderMsg,
        uniMagReaderToolsMsg {

    String fileName = "NCS.apk";
    FileOutputStream fileOutput = null;
    InputStream inputStream = null;
    File file;
    File SDCardRoot;

    InputFilter[] mmyyFilter = {new InputFilter.LengthFilter(4)};
    InputFilter[] creditCardFilter = {new InputFilter.LengthFilter(16)};
    final DecimalFormat dFormat = new DecimalFormat("0.00");

    private static final SimpleDateFormat MRMS_DateFormat = new SimpleDateFormat("HHmmss MMddyyyy", Locale.US);
    private static final SimpleDateFormat displayDateFormat = new SimpleDateFormat("MM/dd/yy", Locale.US);
    private static final SimpleDateFormat displayTimeFormat = new SimpleDateFormat("HH:mm", Locale.US);
    private static final SimpleDateFormat displayTimeFormat1 = new SimpleDateFormat("hh:mm a", Locale.US);
    private static final SimpleDateFormat CMT_DateFormat = new SimpleDateFormat("yyyy-MM-dd", Locale.US);
    private static final SimpleDateFormat ddMMyyyy = new SimpleDateFormat("ddMMyyyy", Locale.US);
    private static final SimpleDateFormat MJM_GiftCard1 = new SimpleDateFormat("yyyy-MM-dd", Locale.US);
    private static final SimpleDateFormat MJM_GiftCard2 = new SimpleDateFormat("HH:mm:ss", Locale.US);

    private static final int StatusIndex = 0;
    private static final int ZoneIndex = 1;
    private static final int BidIndex = 2;
    private static int wallIndex = 3;
    private static int messagesIndex = 4;
    private static int TripIndex = 5;
    private static int TripFields = 0;

    private static final int OverlayIndex = 26;
    private static final int SERVERS = 7;
    private static final int LOGINSCREEN = 1111;
    private static final int TABBERVIEW = 2222;
    private static final int TRIPDETAILVIEW = 3333;
    private static final int PAYMENTVIEW = 4444;
    private static final int WALLLIST = 5555;
    private static final int MSGSLIST = 6666;
    private static final int ONDEMANDWALL = 7777;
    private static final int MANIFESTWALL = 8888;
    private static int DIALIE_Connection_STATUS = 0;
    private static Object tripArraysInSync = new Object();

    private static int msgCount = 0;
    private static int PrinterTurn = 0;
    NotificationManager notificationManager;
    static BluetoothAdapter mBluetoothAdapter = null;
    private IAVL_Service serviceHandle;
    Handler msgHandler;
    Handler msgHandlerForLoginWait;
    ProgressDialog myProgress, TripProgress, connectionMeterProgress;
    protected static LinearLayout bidPanel, zonePanel, wallPanel, msgsPannel, manifestWallPanel, wallButtonPanel, loginPanel, LanguageRow;
    protected RelativeLayout overlay;
    TabHost tabHost;
    TabHost tabHostWall;
    TabSpec bidTab;
    TabWidget tabWidget;
    TabWidget tabWidgetWall;
    BadgeView manifestbadge;
    BadgeView wallbadge;
    BadgeView msgsbadge;
    BadgeView tripsbadge;
    private ListView tcn;
    private TripNoAdapter tripNoAdapter;
    protected static TripArrayList arrayListOftrips;
    protected static TripArrayList arrayListOfGroupedManifest;
    protected static ArrayList<Trip> arrayListForAdapter;
    // protected static TripArrayList arrayListOfTreatedTrips, arrayListOfOtherTrips;
    protected static ArrayList<WallTrip> arrayListOfWallTrips;
    protected static ArrayList<ManifestWallTrip> arrayListOfmanifestWallTrips;
    protected static ArrayList<CannedMessage> arrayListOfCMsgs = new ArrayList<CannedMessage>();
    protected ArrayList<String> WallTripsList = new ArrayList<String>();
    protected ArrayList<String> WallTripsPickTime = new ArrayList<String>();
    protected ArrayList<String> Removeable_WallTripsList = new ArrayList<String>();

    static BluetoothDevice taxiMeter;
    static BluetoothDevice taxiPrinter;
    static BluetoothDevice VivotechDevice;
    private static Meter_Bluetooth Meter;
    private static Meter_Bluetooth taxiMeterPrinter;
    private static BlueBamboo_Bluetooth bluebambooPrinter;
    private static Vivotech_Bluetooth Vivotech;

    private Drawable drawable, drawable1;
    String usDropOffState = "";
    String usPickUpState = "";

    private String manifestNumber;
    private String nextServLat = "0";
    private String nextServLong = "0";
    private String NextServZone = "Unknown";
    private String bookedZone = "None";
    private String lastRequestedBookedZone = "998";
    private String avlZone = "Unknown";
    private String bookedStand = "None";
    private String lastBookedZone;
    private String state = "vacant";
    private String mjm_Balance = "";
    private String mjm_RemainingAmt = "";
    private String mjmMaxChargeAmt = "";
    private String mjm_CardAmt = "";
    private String prev_MeterState = "";
    private String curr_MeterState = "";
    private String isWallTripResponse = "N";
    private String isManifestWallTripResponse = "N";
    private String isPreviousException = "";
    private String tipBtnString1;
    private String tipBtnString2;
    private String tipBtnString3;
    private String tipBtnString4;
    private String CurrentBookedZone = "None";
    private String DriverPin = "";
    private String EstCostforFundingSource = "0";
    private final char[] CreditCardNumber = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
    private String isAutoZoneOnDevice = "0";
    private String DialiePIMIP = "";
    public String TripPaymentDataReceivedFromVeriFone = "";
    private final String INTENT_MDT_SENDER = "mdt_sender";
    private final String INTENT_PIM_RECEIVER = "pim_receiver";
    static String DocumentDirectoryPath = "";
    private String BalanceCode = "";
    private String BalanceCodeMsg = "";

    private String[] btDevices;
    private String[] btDeviceName;
    private final String[] vfPaymentOptions = {"Cash", "Voucher", "Credit"};
    private final String[] signatureTypes = {"Member Signature", "Facility Signature", "Representative of the Member Signature", "Physically Unable to Sign"};

    public static String Fare = "0";
    public static String Extras = "0";
    public static String tempFare = "0";
    public static String tempExtras = "0";
    public static double Distance = 0.00;
    public static String Tip = "0";
    public static String TipA = "0", TipB = "0", TipC = "0";
    public String reciept = "";
    public String PIMLastCommandName = "";
    public String Driver_name = "";
    private StringBuffer mOutStringBuffer;
    int keyDel;
    int VerifoneCMD1AckCount = 0;
    int VerifoneCMD2AckCount = 0;
    String a;

    public static ArrayList<VivotechScreen.Button> screenButtons = new ArrayList<VivotechScreen.Button>();
    ArrayList<String[]> array = new ArrayList<String[]>();
    protected static ArrayList<String> matches;
    private String[] bidResponse = null;
    List<String> TripNumbers = new ArrayList<String>();
    public ArrayList<WallTrip> WALLTrips = new ArrayList<WallTrip>();
    public ArrayList<WallTrip> TempWALLTrips = new ArrayList<WallTrip>();

    public Typeface _Jameel_Noori_Nastaleeq_Kasheeda;

    private ListView manifestListView, wallTripListView, msgsListView, manifestWallTripListView;
    private View mainView;
    private View loginView;
    private View tabView;
    private View tripView;
    private View currentView;
    private View paymentView;

    private TripAdapter tripAdapter;
    private WallTripAdapter wallTripAdapter;
    private ManifestWallTripAdapter manifestWallTripAdapter;
    private CannedMessagesAdapter cannnedMessagesAdapter;

    private EditText ttfCCNumber;
    private EditText ttfCCExpiry;
    private EditText ttfExtras;
    private EditText ttfTip;
    private EditText ttfTotal;
    private EditText ttfFare;
    private EditText ttfCustomerPhoneNo;
    private EditText ttfVehicleID, TopUpCardNo;
    private EditText composeMsg;
    private EditText ttfHotspotName;
    private EditText ttfHotspotPassword;

    protected TextView passenger;
    // protected TextView FavoriteName;
    protected TextView tripNumber;
    protected TextView serviceId;
    private TextView phone;
    private TextView puDateTime;
    private TextView manifestNum;
    private TextView avlAddress;
    private TextView speedValue, balanceValue, balance;
    private TextView directionValue;
    private TextView lblFundingSrc;
    private TextView bookedStandValue, standRankValue;
    private TextView zoneRankValue, bookedZoneValue;
    private TextView avlZoneValue, cabValue, LatValue, LongValue, driverValue, driverNameValue, tvTaxiMeter, tvBackSeatDevice, timer, tftimer, edtimer;
    private TextView pickup, pickupPOI;
    private TextView dropoff, dropoffPOI;
    private TextView extraInfo;
    private TextView fundingLabel, fundingSource;
    private TextView paytypeLabel, paymentType;
    private TextView copayLbl, copayValue;
    private TextView tfareLabel, tfareValue;
    private TextView textraLabel, textraValue;
    private TextView ttipLabel, ttipValue;
    private TextView tCCLabel, tCCValue;
    private TextView tAuthLabel, tAuthValue;
    private TextView odoStartLabel, odoStartValue;
    private TextView odoEndLabel, odoEndValue;
    private TextView pickUnitLabel, pickUnitNumber;
    private TextView dropUnitLabel, dropUnitNumber;
    private TextView pickRemarks, dropRemarks;
    private TextView fare; // ////////////////////////////////////////////
    private TextView fareLabel; // ///////////////////////////////////////
    private TextView txtAccept;
    private TextView txtReject;
    private TextView estFare;
    private TextView lblPassword;
    private TextView lblUserid;
    private TextView lblVehicle, TopUpAmount_Text, lblImei, lblnumber;
    private TextView lblLanguage;
    private TextView milageTxt;
    private ImageView DriverSnap;
    private ImageView imgwifi;
    private ImageView imgGPS;
    private ImageView signature;

    private Button pickupRouteButton;
    private Button dropoffRouteButton;
    private Button NoShowButton;
    private Button callOutButton;
    private Button btnLogin;
    private Button btnEnableHotSpot;
    private Button PickedButton;
    private Button DroppedButton;
    private Button bookAVLButton;
    private Button NearByZoneButton;
    private Button AllZonesButton;
    private Button ConnectToMeter, ConnectToDialie, btnAccounts;
    private Button zoneButton;
    private Button SwipeBtn;
    private Button EnableAJRBtn;
    private Button btnAccept;
    private Button btnReject;
    private Button btnReject2;
    private Button btnAccept2;
    private Button sendBtn;
    private Button tabberView_breakBtn;
    private Button tripView_breakBtn;
    private Button estimateView_breakBtn;
    private Button paymentView_breakBtn;
    private Button topUpView_breakBtn;
    private Button tipBtn1;
    private Button tipBtn2;
    private Button tipBtn3;
    private Button tipBtn4;
    private Button creditBtn;
    private Button Pay_DropBtn;
    private Button sortWallTrips1;
    private Button sortWallTrips2;
    private Button cashBtn, FareUpdateBtn;
    private Button flaggerBtn;
    private Display display;
    private CheckBox ShowCCCharacters;
    private CheckBox showUnperformedTrips;
    private EditText ip;
    private EditText port;
    private Button voucherBtn;

    private AlertDialog tripAcceptDialog, tripRejectDialog, preInquiryDialog, aDialog, warningDialog, aboutDialog, milageAckDialog, passwordDialog, MacDialog, odoMeterDialog;
    private AlertDialog manifestDialog, zoneDialog, IsActiveRespDialog, TripNoListDialog, cashOptionsDialog, PickupUPDistanceDialog, PaymentConfirmationDialog;
    private MediaPlayer bidOfferSound, manifestSound;
    int tripSound;
    int tripSoundMyTaxi;
    private PrinterMessage taxiMeterReciept;
    private PrinterMessage taxiMeterReciept2 = null;
    private CustomMessage customMessage = null;
    private CustomMessage customGPSMessage = null;
    private PrinterMessage taxiMeterReciept3 = null;
    private int screenWidth;
    private int screenHeight;
    private int tripsPending = 0;
    private int tripsIRTPU = 0;
    private int tripsIRTDO = 0;
    private int nextColorIndex = 0;
    private int txtHeight;
    private int bidCount = 0x00000001;
    private int totalBreaksTaken = 0;
    private int autoZoneSetting;
    protected int retryCount = 0;
    private int tabtempIndex = 0;
    private int CapacityOfVehicles = 4;
    private int TotalTripRejections = -1;
    private int AllowedTripRejections = -1;
    private String IsBlackList = "-1";
    protected float tip;
    public static float total = 0;
    public static long lastVerifoneCMD1MessageTime = 0;
    public static String ActualPaymentAmount = "0.0";
    public String MeterOfTripConfirmationNo = "";
    public static long lastVerifoneTripMeterOffTime = 0;
    boolean bMerchantCopyPrinted = false;

    private Date nextServTime;
    public static Trip currentTrip;
    private Handler mHandler;

    private boolean TTS = false;
    // private boolean retry = false;
    private boolean isSortWallTrips1Pressed = false;
    private boolean isSortWallTrips2Pressed = false;
    private boolean recognizer = false;
    private boolean exitApp = false;
    private boolean fareclicked = false;
    private boolean TripSelectedFromMeterPickUp = false;
    private final boolean tripSortOrderclicked = false;
    private boolean MeterTimeOffTripCreated = false;
    private boolean softFlaggerPickUp = false;
    private boolean driverSnapException;

    public boolean downloaded = false;
    public boolean IsCCNumEnter = true;
    public boolean isPrinted = false;
    private boolean NearByAllZones = true;
    private boolean newWallTripSound = false;
    private boolean IsEstimationFromFlaggerEstimation = false;
    private final boolean mTestHost = true; // ChargeAnyWhere to true if in test mode else false
    public static boolean SHOW_GPS_PAGE = false;
    public static boolean SHOW_PAIRED_DEVICES_DIALOG = false;
    public static boolean isAppActive = true;
    public static boolean diale_Acknowledge = false;
    public static boolean diale_Authorize = false;
    public static boolean diale_Connectivity = false;
    public static boolean IsSendToDialieClicked = false;
    public static boolean IsVerifoneConnectionMSGSend = false;
    public static boolean IsMeterOnCreatedTrip = false;
    public static boolean _isLoggedInOnce = false;

    private boolean IsVerifoneCMD8Received = false;
    private boolean IsVerifoneMeterStarted = false;
    private long VerifoneCMD8LastTime = 0;
    private String TripOfferTripNo = "0";

    private TextToSpeech mTTS;
    private CreditCard CreditCard_CAW = null;
    private itcurves.ncs.CreditCard CreditCard_ITC = null;

    byte[] swipeCommand = null;
    private AudioManager mAudioManager;

    private AsyncTask<String, String, String> distCalculator;
    AsyncTask<String, Void, Boolean> meterConnectionStatus;

    private ConnectivityManager cnnxManager;
    private long lastUpdated;
    private long lastUpdated_MWall;
    private static long break_status = 0;
    private static boolean setMeterData = true;
    private float tipAmount_1;
    private float tipAmount_2;
    private float tipAmount_3;
    private float tipAmount_4;
    private ScheduledExecutorService scheduler_power,schedulerForCreateZoneView,schedulerForhandleBookinResp;
    private TextView tripSortOrder;
    private WifiApManager wifiApManager;
    public static final String SHARED_PREFERENCES_NAME = "com.dialie.taxidialcom";
    WifiManager wifiManager;
    CheckBox hotspotStateCB;
    boolean bluetoothExecption = false;
    private ScrollView scrollPanelzone;
    private ScrollView scrollLoginView;
    private String[] tempZoneFareTaxi = null;
    private float labelFont;
    private float miscFont;
    private float buttonFont;
    private float olabelFont;
    private float omiscFont;
    private float obuttonFont;
    private String clearTripType = "";
    private static boolean firstLaunch = true;
    private int tripListIterator;
    private static boolean isOnlyUnperformedTrips = false;
    private static boolean veriFoneEstimationNotRequired = false;// If payment msg received from VF and currentTrip is NULL, then device will open first PICKED UP trip
    protected static boolean is_GPS_AVAILABLE = false;
    private static String CALLOUT = "CallOutRequest";
    private static String CALLOUT_SOAPAction = "http://ws.enterprise.javacodegeeks.com/CallOutRequest";
    private static final String NAMESPACE = "http://ws.enterprise.javacodegeeks.com/";
    private static final String URL = "http://192.168.10.26:8080/jax/Asteriskservice?wsdl";
    // from list
    // and move to Payment View without estimation to speedup process.
    private String breakBtnLabel, resumeButtonLabel;
    private AlertDialog enableGPSDialog;

    public String TempDropOff = " ";
    public HashMap<String, String> hm;
    public HashMap<String, String> tripcheck;
    public HashMap<String, Boolean> MFView;
    public int lresponse;
    String f_DropOffAddress;
    String f_PickUpAddress;
    String tmDevice;
    String simNumber;
    boolean checkforloginresp = false;
    boolean creditdisable = false;
    boolean checkforchange = false;
    /**
     * Identifies a specific URL to use when performing transactions.
     */
    private static final String ACTIVATION_URL = "https://ras.roamdata.com:9998/roam-gateway/binaryConversation40";

    // private static final String ACTIVATION_URL = "https://uat01.roamdata.com:9998/roam-gateway/binaryConversation40";

    private RoamPayApi m_roamPayApi;
    private RoamPayApiHandlerImpl m_roamPayApiHandler;

    private final static String INTENT_ACTION_CALL_STATE = "com.bbpos.swiper.CALL_STATE";

    // private Button isSwiperHereButton;
    private Button swipeButton;

    private SwiperController swiperController;
    private SwiperStateChangedListener stateChangedListener;

    private IncomingCallServiceReceiver incomingCallServiceReceiver;

    private String vantivKSN = "";
    private String vantiveEncTrack = "";
    public static String signType = "";
    public static String tempSignType = "";
    public static boolean TIP_EDIT_CALLED = false;
    public static String SlimCD_TransType = "";
    private boolean isMeterON;
    public static int countForUnpair = 0;
    public static String VMeterAddress = null;
    Handler htimer = null;
    int min = 0;
    int hour = 0;
    int sec = 0;
    Runnable r1 = null;
    boolean bPreAuthOnPaymentView = false;
    Handler handlerForTripDetail = null;
    Handler handlerForTripinactivity = null;
    Handler handlerForPopUPSound = null;
    Runnable tripDetailSound = null;
    Runnable tripinactivitySound = null;
    Runnable PopUPSound = null;
    boolean isttfnumber = true;
    boolean isttftipnumber = true;
    boolean isttfextrasnumber = true;
    public boolean EnableTwoStepPaymentProcessingforcredit = false;
    public static String OldTip = "0";
    LinearLayout preAuthorization;
    LinearLayout FundingSource;
    TextView lblPreAuthAmount;
    String holdAmount;
    String title = "";
    EditText TPromotionRow;
    Button discountBtn;
    int isNewTrip;
    EditText PromotionCode;
    EditText ttfCopayRow;
    boolean changePercentTip = true;
    boolean checkforpromotioncode = false;
    protected static LinearLayout FontRow;
    private TextView lblFont;
    private boolean checkonfontchange = true;
    private final int currentpositionforFont = 4;
    final String[] Fonts = {"-8", "-6", "-4", "-2", "0", "2", "4", "6", "8"};
    int checkForDelKey = 0;
    View view;
    static boolean pairingrequest = false;
    String macAddress1;
    private boolean _quitApp = false;
    private boolean IsMeterLockedOnAppQuit = false;
    final Handler lockHandler = new Handler();
    int RingerCount = 0;
    int RingerCountForPopUp = 0;
    String TripNumberForVerifone = "0";
    String verifonecredittype;
    String OldTripNumberForVerifone = "0";
    int tempPayStatus = 0;
    Button EmgBtn;
    public static boolean tvsessioncheck = false;
    LinearLayout contain;
    boolean avlbutton = false;

    private boolean registered = false;
    private boolean isCaling = false;
    private String activeRemoteContact;
    private String domain;
    private int accId;
    private AbtoPhone abtoPhone;

    private AlertDialog inCallDialog;

    private ProgressDialog registrationWaiting;

    private LinearLayout bottomRow1;
    private LinearLayout bottomRow2;
    private LinearLayout bottomRow3;
    private LinearLayout bottomRow4;
    private LinearLayout bottomRow5;
    private LinearLayout bottomRow6;
    private LinearLayout bottomRow7;
    private LinearLayout bottomRow8;
    private LinearLayout bottomRow9;
    private LinearLayout bottomRow10;
    private LinearLayout bottomRow11;
    private CallDialog callDialog;

    private uniMagReader myUniMagReader = null;
    private uniMagSDKTools firmwareUpdateTool = null;
    private boolean isUseAutoConfigProfileChecked = false;
    private StructConfigParameters profile = null;
    private ProfileDatabase profileDatabase = null;
    private final Handler handlerforIDtech = new Handler();
    private String strMsrData = null;
    private byte[] msrData = null;
    private String statusText = null;
    private final int challengeResult = 0;
    private boolean enableSwipeCard = false;
    String fileNameWithPath;

    private Button swipeButtonForIDTech;
    Marker m = null;
    GoogleMap Map;
    boolean checkforIDTech = false;

    EditText ttfUserid = null;
    EditText ttfPassword = null;

    private String SDAsteriskExt;
    private String SDAsteriskPwd;

    private boolean tripStartedfromSoftMeter = false;

    private boolean checkSoftMeterMON = false;
    private boolean checkSoftMeterTOF = false;
    private boolean checkSoftMeterTON = false;

    String BalanceOfDriver = "0.00";
    SoundPool soundPool = null;

    DBHelper dbh = null;
    /*--------------------------------------------------------------TextToSpeech.OnInitListener-----------------------------------------------------*/
    // Implements TextToSpeech.OnInitListener.
    public void onInit(int status) {
        try {

            // status can be either TextToSpeech.SUCCESS or TextToSpeech.ERROR.
            if (status == TextToSpeech.SUCCESS) {
                // Set preferred language to US english.
                // Note that a language may not be available, and the result will indicate this.
                int result = mTTS.setLanguage(Locale.US);
                mTTS.setPitch((float) 1.2);
                mTTS.setSpeechRate((float) 0.8);

                // Try this someday for some interesting results.
                // int result mTts.setLanguage(Locale.FRANCE);
                if (result == TextToSpeech.LANG_MISSING_DATA || result == TextToSpeech.LANG_NOT_SUPPORTED) {
                    // Language data is missing or the language is not supported.
                    Log.e(getCallingPackage(), "Language is not available.");
                } else {
                    // Check the documentation for other possible result codes.
                    // For example, the language may be available for the locale,
                    // but not for the specified country and variant.

                    // The TTS engine has been successfuly initialized.
                    // Allow the user to press the button for the app to speak again.
                    TTS = true;
                    // Greet the user.
                }
            } else {
                // Initialisation failed.
                TTS = false;
                Log.e(getCallingPackage(), "Could not initialize TextToSpeech.");
            }

        } catch (Exception ex) {
            handleException("[Initializing Text Speech Listener]" + "[onInit]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }

    /*--------------------------------------------------------------Dialog onCreate-----------------------------------------------------------------*/
    @SuppressWarnings("deprecation")
    @SuppressLint("NewApi")
    @Override
    protected Dialog onCreateDialog(int id) {

        try {

            switch (id) {
                case SERVERS :

                    LayoutInflater vi = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                    View v = vi.inflate(R.layout.server_select, null);

                    final TextView ipCaption = (TextView) v.findViewById(R.id.serverip_label);
                    ipCaption.setTextSize(labelFont);
                    ip = (EditText) v.findViewById(R.id.serverip_edit);
                    ip.setTextSize(miscFont);
                    ip.setEnabled(false);
                    port = (EditText) v.findViewById(R.id.port_edit);
                    port.setEnabled(false);
                    port.setText(String.valueOf(AVL_Service.servPort));
                    port.setTextSize(miscFont);
                    final Button ipbtn = (Button) v.findViewById(R.id.serverip_btn);

                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                        ipbtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                        ipbtn.setText(getResources().getString(R.string.Edit));
                    } else
                        ipbtn.setText(Farsi.Convert(getResources().getString(R.string.Edit)));

                    ipbtn.setGravity(Gravity.CENTER_HORIZONTAL);
                    ipbtn.setOnClickListener(new View.OnClickListener() {
                        public void onClick(View v) {
                            if (android.os.Build.VERSION.SDK_INT <= android.os.Build.VERSION_CODES.HONEYCOMB_MR2)
                                passwordDialog = new AlertDialog.Builder(TaxiPlexer.this).setView(createServerPasswordDialogView()).setCancelable(false).create();
                            else
                                passwordDialog = new AlertDialog.Builder(TaxiPlexer.this, R.style.DialogSlideAnim2).setView(createServerPasswordDialogView()).setCancelable(false).create();

                            passwordDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
                            passwordDialog.show();
                        }
                    });

                    ipbtn.setTextSize(buttonFont);
                    ip.setText(AVL_Service.pref.getString("serverip", AVL_Service.server_list.get(AVL_Service.pInfo.packageName.split("\\.")[1])));
                    // ip.setInputType(InputType.TYPE_CLASS_TEXT);
                    ip.setKeyListener(new AlphanumericPasswordKeyListener());
                    final CheckBox BT_Meter = (CheckBox) v.findViewById(R.id.bluetoothMeter);
                    final CheckBox Pulsar_Meter = (CheckBox) v.findViewById(R.id.pulsarMeter);
                    final CheckBox Centrodyne_Meter = (CheckBox) v.findViewById(R.id.centrodyneMeter);
                    final CheckBox VeriFoneDevice = (CheckBox) v.findViewById(R.id.verifoneDevice);
                    final CheckBox VivotechDevice = (CheckBox) v.findViewById(R.id.vivotechDevice);
                    final CheckBox BlueBambooDevice = (CheckBox) v.findViewById(R.id.blueBambooDevice);
                    final CheckBox audioCommands = (CheckBox) v.findViewById(R.id.audioCommands);
                    final CheckBox audiojackperipheral = (CheckBox) v.findViewById(R.id.audiojackperipheral);
                    final CheckBox ventiveAJR = (CheckBox) v.findViewById(R.id.ventiveAJR);
                    final CheckBox IDTech = (CheckBox) v.findViewById(R.id.IDTech);
                    final CheckBox softMeter = (CheckBox) v.findViewById(R.id.SoftMeter);

                    BT_Meter.setTextSize(miscFont);
                    Pulsar_Meter.setTextSize(miscFont);
                    Centrodyne_Meter.setTextSize(miscFont);
                    VeriFoneDevice.setTextSize(miscFont);
                    VivotechDevice.setTextSize(miscFont);
                    BlueBambooDevice.setTextSize(miscFont);
                    audioCommands.setTextSize(miscFont);
                    audiojackperipheral.setTextSize(miscFont);
                    ventiveAJR.setTextSize(miscFont);
                    IDTech.setTextSize(miscFont);
                    softMeter.setTextSize(miscFont);

                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                        BT_Meter.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                        BT_Meter.setText(getResources().getString(R.string.BluetoothMeterAvailable));
                    } else
                        BT_Meter.setText(Farsi.Convert(getResources().getString(R.string.BluetoothMeterAvailable)));

                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                        Pulsar_Meter.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                        Pulsar_Meter.setText(getResources().getString(R.string.PulsarMeterAvailable));
                    } else
                        Pulsar_Meter.setText(Farsi.Convert(getResources().getString(R.string.PulsarMeterAvailable)));

                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                        Centrodyne_Meter.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                        Centrodyne_Meter.setText(getResources().getString(R.string.CentrodyneMeterAvailable));
                    } else
                        Centrodyne_Meter.setText(Farsi.Convert(getResources().getString(R.string.CentrodyneMeterAvailable)));

                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                        VeriFoneDevice.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                        VeriFoneDevice.setText(getResources().getString(R.string.VeriFoneAvailable));
                    } else
                        VeriFoneDevice.setText(Farsi.Convert(getResources().getString(R.string.VeriFoneAvailable)));

                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                        VivotechDevice.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                        VivotechDevice.setText(getResources().getString(R.string.CMTVivotechAvailable));
                    } else
                        VivotechDevice.setText(Farsi.Convert(getResources().getString(R.string.CMTVivotechAvailable)));

                    VivotechDevice.setVisibility(CheckBox.GONE);
                    Centrodyne_Meter.setVisibility(CheckBox.GONE);
                    VeriFoneDevice.setVisibility(CheckBox.GONE);
                    Pulsar_Meter.setVisibility(CheckBox.GONE);

                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                        BlueBambooDevice.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                        BlueBambooDevice.setText(getResources().getString(R.string.BlueBambooAvailable));
                    } else
                        BlueBambooDevice.setText(Farsi.Convert(getResources().getString(R.string.BlueBambooAvailable)));

                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                        audioCommands.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                        audioCommands.setText(getResources().getString(R.string.EnableAudioCommands));
                    } else
                        audioCommands.setText(Farsi.Convert(getResources().getString(R.string.EnableAudioCommands)));

                    audiojackperipheral.setText(Farsi.Convert(getResources().getString(R.string.AudioJackPeripheral)));
                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                        ipCaption.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                        ipCaption.setText(getResources().getString(R.string.ServerIPaddress));
                    } else
                        ipCaption.setText(Farsi.Convert(getResources().getString(R.string.ServerIPaddress)));

                    BT_Meter.setOnCheckedChangeListener(new OnCheckedChangeListener() {

                        @Override
                        public void onCheckedChanged(CompoundButton paramCompoundButton, boolean isChecked) {
                            if (isChecked) {
                                VivotechDevice.setEnabled(true);
                                Centrodyne_Meter.setEnabled(true);
                                VeriFoneDevice.setEnabled(true);
                                Pulsar_Meter.setEnabled(true);
                                Pulsar_Meter.setChecked(true);
                                Centrodyne_Meter.setVisibility(CheckBox.VISIBLE);
                                VeriFoneDevice.setVisibility(CheckBox.VISIBLE);
                                Pulsar_Meter.setVisibility(CheckBox.VISIBLE);
                                softMeter.setChecked(false);
                            } else {
                                VivotechDevice.setChecked(false);
                                VivotechDevice.setEnabled(false);
                                Centrodyne_Meter.setChecked(false);
                                Centrodyne_Meter.setEnabled(false);
                                VeriFoneDevice.setChecked(false);
                                VeriFoneDevice.setEnabled(false);
                                Pulsar_Meter.setEnabled(false);
                                Pulsar_Meter.setChecked(false);
                                Centrodyne_Meter.setVisibility(CheckBox.GONE);
                                VeriFoneDevice.setVisibility(CheckBox.GONE);
                                Pulsar_Meter.setVisibility(CheckBox.GONE);

                            }
                        }
                    });

                    VivotechDevice.setOnCheckedChangeListener(new OnCheckedChangeListener() {

                        @Override
                        public void onCheckedChanged(CompoundButton paramCompoundButton, boolean isChecked) {
                            if (isChecked) {
                            } else {
                                if (!VeriFoneDevice.isChecked() && !Centrodyne_Meter.isChecked() && BT_Meter.isChecked()) {
                                    Pulsar_Meter.setChecked(true);
                                }
                            }
                        }
                    });

                    Centrodyne_Meter.setOnCheckedChangeListener(new OnCheckedChangeListener() {

                        @Override
                        public void onCheckedChanged(CompoundButton paramCompoundButton, boolean isChecked) {
                            if (isChecked) {
                                Pulsar_Meter.setChecked(false);
                                VeriFoneDevice.setChecked(false);
                            } else {
                                if (!VivotechDevice.isChecked() && BT_Meter.isChecked() && !VeriFoneDevice.isChecked()) {
                                    Pulsar_Meter.setChecked(true);
                                }
                            }
                        }
                    });
                    // ok;
                    VeriFoneDevice.setOnCheckedChangeListener(new OnCheckedChangeListener() {

                        @Override
                        public void onCheckedChanged(CompoundButton paramCompoundButton, boolean isChecked) {
                            if (isChecked) {
                                Pulsar_Meter.setChecked(false);
                                Centrodyne_Meter.setChecked(false);

                            } else {
                                if (!Centrodyne_Meter.isChecked() && !VivotechDevice.isChecked() && BT_Meter.isChecked()) {
                                    Pulsar_Meter.setChecked(true);
                                }
                            }
                        }
                    });

                    Pulsar_Meter.setOnCheckedChangeListener(new OnCheckedChangeListener() {

                        @Override
                        public void onCheckedChanged(CompoundButton paramCompoundButton, boolean isChecked) {
                            if (isChecked) {
                                Centrodyne_Meter.setChecked(false);
                                VeriFoneDevice.setChecked(false);
                            } else {
                                if (!Centrodyne_Meter.isChecked() && !VeriFoneDevice.isChecked() && !VivotechDevice.isChecked() && BT_Meter.isChecked())
                                    BT_Meter.setChecked(false);
                            }
                        }
                    });

                    audiojackperipheral.setOnCheckedChangeListener(new OnCheckedChangeListener() {

                        @Override
                        public void onCheckedChanged(CompoundButton paramCompoundButton, boolean isChecked) {
                            if (isChecked) {
                                ventiveAJR.setChecked(false);
                                IDTech.setChecked(false);
                            }
                        }
                    });

                    ventiveAJR.setOnCheckedChangeListener(new OnCheckedChangeListener() {

                        @Override
                        public void onCheckedChanged(CompoundButton paramCompoundButton, boolean isChecked) {
                            if (isChecked) {
                                audiojackperipheral.setChecked(false);
                                IDTech.setChecked(false);
                            }
                        }
                    });

                    IDTech.setOnCheckedChangeListener(new OnCheckedChangeListener() {

                        @Override
                        public void onCheckedChanged(CompoundButton paramCompoundButton, boolean isChecked) {
                            if (isChecked) {
                                audiojackperipheral.setChecked(false);
                                ventiveAJR.setChecked(false);
                            }
                        }
                    });

                    softMeter.setOnCheckedChangeListener(new OnCheckedChangeListener() {

                        @Override
                        public void onCheckedChanged(CompoundButton paramCompoundButton, boolean isChecked) {
                            if (isChecked) {
                                BT_Meter.setChecked(false);
                            }
                        }
                    });

                    if (AVL_Service.pref.getBoolean("BluetoothMeter", AVL_Service.btMeterAvailable)) {
                        BT_Meter.setChecked(true);
                        VivotechDevice.setEnabled(true);
                        Centrodyne_Meter.setEnabled(true);
                        VeriFoneDevice.setEnabled(true);
                        Pulsar_Meter.setEnabled(true);
                        Pulsar_Meter.setChecked(true);
                    } else {
                        BT_Meter.setChecked(false);
                        VivotechDevice.setEnabled(false);
                        Centrodyne_Meter.setEnabled(false);
                        VeriFoneDevice.setEnabled(false);
                        Pulsar_Meter.setEnabled(false);
                    }

                    if (AVL_Service.pref.getBoolean("VivotechDevice", AVL_Service.pref.getBoolean("BluetoothMeter", AVL_Service.btMeterAvailable) ? AVL_Service.vivotechAvailable : false))
                        VivotechDevice.setChecked(true);
                    else
                        VivotechDevice.setChecked(false);

                    if (AVL_Service.pref.getBoolean("CentrodyneMeter", AVL_Service.pref.getBoolean("BluetoothMeter", AVL_Service.btMeterAvailable) ? AVL_Service.centrodyneMeterAvailable : false))
                        Centrodyne_Meter.setChecked(true);
                    else
                        Centrodyne_Meter.setChecked(false);

                    if (AVL_Service.pref.getBoolean("BlueBambooDevice", AVL_Service.blueBambooAvailable))
                        BlueBambooDevice.setChecked(true);
                    else
                        BlueBambooDevice.setChecked(false);

                    if (AVL_Service.pref.getBoolean("AudiojJackPeripheral", false))
                        audiojackperipheral.setChecked(true);
                    else
                        audiojackperipheral.setChecked(false);

                    if (AVL_Service.pref.getBoolean("VentiveAJR", false))
                        ventiveAJR.setChecked(true);
                    else
                        ventiveAJR.setChecked(false);

                    if (AVL_Service.pref.getBoolean("AudioCommands", AVL_Service.enableAudioCommands))
                        audioCommands.setChecked(true);
                    else
                        audioCommands.setChecked(false);

                    if (AVL_Service.pref.getBoolean("VeriFoneDevice", false) && AVL_Service.pref.getBoolean("BluetoothMeter", false))

                        VeriFoneDevice.setChecked(true);

                    else
                        VeriFoneDevice.setChecked(false);

                    if (AVL_Service.pref.getBoolean("IDTech", false))

                        IDTech.setChecked(true);

                    else
                        IDTech.setChecked(false);

                    if (AVL_Service.pref.getBoolean("softMeter", false))

                        softMeter.setChecked(true);

                    else
                        softMeter.setChecked(false);
                    if (getApplicationContext().getPackageName().contains("ycindy") && !serviceHandle.loggedIn()) {
                        BT_Meter.setChecked(true);
                        VeriFoneDevice.setChecked(true);
                    }


                    AlertDialog.Builder builder = new AlertDialog.Builder(this);
                    builder.setView(v).setTitle(Farsi.Convert(getResources().getString(R.string.Settings))).setPositiveButton(
                            Farsi.Convert(getResources().getString(R.string.Update)),
                            new DialogInterface.OnClickListener() {

                                @Override
                                public void onClick(final DialogInterface dialog, int which) {

                                    ip.setEnabled(false);
                                    port.setEnabled(false);

                                    if (BT_Meter.isChecked())
                                        AVL_Service.pref.edit().putBoolean("BluetoothMeter", true).commit();
                                    else
                                        AVL_Service.pref.edit().putBoolean("BluetoothMeter", false).commit();

                                    if (Centrodyne_Meter.isChecked())
                                        AVL_Service.pref.edit().putBoolean("CentrodyneMeter", true).commit();
                                    else
                                        AVL_Service.pref.edit().putBoolean("CentrodyneMeter", false).commit();

                                    if (Pulsar_Meter.isChecked()) {
                                        AVL_Service.pref.edit().putBoolean("PulsarMeter", true).commit();
                                        _quitApp = false;
                                    } else {
                                        AVL_Service.pref.edit().putBoolean("PulsarMeter", false).commit();
                                        _quitApp = true;
                                    }

                                    if (VivotechDevice.isChecked())
                                        AVL_Service.pref.edit().putBoolean("VivotechDevice", true).commit();
                                    else
                                        AVL_Service.pref.edit().putBoolean("VivotechDevice", false).commit();

                                    if (BlueBambooDevice.isChecked())
                                        AVL_Service.pref.edit().putBoolean("BlueBambooDevice", true).commit();
                                    else
                                        AVL_Service.pref.edit().putBoolean("BlueBambooDevice", false).commit();

                                    if (audiojackperipheral.isChecked())
                                        AVL_Service.pref.edit().putBoolean("AudiojJackPeripheral", true).commit();
                                    else
                                        AVL_Service.pref.edit().putBoolean("AudiojJackPeripheral", false).commit();

                                    if (audioCommands.isChecked())
                                        AVL_Service.pref.edit().putBoolean("AudioCommands", true).commit();
                                    else
                                        AVL_Service.pref.edit().putBoolean("AudioCommands", false).commit();

                                    if (VeriFoneDevice.isChecked())
                                        AVL_Service.pref.edit().putBoolean("VeriFoneDevice", true).commit();
                                    else
                                        AVL_Service.pref.edit().putBoolean("VeriFoneDevice", false).commit();

                                    if (ventiveAJR.isChecked())
                                        AVL_Service.pref.edit().putBoolean("VentiveAJR", true).commit();
                                    else
                                        AVL_Service.pref.edit().putBoolean("VentiveAJR", false).commit();

                                    if (IDTech.isChecked())
                                        AVL_Service.pref.edit().putBoolean("IDTech", true).commit();
                                    else
                                        AVL_Service.pref.edit().putBoolean("IDTech", false).commit();

                                    if (softMeter.isChecked())
                                        AVL_Service.pref.edit().putBoolean("softMeter", true).commit();
                                    else
                                        AVL_Service.pref.edit().putBoolean("softMeter", false).commit();

                                    new Thread() {
                                        @Override
                                        public void run() {
                                            String ipAddress = ip.getText().toString();
                                            int temport = AVL_Service.servPort;
                                            AVL_Service.servPort = Integer.parseInt(port.getText().toString());

                                            if (serviceHandle.updateServerAddress(ipAddress)) {
                                                if (!serviceHandle.loggedIn()) {
                                                    TaxiPlexer.this.msgHandler.obtainMessage(MsgType.LoginBtn, false).sendToTarget();
                                                } else if (!AVL_Service.pref.getString("serverip", AVL_Service.server_list.get(AVL_Service.pInfo.packageName.split("\\.")[1])).equalsIgnoreCase(
                                                        ipAddress.trim()) || temport != AVL_Service.servPort) {
                                                    TaxiPlexer.this.msgHandler.obtainMessage(MsgType.LoginBtn, true).sendToTarget();

                                                } else if (serviceHandle.loggedIn()) {
                                                    runOnUiThread(new Runnable() {
                                                        public void run() {
                                                            if (!AVL_Service.pref.getBoolean("BluetoothMeter", false))
                                                                // ConnectToMeter.setEnabled(false);
                                                                ConnectToMeter.setVisibility(Button.VISIBLE); //idher
                                                            else
                                                                ConnectToMeter.setVisibility(Button.VISIBLE);
                                                        }
                                                    });

                                                }
                                            } // if updateServerAddress()
                                        }// run

                                    }.start();
                                }
                            }).setNegativeButton(Farsi.Convert(getResources().getString(R.string.Cancel)), new DialogInterface.OnClickListener() {

                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            ip.setText(AVL_Service.pref.getString("serverip", AVL_Service.server_list.get(AVL_Service.pInfo.packageName.split("\\.")[1])));
                            port.setText(String.valueOf(AVL_Service.servPort));
                            dialog.dismiss();
                            removeDialog(SERVERS);
                        }
                    }).setCancelable(false);

                    AlertDialog alert = builder.create();
                    alert.show();

                    dialogFontSize(alert);
                    return alert;




            }


        } catch (Exception ex) {
            handleException("[Creating Settings Dialog]" + "[onCreateDialog]" + "[" + ex.getLocalizedMessage() + "]");
        }
        return null;

    }

    protected void onPrepareDialog(int id, Dialog dialog)
    {




    }
    public void CheckButtonState(boolean value) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.LoginBtn, value).sendToTarget();

    }

    /*--------------------------------------------------------------onCreate------------------------------------------------------------------------*/
    @Override
    public void onCreate(Bundle savedInstanceState) {

        StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
        StrictMode.setThreadPolicy(policy);

        SharedPreferences pref;
        pref = getSharedPreferences(Constants.PREFS_NAME, MODE_PRIVATE);
        if (!pref.contains("restart")) {
            pref.edit().putBoolean("restart", false).commit();
        }

        if (pref.getBoolean("restart", false)) {
            pref.edit().putBoolean("restart", false).commit();
            AlarmManager alm = (AlarmManager) this.getSystemService(Context.ALARM_SERVICE);
            alm.set(AlarmManager.RTC, System.currentTimeMillis() + 2500, PendingIntent.getActivity(this, 0, new Intent(this, this.getClass()), 0));
            System.exit(0);

        }

        if (!pref.contains("FontPosition")) {
            pref.edit().putInt("FontPosition", 4).commit();
        }

        try {
            // WindowManager.LayoutParams lp = getWindow().getAttributes();
            // lp.screenBrightness = 1.0f; // brightness 1=MAX 0=MIN;
            // getWindow().setAttributes(lp);
            isPreviousException = "";
            _Jameel_Noori_Nastaleeq_Kasheeda = Typeface.createFromAsset(getApplicationContext().getAssets(), "nastaleeq_numa_regular.ttf");
        } catch (Exception e) {
            handleException("[Applying fontface]" + "[oncreate]" + "[" + e.getLocalizedMessage() + "]");
        }

        display = ((WindowManager) getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
        screenWidth = display.getWidth();
        screenHeight = display.getHeight();

        wifiApManager = new WifiApManager(this);
        wifiManager = (WifiManager) getSystemService(WIFI_SERVICE);
        SHOW_PAIRED_DEVICES_DIALOG = true;

        olabelFont = getResources().getDimension(R.dimen.label_font);
        omiscFont = getResources().getDimension(R.dimen.address_font);
        obuttonFont = getResources().getDimension(R.dimen.button_font);
        labelFont = olabelFont + (Integer.parseInt(Fonts[pref.getInt("FontPosition", 4)]) * 2);
        miscFont = omiscFont + (Integer.parseInt(Fonts[pref.getInt("FontPosition", 4)]) * 2);
        buttonFont = obuttonFont + (Integer.parseInt(Fonts[pref.getInt("FontPosition", 4)]) * 2);

        try {
            mAudioManager = ((AudioManager) getSystemService(Context.AUDIO_SERVICE));
            mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, mAudioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC), AudioManager.FLAG_SHOW_UI);
        } catch (Exception e) {
            Toast.makeText(getApplicationContext(), e.getLocalizedMessage(), Toast.LENGTH_LONG).show();
            handleException("[Initializing Audio Manager]" + "[onCreate]" + "[" + e.getLocalizedMessage() + "]");
        }
        try {
            setVolumeControlStream(AudioManager.STREAM_MUSIC);

            if (mTTS == null)
                mTTS = new TextToSpeech(getApplicationContext(), this); // TextToSpeech.OnInitListener

            int currentapiVersion = android.os.Build.VERSION.SDK_INT;
            if (currentapiVersion <= android.os.Build.VERSION_CODES.HONEYCOMB) {
                // Disable bluetooth
                mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();

                if (mBluetoothAdapter.isEnabled())
                    mBluetoothAdapter.disable();

            }
            msgHandlerForLoginWait = new Handler();
            hm = new HashMap();
            MFView = new HashMap<String, Boolean>();
            myOnCreate();

            prev_MeterState = getResources().getString(R.string.NotConnected);
            WALL_ACTIONS[0] = Farsi.Convert(getResources().getString(R.string.PerformTrip));

        } catch (Exception ex) {
            LogException("[Initialializing Application]" + "[onCreate]" + "[" + ex.getLocalizedMessage() + "]");

        }
        super.onCreate(savedInstanceState);
    }
    /*-------------------------------------------------------------myOnCreate-----------------------------------------------------------------------*/
    public void myOnCreate() {

        notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
        this.registerReceiver(mReceiver, new IntentFilter("android.bluetooth.device.action.PAIRING_REQUEST"));
        bidOfferSound = MediaPlayer.create(this, R.raw.bidoffer);

        manifestSound = MediaPlayer.create(this, R.raw.manifest);

        soundPool = new SoundPool(10, AudioManager.STREAM_SYSTEM, 5);
        tripSoundMyTaxi = soundPool.load(this, R.raw.trip_offer, 1);
        tripSound = soundPool.load(this, R.raw.tripdetail, 1);
        totalBreaksTaken = -1;
        // Check to see if a recognition activity is present
        PackageManager pm = getPackageManager();

        List<ResolveInfo> activities = pm.queryIntentActivities(new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH), 0);
        if (activities.size() != 0) {
            recognizer = true;
        } else {
            recognizer = false;
        }
        try {

            cnnxManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);

            if (cnnxManager.getActiveNetworkInfo() != null ? cnnxManager.getActiveNetworkInfo().isConnected() : false) {

                serviceHandle = ((CabDispatch) getApplicationContext()).getServiceHandle();

                this.msgHandler = new Handler() {
                    @Override
                    public void handleMessage(Message msg) {

                        switch (msg.what) {
                            case MsgType.HandShakeResp :
                                handleHandshakeResponse((String[]) msg.obj);
                                break;

                            case MsgType.turnGPSON :
                                handleTurnONGPS();
                                break;

                            case MsgType.LoginBtn :
                                handleEnableLoginBtn((Boolean) msg.obj);
                                break;
                            case MsgType.Login_Resp :
                                if (checkforloginresp == false) {
                                    handleLoginResponse((String[]) msg.obj);
                                } else {
                                    checkforloginresp = false;
                                }
                                break;

                            case MsgType.registerResp :
                                handleRegisterResponse((String[]) msg.obj);
                                break;

                            case MsgType.LogoffResp :
                                handleLogoffResponse((String[]) msg.obj);
                                break;

                            case MsgType.ORSDLOGGEDOUT :
                                handleForcedLogout((String) msg.obj);
                                break;

                            case MsgType.ZFT :
                                handleZoneFareTaxi((String[]) msg.obj);
                                break;

                            case MsgType.AVL :
                                handleLocationChange((String) msg.obj);
                                break;

                            case MsgType.AVLResp :
                                handleAVLResp((String) msg.obj);
                                break;

                            case MsgType.BookInResponse :
                                handleBookinResp((String) msg.obj);
                                break;

                            case MsgType.NoShowResp :
                                handleNoShowResponse((String) msg.obj);
                                break;

                            case MsgType.BID_Offer :
                                handleBidUpdate((String) msg.obj);
                                break;

                            case MsgType.TripDetails :
                                handleTripDetails((String) msg.obj);
                                break;

                            case MsgType.SDTRIPOFFER :
                                handleTripOffer((String) msg.obj);
                                break;

                            case MsgType.TripDetailUpdate :
                                handleTripUpdate((String) msg.obj);
                                break;

                            case MsgType.SDTRIPFARE :
                                handleSDTripFare((String) msg.obj);
                                break;
                            case MsgType.FLUSH_BID :
                                handleFlushBid((String) msg.obj);
                                break;

                            case MsgType.ClearTrip :
                                handleClearTrip((String) msg.obj);
                                break;

                            case MsgType.PaymentResponse :
                                handlePaymentResp((String) msg.obj);
                                break;

                            case MsgType.showProgress :
                                handleShowProgress((String) msg.obj);
                                break;

                            case MsgType.hideProgress :
                                handleHideProgress();
                                break;

                            case MsgType.PopUpMessage :
                                handlePopupMsg((String) msg.obj);
                                break;

                            case MsgType.TextMessage :
                                handleTextMsg(((String) msg.obj).split("\\^")[0], ((String) msg.obj).split("\\^")[1]);
                                break;

                            case MsgType.Manifest :
                                handleManifest((String) msg.obj);
                                break;
                            case MsgType.invalidIP :
                                handleInvalidServerIP((String) msg.obj);
                                break;
                            case MsgType.exception :
                                handleException((String) msg.obj);
                                break;
                            case MsgType.exceptionToast :
                                handleExceptionToast((String) msg.obj);
                                break;
                            case MsgType.newAppOnServer :
                                handleAppUpdate((String) msg.obj);
                                break;
                            case MsgType.EstimatedFareResp :
                                handleEstimatedFareResp((String) msg.obj);
                                break;
                            case MsgType.Reminder :
                                handleReminder((String) msg.obj);
                                break;
                            case MsgType.TabberClick :
                                handleTabberClick();
                                break;
                            case MsgType.connectVivotech :
                                connectToVivotech();
                                break;
                            case MsgType.CreditCardData :
                                handleCreditCardData((itcurves.ncs.CreditCard) msg.obj);
                                break;
                            case MsgType.systemBroadcast :
                                handleSystemBroadcast((String) msg.obj);
                                break;
                            case MsgType.wallTripsArray :
                                handleWallTrips((ArrayList<WallTrip>) msg.obj);
                                break;
                            case MsgType.manifestwallTripsArray :
                                handleManifestWallTrips((ArrayList<ManifestWallTrip>) msg.obj);
                                break;
                            case MsgType.messageHistoryArray :
                                handleCannedMessages((ArrayList<CannedMessage>) msg.obj);
                                break;
                            case MsgType.SDINACTIVITYREQUEST :
                                handleSDInactiveRequest((String) msg.obj);
                                break;
                            case MsgType.SDBREAKENDED :
                                handleSDBreakEnded((String) msg.obj);
                                break;
                            case MsgType.EmergencyConfirmation :
                                handleEmergencyConfirmation();
                                break;
                            case 1000 : // Special handling for messages from the meter
                                handleMeterMessage((MeterMessage) msg.obj);
                                break;
                            case 2000 : // Special handling for messages from the vivotech
                                handleVivotechMessage((String) msg.obj);
                                break;
                            case 2001 : // Special handling for messages from the vivotech
                                handleVivotechError((String) msg.obj);
                                break;
                            case 3000 : // Special handling for messages from the SoftMeter
                                handleSoftMeterMessage((String) msg.obj);
                                break;

                            default :
                                Log.e(getClass().getSimpleName(), "Dropping unsupported message in Hanlder: " + msg.what);
                        }

                        // super.handleMessage(msg);
                    }

                };
                // / For Custom Title Bar
                // requestWindowFeature(Window.FEATURE_CUSTOM_TITLE);

                if (serviceHandle == null) {
                    Log.w(getClass().getSimpleName(), "Service is NULL, adding a Service Status listener!");
                    ((CabDispatch) getApplicationContext()).addNetworkServiceStatusListener(this);

                    mainView = createLoadingView();
                } else {

                    networkServiceStarted(serviceHandle);
                }

            } else {
                setContentView(createLoadingView());
                AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                builder.setIcon(android.R.drawable.ic_dialog_alert).setTitle(Farsi.Convert(getResources().getString(R.string.NoDataConnection))).setMessage(
                        Farsi.Convert(getResources().getString(R.string.NoDataConnectivity))).setPositiveButton(
                        Farsi.Convert(getResources().getString(R.string.ok)),
                        new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                // getApplication().stopService(srv); //updates, else app crashes on 'No Data Connectivity'
                                System.runFinalization();

                                System.exit(0);
                            } // onClick

                        }).setCancelable(false);
                AlertDialog alert = builder.create();
                alert.show();

                dialogFontSize(alert);

                // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.NoNetworkConnectivity)), Toast.LENGTH_LONG);
                showToastMessage(R.string.NoNetworkConnectivity);
            }
            currentView = mainView;
            mHandler = new Handler();
            // Set the view

        } catch (Exception ex) {
            LogException("[Initializing Application]" + "[myoncreate]" + "[" + ex.getLocalizedMessage() + "]");

        }
    }

    private final BroadcastReceiver mReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();

            if (action.equalsIgnoreCase("android.bluetooth.device.action.PAIRING_REQUEST")) {
                if (AVL_Service.pref.getBoolean("CentrodyneMeter", false))
                    Meter_Bluetooth.setpin("2583");
                else if (AVL_Service.pref.getBoolean("VeriFoneDevice", false))
                    Meter_Bluetooth.setpin("1234");
            }

        }
    };

    /*--------------------------------------------------------------onConfigurationChanged------------------------------------------------------------------------*/
    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        try {
            display = ((WindowManager) getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();

            screenWidth = display.getWidth();

            // NoShowButton.setWidth(screenWidth / 4);
            // ((Button) currentView.findViewById(NoShowButton.getId())).setWidth(screenWidth / 4);
            // currentView.forceLayout();

        } catch (Exception ex) {
            LogException("[Changing Configuration]" + "[onConfigurationChanged]" + "[" + ex.getLocalizedMessage() + "]");
        }
        super.onConfigurationChanged(newConfig);
    }

    /*--------------------------------------------------------------onDestroy-----------------------------------------------------------------------*/
    @Override
    public void onDestroy() {
        try {
            AVL_Service.msg_listeners.clear();
            this.unregisterReceiver(mReceiver);
            if (AVL_Service.pref.getBoolean("VentiveAJR", false)){
                if (swiperController != null) {
                    if (swiperController.getSwiperState() != SwiperControllerState.STATE_IDLE) {
                        swiperController.stopSwiper();
                    }
                    swiperController.deleteSwiper();
                    swiperController = null;
                }
                endCallStateService();
            }
        } catch (Exception ex) {
            LogException("[Closing Application]" + "[onDestroy]" + "[" + ex.getLocalizedMessage() + "]");
        }
        super.onDestroy();
    }

    /*--------------------------------------------------------------onBackPressed-------------------------------------------------------------------*/
    @Override
    public void onBackPressed() {
        try {
            if (tripView != null)
                if (tripView.isShown()) {
                    tripView = null;
                    currentTrip = null;
                    setContentView(mainView);
                    currentView = mainView;

                    if (tripAdapter != null) {
                        // tripAdapter.notifyDataSetChanged();
                        sortTripList();
                        manifestListView.setSelection(tripAdapter.getFirstUnfinishedPosition());
                    }
                    Fare = "0";
                    Extras = "0";
                    Tip = "0";
                } else if (paymentView != null)
                    if (paymentView.isShown()) {
                        if (bMerchantCopyPrinted == false) {
                            if (!checkforpromotioncode) {

                                currentTrip.PromotionalCode = "";
                            } else
                                checkforpromotioncode = false;
                            Fare = "0";
                            Extras = "0";
                            Tip = "0";
                            currentTrip.Extras = ttfExtras.getText().toString();
                            // currentTrip.Tip = ttfTip.getText().toString();
                            paymentView = null;
                            reciept = "";
                            currentTrip.signatureURL = null;
                            setContentView(tripView);
                        }
                    }
            Meter_Bluetooth.flaggerStartedFromMeter_Verifone = false;
        } catch (Exception ex) {
            LogException("[Pressing Back Button]" + "[onBackPressed]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }


    /*-------------------------------------------------------------CMT_Verify-----------------------------------------------------------------------*/
    protected boolean CMT_Verify(String holdAmount, String fareAmt, String extrasAmt, String tipAmt, itcurves.ncs.CreditCard cc) {

        try {
            Date date = new Date();
            showProgressDialog(Farsi.Convert(getResources().getString(R.string.Verifying)));

            CMTAuthorizationCreditTrip preAuth = new CMTAuthorizationCreditTrip(AVL_Service.CCProcessorList.get("CMT").get_ServiceLink());
            preAuth.set_username(AVL_Service.CCProcessorList.get("CMT").get_UserName());
            preAuth.set_password(AVL_Service.CCProcessorList.get("CMT").get_AccountPassword());
            preAuth.set_dataSource(AVL_Service.CCProcessorList.get("CMT").get_MerchantId());

            preAuth.set_requestId(currentTrip.tripNumber);
            preAuth.set_deviceId(AVL_Service.pref.getString("VehicleID", "0"));
            preAuth.set_userId(AVL_Service.pref.getString("DriverID", "0"));
            preAuth.set_jobId(currentTrip.ConfirmNumber);
            preAuth.set_paymentAmt(holdAmount);
            preAuth.set_fareAmt(fareAmt);
            preAuth.set_tipAmt(tipAmt);
            preAuth.set_tollAmt("0");
            preAuth.set_surchargeAmt(extrasAmt);
            preAuth.set_taxAmt("0");
            preAuth.set_convenienceFeeAmt("0");
            if (currentTrip.creditCardTrackII.equalsIgnoreCase("")) {
                preAuth.set_accountNumber(currentTrip.creditCardNum);
                preAuth.set_expiryDate(currentTrip.creditCardExpiry.substring(2) + currentTrip.creditCardExpiry.substring(0, 2));
            } else
                preAuth.set_swipeData(";" + currentTrip.creditCardTrackII + "?");
            preAuth.set_encryptionKeyVersion("0");
            preAuth.set_encryptedToken("");
            preAuth.set_encryptionAlgorithm("0");
            preAuth.set_pickupDate(CMT_DateFormat.format(currentTrip.PUTime));
            preAuth.set_pickupLatitude("0");
            preAuth.set_pickupLongitude("0");
            preAuth.set_dropoffDate(CMT_DateFormat.format(currentTrip.DOTime));
            preAuth.set_dropoffLatitude("0");
            preAuth.set_dropoffLongitude("0");
            preAuth.set_readyToSettle("false");
            preAuth.set_tripDistance("0");
            preAuth.set_tripDuration("0");
            preAuth.set_passengerCount("0");

            preAuth.SendRequest();

            if (preAuth.get_ResultCode().equalsIgnoreCase("Success")) {
                if (preAuth.get_ResponseType().equalsIgnoreCase("1")) {

                    hideProgressDialog();
                    receivedPopupMsg("Verification successful", "P");

                    /** Set AuthCode & Transaction ID of Current trip **/
                    currentTrip.authCode = preAuth.get_AuthorizationCode();
                    currentTrip.transactionID = preAuth.get_TransactionId();
                    currentTrip.preAuthAmount = preAuth.get_PaymentAmt();

                    /** Printing Pre_Auth Reiept **/
                    String CompanyName = null;
                    if (AVL_Service.CompanyName_Receipt.length() > 0) {
                        CompanyName = AVL_Service.pref.getString("Company", "Payment Receipt");
                        AVL_Service.pref.edit().putString("Company", AVL_Service.CompanyName_Receipt).commit();
                    }
                    reciept = AVL_Service.pref.getString("Company", "Payment Receipt") + "\nCARD ON HOLD "
                            + "\n"
                            + displayDateFormat.format(date)
                            + "   "
                            + displayTimeFormat.format(date)
                            + "\nCC# xxxxxx"
                            + (currentTrip.creditCardNum.length() > 12 ? currentTrip.creditCardNum.substring(12) : "")
                            + "\nAuth : "
                            + currentTrip.authCode
                            + "\nAmount : "
                            + holdAmount
                            + "$";
                    if (AVL_Service.CompanyName_Receipt.length() > 0) {
                        AVL_Service.pref.edit().putString("Company", CompanyName).commit();
                    }
                    if (AVL_Service.pref.getBoolean("BlueBambooDevice", false)) {
                        if (bluebambooPrinter == null || !bluebambooPrinter.isConnectionAlive())
                            showPrinterDialog();
                        else {
                            isPrinted = bluebambooPrinter.print(reciept);
                            handlePrinterResp();
                        }

                    } else if (AVL_Service.pref.getBoolean("BluetoothMeter", false)) {
                        if (reciept.length() < 128) {
                            taxiMeterReciept = new PrinterMessage(reciept, meterType());
                            taxiMeterReciept2 = null;
                        }
                        if (taxiMeterPrinter != null) {
                            if (taxiMeterPrinter.isConnectionAlive()) {
                                isPrinted = taxiMeterPrinter.write(taxiMeterReciept);
                                handlePrinterResp();
                            } else
                                showPrinterDialog();
                        } else if (Meter != null && Meter.isConnectionAlive()) {
                            taxiMeterPrinter = Meter;
                            taxiPrinter = taxiMeter;
                            AVL_Service.pref.edit().putString("PrinterAddress", AVL_Service.pref.getString("MeterAddress", "")).commit();
                            isPrinted = taxiMeterPrinter.write(taxiMeterReciept);
                            handlePrinterResp();
                        } else
                            showPrinterDialog();
                    }
                    return true;
                    // } else {
                    // receivedPaymentResp("Header" + Constants.BODYSEPARATOR + "0^TRANSACTION VOID FAILED");
                    // return false;
                    // }
                } else {
                    runOnUiThread(new Runnable() {
                        public void run() {
                            // ttfCCNumber.setText("");
                            // ttfCCExpiry.setText("");
                            creditBtn.setEnabled(true);
                            cashBtn.setEnabled(true);
                            voucherBtn.setEnabled(true);
                        }
                    });
                    receivedPaymentResp("CMT_Header" + Constants.BODYSEPARATOR + "0^" + preAuth.get_DeclineReason());
                    return false;
                }
            } else {
                runOnUiThread(new Runnable() {
                    public void run() {
                        // ttfCCNumber.setText("");
                        // ttfCCExpiry.setText("");
                        creditBtn.setEnabled(true);
                        cashBtn.setEnabled(true);
                        voucherBtn.setEnabled(true);
                    }
                });
                receivedPaymentResp("CMT2_Header" + Constants.BODYSEPARATOR + "0^" + preAuth.get_ErrorMessage());
                return false;
            }
        } catch (Exception e) {
            // handleException(e.getStackTrace()[0].getFileName() + "| " + e.getLocalizedMessage() + " in " + e.getStackTrace()[0].getMethodName() + " Line " +
            // e.getStackTrace()[0].getLineNumber());
            hideProgressDialog();
            return false;
        }
    }

    /*-------------------------------------------------------------showCustomToast----------------------------------------------------------------------*/
    private void handleShowCustomToast(String msgToShow, int imageResourceID) {
        try {
            hideProgressDialog();
            LayoutInflater inflater = getLayoutInflater();
            View layout = inflater.inflate(R.layout.toast_layout, (ViewGroup) findViewById(R.id.toast_layout_root));
            ImageView image = (ImageView) layout.findViewById(R.id.toast_image);
            if (imageResourceID > -1)
                image.setImageResource(imageResourceID);
            TextView text = (TextView) layout.findViewById(R.id.toast_text);
            text.setText(msgToShow);
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                text.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                text.setText(msgToShow);
            } else
                text.setText(Farsi.Convert(msgToShow));
            text.setTextSize(miscFont - 1);
            Toast toast = new Toast(getApplicationContext());
            toast.setGravity(Gravity.CENTER_VERTICAL, 0, 0);
            toast.setDuration(Toast.LENGTH_LONG);
            toast.setView(layout);
            toast.show();
        } catch (Exception ex) {
            LogException("[Exception in Making Custom Toast]" + "[handleShowCustomToast]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }

    /*-------------------------------------------------------------CMT_PreAuth----------------------------------------------------------------------*/
    protected boolean CMT_PreAuth(String holdAmount, String fareAmt, String extrasAmt, String tipAmt) {

        try {
            CMTAuthorizationCreditTrip preAuth = new CMTAuthorizationCreditTrip(AVL_Service.CCProcessorList.get("CMT").get_ServiceLink());

            preAuth.set_username(AVL_Service.CCProcessorList.get("CMT").get_UserName());
            preAuth.set_password(AVL_Service.CCProcessorList.get("CMT").get_AccountPassword());
            preAuth.set_dataSource(AVL_Service.CCProcessorList.get("CMT").get_MerchantId());

            if (currentTrip.creditCardTrackII.equalsIgnoreCase("")) {
                preAuth.set_accountNumber(currentTrip.creditCardNum);
                preAuth.set_expiryDate(currentTrip.creditCardExpiry.substring(2) + currentTrip.creditCardExpiry.substring(0, 2));
            } else
                preAuth.set_swipeData(";" + currentTrip.creditCardTrackII + "?");

            preAuth.set_requestId(currentTrip.tripNumber);
            preAuth.set_deviceId(AVL_Service.pref.getString("VehicleID", "0"));
            preAuth.set_userId(AVL_Service.pref.getString("DriverID", "0"));
            preAuth.set_jobId(currentTrip.ConfirmNumber);
            preAuth.set_paymentAmt(holdAmount);
            preAuth.set_fareAmt(fareAmt);
            preAuth.set_tipAmt(tipAmt);
            preAuth.set_tollAmt("0");
            preAuth.set_surchargeAmt(extrasAmt);
            preAuth.set_taxAmt("0");
            preAuth.set_convenienceFeeAmt("0");
            preAuth.set_encryptionKeyVersion("0");
            preAuth.set_encryptedToken("");
            preAuth.set_encryptionAlgorithm("0");
            preAuth.set_pickupDate(CMT_DateFormat.format(currentTrip.PUTime));
            preAuth.set_pickupLatitude("0");
            preAuth.set_pickupLongitude("0");
            preAuth.set_dropoffDate(CMT_DateFormat.format(currentTrip.DOTime));
            preAuth.set_dropoffLatitude("0");
            preAuth.set_dropoffLongitude("0");
            preAuth.set_readyToSettle("true");
            preAuth.set_tripDistance(currentTrip.miles);
            preAuth.set_tripDuration("0");
            preAuth.set_passengerCount("0");

            preAuth.SendRequest();

            if (preAuth.get_ResultCode().equalsIgnoreCase("Success")) {
                showProgressDialog("PreAuthorization " + preAuth.get_ResultCode());
                if (preAuth.get_ResponseType().equalsIgnoreCase("1")) {

                    CMTAcknowledgeAuthorization ack = new CMTAcknowledgeAuthorization(AVL_Service.CCProcessorList.get("CMT").get_ServiceLink());
                    ack.set_username(AVL_Service.CCProcessorList.get("CMT").get_UserName());
                    ack.set_password(AVL_Service.CCProcessorList.get("CMT").get_AccountPassword());
                    ack.set_dataSource(AVL_Service.CCProcessorList.get("CMT").get_MerchantId());

                    ack.set_transactionId(preAuth.get_TransactionId());
                    ack.set_authorizationCode(preAuth.get_AuthorizationCode());
                    ack.set_deviceId(AVL_Service.pref.getString("VehicleID", "0"));
                    ack.set_jobId(currentTrip.ConfirmNumber);
                    ack.set_userId(AVL_Service.pref.getString("DriverID", "0"));
                    ack.set_requestId(currentTrip.tripNumber);
                    ack.set_responseCode("1"); // 1=Ack 0=void preAuth

                    int retryCount = 0;
                    do {
                        ack.SendRequest();
                        ++retryCount;
                        // Toast.makeText(TaxiPlexer.this, "Trying Pre-Auth Acknowledge " + retryCount + " time", Toast.LENGTH_SHORT).show();
                    } while (!Boolean.valueOf(ack.get_IsSuccesful()) && (retryCount < 3));

                    if (ack.get_ResultCode().equalsIgnoreCase("Success")) {
                        // Toast.makeText(TaxiPlexer.this, "Pre-Auth Acknowledge successful", Toast.LENGTH_SHORT).show();
                        showProgressDialog("Pre-Auth Acknowledge successful");
                        currentTrip.preAuthAmount = holdAmount;
                        currentTrip.transactionID = preAuth.get_TransactionId();
                        currentTrip.authCode = preAuth.get_AuthorizationCode();
                        return true;
                    } else {
                        receivedPaymentResp("CMT3_Header" + Constants.BODYSEPARATOR + "0^" + ack.get_ErrorMessage());
                        return false;
                    }
                } else {
                    runOnUiThread(new Runnable() {
                        public void run() {
                            // ttfCCNumber.setText("");
                            // ttfCCExpiry.setText("");
                            creditBtn.setEnabled(true);
                            cashBtn.setEnabled(true);
                            voucherBtn.setEnabled(true);
                        }
                    });
                    receivedPaymentResp("CMT4_Header" + Constants.BODYSEPARATOR + "0^" + preAuth.get_DeclineReason());
                    return false;
                }
            } else {
                runOnUiThread(new Runnable() {
                    public void run() {
                        // ttfCCNumber.setText("");
                        // ttfCCExpiry.setText("");
                        creditBtn.setEnabled(true);
                        cashBtn.setEnabled(true);
                        voucherBtn.setEnabled(true);
                    }
                });
                receivedPaymentResp("CMT5_Header" + Constants.BODYSEPARATOR + "0^" + preAuth.get_ErrorMessage());
                return false;
            }
        } catch (KeyManagementException e) {
            exception(e.getClass() + "| CMT_PreAuth(): " + e.getLocalizedMessage());
            return false;
        } catch (NoSuchAlgorithmException e) {
            exception(e.getClass() + "| CMT_PreAuth(): " + e.getLocalizedMessage());
            return false;
        } catch (IOException e) {
            exception(e.getClass() + "| CMT_PreAuth(): " + e.getLocalizedMessage());
            receivedPaymentResp("CMT6_Header" + Constants.BODYSEPARATOR + "0^No Server Response");
            return false;
        } catch (XmlPullParserException e) {
            exception(e.getClass() + "| CMT_PreAuth(): " + e.getLocalizedMessage());
            receivedPaymentResp("CMT7_Header" + Constants.BODYSEPARATOR + "0^Bad XML Response");
            return false;
        }
    }

    /*-------------------------------------------------------------CMT_Adjust----------------------------------------------------------------------*/
    protected boolean CMT_Adjust(String authCode, String transactionID, String totalAmount, String fareAmt, String extrasAmt, String tipAmt) {

        try {

            CMTAcknowledgeAuthorization ack = new CMTAcknowledgeAuthorization(AVL_Service.CCProcessorList.get("CMT").get_ServiceLink());
            ack.set_username(AVL_Service.CCProcessorList.get("CMT").get_UserName());
            ack.set_password(AVL_Service.CCProcessorList.get("CMT").get_AccountPassword());
            ack.set_dataSource(AVL_Service.CCProcessorList.get("CMT").get_MerchantId());

            ack.set_transactionId(currentTrip.transactionID);
            ack.set_authorizationCode(currentTrip.authCode);
            ack.set_deviceId(AVL_Service.pref.getString("VehicleID", "0"));
            ack.set_jobId(currentTrip.ConfirmNumber);
            ack.set_userId(AVL_Service.pref.getString("DriverID", "0"));
            ack.set_requestId(currentTrip.tripNumber);
            ack.set_responseCode("1"); // 1=Ack 0=void preAuth

            int retryCount = 0;
            do {
                ack.SendRequest();
                ++retryCount;
            } while (!Boolean.valueOf(ack.get_IsSuccesful()) && (retryCount < 3));

            if (ack.get_ResultCode().equalsIgnoreCase("Success")) {

                CMTAdjustAuthorization adjust = new CMTAdjustAuthorization(AVL_Service.CCProcessorList.get("CMT").get_ServiceLink());

                adjust.set_username(AVL_Service.CCProcessorList.get("CMT").get_UserName());
                adjust.set_password(AVL_Service.CCProcessorList.get("CMT").get_AccountPassword());
                adjust.set_dataSource(AVL_Service.CCProcessorList.get("CMT").get_MerchantId());

                adjust.setAuthorizationCode(authCode);
                adjust.setTransactionId(transactionID);
                adjust.setRequestId(currentTrip.tripNumber);
                adjust.setDeviceId(AVL_Service.pref.getString("VehicleID", "0"));
                adjust.setUserId(AVL_Service.pref.getString("DriverID", "0"));
                adjust.setJobId(currentTrip.ConfirmNumber);
                adjust.setPaymentAmt(totalAmount);
                adjust.setFareAmt(fareAmt);
                adjust.setTipAmt(tipAmt);
                adjust.setTollAmt("0");
                adjust.setSurchargeAmt(extrasAmt);
                adjust.setTaxAmt("0");
                adjust.setConvenienceFeeAmt("0");
                adjust.setOperationMode("0");

                adjust.SendRequest();
                if (adjust.get_ResultCode().equalsIgnoreCase("Success")) {
                    if (adjust.get_ResponseType().equalsIgnoreCase("1")) {
                        showProgressDialog("Adjust " + adjust.get_ResultCode());
                        // currentTrip.preAuthAmount = adjust.get_PaymentAmt();
                        currentTrip.transactionID = adjust.get_TransactionId();
                        currentTrip.authCode = adjust.get_AuthorizationCode();
                        return true;
                    } else {
                        receivedPaymentResp("CMT8_Header" + Constants.BODYSEPARATOR + "0^" + adjust.get_DeclineReason());
                        return false;
                    }
                } else {
                    receivedPaymentResp("CMT9_Header" + Constants.BODYSEPARATOR + "0^" + adjust.get_ErrorMessage());
                    return false;
                }

            } else {
                receivedPaymentResp("CMT10_Header" + Constants.BODYSEPARATOR + "0^" + ack.get_ErrorMessage());
                return false;
            }

        } catch (Exception e) {
            exception(e.getClass() + "| CMT_Adjust(): " + e.getLocalizedMessage());
            return false;
        }
    }

    /*-------------------------------------------------------------CMT_Settle-----------------------------------------------------------------------*/
    protected void CMT_Settle() {
        try {
            CMTSettlementAuthorization settle = new CMTSettlementAuthorization(AVL_Service.CCProcessorList.get("CMT").get_ServiceLink());
            settle.set_username(AVL_Service.CCProcessorList.get("CMT").get_UserName());
            settle.set_password(AVL_Service.CCProcessorList.get("CMT").get_AccountPassword());
            settle.set_dataSource(AVL_Service.CCProcessorList.get("CMT").get_MerchantId());

            settle.setTransactionId(currentTrip.transactionID);
            settle.setAuthorizationCode(currentTrip.authCode);
            settle.setJobId(currentTrip.ConfirmNumber);
            settle.setDeviceId(AVL_Service.pref.getString("VehicleID", "0"));

            int retryCount = 0;
            do {
                settle.SendRequest();
                if (retryCount > 0)
                    Toast.makeText(getApplicationContext(), "Post Authorizing\nTrying " + retryCount + " Attempt", Toast.LENGTH_SHORT).show();
                ++retryCount;
            } while (!Boolean.valueOf(settle.get_settleStatus()) && retryCount < 3);

            if (currentTrip != null)
                if (settle.get_ResultCode().equalsIgnoreCase("Success")) {
                    currentTrip.authCode = settle.get_AuthorizationCode();
                    if (Boolean.valueOf(settle.get_settleStatus())) {

                        sendTripResponse(States.DROPPED);

                        // Lat^Long^TripNumber^Credit^Fare^Extras^Tip^Total^CardNumber^CardType^
                        // CCProcessingCompany^ConfirmationNo^AuthCode^DeviceID^JobID^PaymentAmt^
                        // PerformedBy^RequestCode^RequestID^ResponseType^TransID^transType^UserID^DeclineReason^ErrorMessage^pickUpDateTime
                        if(!currentTrip.bCopayAllowedOnPaymentScreen){
                            tempFare = "0";
                            tempExtras = "0";
                        } else {
                            String  temptotal = ttfTotal.getText().toString();
                            temptotal = String.valueOf(Float.parseFloat(temptotal) - Float.parseFloat(currentTrip.Copay));
                            ttfTotal.setText(temptotal);
                        }
                        serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                + AVL_Service.pref.getString("LastLongitude", "0")
                                + Constants.COLSEPARATOR
                                + currentTrip.tripNumber
                                + Constants.COLSEPARATOR
                                + currentTrip.paymentMethod
                                + Constants.COLSEPARATOR
                                + String.valueOf(Float.parseFloat(Fare) + Float.parseFloat(tempFare))
                                + Constants.COLSEPARATOR
                                + String.valueOf(Float.parseFloat(Extras) + Float.parseFloat(tempExtras))
                                + Constants.COLSEPARATOR
                                + Tip
                                + Constants.COLSEPARATOR
                                + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                                + Constants.COLSEPARATOR
                                + "xxxxxxxxxxxx"
                                + (currentTrip.creditCardNum.length() > 11 ? currentTrip.creditCardNum.substring(currentTrip.creditCardNum.length() - 4) : "")
                                + Constants.COLSEPARATOR
                                + currentTrip.cardType
                                + Constants.COLSEPARATOR
                                + currentTrip.cardProcessor
                                + Constants.COLSEPARATOR
                                + currentTrip.ConfirmNumber
                                + Constants.COLSEPARATOR
                                + currentTrip.authCode
                                + Constants.COLSEPARATOR
                                + AVL_Service.pref.getString("VehicleID", "0")
                                + Constants.COLSEPARATOR
                                + settle.get_JobId()
                                + Constants.COLSEPARATOR
                                + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                                + Constants.COLSEPARATOR
                                + "Driver-"
                                + AVL_Service.pref.getString("DriverID", "unknown")
                                + Constants.COLSEPARATOR
                                + settle.get_ResultCode()
                                + Constants.COLSEPARATOR
                                + currentTrip.tripNumber
                                + Constants.COLSEPARATOR
                                + "1"
                                + Constants.COLSEPARATOR
                                + settle.get_TransactionId()
                                + Constants.COLSEPARATOR
                                + "Sale"
                                + Constants.COLSEPARATOR
                                + AVL_Service.pref.getString("DriverID", "Driver")
                                + Constants.COLSEPARATOR
                                + settle.get_DeclineReason()
                                + Constants.COLSEPARATOR
                                + settle.get_ErrorMessage()
                                + Constants.COLSEPARATOR
                                + MRMS_DateFormat.format(currentTrip.PUTime)
                                + Constants.COLSEPARATOR
                                + ((dFormat.format(Distance).equalsIgnoreCase("0.00")) ? currentTrip.miles : dFormat.format(Distance))
                                + Constants.COLSEPARATOR
                                + ActualPaymentAmount
                                + Constants.COLSEPARATOR
                                + currentTrip.PromotionalCode
                                + Constants.COLSEPARATOR
                                + currentTrip.PromotionalValue, "SDHS", MsgType.Payment, AckType.NEW, MsgValidity.Short, MsgPriority.Highest);

                        receivedPaymentResp("CMTSET_Header" + Constants.BODYSEPARATOR + "1^CreditCard Payment successful");
                    } else {
                        runOnUiThread(new Runnable() {
                            public void run() {
                                // ttfCCNumber.setText("");
                                // ttfCCExpiry.setText("");
                                creditBtn.setEnabled(true);
                                cashBtn.setEnabled(true);
                                voucherBtn.setEnabled(true);
                            }
                        });
                        receivedPaymentResp("CMTSET2_Header" + Constants.BODYSEPARATOR + "0^" + settle.get_DeclineReason());
                        if(!currentTrip.bCopayAllowedOnPaymentScreen){
                            tempFare = "0";
                            tempExtras = "0";
                        } else {
                            String  temptotal = ttfTotal.getText().toString();
                            temptotal = String.valueOf(Float.parseFloat(temptotal) - Float.parseFloat(currentTrip.Copay));
                            ttfTotal.setText(temptotal);
                        }
                        serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                + AVL_Service.pref.getString("LastLongitude", "0")
                                + Constants.COLSEPARATOR
                                + currentTrip.tripNumber
                                + Constants.COLSEPARATOR
                                + currentTrip.paymentMethod
                                + Constants.COLSEPARATOR
                                + String.valueOf(Float.parseFloat(Fare) + Float.parseFloat(tempFare))
                                + Constants.COLSEPARATOR
                                + String.valueOf(Float.parseFloat(Extras) + Float.parseFloat(tempExtras))
                                + Constants.COLSEPARATOR
                                + Tip
                                + Constants.COLSEPARATOR
                                + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                                + Constants.COLSEPARATOR
                                + "xxxxxxxxxxxx"
                                + (currentTrip.creditCardNum.length() > 11 ? currentTrip.creditCardNum.substring(currentTrip.creditCardNum.length() - 4) : "")
                                + Constants.COLSEPARATOR
                                + currentTrip.cardType
                                + Constants.COLSEPARATOR
                                + currentTrip.cardProcessor
                                + Constants.COLSEPARATOR
                                + currentTrip.ConfirmNumber
                                + Constants.COLSEPARATOR
                                + currentTrip.authCode
                                + Constants.COLSEPARATOR
                                + AVL_Service.pref.getString("VehicleID", "0")
                                + Constants.COLSEPARATOR
                                + settle.get_JobId()
                                + Constants.COLSEPARATOR
                                + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                                + Constants.COLSEPARATOR
                                + "Driver-"
                                + AVL_Service.pref.getString("DriverID", "unknown")
                                + Constants.COLSEPARATOR
                                + settle.get_ResultCode()
                                + Constants.COLSEPARATOR
                                + currentTrip.tripNumber
                                + Constants.COLSEPARATOR
                                + "0"
                                + Constants.COLSEPARATOR
                                + settle.get_TransactionId()
                                + Constants.COLSEPARATOR
                                + "Sale"
                                + Constants.COLSEPARATOR
                                + AVL_Service.pref.getString("DriverID", "Driver")
                                + Constants.COLSEPARATOR
                                + settle.get_DeclineReason()
                                + Constants.COLSEPARATOR
                                + settle.get_ErrorMessage()
                                + Constants.COLSEPARATOR
                                + MRMS_DateFormat.format(currentTrip.PUTime)
                                + Constants.COLSEPARATOR
                                + ((dFormat.format(Distance).equalsIgnoreCase("0.00")) ? currentTrip.miles : dFormat.format(Distance))
                                + Constants.COLSEPARATOR
                                + ActualPaymentAmount
                                + Constants.COLSEPARATOR
                                + currentTrip.PromotionalCode
                                + Constants.COLSEPARATOR
                                + currentTrip.PromotionalValue, "SDHS", MsgType.Payment, AckType.NEW, MsgValidity.Short, MsgPriority.Highest);

                    }
                } else {
                    runOnUiThread(new Runnable() {
                        public void run() {
                            // ttfCCNumber.setText("");
                            // ttfCCExpiry.setText("");
                            creditBtn.setEnabled(true);
                            cashBtn.setEnabled(true);
                            voucherBtn.setEnabled(true);
                        }
                    });
                    receivedPaymentResp("CMTSET3_Header" + Constants.BODYSEPARATOR + "0^" + settle.get_ErrorMessage());
                    if(!currentTrip.bCopayAllowedOnPaymentScreen){
                        tempFare = "0";
                        tempExtras = "0";
                    } else {
                        String  temptotal = ttfTotal.getText().toString();
                        temptotal = String.valueOf(Float.parseFloat(temptotal) - Float.parseFloat(currentTrip.Copay));
                        ttfTotal.setText(temptotal);
                    }
                    serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                            + AVL_Service.pref.getString("LastLongitude", "0")
                            + Constants.COLSEPARATOR
                            + currentTrip.tripNumber
                            + Constants.COLSEPARATOR
                            + currentTrip.paymentMethod
                            + Constants.COLSEPARATOR
                            + String.valueOf(Float.parseFloat(Fare) + Float.parseFloat(tempFare))
                            + Constants.COLSEPARATOR
                            + String.valueOf(Float.parseFloat(Extras) + Float.parseFloat(tempExtras))
                            + Constants.COLSEPARATOR
                            + Tip
                            + Constants.COLSEPARATOR
                            + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                            + Constants.COLSEPARATOR
                            + "xxxxxxxxxxxx"
                            + (currentTrip.creditCardNum.length() > 11 ? currentTrip.creditCardNum.substring(currentTrip.creditCardNum.length() - 4) : "")
                            + Constants.COLSEPARATOR
                            + currentTrip.cardType
                            + Constants.COLSEPARATOR
                            + currentTrip.cardProcessor
                            + Constants.COLSEPARATOR
                            + currentTrip.ConfirmNumber
                            + Constants.COLSEPARATOR
                            + currentTrip.authCode
                            + Constants.COLSEPARATOR
                            + AVL_Service.pref.getString("VehicleID", "0")
                            + Constants.COLSEPARATOR
                            + settle.get_JobId()
                            + Constants.COLSEPARATOR
                            + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                            + Constants.COLSEPARATOR
                            + "Driver-"
                            + AVL_Service.pref.getString("DriverID", "unknown")
                            + Constants.COLSEPARATOR
                            + settle.get_ResultCode()
                            + Constants.COLSEPARATOR
                            + currentTrip.tripNumber
                            + Constants.COLSEPARATOR
                            + "0"
                            + Constants.COLSEPARATOR
                            + settle.get_TransactionId()
                            + Constants.COLSEPARATOR
                            + "Sale"
                            + Constants.COLSEPARATOR
                            + AVL_Service.pref.getString("DriverID", "Driver")
                            + Constants.COLSEPARATOR
                            + settle.get_DeclineReason()
                            + Constants.COLSEPARATOR
                            + settle.get_ErrorMessage()
                            + Constants.COLSEPARATOR
                            + MRMS_DateFormat.format(currentTrip.PUTime)
                            + Constants.COLSEPARATOR
                            + ((dFormat.format(Distance).equalsIgnoreCase("0.00")) ? currentTrip.miles : dFormat.format(Distance))
                            + Constants.COLSEPARATOR
                            + ActualPaymentAmount
                            + Constants.COLSEPARATOR
                            + currentTrip.PromotionalCode
                            + Constants.COLSEPARATOR
                            + currentTrip.PromotionalValue, "SDHS", MsgType.Payment, AckType.NEW, MsgValidity.Short, MsgPriority.Highest);
                }
            else {
                receivedPaymentResp("CMTSET4_Header" + Constants.BODYSEPARATOR + "0^No Trip Assigned Yet");
            }
        } catch (Exception e) {
            exception(e.getClass() + "| CMT_Settle(): " + e.getLocalizedMessage());
        }

    }

    /*-------------------------------------------------------------MJM_PreAuth----------------------------------------------------------------------*/
    protected void MJM_PreAuth(String holdAmount) throws InvalidResponse {

        try {
            MJM_Authorize a = new MJM_Authorize();
            a.set_userID(AVL_Service.CCProcessorList.get("MJM").get_UserName());
            a.set_userPwd(AVL_Service.CCProcessorList.get("MJM").get_AccountPassword());
            a.set_merchantID(AVL_Service.CCProcessorList.get("MJM").get_MerchantId());
            a.set_bankID(AVL_Service.CCProcessorList.get("MJM").get_BankId());

            a.setAmount1(holdAmount);

            if (currentTrip.creditCardTrackII.equalsIgnoreCase("")) {
                a.setAccountNumber(currentTrip.creditCardNum);
                a.setExpirationDate(currentTrip.creditCardExpiry);
            } else {
                a.setTrackII(currentTrip.creditCardTrackII);
            }

            MJM_CreditCardResponse ccresp = new CallingMJM_CreditCard("Verifying").execute(a).get(20, TimeUnit.SECONDS);

            if (ccresp.messageType.equals(MJM_CreditCardResponse.MsgType_Response)) {
                if (ccresp.ResponseCode.equalsIgnoreCase("1")) {
                    if(!currentTrip.bCopayAllowedOnPaymentScreen){
                        tempFare = "0";
                        tempExtras = "0";
                    } else {
                        String  temptotal = ttfTotal.getText().toString();
                        temptotal = String.valueOf(Float.parseFloat(temptotal) - Float.parseFloat(currentTrip.Copay));
                        ttfTotal.setText(temptotal);
                    }
                    serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                            + AVL_Service.pref.getString("LastLongitude", "0")
                            + Constants.COLSEPARATOR
                            + currentTrip.tripNumber
                            + Constants.COLSEPARATOR
                            + currentTrip.paymentMethod
                            + Constants.COLSEPARATOR
                            + String.valueOf(Float.parseFloat(Fare) + Float.parseFloat(tempFare))
                            + Constants.COLSEPARATOR
                            + String.valueOf(Float.parseFloat(Extras) + Float.parseFloat(tempExtras))
                            + Constants.COLSEPARATOR
                            + Tip
                            + Constants.COLSEPARATOR
                            + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                            + Constants.COLSEPARATOR
                            + "xxxxxxxxxxxx"
                            + (currentTrip.creditCardNum.length() > 11 ? currentTrip.creditCardNum.substring(currentTrip.creditCardNum.length() - 4) : "")
                            + Constants.COLSEPARATOR
                            + currentTrip.cardType
                            + Constants.COLSEPARATOR
                            + currentTrip.cardProcessor
                            + Constants.COLSEPARATOR
                            + currentTrip.ConfirmNumber
                            + Constants.COLSEPARATOR
                            + currentTrip.authCode
                            + Constants.COLSEPARATOR
                            + AVL_Service.pref.getString("VehicleID", "0")
                            + Constants.COLSEPARATOR
                            + "0"
                            + Constants.COLSEPARATOR
                            + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                            + Constants.COLSEPARATOR
                            + "Driver-"
                            + AVL_Service.pref.getString("DriverID", "unknown")
                            + Constants.COLSEPARATOR
                            + currentTrip.authCode
                            + Constants.COLSEPARATOR
                            + currentTrip.tripNumber
                            + Constants.COLSEPARATOR
                            + "1"
                            + Constants.COLSEPARATOR
                            + currentTrip.transactionID
                            + Constants.COLSEPARATOR
                            + SlimCD_TransType
                            + Constants.COLSEPARATOR
                            + AVL_Service.pref.getString("DriverID", "Driver")
                            + Constants.COLSEPARATOR
                            + "0"
                            + Constants.COLSEPARATOR
                            + "0"
                            + Constants.COLSEPARATOR
                            + MRMS_DateFormat.format(currentTrip.PUTime)
                            + Constants.COLSEPARATOR
                            + ((dFormat.format(Distance).equalsIgnoreCase("0.00")) ? currentTrip.miles : dFormat.format(Distance))
                            + Constants.COLSEPARATOR
                            + ActualPaymentAmount
                            + Constants.COLSEPARATOR
                            + currentTrip.PromotionalCode
                            + Constants.COLSEPARATOR
                            + currentTrip.PromotionalValue, "SDHS", MsgType.Payment, AckType.NEW, MsgValidity.Short, MsgPriority.Highest);
                    currentTrip.preAuthAmount = holdAmount;
                    if (currentView.getId() == PAYMENTVIEW) {

                        ttfCCExpiry.setText("");
                        ttfCCNumber.setEnabled(false);
                        ttfCCExpiry.setEnabled(false);
                        FundingSource.addView(preAuthorization);
                        lblPreAuthAmount.setText(Double.toString(Math.round((Double.parseDouble(holdAmount)) * 100.0) / 100.0));
                        if (AVL_Service.pref.getBoolean("BluetoothMeter", false) || AVL_Service.pref.getBoolean("BlueBambooDevice", false)) {
                            PromotionCode.setEnabled(false);
                            discountBtn.setEnabled(false);
                            handlePaymentResp("A");
                        } else
                            bMerchantCopyPrinted = true;
                    }
                }
                Toast.makeText(getApplicationContext(), "PreAuthorization " + ccresp.Text, Toast.LENGTH_LONG).show();
            } else if (ccresp.messageType.equals(MJM_CreditCardResponse.MsgType_Error)) {
                Toast.makeText(getApplicationContext(), ccresp.ErrorMsg, Toast.LENGTH_LONG).show();
            }
        } catch (Exception e) {
            if (e instanceof InterruptedException)
                Toast.makeText(getApplicationContext(), "MJM_PreAuth Interrupted", Toast.LENGTH_LONG).show();
            else if (e instanceof ExecutionException)
                Toast.makeText(getApplicationContext(), "MJM_PreAuth Failed", Toast.LENGTH_LONG).show();
            else if (e instanceof TimeoutException)
                Toast.makeText(getApplicationContext(), "MJM_PreAuth Timeout", Toast.LENGTH_LONG).show();
            else if (e instanceof IllegalStateException) {
                Toast.makeText(getApplicationContext(), "MJM_PreAuth IllegalStateException", Toast.LENGTH_LONG).show();
            } else {
                exception("[Exception in MJM PreAuth]" + "[MJM_PreAuth]" + "[" + e.getLocalizedMessage() + "]");

            }
        }
    }

	/*--------------------------------------------------------------sortTripList--------------------------------------------------------------------*/
    // private void sortTripList() {
    // LogException("SYNC: START of sortTripList" + System.currentTimeMillis());
    // try {
    // TripArrayList tempArrayListOfTrips = new TripArrayList();
    //
    // if (tripSortOrderclicked)
    // synchronized (arrayListOftrips) {
    //
    // synchronized (arrayListOfTreatedTrips) {
    // Collections.sort(arrayListOfTreatedTrips, new Comparator<Trip>() {
    //
    // @Override
    // public int compare(Trip trip1, Trip trip2) {
    // return trip1.nodeTime.compareTo(trip2.nodeTime);
    // }
    // });
    // arrayListOfTreatedTrips.notifyAll();
    // }
    // LogException("SYNC: sortTripList-1:" + System.currentTimeMillis()
    // + ", OT: "
    // + arrayListOfOtherTrips.size()
    // + ", TT: "
    // + arrayListOfTreatedTrips.size()
    // + ", AT: "
    // + arrayListOftrips.size());
    //
    // synchronized (arrayListOfOtherTrips) {
    // for (Trip thisTrip : arrayListOfTreatedTrips)
    // for (Trip thisTrip1 : arrayListOfOtherTrips) {
    // if (thisTrip.tripNumber.equalsIgnoreCase(thisTrip1.tripNumber))
    // tempArrayListOfTrips.add(thisTrip1);
    // }
    // arrayListOfOtherTrips.removeAll(tempArrayListOfTrips);
    //
    // Collections.sort(arrayListOfOtherTrips, new Comparator<Trip>() {
    //
    // @Override
    // public int compare(Trip trip1, Trip trip2) {
    // return trip1.nodeTime.compareTo(trip2.nodeTime);
    // }
    // });
    // arrayListOfOtherTrips.notifyAll();
    // }
    // LogException("SYNC: sortTripList-2:" + System.currentTimeMillis()
    // + ", OT: "
    // + arrayListOfOtherTrips.size()
    // + ", TT: "
    // + arrayListOfTreatedTrips.size()
    // + ", AT: "
    // + arrayListOftrips.size());
    //
    // arrayListOftrips.removeAll(arrayListOftrips);
    // if (!isOnlyUnperformedTrips)
    // arrayListOftrips.addAll(arrayListOfTreatedTrips);
    // arrayListOftrips.addAll(arrayListOfOtherTrips);
    // int tripListSize = Integer.parseInt(AVL_Service.sDMaxLengthOfTripList);
    // int count = 0;
    // ArrayList<Trip> tempArrList = new ArrayList<Trip>();
    // if (arrayListOftrips.size() > tripListSize) {
    // count = arrayListOftrips.size() - tripListSize;
    // for (int i = 0; i < arrayListOftrips.size(); i++) {
    // if (arrayListOftrips.get(i).state.equalsIgnoreCase(States.DROPPED))
    // if (count > 0) {
    // tempArrList.add(arrayListOftrips.get(i));
    // count--;
    // }
    // }
    // }
    // arrayListOftrips.removeAll(tempArrList);
    // arrayListOftrips.notifyAll();
    // LogException("SYNC: sortTripList-3:" + System.currentTimeMillis()
    // + ", OT: "
    // + arrayListOfOtherTrips.size()
    // + ", TT: "
    // + arrayListOfTreatedTrips.size()
    // + ", AT: "
    // + arrayListOftrips.size());
    //
    // }
    // else if (!tripSortOrderclicked)
    // synchronized (arrayListOftrips) {
    //
    // LogException("SYNC: sortTripList-4:" + System.currentTimeMillis()
    // + ", OT: "
    // + arrayListOfOtherTrips.size()
    // + ", TT: "
    // + arrayListOfTreatedTrips.size()
    // + ", AT: "
    // + arrayListOftrips.size());
    //
    // synchronized (arrayListOfOtherTrips) {
    // for (Trip thisTrip : arrayListOfTreatedTrips)
    // for (Trip thisTrip1 : arrayListOfOtherTrips) {
    // if (thisTrip.tripNumber.equalsIgnoreCase(thisTrip1.tripNumber))
    // tempArrayListOfTrips.add(thisTrip1);
    // }
    // arrayListOfOtherTrips.removeAll(tempArrayListOfTrips);
    //
    // arrayListOftrips.removeAll(arrayListOftrips);
    // if (!isOnlyUnperformedTrips)
    // arrayListOftrips.addAll(arrayListOfTreatedTrips);
    // arrayListOftrips.addAll(arrayListOfOtherTrips);
    // tripAdapter.sort(new Comparator<Trip>() {
    //
    // @Override
    // public int compare(Trip trip1, Trip trip2) {
    // return trip1.nodeTime.compareTo(trip2.nodeTime);
    // }
    // });
    // arrayListOfOtherTrips.notifyAll();
    // LogException("SYNC: sortTripList-5:" + System.currentTimeMillis()
    // + ", OT: "
    // + arrayListOfOtherTrips.size()
    // + ", TT: "
    // + arrayListOfTreatedTrips.size()
    // + ", AT: "
    // + arrayListOftrips.size());
    //
    // }
    // int tripListSize = Integer.parseInt(AVL_Service.sDMaxLengthOfTripList);
    // int count = 0;
    // ArrayList<Trip> tempArrList = new ArrayList<Trip>();
    // if (arrayListOftrips.size() > tripListSize) {
    // count = arrayListOftrips.size() - tripListSize;
    // for (int i = 0; i < arrayListOftrips.size(); i++) {
    // if (arrayListOftrips.get(i).state.equalsIgnoreCase(States.DROPPED))
    // if (count > 0) {
    // tempArrList.add(arrayListOftrips.get(i));
    // count--;
    // }
    // }
    // }
    // arrayListOftrips.removeAll(tempArrList);
    // arrayListOftrips.notifyAll();
    // }
    // LogException("SYNC: sortTripList-6:" + System.currentTimeMillis()
    // + ", OT: "
    // + arrayListOfOtherTrips.size()
    // + ", TT: "
    // + arrayListOfTreatedTrips.size()
    // + ", AT: "
    // + arrayListOftrips.size());
    //
    // tripAdapter.notifyDataSetChanged();
    //
    // if (arrayListOfOtherTrips.size() > 0) {
    // tripcheck = new HashMap<String, String>();
    // for (Trip thisT : arrayListOfOtherTrips) {
    // if (!tripcheck.containsKey(thisT.ConfirmNumber)) {
    // tripcheck.put(thisT.ConfirmNumber, "");
    //
    // }
    // }
    //
    // tripsbadge.setText(String.valueOf(tripcheck.size()));
    // // tripsbadge.setText(String.valueOf(arrayListOfOtherTrips.size()));
    // tripsbadge.show(true);
    // } else
    // tripsbadge.hide(true);
    //
    // } catch (Exception ex) {
    // handleException("TaxiPlexer: sortTripList\n" + ex.toString());
    // }
    // LogException("SYNC: sortTripList-7:" + System.currentTimeMillis() + ", OT: " + arrayListOfOtherTrips.size() + ", TT: " + arrayListOfTreatedTrips.size() + ", AT: "
    // + arrayListOftrips.size());
    //
    // }

    @SuppressWarnings("unchecked")
    private void sortTripList() {

        Comparator<Trip> comparatorTime = new Comparator<Trip>() {
            @Override
            public int compare(Trip trip1, Trip trip2) {
                return trip1.nodeTime.compareTo(trip2.nodeTime);
            }
        };

        Comparator<Trip> comparatorStatus = new Comparator<Trip>() {
            @Override
            public int compare(Trip trip1, Trip trip2) {
                trip1.stateWeight = States.getWeight(trip1.state);
                trip2.stateWeight = States.getWeight(trip2.state);
                return trip1.stateWeight.compareTo(trip2.stateWeight);
            }
        };

        // Comparator<Trip> comparatorManifestTime = new Comparator<Trip>() {
        // @Override
        // public int compare(Trip trip1, Trip trip2) {
        // return trip1.manifestStartTime.compareTo(trip2.manifestStartTime);
        // }
        // };

        arrayListForAdapter = new ArrayList<Trip>();
        // arrayListOfTreatedTrips = new TripArrayList();
        // arrayListOfOtherTrips = new TripArrayList();
        tripAdapter = new TripAdapter(this, R.layout.trip_row, arrayListForAdapter);
        manifestListView.setAdapter(this.tripAdapter);

        // if (!tripSortOrderclicked) {

        ComparatorChain chain = new ComparatorChain();
        // chain.addComparator(comparatorManifestTime);
        chain.addComparator(comparatorStatus);
        chain.addComparator(comparatorTime);

        synchronized (arrayListOftrips) {
            Collections.sort(arrayListOftrips, chain);
            arrayListOfGroupedManifest = new TripArrayList();
            for (Trip t : arrayListOftrips) {
                t.AlreadyChecked = false;
            }

            for (int x = 0; x < arrayListOftrips.size(); x++) {

                Trip t = arrayListOftrips.get(x);

                ArrayList<Trip> tempA = new ArrayList<Trip>();
                ArrayList<Trip> tempB = new ArrayList<Trip>();

                if (t.AlreadyChecked)
                    continue;

                t.AlreadyChecked = true;
                if (t.bWillCallRequest) {
                    tempB.add(t);
                } else {
                    tempA.add(t);
                }

                if (!t.manifestNum.equalsIgnoreCase("")) {
                    for (int y = x + 1; y < arrayListOftrips.size(); y++) {
                        Trip t1 = arrayListOftrips.get(y);

                        if (!t1.AlreadyChecked) {
                            if (t.manifestNum.equalsIgnoreCase(t1.manifestNum)) {
                                t1.AlreadyChecked = true;
                                if (t1.bWillCallRequest) {
                                    tempB.add(t1);
                                } else {
                                    tempA.add(t1);
                                }
                            }
                        }
                    }
                    ComparatorChain chain1 = new ComparatorChain();
                    // chain.addComparator(comparatorManifestTime);
                    chain1.addComparator(comparatorTime);

                    Collections.sort(tempA, chain1);
                    Collections.sort(tempB, chain1);
                }

                arrayListOfGroupedManifest.addAll(tempA);
                arrayListOfGroupedManifest.addAll(tempB);

            }

            if (isOnlyUnperformedTrips) {

                String lastMF = null;
                int number = 0;
                Trip MFTrip = null;
                for (Trip t : arrayListOfGroupedManifest) {
                    if ((!t.state.equalsIgnoreCase(States.CANCELLED) && !t.state.equalsIgnoreCase(States.DROPPED) && !t.state.equalsIgnoreCase(States.NOSHOW))) {

                        if (lastMF == null) {
                            if (t.manifestNum.equalsIgnoreCase("")) {
                                arrayListForAdapter.add(t);
                                lastMF = t.manifestNum;
                            } else {
                                Trip temp = new Trip("-", number, t.manifestNum, t.PUTime, t.PUzone, t.DOzone);

                                if (!MFView.containsKey(t.manifestNum)) {
                                    MFView.put(t.manifestNum, false);
                                }
                                number++;
                                arrayListForAdapter.add(temp);

                                if (MFView.get(t.manifestNum)) {
                                    Trip temp1 = new Trip(";", number, t.manifestNum, t.PUTime, t.PUzone, t.DOzone);
                                    arrayListForAdapter.add(temp1);
                                }

                                if (MFView.get(t.manifestNum))
                                    arrayListForAdapter.add(t);

                                lastMF = t.manifestNum;
                                MFTrip = temp;
                                MFTrip.state = States.DROPPED;
                                if ((t.state.equalsIgnoreCase(States.ACCEPTED) || t.state.equalsIgnoreCase(States.NOSHOWREQ) || t.state.equalsIgnoreCase(States.CALLOUT)) && !MFTrip.state
                                        .equalsIgnoreCase(States.ATLOCATION)
                                        && !MFTrip.state.equalsIgnoreCase(States.IRTPU)
                                        && !MFTrip.state.equalsIgnoreCase(States.PICKEDUP)) {
                                    MFTrip.state = States.ACCEPTED;

                                } else if (t.state.equalsIgnoreCase(States.ATLOCATION) && !MFTrip.state.equalsIgnoreCase(States.IRTPU) && !MFTrip.state.equalsIgnoreCase(States.PICKEDUP)) {
                                    MFTrip.state = States.ATLOCATION;

                                } else if (t.state.equalsIgnoreCase(States.IRTPU) && !MFTrip.state.equalsIgnoreCase(States.PICKEDUP)) {
                                    MFTrip.state = States.IRTPU;

                                } else if (t.state.equalsIgnoreCase(States.PICKEDUP)) {
                                    MFTrip.state = States.PICKEDUP;

                                } else if ((t.state.equalsIgnoreCase(States.NOSHOW) || t.state.equalsIgnoreCase(States.DROPPED) || t.state.equalsIgnoreCase(States.CANCELLED)) && !MFTrip.state
                                        .equalsIgnoreCase(States.ATLOCATION)
                                        && !MFTrip.state.equalsIgnoreCase(States.IRTPU)
                                        && !MFTrip.state.equalsIgnoreCase(States.PICKEDUP)
                                        && !MFTrip.state.equalsIgnoreCase(States.ACCEPTED)) {
                                    MFTrip.state = States.DROPPED;

                                }

                                if (!t.nodeType.equalsIgnoreCase("DO"))
                                    MFTrip.TripPayStatus = 1;
                                else
                                    MFTrip.TripPayStatus = 0;
                                nextColorIndex++;
                                MFTrip.nodeColor = selectColor(nextColorIndex);
                            }
                        } else {
                            if (!t.manifestNum.equalsIgnoreCase(lastMF)) {
                                Trip temp;
                                if (!t.manifestNum.equalsIgnoreCase("")) {
                                    temp = new Trip("-", number, t.manifestNum, t.PUTime, t.PUzone, t.DOzone);
                                    if (!MFView.containsKey(t.manifestNum)) {
                                        MFView.put(t.manifestNum, false);
                                    }
                                    MFTrip = temp;

                                    MFTrip.state = States.DROPPED;
                                    if ((t.state.equalsIgnoreCase(States.ACCEPTED) || t.state.equalsIgnoreCase(States.NOSHOWREQ) || t.state.equalsIgnoreCase(States.CALLOUT)) && !MFTrip.state
                                            .equalsIgnoreCase(States.ATLOCATION)
                                            && !MFTrip.state.equalsIgnoreCase(States.IRTPU)
                                            && !MFTrip.state.equalsIgnoreCase(States.PICKEDUP)) {
                                        MFTrip.state = States.ACCEPTED;

                                    } else if (t.state.equalsIgnoreCase(States.ATLOCATION) && !MFTrip.state.equalsIgnoreCase(States.IRTPU) && !MFTrip.state.equalsIgnoreCase(States.PICKEDUP)) {
                                        MFTrip.state = States.ATLOCATION;

                                    } else if (t.state.equalsIgnoreCase(States.IRTPU) && !MFTrip.state.equalsIgnoreCase(States.PICKEDUP)) {
                                        MFTrip.state = States.IRTPU;

                                    } else if (t.state.equalsIgnoreCase(States.PICKEDUP)) {
                                        MFTrip.state = States.PICKEDUP;

                                    } else if ((t.state.equalsIgnoreCase(States.NOSHOW) || t.state.equalsIgnoreCase(States.DROPPED) || t.state.equalsIgnoreCase(States.CANCELLED)) && !MFTrip.state
                                            .equalsIgnoreCase(States.ATLOCATION)
                                            && !MFTrip.state.equalsIgnoreCase(States.IRTPU)
                                            && !MFTrip.state.equalsIgnoreCase(States.PICKEDUP)
                                            && !MFTrip.state.equalsIgnoreCase(States.ACCEPTED)) {
                                        MFTrip.state = States.DROPPED;

                                    }

                                    if (!t.nodeType.equalsIgnoreCase("DO"))
                                        MFTrip.TripPayStatus = 1;
                                    else
                                        MFTrip.TripPayStatus = 0;
                                    nextColorIndex++;
                                    MFTrip.nodeColor = selectColor(nextColorIndex);
                                } else {
                                    temp = new Trip(";", number, t.manifestNum, t.PUTime, t.PUzone, t.DOzone);
                                    MFTrip = null;
                                }

                                number++;
                                if (MFTrip == null && !MFView.get(lastMF)) {

                                } else if (MFTrip != null) {
                                    if (lastMF != null && !lastMF.equalsIgnoreCase(""))
                                        if (MFView.get(lastMF)) {
                                            Trip temp2 = new Trip(";", number, t.manifestNum, t.PUTime, t.PUzone, t.DOzone);
                                            arrayListForAdapter.add(temp2);
                                        }
                                    arrayListForAdapter.add(temp);
                                    if (MFView.get(t.manifestNum)) {
                                        Trip temp1 = new Trip(";", number, t.manifestNum, t.PUTime, t.PUzone, t.DOzone);
                                        arrayListForAdapter.add(temp1);
                                    }
                                } else
                                    arrayListForAdapter.add(temp);
                                if (!t.manifestNum.equalsIgnoreCase("")) {
                                    if (MFView.get(t.manifestNum))
                                        arrayListForAdapter.add(t);
                                } else
                                    arrayListForAdapter.add(t);

                                lastMF = t.manifestNum;
                            } else {
                                if (!t.manifestNum.equalsIgnoreCase("")) {
                                    if (MFView.get(t.manifestNum))
                                        arrayListForAdapter.add(t);
                                } else
                                    arrayListForAdapter.add(t);
                                lastMF = t.manifestNum;

                                if (MFTrip != null) {

                                    if ((t.state.equalsIgnoreCase(States.ACCEPTED) || t.state.equalsIgnoreCase(States.NOSHOWREQ) || t.state.equalsIgnoreCase(States.CALLOUT)) && !MFTrip.state
                                            .equalsIgnoreCase(States.ATLOCATION)
                                            && !MFTrip.state.equalsIgnoreCase(States.IRTPU)
                                            && !MFTrip.state.equalsIgnoreCase(States.PICKEDUP)) {
                                        MFTrip.state = States.ACCEPTED;

                                    } else if (t.state.equalsIgnoreCase(States.ATLOCATION) && !MFTrip.state.equalsIgnoreCase(States.IRTPU) && !MFTrip.state.equalsIgnoreCase(States.PICKEDUP)) {
                                        MFTrip.state = States.ATLOCATION;

                                    } else if (t.state.equalsIgnoreCase(States.IRTPU) && !MFTrip.state.equalsIgnoreCase(States.PICKEDUP)) {
                                        MFTrip.state = States.IRTPU;

                                    } else if (t.state.equalsIgnoreCase(States.PICKEDUP)) {
                                        MFTrip.state = States.PICKEDUP;

                                    } else if ((t.state.equalsIgnoreCase(States.NOSHOW) || t.state.equalsIgnoreCase(States.DROPPED) || t.state.equalsIgnoreCase(States.CANCELLED)) && !MFTrip.state
                                            .equalsIgnoreCase(States.ATLOCATION)
                                            && !MFTrip.state.equalsIgnoreCase(States.IRTPU)
                                            && !MFTrip.state.equalsIgnoreCase(States.PICKEDUP)
                                            && !MFTrip.state.equalsIgnoreCase(States.ACCEPTED)) {
                                        MFTrip.state = States.DROPPED;

                                    }

                                    if (!t.nodeType.equalsIgnoreCase("DO"))
                                        MFTrip.TripPayStatus++;
                                    if (t.bWillCallRequest == false) {
                                        if (t.PUTime.before(MFTrip.PUTime)) {
                                            MFTrip.PUTime = t.PUTime;
                                            MFTrip.PUzone = t.PUzone;
                                        }

                                        if (MFTrip.DOTime.before(t.PUTime)) {
                                            MFTrip.DOTime = t.PUTime;
                                            MFTrip.DOzone = t.DOzone;
                                        }
                                    }
                                }
                            }
                        }

                    }

                }
                if (lastMF != null) {
                    if (!lastMF.equalsIgnoreCase("")) {
                        if (MFView.get(lastMF)) {
                            Trip temp1 = new Trip(";", 50, "", new Date(), "", "");
                            arrayListForAdapter.add(temp1);
                        }
                    }
                }
            } else {

                String lastMF = null;
                int number = 0;
                Trip MFTrip = null;
                for (Trip t : arrayListOfGroupedManifest) {

                    if (lastMF == null) {
                        if (t.manifestNum.equalsIgnoreCase("")) {
                            arrayListForAdapter.add(t);
                            lastMF = t.manifestNum;
                        } else {
                            Trip temp = new Trip("-", number, t.manifestNum, t.PUTime, t.PUzone, t.DOzone);

                            if (!MFView.containsKey(t.manifestNum)) {
                                MFView.put(t.manifestNum, false);
                            }
                            number++;
                            arrayListForAdapter.add(temp);

                            if (MFView.get(t.manifestNum)) {
                                Trip temp1 = new Trip(";", number, t.manifestNum, t.PUTime, t.PUzone, t.DOzone);
                                arrayListForAdapter.add(temp1);
                            }

                            if (MFView.get(t.manifestNum))
                                arrayListForAdapter.add(t);

                            lastMF = t.manifestNum;
                            MFTrip = temp;
                            MFTrip.state = States.DROPPED;
                            if ((t.state.equalsIgnoreCase(States.ACCEPTED) || t.state.equalsIgnoreCase(States.NOSHOWREQ) || t.state.equalsIgnoreCase(States.CALLOUT)) && !MFTrip.state
                                    .equalsIgnoreCase(States.ATLOCATION)
                                    && !MFTrip.state.equalsIgnoreCase(States.IRTPU)
                                    && !MFTrip.state.equalsIgnoreCase(States.PICKEDUP)) {
                                MFTrip.state = States.ACCEPTED;

                            } else if (t.state.equalsIgnoreCase(States.ATLOCATION) && !MFTrip.state.equalsIgnoreCase(States.IRTPU) && !MFTrip.state.equalsIgnoreCase(States.PICKEDUP)) {
                                MFTrip.state = States.ATLOCATION;

                            } else if (t.state.equalsIgnoreCase(States.IRTPU) && !MFTrip.state.equalsIgnoreCase(States.PICKEDUP)) {
                                MFTrip.state = States.IRTPU;

                            } else if (t.state.equalsIgnoreCase(States.PICKEDUP)) {
                                MFTrip.state = States.PICKEDUP;

                            } else if ((t.state.equalsIgnoreCase(States.NOSHOW) || t.state.equalsIgnoreCase(States.DROPPED) || t.state.equalsIgnoreCase(States.CANCELLED)) && !MFTrip.state
                                    .equalsIgnoreCase(States.ATLOCATION)
                                    && !MFTrip.state.equalsIgnoreCase(States.IRTPU)
                                    && !MFTrip.state.equalsIgnoreCase(States.PICKEDUP)
                                    && !MFTrip.state.equalsIgnoreCase(States.ACCEPTED)) {
                                MFTrip.state = States.DROPPED;

                            }

                            if (!t.nodeType.equalsIgnoreCase("DO"))
                                MFTrip.TripPayStatus = 1;
                            else
                                MFTrip.TripPayStatus = 0;
                            nextColorIndex++;
                            MFTrip.nodeColor = selectColor(nextColorIndex);
                        }
                    } else {
                        if (!t.manifestNum.equalsIgnoreCase(lastMF)) {
                            Trip temp;
                            if (!t.manifestNum.equalsIgnoreCase("")) {
                                temp = new Trip("-", number, t.manifestNum, t.PUTime, t.PUzone, t.DOzone);
                                if (!MFView.containsKey(t.manifestNum)) {
                                    MFView.put(t.manifestNum, false);
                                }
                                MFTrip = temp;

                                MFTrip.state = States.DROPPED;
                                if ((t.state.equalsIgnoreCase(States.ACCEPTED) || t.state.equalsIgnoreCase(States.NOSHOWREQ) || t.state.equalsIgnoreCase(States.CALLOUT)) && !MFTrip.state
                                        .equalsIgnoreCase(States.ATLOCATION)
                                        && !MFTrip.state.equalsIgnoreCase(States.IRTPU)
                                        && !MFTrip.state.equalsIgnoreCase(States.PICKEDUP)) {
                                    MFTrip.state = States.ACCEPTED;

                                } else if (t.state.equalsIgnoreCase(States.ATLOCATION) && !MFTrip.state.equalsIgnoreCase(States.IRTPU) && !MFTrip.state.equalsIgnoreCase(States.PICKEDUP)) {
                                    MFTrip.state = States.ATLOCATION;

                                } else if (t.state.equalsIgnoreCase(States.IRTPU) && !MFTrip.state.equalsIgnoreCase(States.PICKEDUP)) {
                                    MFTrip.state = States.IRTPU;

                                } else if (t.state.equalsIgnoreCase(States.PICKEDUP)) {
                                    MFTrip.state = States.PICKEDUP;

                                } else if ((t.state.equalsIgnoreCase(States.NOSHOW) || t.state.equalsIgnoreCase(States.DROPPED) || t.state.equalsIgnoreCase(States.CANCELLED)) && !MFTrip.state
                                        .equalsIgnoreCase(States.ATLOCATION)
                                        && !MFTrip.state.equalsIgnoreCase(States.IRTPU)
                                        && !MFTrip.state.equalsIgnoreCase(States.PICKEDUP)
                                        && !MFTrip.state.equalsIgnoreCase(States.ACCEPTED)) {
                                    MFTrip.state = States.DROPPED;

                                }

                                if (!t.nodeType.equalsIgnoreCase("DO"))
                                    MFTrip.TripPayStatus = 1;
                                else
                                    MFTrip.TripPayStatus = 0;
                                nextColorIndex++;
                                MFTrip.nodeColor = selectColor(nextColorIndex);
                            } else {
                                temp = new Trip(";", number, t.manifestNum, t.PUTime, t.PUzone, t.DOzone);
                                MFTrip = null;
                            }

                            number++;
                            if (MFTrip == null && !MFView.get(lastMF)) {

                            } else if (MFTrip != null) {
                                if (lastMF != null && !lastMF.equalsIgnoreCase(""))
                                    if (MFView.get(lastMF)) {
                                        Trip temp2 = new Trip(";", number, t.manifestNum, t.PUTime, t.PUzone, t.DOzone);
                                        arrayListForAdapter.add(temp2);
                                    }
                                arrayListForAdapter.add(temp);
                                if (MFView.get(t.manifestNum)) {
                                    Trip temp1 = new Trip(";", number, t.manifestNum, t.PUTime, t.PUzone, t.DOzone);
                                    arrayListForAdapter.add(temp1);
                                }
                            } else
                                arrayListForAdapter.add(temp);
                            if (!t.manifestNum.equalsIgnoreCase("")) {
                                if (MFView.get(t.manifestNum))
                                    arrayListForAdapter.add(t);
                            } else
                                arrayListForAdapter.add(t);

                            lastMF = t.manifestNum;
                        } else {
                            if (!t.manifestNum.equalsIgnoreCase("")) {
                                if (MFView.get(t.manifestNum))
                                    arrayListForAdapter.add(t);
                            } else
                                arrayListForAdapter.add(t);
                            lastMF = t.manifestNum;

                            if (MFTrip != null) {

                                if ((t.state.equalsIgnoreCase(States.ACCEPTED) || t.state.equalsIgnoreCase(States.NOSHOWREQ) || t.state.equalsIgnoreCase(States.CALLOUT)) && !MFTrip.state
                                        .equalsIgnoreCase(States.ATLOCATION)
                                        && !MFTrip.state.equalsIgnoreCase(States.IRTPU)
                                        && !MFTrip.state.equalsIgnoreCase(States.PICKEDUP)) {
                                    MFTrip.state = States.ACCEPTED;

                                } else if (t.state.equalsIgnoreCase(States.ATLOCATION) && !MFTrip.state.equalsIgnoreCase(States.IRTPU) && !MFTrip.state.equalsIgnoreCase(States.PICKEDUP)) {
                                    MFTrip.state = States.ATLOCATION;

                                } else if (t.state.equalsIgnoreCase(States.IRTPU) && !MFTrip.state.equalsIgnoreCase(States.PICKEDUP)) {
                                    MFTrip.state = States.IRTPU;

                                } else if (t.state.equalsIgnoreCase(States.PICKEDUP)) {
                                    MFTrip.state = States.PICKEDUP;

                                } else if ((t.state.equalsIgnoreCase(States.NOSHOW) || t.state.equalsIgnoreCase(States.DROPPED) || t.state.equalsIgnoreCase(States.CANCELLED)) && !MFTrip.state
                                        .equalsIgnoreCase(States.ATLOCATION)
                                        && !MFTrip.state.equalsIgnoreCase(States.IRTPU)
                                        && !MFTrip.state.equalsIgnoreCase(States.PICKEDUP)
                                        && !MFTrip.state.equalsIgnoreCase(States.ACCEPTED)) {
                                    MFTrip.state = States.DROPPED;

                                }

                                if (!t.nodeType.equalsIgnoreCase("DO"))
                                    MFTrip.TripPayStatus++;
                                if (t.bWillCallRequest == false) {
                                    if (t.PUTime.before(MFTrip.PUTime)) {
                                        MFTrip.PUTime = t.PUTime;
                                        MFTrip.PUzone = t.PUzone;
                                    }

                                    if (MFTrip.DOTime.before(t.PUTime)) {
                                        MFTrip.DOTime = t.PUTime;
                                        MFTrip.DOzone = t.DOzone;
                                    }
                                }
                            }
                        }
                    }

                }
                if (lastMF != null) {
                    if (!lastMF.equalsIgnoreCase("")) {
                        if (MFView.get(lastMF)) {
                            Trip temp1 = new Trip(";", 50, "", new Date(), "", "");
                            arrayListForAdapter.add(temp1);
                        }
                    }
                }
            }
            tripAdapter.notifyDataSetChanged();
        }

        // } else if (tripSortOrderclicked) {
        //
        // ComparatorChain chain = new ComparatorChain();
        // chain.addComparator(comparatorManifestTime);
        // chain.addComparator(comparatorStatus);
        // chain.addComparator(comparatorTime);
        //
        // synchronized (arrayListOftrips) {
        // Collections.sort(arrayListOftrips, chain);
        //
        // if (isOnlyUnperformedTrips) {
        //
        // String lastMF = null;
        // int number = 0;
        // Trip MFTrip = null;
        // for (Trip t : arrayListOftrips) {
        // if ((!t.state.equalsIgnoreCase(States.CANCELLED) && !t.state.equalsIgnoreCase(States.DROPPED) && !t.state.equalsIgnoreCase(States.NOSHOW))) {
        //
        // if (lastMF == null) {
        // if (t.manifestNum.equalsIgnoreCase("")) {
        // arrayListForAdapter.add(t);
        // lastMF = t.manifestNum;
        // } else {
        // Trip temp = new Trip("-", number, t.manifestNum, t.PUTime, t.PUzone, t.DOzone);
        //
        // if (!MFView.containsKey(t.manifestNum)) {
        // MFView.put(t.manifestNum, false);
        // }
        // number++;
        // arrayListForAdapter.add(temp);
        //
        // if (MFView.get(t.manifestNum)) {
        // Trip temp1 = new Trip(";", number, t.manifestNum, t.PUTime, t.PUzone, t.DOzone);
        // arrayListForAdapter.add(temp1);
        // }
        //
        // if (MFView.get(t.manifestNum))
        // arrayListForAdapter.add(t);
        //
        // lastMF = t.manifestNum;
        // MFTrip = temp;
        // if (!t.nodeType.equalsIgnoreCase("DO"))
        // MFTrip.TripPayStatus = 1;
        // else
        // MFTrip.TripPayStatus = 0;
        // nextColorIndex++;
        // MFTrip.nodeColor = selectColor(nextColorIndex);
        // }
        // } else {
        // if (!t.manifestNum.equalsIgnoreCase(lastMF)) {
        // Trip temp;
        // if (!t.manifestNum.equalsIgnoreCase("")) {
        // temp = new Trip("-", number, t.manifestNum, t.PUTime, t.PUzone, t.DOzone);
        // if (!MFView.containsKey(t.manifestNum)) {
        // MFView.put(t.manifestNum, false);
        // }
        // MFTrip = temp;
        // if (!t.nodeType.equalsIgnoreCase("DO"))
        // MFTrip.TripPayStatus = 1;
        // else
        // MFTrip.TripPayStatus = 0;
        // nextColorIndex++;
        // MFTrip.nodeColor = selectColor(nextColorIndex);
        // } else {
        // temp = new Trip(";", number, t.manifestNum, t.PUTime, t.PUzone, t.DOzone);
        // MFTrip = null;
        // }
        //
        // number++;
        // if (MFTrip == null && !MFView.get(lastMF)) {
        //
        // } else if (MFTrip != null) {
        // arrayListForAdapter.add(temp);
        // if (MFView.get(t.manifestNum)) {
        // Trip temp1 = new Trip(";", number, t.manifestNum, t.PUTime, t.PUzone, t.DOzone);
        // arrayListForAdapter.add(temp1);
        // }
        // } else
        // arrayListForAdapter.add(temp);
        // if (!t.manifestNum.equalsIgnoreCase("")) {
        // if (MFView.get(t.manifestNum))
        // arrayListForAdapter.add(t);
        // } else
        // arrayListForAdapter.add(t);
        //
        // lastMF = t.manifestNum;
        // } else {
        // if (!t.manifestNum.equalsIgnoreCase("")) {
        // if (MFView.get(t.manifestNum))
        // arrayListForAdapter.add(t);
        // } else
        // arrayListForAdapter.add(t);
        // lastMF = t.manifestNum;
        //
        // if (MFTrip != null) {
        // if (!t.nodeType.equalsIgnoreCase("DO"))
        // MFTrip.TripPayStatus++;
        // if (t.PUTime.before(MFTrip.PUTime)) {
        // MFTrip.PUTime = t.PUTime;
        // MFTrip.PUzone = t.PUzone;
        // }
        //
        // if (MFTrip.DOTime.before(t.PUTime)) {
        // MFTrip.DOTime = t.PUTime;
        // MFTrip.DOzone = t.DOzone;
        // }
        // }
        // }
        // }
        //
        // }
        //
        // }
        // if (!lastMF.equalsIgnoreCase("")) {
        // if (MFView.get(lastMF)) {
        // Trip temp1 = new Trip(";", 50, "", new Date(), "", "");
        // arrayListForAdapter.add(temp1);
        // }
        // }
        //
        // } else {
        //
        // String lastMF = null;
        // int number = 0;
        // Trip MFTrip = null;
        // for (Trip t : arrayListOftrips) {
        //
        // if (lastMF == null) {
        // if (t.manifestNum.equalsIgnoreCase("")) {
        // arrayListForAdapter.add(t);
        // lastMF = t.manifestNum;
        // } else {
        // Trip temp = new Trip("-", number, t.manifestNum, t.PUTime, t.PUzone, t.DOzone);
        // if (!MFView.containsKey(t.manifestNum)) {
        // MFView.put(t.manifestNum, false);
        // }
        // number++;
        // arrayListForAdapter.add(temp);
        //
        // if (MFView.get(t.manifestNum)) {
        // Trip temp1 = new Trip(";", number, t.manifestNum, t.PUTime, t.PUzone, t.DOzone);
        // arrayListForAdapter.add(temp1);
        // }
        // if (MFView.get(t.manifestNum))
        // arrayListForAdapter.add(t);
        // lastMF = t.manifestNum;
        // MFTrip = temp;
        // if (!t.nodeType.equalsIgnoreCase("DO"))
        // MFTrip.TripPayStatus = 1;
        // else
        // MFTrip.TripPayStatus = 0;
        // nextColorIndex++;
        // MFTrip.nodeColor = selectColor(nextColorIndex);
        // }
        // } else {
        // if (!t.manifestNum.equalsIgnoreCase(lastMF)) {
        // Trip temp;
        //
        // if (!t.manifestNum.equalsIgnoreCase("")) {
        // temp = new Trip("-", number, t.manifestNum, t.PUTime, t.PUzone, t.DOzone);
        // if (!MFView.containsKey(t.manifestNum)) {
        // MFView.put(t.manifestNum, false);
        // }
        // MFTrip = temp;
        // if (!t.nodeType.equalsIgnoreCase("DO"))
        // MFTrip.TripPayStatus = 1;
        // else
        // MFTrip.TripPayStatus = 0;
        // nextColorIndex++;
        // MFTrip.nodeColor = selectColor(nextColorIndex);
        // } else {
        // temp = new Trip(";", number, t.manifestNum, t.PUTime, t.PUzone, t.DOzone);
        // MFTrip = null;
        // }
        //
        // number++;
        //
        // if (MFTrip == null && !MFView.get(lastMF)) {
        //
        // } else if (MFTrip != null) {
        // arrayListForAdapter.add(temp);
        // if (MFView.get(t.manifestNum)) {
        // Trip temp1 = new Trip(";", number, t.manifestNum, t.PUTime, t.PUzone, t.DOzone);
        // arrayListForAdapter.add(temp1);
        // }
        // } else
        // arrayListForAdapter.add(temp);
        //
        // if (!t.manifestNum.equalsIgnoreCase("")) {
        // if (MFView.get(t.manifestNum))
        // arrayListForAdapter.add(t);
        // } else
        // arrayListForAdapter.add(t);
        // lastMF = t.manifestNum;
        // } else {
        // if (!t.manifestNum.equalsIgnoreCase("")) {
        // if (MFView.get(t.manifestNum))
        // arrayListForAdapter.add(t);
        // } else
        // arrayListForAdapter.add(t);
        // lastMF = t.manifestNum;
        //
        // if (MFTrip != null) {
        // if (!t.nodeType.equalsIgnoreCase("DO"))
        // MFTrip.TripPayStatus++;
        // if (t.PUTime.before(MFTrip.PUTime)) {
        // MFTrip.PUTime = t.PUTime;
        // MFTrip.PUzone = t.PUzone;
        // }
        //
        // if (MFTrip.DOTime.before(t.PUTime)) {
        // MFTrip.DOTime = t.PUTime;
        // MFTrip.DOzone = t.DOzone;
        // }
        // }
        // }
        // }
        //
        // }
        // if (!lastMF.equalsIgnoreCase("")) {
        // if (MFView.get(lastMF)) {
        // Trip temp1 = new Trip(";", 50, "", new Date(), "", "");
        // arrayListForAdapter.add(temp1);
        // }
        // }
        // }
        //
        // tripAdapter.notifyDataSetChanged();
        // }
        //
        // }

    }
    /*--------------------------------------------------------------setAppState---------------------------------------------------------------------*/
    private void setAppState() throws ParseException {
        try {
            state = States.VACANT;
            tripsPending = 0;
            tripsIRTPU = 0;
            tripsIRTDO = 0;
            nextServLat = "0";
            nextServLong = "0";
            NextServZone = "Unknown";
            nextServTime = MRMS_DateFormat.parse("235959 12319999");

            if (tripAdapter != null) {
                // tripAdapter.notifyDataSetChanged();
                sortTripList();

                for (Trip thisTrip : arrayListOftrips) {
                    // counting the Pending, IRTPU and IRTDO Trips
                    if (thisTrip.nodeType.equalsIgnoreCase("PU") || thisTrip.nodeType.equalsIgnoreCase("PU\nDO")) {
                        if (thisTrip.state.equalsIgnoreCase(States.ACCEPTED))
                            ++tripsPending;
                        else if (thisTrip.state.equalsIgnoreCase(States.IRTPU) || thisTrip.state.equalsIgnoreCase(States.ATLOCATION)
                                || thisTrip.state.equalsIgnoreCase(States.CALLOUT)
                                || thisTrip.state.equalsIgnoreCase(States.NOSHOWREQ))
                            ++tripsIRTPU;
                        else if (thisTrip.state.equalsIgnoreCase(States.PICKEDUP))
                            ++tripsIRTDO;
                    }
                    // Setting the state of the application
                    if (States.getWeight(thisTrip.state) > States.getWeight(state))
                        state = thisTrip.state;

                    // looking for the Trips with IRTPU and PICKEDUP state only
                    if (thisTrip.state.equalsIgnoreCase(States.IRTPU) || thisTrip.state.equalsIgnoreCase(States.CALLOUT)
                            || thisTrip.state.equalsIgnoreCase(States.NOSHOWREQ)
                            || thisTrip.state.equalsIgnoreCase(States.ACCEPTED)) {
                        if (thisTrip.PUTime.before(nextServTime)) {
                            nextServTime = thisTrip.PUTime;
                            nextServLat = thisTrip.PUlat;
                            nextServLong = thisTrip.PUlong;
                            NextServZone = thisTrip.PUzone;
                        }
                    } else if (thisTrip.state.equalsIgnoreCase(States.PICKEDUP)) {
                        if (thisTrip.DOTime.before(nextServTime)) {
                            nextServTime = thisTrip.DOTime;
                            nextServLat = thisTrip.DOlat;
                            nextServLong = thisTrip.DOlong;
                            NextServZone = thisTrip.DOzone;
                        }
                    }

                }// for
            }// if
            AVL_Service.pref.edit().putString("TripsPending", Integer.toString(tripsPending)).putString("TripsIRTPU", Integer.toString(tripsIRTPU)).putString(
                    "TripsIRTDO",
                    Integer.toString(tripsIRTDO)).commit();

            // if the state is callout
            if (States.getWeight(state) == 3)
                state = States.IRTPU;

        } catch (Exception ex) {
            LogException("[Exception in SetAppState]" + "[SetAppState]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }
    /*--------------------------------------------------------------pickedUp------------------------------------------------------------------------*/
    private void PickUp() {
        try {
            if (AVL_Service.enableDialiePackageOnDevice && currentTrip != null)
                HiredFrameForDispatch(currentTrip.clientName, currentTrip.PUaddress, currentTrip.PUlat, currentTrip.PUlong, currentTrip.DOaddress, currentTrip.DOlat, currentTrip.DOlong);
            pickedUp();

        } catch (Exception ex) {
            LogException("[Exception in PickUp]" + "[PickUp]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }
    /*--------------------------------------------------------------pickedUp------------------------------------------------------------------------*/
    @SuppressWarnings("deprecation")
    @SuppressLint("NewApi")
    protected void pickedUp() {
        try {
            SetApplicationLocal();
            Date date = new Date();
            if (currentTrip != null) {
                if (!currentTrip.promptInquiryDialog && currentTrip.paymentMethod.equalsIgnoreCase("Call& R-V") && !currentTrip.state.equalsIgnoreCase(States.PICKEDUP)) {
                    AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                    builder.setIcon(android.R.drawable.ic_dialog_alert).setTitle(Farsi.Convert(getResources().getString(R.string.Attention))).setMessage(
                            Farsi.Convert(getResources().getString(R.string.Please_scan))).setPositiveButton(
                            Farsi.Convert(getResources().getString(R.string.Cancel)),
                            new DialogInterface.OnClickListener() {

                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    dialog.dismiss();

                                }
                            });
                    preInquiryDialog = builder.create();
                    preInquiryDialog.show();

                    dialogFontSize(preInquiryDialog);
                }
                if (currentTrip.state.equalsIgnoreCase(States.IRTPU) || currentTrip.state.equalsIgnoreCase(States.CALLOUT)
                        || currentTrip.state.equalsIgnoreCase(States.ACCEPTED)
                        || currentTrip.state.equalsIgnoreCase(States.ATLOCATION)
                        || currentTrip.state.equalsIgnoreCase(States.NOSHOWREQ)) {

                    currentTrip.PUTime = date;
                    double distance = DistanceCalculator.CalculateDistance(Double.valueOf(AVL_Service.pref.getString("LastLatitude", "0")), Double.valueOf(AVL_Service.pref.getString(
                            "LastLongitude",
                            "0")), Double.valueOf(currentTrip.PUlat), Double.valueOf(currentTrip.PUlong));
                    if (distance < AVL_Service.pref.getLong(Constants.Allowable_Stand_Distance, 900)) {
                        ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
                        scheduler.schedule(new Runnable() {

                            @Override
                            public void run() {

                                runOnUiThread(new Runnable() {
                                    public void run() {
                                        DroppedButton.setEnabled(true);
                                    }
                                });

                            }
                        }, AVL_Service.pref.getInt("BtnDisableTime", 10), TimeUnit.SECONDS);
                        drawable = NoShowButton.getBackground();
                        drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
                        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                            NoShowButton.setBackground(drawable);
                        else
                            NoShowButton.setBackgroundDrawable(drawable);

                        sendTripResponse(States.PICKEDUP);
                        enableTripView();

                        drawable = PickedButton.getBackground();
                        drawable.setColorFilter(Color.GREEN, Mode.SRC_IN);
                        // drawable.setColorFilter(0xFFFF0000, android.graphics.PorterDuff.Mode.MULTIPLY); // Azhar
                        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                            PickedButton.setBackground(drawable);
                        else
                            PickedButton.setBackgroundDrawable(drawable);
                        if (AVL_Service.PPV_UsePPVModule) {

                            ScheduledExecutorService scheduler1 = Executors.newSingleThreadScheduledExecutor();
                            scheduler1.schedule(new Runnable() {

                                @Override
                                public void run() {
                                    runOnUiThread(new Runnable() {
                                        public void run() {
                                            GetBalanceAndBlackListStatus(2);
                                        }
                                    });

                                }
                            }, 5, TimeUnit.SECONDS);
                        }

                        if (AVL_Service.pref.getBoolean("VivotechDevice", false) && checkVivoConnectivity())
                            VivotechScreen.showScreen(Screen.WELCOME);

                        if (AVL_Service.SDEnableOdometerInput == 1) {
                            Date dateodo = new Date();
                            if(dbh.checkExist(currentTrip.tripNumber) == 0)
                            dbh.insertvalue(currentTrip.tripNumber,displayDateFormat.format(dateodo),currentTrip.odoMeterStartValue, currentTrip.odoMeterEndValue);
                            odoMeterDialog = new AlertDialog.Builder(this).setView(createOdoCountDialogView(1)).setCancelable(false).create();
                            if(!odoMeterDialog.isShowing())
                            odoMeterDialog.show();
                        }
                    } else {
                        if (AVL_Service.NotAllowActionIfAway.charAt(0) == '0' || AVL_Service.locManager.isProviderEnabled(LocationManager.GPS_PROVIDER) == false) {
                            PickupUPDistanceDialog = new AlertDialog.Builder(TaxiPlexer.this).setIcon(android.R.drawable.ic_dialog_alert).setTitle(
                                    Farsi.Convert(getResources().getString(R.string.PickupConfirmation))).setMessage(
                                    (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("mile")) ? String.format(Farsi.Convert(getResources().getString(R.string.MilesAwayFromPickup)), dFormat
                                            .format(distance / 1609)) : String.format(Farsi.Convert(getResources().getString(R.string.kmsAwayFromPickup)), dFormat.format(distance / 1000))).setPositiveButton(
                                    Farsi.Convert(getResources().getString(R.string.Yes)),
                                    new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int which) {
                                            ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
                                            scheduler.schedule(new Runnable() {

                                                @Override
                                                public void run() {

                                                    runOnUiThread(new Runnable() {
                                                        public void run() {
                                                            DroppedButton.setEnabled(true);
                                                        }
                                                    });

                                                }
                                            }, AVL_Service.pref.getInt("BtnDisableTime", 10), TimeUnit.SECONDS);
                                            drawable = NoShowButton.getBackground();
                                            drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
                                            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                                                NoShowButton.setBackground(drawable);
                                            else
                                                NoShowButton.setBackgroundDrawable(drawable);
                                            if (AVL_Service.ShowTogglePickUpDropOffBTN)
                                                PickedButton.setText(Farsi.Convert(getResources().getString(R.string.Payment)));
                                            if (AVL_Service.enableDialiePackageOnDevice)
                                                HiredFrame();
                                            sendTripResponse(States.PICKEDUP);
                                            if (AVL_Service.PPV_UsePPVModule) {

                                                ScheduledExecutorService scheduler1 = Executors.newSingleThreadScheduledExecutor();
                                                scheduler1.schedule(new Runnable() {

                                                    @Override
                                                    public void run() {
                                                        runOnUiThread(new Runnable() {
                                                            public void run() {
                                                                GetBalanceAndBlackListStatus(2);
                                                            }
                                                        });

                                                    }
                                                }, 5, TimeUnit.SECONDS);
                                            }
                                            enableTripView();

                                            if (!AVL_Service.ShowTogglePickUpDropOffBTN) {
                                                drawable = PickedButton.getBackground();
                                                drawable.setColorFilter(Color.GREEN, Mode.SRC_IN);
                                                // drawable.setColorFilter(0xFFFF0000, android.graphics.PorterDuff.Mode.MULTIPLY); // Azhar
                                                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                                                    PickedButton.setBackground(drawable);
                                                else
                                                    PickedButton.setBackgroundDrawable(drawable);
                                            }
                                            if (TripSelectedFromMeterPickUp) {
                                                ScheduledExecutorService scheduler1 = Executors.newSingleThreadScheduledExecutor();
                                                scheduler1.schedule(new Runnable() {

                                                    @Override
                                                    public void run() {

                                                        runOnUiThread(new Runnable() {
                                                            public void run() {
                                                                DroppedButton.setEnabled(true);
                                                            }
                                                        });

                                                    }
                                                }, AVL_Service.pref.getInt("BtnDisableTime", 10), TimeUnit.SECONDS);
                                            }

                                            if (AVL_Service.pref.getBoolean("VivotechDevice", false) && checkVivoConnectivity())
                                                VivotechScreen.showScreen(Screen.WELCOME);
                                            if (AVL_Service.SDEnableOdometerInput == 1) {
                                                Date dateodo = new Date();
                                                if(dbh.checkExist(currentTrip.tripNumber) == 0)
                                                dbh.insertvalue(currentTrip.tripNumber,displayDateFormat.format(dateodo),currentTrip.odoMeterStartValue, currentTrip.odoMeterEndValue);
                                                odoMeterDialog = new AlertDialog.Builder(TaxiPlexer.this).setView(createOdoCountDialogView(1)).setCancelable(false).create();
                                                if(!odoMeterDialog.isShowing())
                                                    odoMeterDialog.show();
                                            }
                                        } // onClick

                                    }).setNegativeButton(Farsi.Convert(getResources().getString(R.string.No)), new DialogInterface.OnClickListener() {

                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    if (TripSelectedFromMeterPickUp) {
                                        currentTrip = null;
                                        setContentView(mainView);
                                        currentView = mainView;
                                        tripAdapter.notifyDataSetChanged();
                                        dialog.dismiss();
                                        TripNoListDialog = new AlertDialog.Builder(TaxiPlexer.this).setView(CreateListViewControls()).setCancelable(true).create();
                                        TripNoListDialog.show();
                                        TripSelectedFromMeterPickUp = false;
                                    } else
                                        dialog.dismiss();
                                    // Azhar
                                }
                            }).create();
                            PickupUPDistanceDialog.show();
                            dialogFontSize(PickupUPDistanceDialog);
                        } else {
                            if (AVL_Service.MessageTypeIfActionNotAllowed.charAt(0) == '1') {
                                PickupUPDistanceDialog = new AlertDialog.Builder(TaxiPlexer.this)
                                        .setIcon(android.R.drawable.ic_dialog_alert)
                                        .setTitle(Farsi.Convert(getResources().getString(R.string.PickupMessage)))
                                        .setMessage(
                                                (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("mile")) ? String.format(Farsi.Convert(getResources().getString(R.string.UnableToPerformPickupMiles)), dFormat
                                                        .format(distance / 1609)) : String.format(Farsi.Convert(getResources().getString(R.string.UnableToPerformPickupKms)), dFormat.format(distance / 1000)))
                                        .setPositiveButton(Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {
                                            @Override
                                            public void onClick(DialogInterface dialog, int which) {
                                                if (TripSelectedFromMeterPickUp) {
                                                    currentTrip = null;
                                                    setContentView(mainView);
                                                    currentView = mainView;
                                                    tripAdapter.notifyDataSetChanged();
                                                    dialog.dismiss();
                                                    TripNoListDialog = new AlertDialog.Builder(TaxiPlexer.this).setView(CreateListViewControls()).setCancelable(true).create();
                                                    TripNoListDialog.show();

                                                    dialogFontSize(TripNoListDialog);
                                                    TripSelectedFromMeterPickUp = false;
                                                } else
                                                    dialog.dismiss();
                                            } // onClick

                                        })
                                        .create();
                                PickupUPDistanceDialog.show();
                                dialogFontSize(PickupUPDistanceDialog);
                            } else {
                                Toast.makeText(
                                        getApplicationContext(),
                                        (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("mile")) ? String.format(Farsi.Convert(getResources().getString(R.string.UnableToPerformPickupMiles)), dFormat
                                                .format(distance / 1609)) : String.format(Farsi.Convert(getResources().getString(R.string.UnableToPerformPickupKms)), dFormat.format(distance / 1000)),
                                        Toast.LENGTH_SHORT).show();
                            }
                        }

                    }

                } else if (currentTrip.state.equalsIgnoreCase(States.PICKEDUP))
                    // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.AlreadyPickedUp)), Toast.LENGTH_SHORT).show();
                    showToastMessage(R.string.AlreadyPickedUp);
                else if (currentTrip.state.equalsIgnoreCase(States.DROPPED) && currentTrip.total > 0
                        && (AVL_Service.pref.getBoolean("BlueBambooDevice", false) || (AVL_Service.pref.getBoolean("BluetoothMeter", false)))) {
                    bMerchantCopyPrinted = true;
                    handlePaymentResp("");
                    // Toast.makeText(getApplicationContext(), "reprint", Toast.LENGTH_SHORT).show();
                }
            } else {
                if (AVL_Service.isNetworkReachable) {
                    sendTripResponse(States.PICKEDUP);
                    // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.StartingFlaggerTrip)), Toast.LENGTH_SHORT).show();
                    // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.StartingFlaggerTrip)), Toast.LENGTH_SHORT).show();
                    showToastMessage(R.string.StartingFlaggerTrip);
                    showToastMessage(R.string.StartingFlaggerTrip);
                } else
                    showToastMessageFromString(Farsi.Convert(getResources().getString(R.string.StartingFlaggerTrip)));

            }
        } catch (Exception ex) {
            LogException("[Exception on clicking picked up button]" + "[PickedUp]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }
    /*--------------------------------------------------------------droppedOff----------------------------------------------------------------------*/
    protected void droppedOff(final String calledBy) {

        Date date = new Date();
        try {
            boolean toastFlag = true;
            if (AVL_Service.restrictSoftDropIfMeterConnected)
                if (Meter != null)
                    if (Meter.isConnectionAlive())
                        if (calledBy.contains("SoftButton"))
                            toastFlag = false;

            if (toastFlag) {
                if (currentTrip != null) {
                    if (currentTrip.state.equalsIgnoreCase(States.PICKEDUP)) {
                        currentTrip.DOTime = date;
                        // double distance = (float) DistanceCalculator.CalculateDistance(Double.valueOf(AVL_Service.pref.getString("LastLatitude", "0")),
                        // Double.valueOf(AVL_Service.pref.getString(
                        // "LastLongitude",
                        // "0")), Double.valueOf(currentTrip.DOlat), Double.valueOf(currentTrip.DOlong));
                        if (currentTrip.DOlat.equalsIgnoreCase("0") || currentTrip.clientName.contains("Flagger")) {

                            new Thread(new Runnable() {

                                @Override
                                public void run() {
                                    currentTrip.DOaddress = AVL_Service.pref.getString("Address", "Unknown Address");

                                    if (currentTrip.DOaddress.contains("Unknown")){

                                        StringBuffer envelope = new StringBuffer(
                                                "<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><ReverseGeoCodeBylatlng xmlns=\"http://Itcurves.net/\"><lat>")
                                                .append(AVL_Service.pref.getString("LastLatitude", "0"))
                                                .append("</lat><lng>")
                                                .append(AVL_Service.pref.getString("LastLongitude", "0"))
                                                .append("</lng></ReverseGeoCodeBylatlng></soap:Body></soap:Envelope>");

                                        // Calling Web Service and Parsing Response
                                        WS_Response wsResponse = CallingWS.submit(AVL_Service.webServiceURL, AVL_Service.soapAction_ReverseGeoCodeBylatlng, envelope.toString());

                                        if (wsResponse != null)
                                            if (!wsResponse.error && wsResponse.responseType != null && wsResponse.responseType.equalsIgnoreCase("ReverseGeoCodeBylatlngResult")) {

                                                currentTrip.DOaddress = wsResponse.addressString;
                                                AVL_Service.pref.edit().putString("Address", currentTrip.DOaddress).commit();
                                            }
                                    }

                                    runOnUiThread(new Runnable() {
                                        public void run() {
                                            try{
                                                // check if there is NO amount coming from Meter
                                                if (((Float.parseFloat(Fare.trim().equalsIgnoreCase("") ? "0.0" : Fare) == 0) && !Meter_Bluetooth.flaggerStartedFromMeter_Verifone) && !veriFoneEstimationNotRequired) {
                                                    veriFoneEstimationNotRequired = false;
                                                    Meter_Bluetooth.flaggerStartedFromMeter_Verifone = false;
                                                    if (!AVL_Service.sdCalcEstViaMRMSService) {
                                                        int lResponseCode;
                                                        String result = null;
                                                        if (AVL_Service.sdEnableCalcEstOnDropped) {

                                                            distCalculator = new DistanceCalculatorTask().execute(currentTrip.PUaddress, currentTrip.DOaddress);
                                                            result = distCalculator.get();
                                                            lResponseCode = constantsforgoogleapi.myMap2.get(result);
                                                            // handleHideProgress();
                                                            distCalculator = null;
                                                        } else
                                                            lResponseCode = 0;

                                                        switch (lResponseCode) {

                                                            case 0:
                                                                showPaymentView();
                                                                if (currentTrip != null) {
                                                                    if (ttfFare != null && (Float.parseFloat(Fare.trim().equalsIgnoreCase("") ? "0.0" : Fare) == 0))
                                                                        ttfFare.setText(dFormat.format(0));
                                                                    currentTrip.estimatedCost = "0";
                                                                }
                                                                break;

                                                            case 2:
                                                                final AlertDialog dialog1 = new AlertDialog.Builder(TaxiPlexer.this).setTitle(Farsi.Convert(getResources().getString(R.string.error))).setMessage(result).create();
                                                                dialog1.setButton(DialogInterface.BUTTON_POSITIVE, Farsi.Convert(getResources().getString(R.string.Continue)), new DialogInterface.OnClickListener() {
                                                                    public void onClick(DialogInterface dialog1, int whichButton) {
                                                                        showPaymentView();

                                                                        dialog1.dismiss();
                                                                    }
                                                                });
                                                                dialog1.setButton(DialogInterface.BUTTON_NEGATIVE, Farsi.Convert(getResources().getString(R.string.Retry)), new DialogInterface.OnClickListener() {
                                                                    public void onClick(DialogInterface dialog1, int whichButton) {
                                                                        droppedOff(calledBy);
                                                                        dialog1.dismiss();
                                                                        return;
                                                                    }
                                                                });
                                                                dialog1.show();

                                                                dialogFontSize(dialog1);
                                                                break;

                                                            case 3:
                                                                final AlertDialog dialog2 = new AlertDialog.Builder(TaxiPlexer.this).setTitle(Farsi.Convert(getResources().getString(R.string.error))).setMessage(result).create();
                                                                dialog2.setButton(DialogInterface.BUTTON_POSITIVE, Farsi.Convert(getResources().getString(R.string.Continue)), new DialogInterface.OnClickListener() {
                                                                    public void onClick(DialogInterface dialog2, int whichButton) {
                                                                        showPaymentView();

                                                                        dialog2.dismiss();
                                                                    }
                                                                });
                                                                dialog2.setButton(DialogInterface.BUTTON_NEGATIVE, Farsi.Convert(getResources().getString(R.string.Retry)), new DialogInterface.OnClickListener() {
                                                                    public void onClick(DialogInterface dialog2, int whichButton) {
                                                                        droppedOff(calledBy);
                                                                        dialog2.dismiss();
                                                                        return;
                                                                    }
                                                                });
                                                                dialog2.show();

                                                                dialogFontSize(dialog2);
                                                                break;

                                                            case 4:
                                                                final AlertDialog dialog3 = new AlertDialog.Builder(TaxiPlexer.this).setTitle(Farsi.Convert(getResources().getString(R.string.error))).setMessage(result).create();
                                                                dialog3.setButton(DialogInterface.BUTTON_POSITIVE, Farsi.Convert(getResources().getString(R.string.Continue)), new DialogInterface.OnClickListener() {
                                                                    public void onClick(DialogInterface dialog3, int whichButton) {
                                                                        showPaymentView();

                                                                        dialog3.dismiss();
                                                                    }
                                                                });
                                                                dialog3.setButton(DialogInterface.BUTTON_NEGATIVE, Farsi.Convert(getResources().getString(R.string.Retry)), new DialogInterface.OnClickListener() {
                                                                    public void onClick(DialogInterface dialog3, int whichButton) {
                                                                        droppedOff(calledBy);
                                                                        dialog3.dismiss();
                                                                        return;
                                                                    }
                                                                });
                                                                dialog3.show();

                                                                dialogFontSize(dialog3);
                                                                break;

                                                            case 1:
                                                                getEstimateFareFromServer();
                                                                currentTrip.miles = AVL_Service.pref.getString("LastEstDistance", "0.00");
                                                                showPaymentView();

                                                                break;

                                                            default:
                                                                showPaymentView();
                                                                if (currentTrip != null) {
                                                                    if (ttfFare != null && (Float.parseFloat(Fare.trim().equalsIgnoreCase("") ? "0.0" : Fare) == 0))
                                                                        ttfFare.setText(dFormat.format(0));
                                                                    currentTrip.estimatedCost = "0";
                                                                }
                                                                break;
                                                        }// switch

                                                    } else {
                                                        fareEstimationViaMRMS(currentTrip.PUaddress, currentTrip.DOaddress);
                                                        // fareEstimationViaMRMS("8201 snouffer school road, gaithersburg, MD", "8401 snouffer school road, gaithersburg, MD");

                                                        showPaymentView();

                                                    }
                                                } else {
                                                    AVL_Service.pref.edit().putString("EstimateFare", "0").commit();
                                                    showPaymentView();

                                                }
                                            } catch(Exception e)

                                            {
                                            }
                                        }
                                    });

                                }
                            }).start();

                        }// if FLAGGER
                        else
                            showPaymentView();

                        if (AVL_Service.showEstdCostOnSDByFundingSource.contains(currentTrip.fundingSource) && !checkSoftMeterMON)
                            ttfFare.setText(dFormat.format(Float.parseFloat(EstCostforFundingSource)));

                        if (currentTrip.TripPayStatus == 2) {
                            ttfCCNumber.setText(currentTrip.creditCardNum);
                            ttfCCNumber.setEnabled(false);
                            ttfCCExpiry.setEnabled(false);
                            double ftemp = (Double.parseDouble(currentTrip.preAuthAmount) * 100) / 100;
                            ftemp = ftemp + currentTrip.PromotionalValue;
                            ttfFare.setText(String.format("%.2f", ftemp));
                            ttfFare.setEnabled(false);
                            ttfExtras.setEnabled(false);
                            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                                creditBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                                creditBtn.setText(R.string.Dropped);
                            } else
                                creditBtn.setText(Farsi.Convert(getResources().getString(R.string.Dropped)));
                            creditBtn.setEnabled(true);
                            cashBtn.setVisibility(View.GONE);
                            voucherBtn.setVisibility(View.GONE);
                            discountBtn.setEnabled(false);
                        }
                        // showPaymentView();

                    }// if PICKEDUP

                    if (AVL_Service.pref.getBoolean("AllowCreditCard", true) && AVL_Service.CCProcessorList.containsKey("CAW"))
                        register();

                    for (int i = 0; i < CreditCardNumber.length; i++) {
                        CreditCardNumber[i] = ' ';
                    }
                } else {
                    // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.NoTripinProgress)), Toast.LENGTH_SHORT).show();
                    showToastMessage(R.string.NoTripinProgress);
                }
            } else
                // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.TimeOfffromMeter)), Toast.LENGTH_SHORT).show();
                showToastMessage(R.string.TimeOfffromMeter);

        } catch (Exception e) {
            handleException("[Exception on clicking Drop off button]" + "[droppedOff]" + "[" + e.getLocalizedMessage() + "]");
        }
    }
    /*--------------------------------------------------------------showPaymentView----------------------------------------------------------------------*/
    private void showPaymentView() {
        try {
            paymentView = createPaymentView();
            currentView = paymentView;
            paymentView.setKeepScreenOn(true);
            setContentView(currentView);


            ttfCCNumber.setText("");
            ttfCCExpiry.setText("");

            // tripView = null;
            // ttfTip.setText(("0.00"));

            if (AVL_Service.SDEnableOdometerInput == 1) {
                odoMeterDialog = new AlertDialog.Builder(this).setView(createOdoCountDialogView(2)).setCancelable(false).create();
                if(!odoMeterDialog.isShowing())
                    odoMeterDialog.show();
            }
            if (AVL_Service.pref.getBoolean("BlueBambooDevice", false))
                showPrinterDialog();

            if (AVL_Service.pref.getBoolean("AudiojJackPeripheral", false))
                connectAJR();
            if (AVL_Service.pref.getBoolean("VivotechDevice", false) && checkVivoConnectivity())
                VivotechScreen.showScreen(Screen.PAYMENT_START);
            new Thread(new Runnable() {

                @Override
                public void run() {
                    try {
                        Thread.sleep(800);
                    } catch (InterruptedException e) {

                        e.printStackTrace();
                    }
                    runOnUiThread(new Runnable() {
                        public void run() {
                            try {
                                // New Code for tip calculation
                                tipAmount_1 = ((ParseFloatFromString(ttfFare.getText().toString()) + ParseFloatFromString(ttfExtras.getText().toString())) * currentTrip.tipAmount1) / 100;
                                tipAmount_2 = ((ParseFloatFromString(ttfFare.getText().toString()) + ParseFloatFromString(ttfExtras.getText().toString())) * currentTrip.tipAmount2) / 100;
                                tipAmount_3 = ((ParseFloatFromString(ttfFare.getText().toString()) + ParseFloatFromString(ttfExtras.getText().toString())) * currentTrip.tipAmount3) / 100;
                                tipAmount_4 = ((ParseFloatFromString(ttfFare.getText().toString()) + ParseFloatFromString(ttfExtras.getText().toString())) * currentTrip.tipAmount4) / 100;
                            } catch (Exception e) {
                                handleException("[Exception in tip calculation]" + "[showPaymentView]" + "[" + e.getLocalizedMessage() + "]");
                                tipAmount_1 = 0;
                                tipAmount_2 = 0;
                                tipAmount_3 = 0;
                                tipAmount_4 = 0;
                            }
                        }
                    });

                }
            }).start();
        } catch (Exception ex) {
            LogException("[Exception in showPaymentView]" + "[showPaymentView]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }
    /*--------------------------------------------------------------sendFlaggerInfoToServer----------------------------------------------------------------------*/
    private void getEstimateFareFromServer() {
        try {
            ScheduledExecutorService schedulerAuto = Executors.newSingleThreadScheduledExecutor();
            schedulerAuto.schedule(new Runnable() {

                @Override
                public void run() {

                    runOnUiThread(new Runnable() {
                        public void run() {
                            serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastPickupLat", "0") + Constants.COLSEPARATOR
                                    + AVL_Service.pref.getString("LastPickupLong", "0")
                                    + Constants.COLSEPARATOR
                                    + AVL_Service.pref.getString("LastDropOffLat", "0")
                                    + Constants.COLSEPARATOR
                                    + AVL_Service.pref.getString("LastDropOffLong", "0")
                                    + Constants.COLSEPARATOR
                                    + AVL_Service.pref.getString("LastEstTime", "0")
                                    + Constants.COLSEPARATOR
                                    + AVL_Service.pref.getString("LastEstDistance", "0")
                                    + Constants.COLSEPARATOR
                                    + ((currentTrip == null) ? "-1" : currentTrip.iRequestAffiliateID), "SDHS", MsgType.EstimatedFareReq, AckType.NEW, MsgValidity.Short, MsgPriority.AboveNormal);
                        }
                    });
                }
            }, 4, TimeUnit.SECONDS);
        } catch (Exception ex) {
            LogException("[Exception in getEstimateFareFromServer]" + "[getEstimateFareFromServer]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }
	/*--------------------------------------------------------------Audio- Jack Peripheral (AJR) methods----------------------------------------------------------------------*/

    private void connectAJR() {
        try {
            final Context context = this;
            showProgressDialog(Farsi.Convert(getResources().getString(R.string.Processing)));
            new Thread() {
                @Override
                public void run() {
                    boolean success = false;

                    try {
                        success = DeviceUtils.connectAJRPeripheralDevice(context, TaxiPlexer.this);
                    } catch (DeviceException e) {
                        e.printStackTrace();
                    } finally {
                        runOnUiThread(new Runnable() {
                            public void run() {
                                hideProgressDialog();
                            }
                        });
                    }
                    if (success) {
                        if (Transaction.DEBUG)
                            Log.d("TEST", "Device connected");
                        runOnUiThread(new Runnable() {
                            public void run() {
                                Toast.makeText(context, "AJR Connected", Toast.LENGTH_LONG).show();
                            }
                        });
                    } else
                        runOnUiThread(new Runnable() {
                            public void run() {
                                Toast.makeText(context, "Failed To Connect AJR", Toast.LENGTH_LONG).show();
                            }
                        });
                }
            }.start();
        } catch (Exception ex) {
            LogException("[Exception in connectAJR]" + "[connectAJR]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }

    private void disconnectAJR() {
        try {
            DeviceUtils.disconnectPeripheralDevice();

        } catch (Exception ex) {
            LogException("[Exception in disconnectAJR]" + "[disconnectAJR]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }

    public boolean dataAvailable(CreditCard creditCard, CardDataStatus status) {
        try {
            Log.d("TEST", "" + status);

            Drawable ajrDrawable = EnableAJRBtn.getBackground();
            ajrDrawable.setColorFilter(Color.LTGRAY, android.graphics.PorterDuff.Mode.MULTIPLY);
            EnableAJRBtn.setBackgroundDrawable(ajrDrawable);

            if (status == CardDataStatus.Track2_Missing)
                return false;

            if (status == CardDataStatus.Bad_Read)
                return false;

            CreditCard_CAW = creditCard;
            runOnUiThread(new Runnable() {
                public void run() {
                    ttfCCNumber.setText(CreditCard_CAW.getCardNumber());
                    // mCard.setEnabled(false);
                    ttfCCExpiry.setText(CreditCard_CAW.getExpirationDate());
                    com.chargeanywhere.sdk.CreditCardType cardType = CreditCard_CAW.getCardType();

                    currentTrip.creditCardNum = CreditCard_CAW.getCardNumber();
                    currentTrip.creditCardExpiry = CreditCard_CAW.getExpirationDate();
                    currentTrip.cardType = getCAWCardType(cardType);
                    // mExpDate.setEnabled(false);

                }
            });
            if (CreditCard_CAW != null)
                return true;

        } catch (Exception ex) {
            LogException("[Exception in getting data from card in AJR]" + "[dataAvailable]" + "[" + ex.getLocalizedMessage() + "]");
        }
        return false;
    }

    private void startMSR() {
        try {

            DeviceUtils.setSwipeListener(TaxiPlexer.this);

            Drawable ajrDrawable = EnableAJRBtn.getBackground();
            ajrDrawable.setColorFilter(Color.GREEN, android.graphics.PorterDuff.Mode.MULTIPLY);
            EnableAJRBtn.setBackgroundDrawable(ajrDrawable);

        } catch (DeviceException e) {

            e.printStackTrace();
        }
    }
    // private void getEstimateFlaggerFareFromServer() {
    //
    // serviceHandle.sendMessageToServer(AVL_Service.pref.getString("EstPickupLat", "0") + Constants.COLSEPARATOR
    // + AVL_Service.pref.getString("EstPickupLong", "0")
    // + Constants.COLSEPARATOR
    // + AVL_Service.pref.getString("EstDropOffLat", "0")
    // + Constants.COLSEPARATOR
    // + AVL_Service.pref.getString("EstDropoffLong", "0")
    // + Constants.COLSEPARATOR
    // + AVL_Service.pref.getString("EstimatedDuration", "0")
    // + Constants.COLSEPARATOR
    // + AVL_Service.pref.getString("EstimatedDistances", "0"), "SDHS", MsgType.EstimatedFareReq, AckType.NEW, MsgValidity.Short, MsgPriority.AboveNormal);
    //
    // }
    public String getCAWCardType(com.chargeanywhere.sdk.CreditCardType cardType) {
        try {

            if (cardType == com.chargeanywhere.sdk.CreditCardType.VISA)
                return "VISA";
            if (cardType == com.chargeanywhere.sdk.CreditCardType.MASTERCARD)
                return "MASTERCARD";
            if (cardType == com.chargeanywhere.sdk.CreditCardType.AMERICAN_EXPRESS)
                return "AMERICAN_EXPRESS";
            if (cardType == com.chargeanywhere.sdk.CreditCardType.DISCOVER)
                return "DISCOVER";
            if (cardType == com.chargeanywhere.sdk.CreditCardType.DINERS_CLUB)
                return "DINERS_CLUB";
            if (cardType == com.chargeanywhere.sdk.CreditCardType.JCB)
                return "JCB";
            else
                return "UNKWN";
        } catch (Exception ex) {
            LogException("[Exception in getting card type of CAW]" + "[getCAWCardType]" + "[" + ex.getLocalizedMessage() + "]");
        }
        return "UNKWN";
    }
    /*--------------------------------------------------------------createLoadingView---------------------------------------------------------------*/
    private ViewGroup createLoadingView() {

        LinearLayout panel = new LinearLayout(this);
        try {
            panel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
            panel.setOrientation(LinearLayout.VERTICAL);

            TextView lblUserid = new TextView(this);
            lblUserid.setText(Farsi.Convert(getResources().getString(R.string.NointernetConnectivity)));
            lblUserid.setTextSize(labelFont);
            lblUserid.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));

            panel.addView(lblUserid);
        } catch (Exception ex) {
            LogException("[Exception in creating no internet connectivity page]" + "[createLoadingView]" + "[" + ex.getLocalizedMessage() + "]");
        }
        return panel;
    }

    /*--------------------------------------------------------------createLoginView-----------------------------------------------------------------*/
    @SuppressWarnings("deprecation")
    @SuppressLint("NewApi")
    private ViewGroup createLoginView() {
        LinearLayout panel = new LinearLayout(this);
        scrollLoginView = new ScrollView(this);
        loginPanel = new LinearLayout(this);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            if (_Jameel_Noori_Nastaleeq_Kasheeda == null)
                _Jameel_Noori_Nastaleeq_Kasheeda = Typeface.createFromAsset(getApplicationContext().getAssets(), "nastaleeq_numa_regular.ttf");
        }
        try {

            if (screenHeight > screenWidth)
                txtHeight = screenWidth / 6;
            else
                txtHeight = screenHeight / 6;

            final String[] Languages = {Farsi.Convert(getResources().getString(R.string.English)), Farsi.Convert(getResources().getString(R.string.Arabic)),
                    Farsi.Convert(getResources().getString(R.string.Urdu))};
            final String[] LanguageSymbols = {"en", "ar", "ur"};

            panel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
            panel.setOrientation(LinearLayout.VERTICAL);
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                panel.setBackground(getWallpaper());
            else
                panel.setBackgroundDrawable(getWallpaper());
            panel.setGravity(Gravity.CENTER_HORIZONTAL);

            final LinearLayout emergencyButtonRow = new LinearLayout(this);
            emergencyButtonRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            emergencyButtonRow.setOrientation(LinearLayout.HORIZONTAL);
            emergencyButtonRow.setGravity(Gravity.CENTER_HORIZONTAL);
            // emergencyButtonRow.setPadding(5, 0, 5, 0);

            EmgBtn = new Button(this);
            Drawable drawableEmg = EmgBtn.getBackground();
            drawableEmg.setColorFilter(Color.RED, Mode.SRC_IN);
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                EmgBtn.setBackground(drawableEmg);
            else
                EmgBtn.setBackgroundDrawable(drawableEmg);
            EmgBtn.setTypeface(null, Typeface.BOLD);
            EmgBtn.setTextSize(miscFont);
            EmgBtn.setTextColor(Color.WHITE);
            if (AVL_Service.pref.getString("Company", "Company Name").equalsIgnoreCase("My Taxi")) {
                EmgBtn.setText(Farsi.Convert(getResources().getString(R.string.Mytaxi)) + "\n" + AVL_Service.pref.getString("NTEPNumber", "12-XXP"));
            } else
                EmgBtn.setText(Farsi.Convert(AVL_Service.pref.getString("Company", "Company Name")) + "\n" + AVL_Service.pref.getString("NTEPNumber", "12-XXP"));
            // EmgBtn.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
            EmgBtn.setOnClickListener(emergencyButtonLintener);

            emergencyButtonRow.addView(EmgBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));

            LanguageRow = new LinearLayout(this);
            LanguageRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            LanguageRow.setOrientation(LinearLayout.HORIZONTAL);
            LanguageRow.setGravity(Gravity.CENTER_HORIZONTAL);
            LanguageRow.setPadding(0, 20, 15, 0);

            // VehicleID : label and text field
            lblLanguage = new TextView(this);
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                lblLanguage.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                lblLanguage.setText(R.string.Language);
            } else
                lblLanguage.setText(Farsi.Convert(getResources().getString(R.string.Language)));
            lblLanguage.setTextColor(Color.YELLOW);
            lblLanguage.setTextSize(labelFont);
            lblLanguage.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.6f));
            lblLanguage.setGravity(Gravity.RIGHT);
            if (AVL_Service.bArabClient) {
                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                    lblLanguage.setText(getResources().getString(R.string.Language1) + getResources().getString(R.string.Language2));
                } else
                    lblLanguage.setText(Farsi.Convert(getResources().getString(R.string.Language1)) + Farsi.Convert(getResources().getString(R.string.Language2)));
            }
            Spinner spLanguages = new Spinner(this);

            spLanguages.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, .5f));

            ArrayAdapter<String> LangAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, Languages) {
                @Override
                public View getView(int position, View convertView, ViewGroup parent) {
                    View v = super.getView(position, convertView, parent);
                    if (v instanceof TextView)
                        ((TextView) v).setTextSize(miscFont);
                    return v;
                }
                @Override
                public View getDropDownView(int position, View convertView, ViewGroup parent) {
                    View v = super.getDropDownView(position, convertView, parent);
                    if (v instanceof TextView)
                        ((TextView) v).setTextSize(miscFont);
                    return v;
                }
            };

            LangAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
            spLanguages.setAdapter(LangAdapter);
            spLanguages.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
                public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {

                    AVL_Service.pref.edit().putString("AppLanguage", LanguageSymbols[position]).commit();
                    SetApplicationLocal();
                    setLoginViewData();
                    // myOnCreate();
                }

                public void onNothingSelected(AdapterView<?> parent) {

                }
            });

			/*
			 * if (AVL_Service.pref.getString("AppLanguage", DeviceCurrentLanguage).equalsIgnoreCase("en"))
			 * spLanguages.setSelection(0);
			 * else
			 */

            if (AVL_Service.pref.getString("AppLanguage", "").length() == 0) {
                if (getApplicationContext().getPackageName().contains("infonetmytaxi"))
                    spLanguages.setSelection(1);
                else
                    spLanguages.setSelection(0);
            } else if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ar")) {
                spLanguages.setSelection(1);
            } else if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                spLanguages.setSelection(2);
            } else
                spLanguages.setSelection(0);

            LanguageRow.addView(lblLanguage);
            LanguageRow.addView(spLanguages);

            FontRow = new LinearLayout(this);
            FontRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            FontRow.setOrientation(LinearLayout.HORIZONTAL);
            FontRow.setGravity(Gravity.CENTER_HORIZONTAL);
            FontRow.setPadding(0, 0, 15, 0);

            // VehicleID : label and text field
            lblFont = new TextView(this);

            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                lblFont.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                lblFont.setText(R.string.Font);
            } else
                lblFont.setText(Farsi.Convert(getResources().getString(R.string.Font)));
            lblFont.setTextColor(Color.YELLOW);
            lblFont.setTextSize(labelFont);
            lblFont.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.6f));
            lblFont.setGravity(Gravity.RIGHT);

            Spinner spFonts = new Spinner(this);
            spFonts.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, .5f));

            ArrayAdapter<String> FontAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, Fonts) {
                @Override
                public View getView(int position, View convertView, ViewGroup parent) {
                    View v = super.getView(position, convertView, parent);
                    if (v instanceof TextView)
                        ((TextView) v).setTextSize(miscFont);
                    return v;
                }
                @Override
                public View getDropDownView(int position, View convertView, ViewGroup parent) {
                    View v = super.getDropDownView(position, convertView, parent);
                    if (v instanceof TextView)
                        ((TextView) v).setTextSize(miscFont);
                    return v;
                }
            };

            FontAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
            spFonts.setAdapter(FontAdapter);
            spFonts.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
                public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                    AVL_Service.pref.edit().putInt("FontPosition", position).commit();
                    miscFont = omiscFont + (Integer.parseInt(Fonts[position]) * 2);
                    labelFont = olabelFont + (Integer.parseInt(Fonts[position]) * 2);
                    buttonFont = obuttonFont + (Integer.parseInt(Fonts[position]) * 2);
                    recreateview();

                    // myOnCreate();
                }

                public void onNothingSelected(AdapterView<?> parent) {

                }
            });

            spFonts.setSelection(AVL_Service.pref.getInt("FontPosition", 4));
            FontRow.addView(lblFont);
            FontRow.addView(spFonts);

            contain = new LinearLayout(this);
            contain.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.4f));
            contain.setOrientation(LinearLayout.VERTICAL);
            contain.setVerticalGravity(Gravity.BOTTOM);
            contain.setPadding(0, screenHeight / 20, 0, 0);

            final LinearLayout imeiRow = new LinearLayout(this);
            LayoutParams params = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
            // params.setMargins(0, 150, 0, 0);
            imeiRow.setLayoutParams(params);
            imeiRow.setOrientation(LinearLayout.HORIZONTAL);
            imeiRow.setGravity(Gravity.CENTER_HORIZONTAL);
            // imeiRow.setVerticalGravity(Gravity.BOTTOM);
            imeiRow.setPadding(0, screenHeight / 20, 0, 0);
            // imeiRow.setPadding(0, 0, 0, 0);

            // IMEI : label and text field
            TextView lblImei = new TextView(this);
            lblImei.setText(Farsi.Convert(getResources().getString(R.string.IMEI)));
            lblImei.setTextColor(Color.YELLOW);
            lblImei.setTextSize(labelFont);
            lblImei.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, 0.6f));
            lblImei.setGravity(Gravity.RIGHT);

            final TextView imeiNum = new TextView(this);
            imeiNum.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, 0.4f));
            imeiNum.setSingleLine();
            imeiNum.setText(AVL_Service.tm.getDeviceId());
            imeiNum.setTextSize(labelFont);
            imeiNum.setTextColor(Color.YELLOW);

            imeiRow.addView(lblImei);
            imeiRow.addView(imeiNum);

            contain.addView(imeiRow);

            final LinearLayout numberRow = new LinearLayout(this);
            numberRow.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
            numberRow.setOrientation(LinearLayout.HORIZONTAL);
            numberRow.setGravity(Gravity.CENTER_HORIZONTAL);
            numberRow.setPadding(0, 0, 0, 15);

            // IMEI : label and text field
            TextView lblNumber = new TextView(this);
            lblNumber.setText(Farsi.Convert(getResources().getString(R.string.num)));
            lblNumber.setTextColor(Color.YELLOW);
            lblNumber.setTextSize(labelFont);
            lblNumber.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, 0.6f));
            lblNumber.setGravity(Gravity.RIGHT);

            final TextView numV = new TextView(this);
            numV.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.4f));
            numV.setSingleLine();
            numV.setText(AVL_Service.tm.getLine1Number());
            numV.setTextSize(labelFont);
            numV.setTextColor(Color.YELLOW);

            numberRow.addView(lblNumber);
            numberRow.addView(numV);
            if (AVL_Service.tm.getLine1Number() != null)
                contain.addView(numberRow);

            final LinearLayout vehicleRow = new LinearLayout(this);
            vehicleRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            vehicleRow.setOrientation(LinearLayout.HORIZONTAL);
            vehicleRow.setGravity(Gravity.CENTER_HORIZONTAL);
            vehicleRow.setPadding(0, 40, 15, 0);

            // Farsi.GetFarsiFont(this);

            // VehicleID : label and text field
            lblVehicle = new TextView(this);
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                lblVehicle.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                lblVehicle.setText(R.string.VehicleNo);
            } else
                lblVehicle.setText(Farsi.Convert(getResources().getString(R.string.VehicleNo)));
            lblVehicle.setTextColor(Color.YELLOW);
            lblVehicle.setTextSize(labelFont);
            lblVehicle.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, txtHeight, 0.5f));
            lblVehicle.setGravity(Gravity.RIGHT);

            ttfVehicleID = new EditText(this);
            ttfVehicleID.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, txtHeight, 0.5f));
            ttfVehicleID.setInputType(InputType.TYPE_NUMBER_FLAG_DECIMAL + InputType.TYPE_CLASS_NUMBER);
            ttfVehicleID.setSingleLine();
            ttfVehicleID.setText(AVL_Service.pref.getString("VehicleID", ""));
            ttfVehicleID.setId(1234);
            ttfVehicleID.setTextSize(labelFont);
            ttfVehicleID.setSelectAllOnFocus(true);
            ttfVehicleID.setImeOptions(EditorInfo.IME_ACTION_NEXT);
            ttfVehicleID.setImeActionLabel("Next", EditorInfo.IME_ACTION_NEXT);

            vehicleRow.addView(lblVehicle);
            vehicleRow.addView(ttfVehicleID);

            final LinearLayout nameRow = new LinearLayout(this);
            nameRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            nameRow.setOrientation(LinearLayout.HORIZONTAL);
            nameRow.setGravity(Gravity.CENTER_HORIZONTAL);
            nameRow.setPadding(0, 0, 15, 0);

            // Userid : label and text field
            lblUserid = new TextView(this);
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                lblUserid.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                lblUserid.setText(R.string.DriverNo);
            } else
                lblUserid.setText(Farsi.Convert(getResources().getString(R.string.DriverNo)));
            lblUserid.setTextColor(Color.YELLOW);
            lblUserid.setTextSize(labelFont);
            lblUserid.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, txtHeight, 0.5f));
            lblUserid.setGravity(Gravity.RIGHT);

            ttfUserid = new EditText(this);
            ttfUserid.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, txtHeight, 0.5f));
            ttfUserid.setInputType(InputType.TYPE_NUMBER_FLAG_DECIMAL + InputType.TYPE_CLASS_NUMBER);
            ttfUserid.setSingleLine();
            ttfUserid.setText(AVL_Service.pref.getString("DriverID", ""));
            ttfUserid.setId(1234);
            ttfUserid.setTextSize(labelFont);
            ttfUserid.setSelectAllOnFocus(true);
            ttfUserid.setImeOptions(EditorInfo.IME_ACTION_NEXT);
            ttfUserid.setImeActionLabel("Next", EditorInfo.IME_ACTION_NEXT);

            nameRow.addView(lblUserid);
            nameRow.addView(ttfUserid);

            final LinearLayout passwordRow = new LinearLayout(this);
            passwordRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            passwordRow.setOrientation(LinearLayout.HORIZONTAL);
            passwordRow.setGravity(Gravity.CENTER_HORIZONTAL);
            passwordRow.setPadding(0, 0, 15, 0);

            // Password : label and text field
            lblPassword = new TextView(this);
            lblPassword.setTextSize(labelFont);

            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                lblPassword.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                lblPassword.setText(R.string.PIN);
            } else
                lblPassword.setText(Farsi.Convert(getResources().getString(R.string.PIN)));

            lblPassword.setTextColor(Color.YELLOW);
            lblPassword.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, txtHeight, 0.5f));
            lblPassword.setGravity(Gravity.RIGHT);

            ttfPassword = new EditText(this);
            ttfPassword.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, txtHeight, 0.5f));
            ttfPassword.setTransformationMethod(new PasswordTransformationMethod());
            ttfPassword.setInputType(InputType.TYPE_NUMBER_FLAG_DECIMAL + InputType.TYPE_CLASS_NUMBER);
            ttfPassword.setSingleLine();
            ttfPassword.setTextSize(labelFont);
            ttfPassword.setImeOptions(EditorInfo.IME_ACTION_DONE);
            ttfPassword.setImeActionLabel("DONE", EditorInfo.IME_ACTION_NEXT);
            ttfPassword.setOnFocusChangeListener(new View.OnFocusChangeListener() {

                @Override
                public void onFocusChange(View v, boolean hasFocus) {
                    if (hasFocus) {
                        scrollLoginView.post(new Runnable() {
                            public void run() {

                                scrollLoginView.scrollTo(
                                        ((ViewGroup) ((ViewGroup) ((ViewGroup) loginPanel).getChildAt(0)).getChildAt(0)).getChildAt(4).getLeft(),
                                        ((ViewGroup) ((ViewGroup) ((ViewGroup) loginPanel).getChildAt(0)).getChildAt(0)).getChildAt(4).getTop());
                            }
                        });

                    }

                }
            });

            passwordRow.addView(lblPassword);
            passwordRow.addView(ttfPassword);

            final LinearLayout loginRow = new LinearLayout(this);
            loginRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            loginRow.setOrientation(LinearLayout.HORIZONTAL);
            loginRow.setGravity(Gravity.LEFT);

            // login button
            btnLogin = new Button(this);
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                btnLogin.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                btnLogin.setText(R.string.StartShift);
            } else
                btnLogin.setText(Farsi.Convert(getResources().getString(R.string.StartShift)));
            btnLogin.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, txtHeight));
            btnLogin.setGravity(Gravity.CENTER);
            btnLogin.setTextSize(miscFont);
            btnLogin.setTypeface(Typeface.DEFAULT_BOLD);
            btnLogin.setOnClickListener(new View.OnClickListener() {
                public void onClick(final View v) {
                    if (((Button) v).getText().toString().equalsIgnoreCase(Farsi.Convert(getResources().getString(R.string.StartShift))) || ((Button) v).getText().toString().equalsIgnoreCase(
                            getResources().getString(R.string.StartShift))) {

                        if (AVL_Service.PPV_UsePPVModule) {
                            if (!(ttfVehicleID.getText().toString().trim().equalsIgnoreCase("") || ttfUserid.getText().toString().trim().equalsIgnoreCase("") || ttfPassword
                                    .getText()
                                    .toString()
                                    .trim()
                                    .equalsIgnoreCase(""))) {
                                handleShowProgress(Farsi.Convert(getResources().getString(R.string.Login_Balance_Check)));
                            final RestClient client = new RestClient(AVL_Service.InLoadAPI_URL + "/PPV/CheckAllowedBalance");
                            try {
                                client.AddParam("driverno", ttfUserid.getText().toString().trim());

                            } catch (JSONException e1) {
                                // TODO Auto-generated catch block
                                e1.printStackTrace();
                            }
                            client.AddHeader("Content-Type", "application/json");

                            new Thread() {
                                @Override
                                public void run() {
                                    try {
                                        client.Execute(RestClient.RequestMethod.POST);
                                        final String response = client.getResponse();
                                        if (client.getResponseCode() == 200) {
                                            if (response != null) {
                                                JSONObject mainObject = new JSONObject(response);
                                                final boolean isAllowed = mainObject.getBoolean("IsAllowed");
                                                BalanceOfDriver = mainObject.getString("AvailableBalance");

                                                runOnUiThread(new Runnable() {
                                                    public void run() {
                                                        if (isAllowed) {
                                                            AVL_Service.pref.edit().putString("LVehicleID", ttfVehicleID.getText().toString().trim()).commit();
                                                            AVL_Service.pref.edit().putString("LDriverID", ttfUserid.getText().toString().trim()).commit();
                                                            AVL_Service.pref.edit().putString("LPin", ttfPassword.getText().toString().trim()).commit();


                                                            Log.w(getClass().getSimpleName(), "Login button was pressed");
                                                            DriverPin = ttfPassword.getText().toString();
                                                            checkforloginresp = false;

                                                            if (AVL_Service.locManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {
                                                                if (mBluetoothAdapter == null)
                                                                    mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
                                                                if (!mBluetoothAdapter.isEnabled() && (AVL_Service.pref.getBoolean("BlueBambooDevice", false) || AVL_Service.pref.getBoolean("BluetoothMeter", false))) {
                                                                    Log.w(getClass().getSimpleName(), "Bluetooth not enabled.");
                                                                    showToastMessage(R.string.Bluetooth_not_enabled);
                                                                    // Toast.makeText(TaxiPlexer.this, "Bluetooth not enabled, trying to enable", Toast.LENGTH_LONG).show();
                                                                    Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
                                                                    enableBtIntent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
                                                                    startActivityForResult(enableBtIntent, Constants.REQUEST_ENABLE_BT);
                                                                }
                                                                if (AVL_Service.pref.getBoolean("ForceDeviceOnCradle", false)) {
                                                                    if (AVL_Service.pref.getBoolean("CHARGING", false))
                                                                        if (!(ttfVehicleID.getText().toString().trim().equalsIgnoreCase("") || ttfUserid.getText().toString().trim().equalsIgnoreCase("") || ttfPassword
                                                                                .getText()
                                                                                .toString()
                                                                                .trim()
                                                                                .equalsIgnoreCase(""))) {

                                                                            InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                                                                            imm.hideSoftInputFromWindow(v.getApplicationWindowToken(), 0);

                                                                            showProgressDialog(Farsi.Convert(getResources().getString(R.string.verifyinglogincredentials)));

                                                                            AVL_Service.pref.edit().putString("DriverID", ttfUserid.getText().toString()).putString("VehicleID", ttfVehicleID.getText().toString()).commit();
                                                                            serviceHandle.sendMessageToServer(ttfUserid.getText().toString() + Constants.COLSEPARATOR
                                                                                    + ttfPassword.getText().toString()
                                                                                    + Constants.COLSEPARATOR
                                                                                    + AVL_Service.pref.getString("LastLatitude", "0")
                                                                                    + Constants.COLSEPARATOR
                                                                                    + AVL_Service.pref.getString("LastLongitude", "0")
                                                                                    + Constants.COLSEPARATOR
                                                                                    + AVL_Service.pref.getString("Alt", "1")
                                                                                    + Constants.COLSEPARATOR
                                                                                    + "CabDispatch"
                                                                                    + Constants.COLSEPARATOR
                                                                                    + ttfVehicleID.getText().toString(), "SDHS", MsgType.Login_Req, AckType.NEW, MsgValidity.Medium, MsgPriority.AboveNormal);

                                                                            // ttfPassword.setText("");
                                                                        } else
                                                                            // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.BlankVehicleDriver)),
                                                                            // Toast.LENGTH_LONG).show();
                                                                            showToastMessage(R.string.BlankVehicleDriver);
                                                                    else
                                                                        // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.DeviceonCradle)), Toast.LENGTH_LONG).show();
                                                                        showToastMessage(R.string.DeviceonCradle);
                                                                } else {
                                                                    if (!(ttfVehicleID.getText().toString().trim().equalsIgnoreCase("") || ttfUserid.getText().toString().trim().equalsIgnoreCase("") || ttfPassword
                                                                            .getText()
                                                                            .toString()
                                                                            .trim()
                                                                            .equalsIgnoreCase(""))) {

                                                                        InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                                                                        imm.hideSoftInputFromWindow(v.getApplicationWindowToken(), 0);

                                                                        showProgressDialog(Farsi.Convert(getResources().getString(R.string.verifyinglogincredentials)));

                                                                        AVL_Service.pref.edit().putString("DriverID", ttfUserid.getText().toString()).putString("VehicleID", ttfVehicleID.getText().toString()).commit();
                                                                        serviceHandle.sendMessageToServer(ttfUserid.getText().toString() + Constants.COLSEPARATOR
                                                                                + ttfPassword.getText().toString()
                                                                                + Constants.COLSEPARATOR
                                                                                + AVL_Service.pref.getString("LastLatitude", "0")
                                                                                + Constants.COLSEPARATOR
                                                                                + AVL_Service.pref.getString("LastLongitude", "0")
                                                                                + Constants.COLSEPARATOR
                                                                                + AVL_Service.pref.getString("Alt", "1")
                                                                                + Constants.COLSEPARATOR
                                                                                + "CabDispatch"
                                                                                + Constants.COLSEPARATOR
                                                                                + ttfVehicleID.getText().toString(), "SDHS", MsgType.Login_Req, AckType.NEW, MsgValidity.Medium, MsgPriority.AboveNormal);

                                                                        // ttfPassword.setText("");
                                                                    } else
                                                                        // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.BlankVehicleDriver)),
                                                                        // Toast.LENGTH_LONG).show();
                                                                        showToastMessage(R.string.BlankVehicleDriver);
                                                                }// else

                                                                if (!(ttfVehicleID.getText().toString().trim().equalsIgnoreCase("") || ttfUserid.getText().toString().trim().equalsIgnoreCase("") || ttfPassword
                                                                        .getText()
                                                                        .toString()
                                                                        .trim()
                                                                        .equalsIgnoreCase(""))) {

                                                                    ttfPassword.setText("");
                                                                    msgHandlerForLoginWait.postDelayed(new Runnable() {

                                                                        @Override
                                                                        public void run() {
                                                                            checkforloginresp = true;
                                                                            if (!AVL_Service.loggedIn) {
                                                                                hideProgressDialog();
                                                                                AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this).setTitle(Farsi.Convert(getResources().getString(R.string.loginFailed))).setMessage(
                                                                                        Farsi.Convert(getResources().getString(R.string.Try_Again))).setCancelable(false).setPositiveButton(
                                                                                        Farsi.Convert(getResources().getString(R.string.ok)),
                                                                                        new DialogInterface.OnClickListener() {

                                                                                            @Override
                                                                                            public void onClick(DialogInterface dialog, int which) {

                                                                                            }
                                                                                        });
                                                                                AlertDialog alert = builder.create();
                                                                                alert.show();

                                                                                dialogFontSize(alert);

                                                                            }
                                                                        }
                                                                    }, 20000);
                                                                }

                                                            } else {
                                                                handleTurnONGPS();
                                                            }
                                                        } else {
                                                            showToastMessageFromString(Farsi.Convert(getResources().getString(R.string.balanceWarning)));
                                                        }
                                                    }
                                                });
                                            }
                                        }


                                    } catch (Exception e) {
                                        exception("[Exception on discountbtnclick]" + "[createpaymentview]" + "[" + e.getLocalizedMessage() + "]");
                                    }
                                    hideProgressDialog();
                                }// run

                            }.start();
                        } else
                                showToastMessage(R.string.BlankVehicleDriver);

                        } else {

                            AVL_Service.pref.edit().putString("LVehicleID", ttfVehicleID.getText().toString().trim()).commit();
                        AVL_Service.pref.edit().putString("LDriverID", ttfUserid.getText().toString().trim()).commit();
                        AVL_Service.pref.edit().putString("LPin", ttfPassword.getText().toString().trim()).commit();


                        Log.w(getClass().getSimpleName(), "Login button was pressed");
                        DriverPin = ttfPassword.getText().toString();
                        checkforloginresp = false;

                        if (AVL_Service.locManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {
                            if (mBluetoothAdapter == null)
                                mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
                            if (!mBluetoothAdapter.isEnabled() && (AVL_Service.pref.getBoolean("BlueBambooDevice", false) || AVL_Service.pref.getBoolean("BluetoothMeter", false))) {
                                Log.w(getClass().getSimpleName(), "Bluetooth not enabled.");
                                showToastMessage(R.string.Bluetooth_not_enabled);
                                // Toast.makeText(TaxiPlexer.this, "Bluetooth not enabled, trying to enable", Toast.LENGTH_LONG).show();
                                Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
                                enableBtIntent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
                                startActivityForResult(enableBtIntent, Constants.REQUEST_ENABLE_BT);
                            }
                            if (AVL_Service.pref.getBoolean("ForceDeviceOnCradle", false)) {
                                if (AVL_Service.pref.getBoolean("CHARGING", false))
                                    if (!(ttfVehicleID.getText().toString().trim().equalsIgnoreCase("") || ttfUserid.getText().toString().trim().equalsIgnoreCase("") || ttfPassword
                                            .getText()
                                            .toString()
                                            .trim()
                                            .equalsIgnoreCase(""))) {

                                        InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                                        imm.hideSoftInputFromWindow(v.getApplicationWindowToken(), 0);

                                        showProgressDialog(Farsi.Convert(getResources().getString(R.string.verifyinglogincredentials)));

                                        AVL_Service.pref.edit().putString("DriverID", ttfUserid.getText().toString()).putString("VehicleID", ttfVehicleID.getText().toString()).commit();
                                        serviceHandle.sendMessageToServer(ttfUserid.getText().toString() + Constants.COLSEPARATOR
                                                + ttfPassword.getText().toString()
                                                + Constants.COLSEPARATOR
                                                + AVL_Service.pref.getString("LastLatitude", "0")
                                                + Constants.COLSEPARATOR
                                                + AVL_Service.pref.getString("LastLongitude", "0")
                                                + Constants.COLSEPARATOR
                                                + AVL_Service.pref.getString("Alt", "1")
                                                + Constants.COLSEPARATOR
                                                + "CabDispatch"
                                                + Constants.COLSEPARATOR
                                                + ttfVehicleID.getText().toString(), "SDHS", MsgType.Login_Req, AckType.NEW, MsgValidity.Medium, MsgPriority.AboveNormal);

                                        // ttfPassword.setText("");
                                    } else
                                        // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.BlankVehicleDriver)),
                                        // Toast.LENGTH_LONG).show();
                                        showToastMessage(R.string.BlankVehicleDriver);
                                else
                                    // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.DeviceonCradle)), Toast.LENGTH_LONG).show();
                                    showToastMessage(R.string.DeviceonCradle);
                            } else {
                                if (!(ttfVehicleID.getText().toString().trim().equalsIgnoreCase("") || ttfUserid.getText().toString().trim().equalsIgnoreCase("") || ttfPassword
                                        .getText()
                                        .toString()
                                        .trim()
                                        .equalsIgnoreCase(""))) {

                                    InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                                    imm.hideSoftInputFromWindow(v.getApplicationWindowToken(), 0);

                                    showProgressDialog(Farsi.Convert(getResources().getString(R.string.verifyinglogincredentials)));

                                    AVL_Service.pref.edit().putString("DriverID", ttfUserid.getText().toString()).putString("VehicleID", ttfVehicleID.getText().toString()).commit();
                                    serviceHandle.sendMessageToServer(ttfUserid.getText().toString() + Constants.COLSEPARATOR
                                            + ttfPassword.getText().toString()
                                            + Constants.COLSEPARATOR
                                            + AVL_Service.pref.getString("LastLatitude", "0")
                                            + Constants.COLSEPARATOR
                                            + AVL_Service.pref.getString("LastLongitude", "0")
                                            + Constants.COLSEPARATOR
                                            + AVL_Service.pref.getString("Alt", "1")
                                            + Constants.COLSEPARATOR
                                            + "CabDispatch"
                                            + Constants.COLSEPARATOR
                                            + ttfVehicleID.getText().toString(), "SDHS", MsgType.Login_Req, AckType.NEW, MsgValidity.Medium, MsgPriority.AboveNormal);

                                    // ttfPassword.setText("");
                                } else
                                    // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.BlankVehicleDriver)),
                                    // Toast.LENGTH_LONG).show();
                                    showToastMessage(R.string.BlankVehicleDriver);
                            }// else

                            if (!(ttfVehicleID.getText().toString().trim().equalsIgnoreCase("") || ttfUserid.getText().toString().trim().equalsIgnoreCase("") || ttfPassword
                                    .getText()
                                    .toString()
                                    .trim()
                                    .equalsIgnoreCase(""))) {

                                ttfPassword.setText("");
                                msgHandlerForLoginWait.postDelayed(new Runnable() {

                                    @Override
                                    public void run() {
                                        checkforloginresp = true;
                                        if (!AVL_Service.loggedIn) {
                                            hideProgressDialog();
                                            AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this).setTitle(Farsi.Convert(getResources().getString(R.string.loginFailed))).setMessage(
                                                    Farsi.Convert(getResources().getString(R.string.Try_Again))).setCancelable(false).setPositiveButton(
                                                    Farsi.Convert(getResources().getString(R.string.ok)),
                                                    new DialogInterface.OnClickListener() {

                                                        @Override
                                                        public void onClick(DialogInterface dialog, int which) {

                                                        }
                                                    });
                                            AlertDialog alert = builder.create();
                                            alert.show();

                                            dialogFontSize(alert);

                                        }
                                    }
                                }, 20000);
                            }

                        } else {
                            handleTurnONGPS();
                        }
                    }
                    } else {
                        serviceHandle.sendMessageToServer(AVL_Service.appVersion, "SDHS", MsgType.HandShake, AckType.NEW, MsgValidity.Short, MsgPriority.AboveNormal);
                        Toast.makeText(TaxiPlexer.this, "Handshake Request Sent", Toast.LENGTH_LONG).show();
                    }
                }
            });

            if (!serviceHandle.loggedIn()) {
                // btnLogin.setEnabled(false);
                serviceHandle.sendMessageToServer(AVL_Service.appVersion, "SDHS", MsgType.HandShake, AckType.NEW, MsgValidity.Short, MsgPriority.AboveNormal);
            }
            // login button
            btnEnableHotSpot = new Button(this);
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                btnEnableHotSpot.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                btnEnableHotSpot.setText(R.string.Create_Hotspot);
            } else
                btnEnableHotSpot.setText(Farsi.Convert(getResources().getString(R.string.Create_Hotspot)));

            btnEnableHotSpot.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, txtHeight));
            btnEnableHotSpot.setGravity(Gravity.CENTER);
            btnEnableHotSpot.setTextSize(20);
            btnEnableHotSpot.setTypeface(Typeface.DEFAULT_BOLD);
            btnEnableHotSpot.setVisibility(View.INVISIBLE);
            if (AVL_Service.enableDialiePackageOnDevice)
                btnEnableHotSpot.setVisibility(View.VISIBLE);
            btnEnableHotSpot.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View v) {
                    int currentapiVersion = android.os.Build.VERSION.SDK_INT;
                    if (currentapiVersion >= android.os.Build.VERSION_CODES.FROYO) {
                        tripRejectDialog = new AlertDialog.Builder(TaxiPlexer.this).setIcon(android.R.drawable.ic_dialog_alert).setTitle(
                                Farsi.Convert(getResources().getString(R.string.Create_Hotspot))).setView(createWifiHotspotDialogView()).create();
                        tripRejectDialog.show();

                        dialogFontSize(tripRejectDialog);
                    } else {
                        showToastMessage(R.string.This_device_does_not_have_desired_functionality);
                        // Toast.makeText(TaxiPlexer.this, "This device does not have desired functionality", Toast.LENGTH_LONG).show();
                    }

                }
            });

            loginRow.addView(btnLogin);
            loginRow.addView(btnEnableHotSpot);
            // HandShakeRow.addView(btnHandShake);
            final LinearLayout statusRow = new LinearLayout(this);
            statusRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
            statusRow.setOrientation(LinearLayout.HORIZONTAL);
            statusRow.setVerticalGravity(Gravity.BOTTOM);

            // lblHandshake
            TextView lblHandshake = new TextView(this);
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                lblHandshake.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                lblHandshake.setText(R.string.handshake);
            } else
                lblHandshake.setText(Farsi.Convert(getResources().getString(R.string.handshake)));
            lblHandshake.setTextColor(Color.DKGRAY);
            lblHandshake.setTextSize(labelFont);
            lblHandshake.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, txtHeight, 0.5f));
            lblHandshake.setGravity(Gravity.CENTER);

            // lblHandshake
            TextView lblWebservice = new TextView(this);
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                lblWebservice.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                lblWebservice.setText(R.string.WEBSERVICE);
            } else
                lblWebservice.setText(Farsi.Convert(getResources().getString(R.string.WEBSERVICE)));
            lblWebservice.setTextColor(Color.DKGRAY);
            lblWebservice.setTextSize(labelFont);
            lblWebservice.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, txtHeight, 0.5f));
            lblWebservice.setGravity(Gravity.CENTER);

            statusRow.addView(lblHandshake);
            statusRow.addView(lblWebservice);

            panel.addView(emergencyButtonRow);

            if (AVL_Service.SDShowLanguageChangeOption) {
                LanguageRow.setVisibility(View.VISIBLE);
            } else {
                LanguageRow.setVisibility(View.GONE);

                SetApplicationLocal();
                setLoginViewData();
            }
            if (AVL_Service.SDShowFontChangeOption) {
                FontRow.setVisibility(View.VISIBLE);
            } else
                FontRow.setVisibility(View.GONE);
            panel.addView(LanguageRow);
            panel.addView(FontRow);
            panel.addView(vehicleRow);
            panel.addView(nameRow);
            panel.addView(passwordRow);
            panel.addView(loginRow);

            panel.addView(contain);

            if (!AVL_Service.SDShowPhoneandIMEI)
                contain.setVisibility(View.GONE);

            // panel.addView(HandShakeRow);

            // panel.addView(statusRow);

            // Adding Scroll View

            scrollLoginView.addView(panel);

            loginPanel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
            loginPanel.setGravity(Gravity.CENTER_HORIZONTAL);
            loginPanel.addView(scrollLoginView);

            loginPanel.setId(LOGINSCREEN);
        } catch (Exception ex) {
            LogException("[Exception in createLoginView]" + "[createLoginView]" + "[" + ex.getLocalizedMessage() + "]");
        }
        return loginPanel;
    }
    public void setLoginViewData() {
        try {

            if (AVL_Service.pref.getString("Company", "Company Name").equalsIgnoreCase("My Taxi")) {
                EmgBtn.setText(Farsi.Convert(getResources().getString(R.string.Mytaxi)) + "\n" + AVL_Service.pref.getString("NTEPNumber", "12-XXP"));
            } else
                EmgBtn.setText(Farsi.Convert(AVL_Service.pref.getString("Company", "Company Name")) + "\n" + AVL_Service.pref.getString("NTEPNumber", "12-XXP"));

            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                lblLanguage.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                lblLanguage.setText(getResources().getString(R.string.Language));
            } else
                lblLanguage.setText(Farsi.Convert(getResources().getString(R.string.Language)));
            if (AVL_Service.bArabClient) {
                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                    lblLanguage.setText(getResources().getString(R.string.Language1) + getResources().getString(R.string.Language2));
                } else
                    lblLanguage.setText(Farsi.Convert(getResources().getString(R.string.Language1)) + Farsi.Convert(getResources().getString(R.string.Language2)));
            }

            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                lblUserid.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                lblUserid.setText(getResources().getString(R.string.DriverNo));
            } else
                lblUserid.setText(Farsi.Convert(getResources().getString(R.string.DriverNo)));

            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                lblVehicle.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                lblVehicle.setText(getResources().getString(R.string.VehicleNo));
            } else
                lblVehicle.setText(Farsi.Convert(getResources().getString(R.string.VehicleNo)));

            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                lblPassword.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                lblPassword.setText(getResources().getString(R.string.PIN));
            } else
                lblPassword.setText(Farsi.Convert(getResources().getString(R.string.PIN)));

            if (currentView == loginView) {
                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                    btnLogin.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                    btnLogin.setText(getResources().getString(R.string.StartShift));
                } else
                    btnLogin.setText(Farsi.Convert(getResources().getString(R.string.StartShift)));
            } else {
                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                    btnLogin.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                    btnLogin.setText(getResources().getString(R.string.handshake));
                } else
                    btnLogin.setText(Farsi.Convert(getResources().getString(R.string.handshake)));
            }

        } catch (Exception ex) {
            LogException("[Exception in setLoginViewData]" + "[setLoginViewData]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }

    private void SetApplicationLocal() {
        try {
            String DeviceCurrentLanguage = Locale.getDefault().getLanguage();
            Locale locale = new Locale(AVL_Service.pref.getString("AppLanguage", DeviceCurrentLanguage));
            Locale.setDefault(locale);
            Configuration config = new Configuration();
            config.locale = locale;
            getBaseContext().getResources().updateConfiguration(config, getBaseContext().getResources().getDisplayMetrics());
        } catch (Exception ex) {
            LogException("[Exception in SetApplicationLocal]" + "[SetApplicationLocal]" + "[" + ex.getLocalizedMessage() + "]");
        }

    }

    public void recreateview() {
        if (checkonfontchange == false) {
            checkonfontchange = true;
            loginView = createLoginView();
            mainView = loginView;
            mainView.setKeepScreenOn(true);
            setContentView(mainView);
            currentView = mainView;
        } else
            checkonfontchange = false;
    }

    /*--------------------------------------------------------------createRegisterView--------------------------------------------------------------*/
    @SuppressWarnings("deprecation")
    @SuppressLint("NewApi")
    private ViewGroup createRegisterView() {
        LinearLayout registerPanel = new LinearLayout(this);
        try {
            SetApplicationLocal();
            int txtHeight = screenWidth / 6;
            LinearLayout panel = new LinearLayout(this);
            panel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
            panel.setOrientation(LinearLayout.VERTICAL);
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                panel.setBackground(getWallpaper());
            else
                panel.setBackgroundDrawable(getWallpaper());
            panel.setGravity(Gravity.CENTER_HORIZONTAL);

            // final LinearLayout imeiRow = new LinearLayout(this);
            // imeiRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            // imeiRow.setOrientation(LinearLayout.HORIZONTAL);
            // imeiRow.setGravity(Gravity.CENTER_HORIZONTAL);
            // imeiRow.setPadding(0, 40, 15, 0);

            // IMEI : label and text field
            final LinearLayout imeiRow = new LinearLayout(this);
            imeiRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            imeiRow.setOrientation(LinearLayout.HORIZONTAL);
            imeiRow.setGravity(Gravity.CENTER_HORIZONTAL);
            if (AVL_Service.tm.getLine1Number() != null)
                imeiRow.setPadding(0, 40, 0, 0);
            else
                imeiRow.setPadding(0, 40, 0, 15);

            // IMEI : label and text field
            TextView lblImei = new TextView(this);
            lblImei.setText(Farsi.Convert(getResources().getString(R.string.IMEI)));
            lblImei.setTextColor(Color.YELLOW);
            lblImei.setTextSize(labelFont);
            lblImei.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.6f));
            lblImei.setGravity(Gravity.RIGHT);

            final TextView imeiNum = new TextView(this);
            imeiNum.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.4f));
            imeiNum.setSingleLine();
            imeiNum.setText(AVL_Service.tm.getDeviceId());
            imeiNum.setTextSize(labelFont);
            imeiNum.setTextColor(Color.YELLOW);

            imeiRow.addView(lblImei);
            imeiRow.addView(imeiNum);

            final LinearLayout numberRow = new LinearLayout(this);
            numberRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            numberRow.setOrientation(LinearLayout.HORIZONTAL);
            numberRow.setGravity(Gravity.CENTER_HORIZONTAL);
            numberRow.setPadding(0, 0, 0, 15);

            // IMEI : label and text field
            TextView lblNumber = new TextView(this);
            lblNumber.setText(Farsi.Convert(getResources().getString(R.string.num)));
            lblNumber.setTextColor(Color.YELLOW);
            lblNumber.setTextSize(labelFont);
            lblNumber.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.6f));
            lblNumber.setGravity(Gravity.RIGHT);

            final TextView numV = new TextView(this);
            numV.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.4f));
            numV.setSingleLine();
            numV.setText(AVL_Service.tm.getLine1Number());
            numV.setTextSize(labelFont);
            numV.setTextColor(Color.YELLOW);

            numberRow.addView(lblNumber);
            numberRow.addView(numV);

            final LinearLayout nameRow = new LinearLayout(this);
            nameRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            nameRow.setOrientation(LinearLayout.HORIZONTAL);
            nameRow.setGravity(Gravity.CENTER_HORIZONTAL);
            nameRow.setPadding(0, 0, 15, 0);

            // Userid : label and text field
            TextView lblUserid = new TextView(this);

            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                lblUserid.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                lblUserid.setText(getResources().getString(R.string.DriverNo));
            } else
                lblUserid.setText(Farsi.Convert(getResources().getString(R.string.DriverNo)));

            lblUserid.setTextColor(Color.YELLOW);
            lblUserid.setTextSize(labelFont);
            lblUserid.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, txtHeight, 0.6f));
            lblUserid.setGravity(Gravity.RIGHT);

            final EditText ttfUserid = new EditText(this);
            ttfUserid.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, txtHeight, 0.4f));
            ttfUserid.setInputType(InputType.TYPE_NUMBER_FLAG_DECIMAL + InputType.TYPE_CLASS_NUMBER);
            ttfUserid.setSingleLine();
            ttfUserid.setText(AVL_Service.pref.getString("DriverID", ""));
            ttfUserid.setTextSize(labelFont);

            nameRow.addView(lblUserid);
            nameRow.addView(ttfUserid);

            final LinearLayout passwordRow = new LinearLayout(this);
            passwordRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            passwordRow.setOrientation(LinearLayout.HORIZONTAL);
            passwordRow.setGravity(Gravity.CENTER_HORIZONTAL);
            passwordRow.setPadding(0, 0, 15, 0);

            // Password : label and text field
            TextView lblPassword = new TextView(this);
            lblPassword.setTextSize(labelFont);

            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                lblPassword.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                lblPassword.setText(getResources().getString(R.string.PIN));
            } else
                lblPassword.setText(Farsi.Convert(getResources().getString(R.string.PIN)));

            lblPassword.setTextColor(Color.YELLOW);
            lblPassword.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, txtHeight, 0.6f));
            lblPassword.setGravity(Gravity.RIGHT);

            final EditText ttfPassword = new EditText(this);
            ttfPassword.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, txtHeight, 0.4f));
            ttfPassword.setTransformationMethod(new PasswordTransformationMethod());
            ttfPassword.setInputType(InputType.TYPE_NUMBER_FLAG_DECIMAL + InputType.TYPE_CLASS_NUMBER);
            ttfPassword.setSingleLine();
            ttfPassword.setTextSize(labelFont);

            passwordRow.addView(lblPassword);
            passwordRow.addView(ttfPassword);

            final LinearLayout registerRow = new LinearLayout(this);
            registerRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            registerRow.setOrientation(LinearLayout.HORIZONTAL);
            registerRow.setGravity(Gravity.RIGHT);
            registerRow.setPadding(0, 50, 15, 0);

            // login button
            Button btnRegister = new Button(this);

            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                btnRegister.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                btnRegister.setText(getResources().getString(R.string.RegisterDevice));
            } else
                btnRegister.setText(Farsi.Convert(getResources().getString(R.string.RegisterDevice)));

            btnRegister.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
            btnRegister.setGravity(Gravity.CENTER);
            btnRegister.setTextSize(20);
            // btnRegister.setTypeface(Typeface.DEFAULT_BOLD);

            btnRegister.setOnClickListener(new View.OnClickListener() {
                public void onClick(View v) {

                    // new GetDataFromServlet().execute(NetworkActivity.this) ;
                    Log.w(getClass().getSimpleName(), "Register button was pressed");

                    if (!(ttfUserid.getText().toString().trim().equalsIgnoreCase("") || ttfPassword.getText().toString().trim().equalsIgnoreCase(""))) {
                        handleShowProgress(Farsi.Convert(getResources().getString(R.string.Registering_Device)));
                        AVL_Service.pref.edit().putString("DriverID", ttfUserid.getText().toString()).commit();
                        try {
                            serviceHandle.sendMessageToServer(ttfUserid.getText().toString() + Constants.COLSEPARATOR
                                    + ttfPassword.getText().toString()
                                    + Constants.COLSEPARATOR
                                    + imeiNum.getText().toString()
                                    + Constants.COLSEPARATOR
                                    + AVL_Service.tm.getLine1Number()
                                    + Constants.COLSEPARATOR
                                    + AVL_Service.tm.getNetworkOperatorName()
                                    + Constants.COLSEPARATOR
                                    + AVL_Service.tm.getSimSerialNumber()
                                    + Constants.COLSEPARATOR
                                    + Build.MODEL
                                    + Constants.COLSEPARATOR
                                    + Build.MANUFACTURER, "SDHS", MsgType.registerDevice, AckType.NEW, MsgValidity.Medium, MsgPriority.AboveNormal);
                        } catch (Exception e) {
                            handleException("[Exception on register button click]" + "[createRegisterView]" + "[" + e.getLocalizedMessage() + "]");
                        }
                    } else
                        Toast.makeText(TaxiPlexer.this, "Blank Vehicle#, Driver# or PIN\n                    Not Accepted", Toast.LENGTH_LONG).show();

                }
            });

            registerRow.addView(btnRegister);

            if (AVL_Service.SDShowPhoneandIMEI) {
                panel.addView(imeiRow);
                if (AVL_Service.tm.getLine1Number() != null)

                    panel.addView(numberRow);
            }
            panel.addView(nameRow);
            panel.addView(passwordRow);
            panel.addView(registerRow);

            // Adding scroll view
            ScrollView registerView = new ScrollView(this);
            registerView.addView(panel);

            registerPanel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
            registerPanel.setGravity(Gravity.CENTER_HORIZONTAL);
            registerPanel.addView(registerView);

        } catch (Exception ex) {
            LogException("[Exception in createRegisterView]" + "[createRegisterView]" + "[" + ex.getLocalizedMessage() + "]");
        }
        return registerPanel;
    }
    @SuppressWarnings("deprecation")
    @SuppressLint("NewApi")
    private ViewGroup createArabicRegisterView() {
        LinearLayout registerPanel = new LinearLayout(this);
        try {
            int txtHeight = screenWidth / 6;

            LinearLayout panel = new LinearLayout(this);
            panel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
            panel.setOrientation(LinearLayout.VERTICAL);
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                panel.setBackground(getWallpaper());
            else
                panel.setBackgroundDrawable(getWallpaper());
            panel.setGravity(Gravity.CENTER_HORIZONTAL);

            final LinearLayout imeiRow = new LinearLayout(this);
            imeiRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            imeiRow.setOrientation(LinearLayout.HORIZONTAL);
            imeiRow.setGravity(Gravity.CENTER_HORIZONTAL);
            imeiRow.setPadding(0, 40, 15, 0);

            // IMEI : label and text field
            TextView lblImei = new TextView(this);
            lblImei.setText(Farsi.Convert(getResources().getString(R.string.IMEI)));
            lblImei.setTextColor(Color.YELLOW);
            lblImei.setTextSize(labelFont);
            lblImei.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, txtHeight, 0.6f));
            lblImei.setGravity(Gravity.RIGHT);

            final TextView imeiNum = new TextView(this);
            imeiNum.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, txtHeight, 0.4f));
            imeiNum.setSingleLine();
            imeiNum.setText(AVL_Service.tm.getDeviceId());
            imeiNum.setTextSize(labelFont);
            imeiNum.setTextColor(Color.YELLOW);

            imeiRow.addView(lblImei);
            imeiRow.addView(imeiNum);

            final LinearLayout nameRow = new LinearLayout(this);
            nameRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            nameRow.setOrientation(LinearLayout.HORIZONTAL);
            nameRow.setGravity(Gravity.CENTER_HORIZONTAL);
            nameRow.setPadding(0, 0, 15, 0);

            // Userid : label and text field
            TextView lblUserid = new TextView(this);
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                lblUserid.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                lblUserid.setText(getResources().getString(R.string.DriverNo));
            } else
                lblUserid.setText(Farsi.Convert(getResources().getString(R.string.DriverNo)));

            lblUserid.setTextColor(Color.YELLOW);
            lblUserid.setTextSize(labelFont);
            lblUserid.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, txtHeight, 0.6f));
            lblUserid.setGravity(Gravity.RIGHT);

            final EditText ttfUserid = new EditText(this);
            ttfUserid.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, txtHeight, 0.4f));
            ttfUserid.setInputType(InputType.TYPE_NUMBER_FLAG_DECIMAL + InputType.TYPE_CLASS_NUMBER);
            ttfUserid.setSingleLine();
            ttfUserid.setText(AVL_Service.pref.getString("DriverID", ""));
            ttfUserid.setTextSize(labelFont);

            nameRow.addView(lblUserid);
            nameRow.addView(ttfUserid);

            final LinearLayout passwordRow = new LinearLayout(this);
            passwordRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            passwordRow.setOrientation(LinearLayout.HORIZONTAL);
            passwordRow.setGravity(Gravity.CENTER_HORIZONTAL);
            passwordRow.setPadding(0, 0, 15, 0);

            // Password : label and text field
            TextView lblPassword = new TextView(this);
            lblPassword.setTextSize(labelFont);
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                lblPassword.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                lblPassword.setText(getResources().getString(R.string.PIN));
            } else
                lblPassword.setText(Farsi.Convert(getResources().getString(R.string.PIN)));
            lblPassword.setTextColor(Color.YELLOW);
            lblPassword.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, txtHeight, 0.6f));
            lblPassword.setGravity(Gravity.RIGHT);

            final EditText ttfPassword = new EditText(this);
            ttfPassword.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, txtHeight, 0.4f));
            ttfPassword.setTransformationMethod(new PasswordTransformationMethod());
            ttfPassword.setInputType(InputType.TYPE_NUMBER_FLAG_DECIMAL + InputType.TYPE_CLASS_NUMBER);
            ttfPassword.setSingleLine();
            ttfPassword.setTextSize(labelFont);

            passwordRow.addView(lblPassword);
            passwordRow.addView(ttfPassword);

            final LinearLayout registerRow = new LinearLayout(this);
            registerRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            registerRow.setOrientation(LinearLayout.HORIZONTAL);
            registerRow.setGravity(Gravity.RIGHT);
            registerRow.setPadding(0, 50, 15, 0);

            // login button
            Button btnRegister = new Button(this);
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                btnRegister.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                btnRegister.setText(getResources().getString(R.string.RegisterDevice));
            } else
                btnRegister.setText(Farsi.Convert(getResources().getString(R.string.RegisterDevice)));

            btnRegister.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
            btnRegister.setGravity(Gravity.CENTER);
            btnRegister.setTextSize(20);
            btnRegister.setTypeface(Typeface.DEFAULT_BOLD);

            btnRegister.setOnClickListener(new View.OnClickListener() {
                public void onClick(View v) {

                    // new GetDataFromServlet().execute(NetworkActivity.this) ;
                    Log.w(getClass().getSimpleName(), "Register button was pressed");

                    if (!(ttfUserid.getText().toString().trim().equalsIgnoreCase("") || ttfPassword.getText().toString().trim().equalsIgnoreCase(""))) {
                        handleShowProgress(Farsi.Convert(getResources().getString(R.string.Registering_Device)));
                        AVL_Service.pref.edit().putString("DriverID", ttfUserid.getText().toString()).commit();
                        try {
                            serviceHandle.sendMessageToServer(ttfUserid.getText().toString() + Constants.COLSEPARATOR
                                    + ttfPassword.getText().toString()
                                    + Constants.COLSEPARATOR
                                    + imeiNum.getText().toString()
                                    + Constants.COLSEPARATOR
                                    + AVL_Service.tm.getLine1Number()
                                    + Constants.COLSEPARATOR
                                    + AVL_Service.tm.getNetworkOperatorName()
                                    + Constants.COLSEPARATOR
                                    + AVL_Service.tm.getSimSerialNumber()
                                    + Constants.COLSEPARATOR
                                    + Build.MODEL
                                    + Constants.COLSEPARATOR
                                    + Build.MANUFACTURER, "SDHS", MsgType.registerDevice, AckType.NEW, MsgValidity.Medium, MsgPriority.AboveNormal);
                        } catch (Exception e) {
                            handleException("[Exception in arabic btnregister click]" + "[createArabicRegisterView]" + "[" + e.getLocalizedMessage() + "]");
                        }
                    } else
                        showToastMessage(R.string.Blank_Vehicle_Number);
                    // Toast.makeText(TaxiPlexer.this, "Blank Vehicle#, Driver# or PIN\n                    Not Accepted", Toast.LENGTH_LONG).show();

                }
            });

            registerRow.addView(btnRegister);

            panel.addView(imeiRow);
            panel.addView(nameRow);
            panel.addView(passwordRow);
            panel.addView(registerRow);

            // Adding scroll view
            ScrollView registerView = new ScrollView(this);
            registerView.addView(panel);

            registerPanel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
            registerPanel.setGravity(Gravity.CENTER_HORIZONTAL);
            registerPanel.addView(registerView);

        } catch (Exception ex) {
            LogException("[Exception in createArabicRegisterView]" + "[createArabicRegisterView]" + "[" + ex.getLocalizedMessage() + "]");
        }
        return registerPanel;
    }

    /*-------------------------------------------------------------createManifestView-----------------------------------------------------------*/
    @SuppressWarnings("deprecation")
    @SuppressLint("NewApi")
    private ViewGroup createManifestView() {
        SetApplicationLocal();
        LinearLayout mainPanel = new LinearLayout(this);
        try {
            mainPanel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
            mainPanel.setOrientation(LinearLayout.VERTICAL);

            DisplayMetrics metrics = new DisplayMetrics();
            getWindowManager().getDefaultDisplay().getMetrics(metrics);

            int h = metrics.heightPixels; // 1280
            int w = metrics.widthPixels; // 720

            if ((h == 1776 || h == 1920) && w == 1080) {

                mainPanel.setPadding(0, screenHeight / 20, 0, 0);

            } else if (h == 1280 && w == 720) {

                mainPanel.setPadding(0, screenHeight / 40, 0, 0);

            }

            else {
                mainPanel.setPadding(0, 0, 0, 0);

            }

            final RelativeLayout headerRow = new RelativeLayout(this);
            headerRow.setLayoutParams(new RelativeLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            // headerRow.setOrientation(LinearLayout.HORIZONTAL);
            // headerRow.setGravity(Gravity.CENTER);

            flaggerBtn = new Button(this);
            RelativeLayout.LayoutParams p = new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
            p.addRule(RelativeLayout.ALIGN_PARENT_LEFT);
            flaggerBtn.setLayoutParams(p);
            flaggerBtn.setPadding(2, 0, 10, 0);
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                flaggerBtn.setBackground(getResources().getDrawable(R.drawable.flagger));
            else
                flaggerBtn.setBackgroundDrawable(getResources().getDrawable(R.drawable.flagger));
            flaggerBtn.setHeight((int) ((AVL_Service.SDFlaggerButtonSize + Integer.parseInt(Fonts[AVL_Service.pref.getInt("FontPosition", 4)]) * 1.83)));
            flaggerBtn.setWidth((int) (AVL_Service.SDFlaggerButtonSize + Integer.parseInt(Fonts[AVL_Service.pref.getInt("FontPosition", 4)])));
            // flaggerBtn.setLeft(0);

            flaggerBtn.setOnClickListener(new OnClickListener() {
                public void onClick(View v) {

                    AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                    builder.setIcon(android.R.drawable.ic_dialog_alert).setTitle(Farsi.Convert(getResources().getString(R.string.FlaggerTripConfirmation))).setMessage(
                            Farsi.Convert(getResources().getString(R.string.SurestartFlaggerTrip))).setPositiveButton(
                            Farsi.Convert(getResources().getString(R.string.Yes)),
                            new DialogInterface.OnClickListener() {

                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    isMeterON = false;
                                    // LogException("flaggerBtnClick 3115: " + tripsIRTDO != null ? "tripsIRTDO" : "NUll " + CapacityOfVehicles != null ? "CapacityOfVehicles"
                                    // : "null");
                                    if (tripsIRTDO < CapacityOfVehicles) {
                                        // LogException("flaggerBtnClick 3117: " + softFlaggerPickUp != null ? "softFlaggerPickUpOK" : " softFlaggerPickUp NUll");
                                        if ((Meter != null && Meter.isConnectionAlive() && !softFlaggerPickUp && !AVL_Service.SDEnableManualFlagger) || (AVL_Service.enableDialiePackageOnDevice && !AVL_Service.bShuttle)) {
                                            LogException("[Meter On while starting flagger][createMAnifestView]");
                                            new AlertDialog.Builder(TaxiPlexer.this)
                                                    .setIcon(android.R.drawable.ic_dialog_alert)
                                                    .setTitle(Farsi.Convert(getResources().getString(R.string.FlaggerRequest)))
                                                    .setMessage(Farsi.Convert(getResources().getString(R.string.TaxiMetertoStartFlagger)))
                                                    .setPositiveButton(Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {

                                                        @Override
                                                        public void onClick(DialogInterface dialog, int which) {
                                                            dialog.dismiss();
                                                            checkSoftMeterMON = false;
                                                        } // onClick

                                                    })
                                                    .show();
                                        } else {
                                            if (Double.valueOf(AVL_Service.pref.getString("LastLatitude", "0")) == 0 || Double.valueOf(AVL_Service.pref.getString("LastLongitude", "0")) == 0
                                                    || AVL_Service.pref.getString("Address", "Unknown Address").equalsIgnoreCase("")) {
                                                new AlertDialog.Builder(TaxiPlexer.this)
                                                        .setIcon(android.R.drawable.ic_dialog_alert)
                                                        .setTitle(Farsi.Convert(getResources().getString(R.string.FlaggerRequestFailed)))
                                                        .setMessage(Farsi.Convert(getResources().getString(R.string.UnknownGPSLocation)))
                                                        .setPositiveButton(Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {

                                                            @Override
                                                            public void onClick(DialogInterface dialog, int which) {
                                                                dialog.dismiss();
                                                                checkSoftMeterMON = false;
                                                            } // onClick

                                                        })
                                                        .show();
                                            } else {
                                                if (AVL_Service.enableDialiePackageOnDevice)
                                                    HiredFrame();
                                                else {
                                                    tripRejectDialog = new AlertDialog.Builder(TaxiPlexer.this).setIcon(android.R.drawable.ic_dialog_alert).setTitle(
                                                            Farsi.Convert(getResources().getString(R.string.PassengerCount))).setView(createPassengerCountDialogView()).create();
                                                    tripRejectDialog.show();
                                                }

                                            }
                                        }
                                    } else {
                                        // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.CapacityofVehiclesFull)),
                                        // Toast.LENGTH_SHORT).show();
                                        showToastMessage(R.string.CapacityofVehiclesFull);
                                        checkSoftMeterMON = false;
                                    }
                                } // onClick

                            })
                            .setNegativeButton(Farsi.Convert(getResources().getString(R.string.No)), new DialogInterface.OnClickListener() {

                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    getDataFromResourseForSplitStrings("");
                                    // handleTripOffer("5^This trip is not available^Khayan ban firdousi^LHR^AIRPK^SELF^000152365^40");
                                    dialog.dismiss();
                                    checkSoftMeterMON = false;
                                }
                            })
                            .setNeutralButton(Farsi.Convert(getResources().getString(R.string.EstimateCost)), new DialogInterface.OnClickListener() {

                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    AVL_Service.pref.edit().putString("FlaggerDrop", "Unknown").commit(); // to clear flagger drop before any use
                                    setContentView(createFlaggerTripCostEstimationView());
                                    checkSoftMeterMON = false;

                                }
                            });
                    AlertDialog alert = builder.create();
                    alert.show();

                    dialogFontSize(alert);

                    // if (!tripAdapter.isEmpty())
                    // CompleteRoute();
                }
            });

            // final TextView statusBar = new TextView(this);
            //
            // if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            // statusBar.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            // statusBar.setText(getResources().getString(R.string.Manifest));
            // } else
            // statusBar.setText(Farsi.Convert(getResources().getString(R.string.Manifest)));
            //
            // statusBar.setTextSize(miscFont + 1);
            // statusBar.setTypeface(Typeface.DEFAULT_BOLD);
            // // statusBar.setGravity(Gravity.CENTER);
            // statusBar.setTextColor(Color.YELLOW);
            // statusBar.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));

            // manifestNum = new TextView(this);
            //
            // if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            // manifestNum.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            // manifestNum.setText(getResources().getString(R.string.NotAssigned));
            // } else {
            // manifestNum.setText(Farsi.Convert(getResources().getString(R.string.NotAssigned)));
            // manifestNum.setTypeface(Typeface.DEFAULT_BOLD);
            // }
            //
            // manifestNum.setTextSize(miscFont - 1);
            //
            // // manifestNum.setGravity(Gravity.CENTER);
            // manifestNum.setTextColor(Color.MAGENTA);
            // manifestNum.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));

            // tripSortOrder = new TextView(this);
            // tripSortOrder.setTextColor(Color.YELLOW);
            // if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            // tripSortOrder.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            // tripSortOrder.setText(getResources().getString(R.string.PickSort));
            // } else
            // tripSortOrder.setText("   " + Farsi.Convert(getResources().getString(R.string.PickSort)));
            //
            // tripSortOrder.setWidth(180);
            // tripSortOrder.setTextSize(miscFont - 2);
            // // tripSortOrder.setGravity(Gravity.CENTER);
            // tripSortOrder.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
            // tripSortOrder.setOnClickListener(new OnClickListener() {
            //
            // @Override
            // public void onClick(View view) {
            //
            // Toast.makeText(TaxiPlexer.this, "Triplist Sorting In Progress", Toast.LENGTH_LONG).show();
            // ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
            // scheduler.schedule(new Runnable() {
            //
            // @Override
            // public void run() {
            //
            // runOnUiThread(new Runnable() {
            // public void run() {
            // if (tripSortOrderclicked) {
            // tripSortOrder.setTextColor(Color.YELLOW);
            // if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            // tripSortOrder.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            // tripSortOrder.setText(getResources().getString(R.string.PickSort));
            // } else
            // tripSortOrder.setText("   " + Farsi.Convert(getResources().getString(R.string.PickSort)));
            //
            // tripSortOrderclicked = false;
            // } else {
            // tripSortOrder.setTextColor(Color.WHITE);
            // if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            // tripSortOrder.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            // tripSortOrder.setText(getResources().getString(R.string.StatusSort));
            // } else
            // tripSortOrder.setText("   " + Farsi.Convert(getResources().getString(R.string.StatusSort)));
            //
            // tripSortOrderclicked = true;
            // }
            // try {
            // sortTripList();
            // } catch (Exception e) {

            // e.printStackTrace();
            // }
            // }
            // });
            //
            // }
            // }, 3, TimeUnit.SECONDS);
            //
            // }
            // });

            showUnperformedTrips = new CheckBox(this);
            RelativeLayout.LayoutParams p1 = new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
            p1.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
            p1.setMargins(0, 50, 0, 0);
            showUnperformedTrips.setLayoutParams(p1);
            showUnperformedTrips.setButtonDrawable(R.drawable.checkbox);
            showUnperformedTrips.setFocusable(true);
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                showUnperformedTrips.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                showUnperformedTrips.setText(R.string.Filter);
            } else
                showUnperformedTrips.setText(Farsi.Convert(getResources().getString(R.string.Filter)));
            showUnperformedTrips.setTextColor(Color.parseColor("#EAB55A"));
            showUnperformedTrips.setTextSize(miscFont - 3);
            showUnperformedTrips.setOnCheckedChangeListener(new OnCheckedChangeListener() {

                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    if (isChecked)
                        isOnlyUnperformedTrips = true;
                    else
                        isOnlyUnperformedTrips = false;
                    try {
                        sortTripList();
                    } catch (Exception e) {

                        e.printStackTrace();
                    }
                }
            });
            headerRow.addView(flaggerBtn);
            // headerRow.addView(btnCompleteRout);
            // headerRow.addView(statusBar);
            // headerRow.addView(manifestNum);
            // headerRow.addView(tripSortOrder);
            headerRow.addView(showUnperformedTrips);

            // headerRow.addView(EstimatedCost);
            mainPanel.addView(headerRow);
            mainPanel.setSoundEffectsEnabled(true);
            // setBackgroundColor(Color.GREEN);

            manifestListView = new ListView(this);
            manifestListView.setOnItemClickListener(new OnItemClickListener() {

                @Override
                public void onItemClick(AdapterView<?> arg0, View item, int index, long arg3) {
                    OpenTripView(index);
                }

            });
            manifestListView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));

            arrayListOftrips = new TripArrayList();
            arrayListForAdapter = new ArrayList<Trip>();
            // arrayListOfTreatedTrips = new TripArrayList();
            // arrayListOfOtherTrips = new TripArrayList();
            tripAdapter = new TripAdapter(this, R.layout.trip_row, arrayListForAdapter);
            manifestListView.setAdapter(this.tripAdapter);
            tripAdapter.setNotifyOnChange(false);
            mainPanel.addView(manifestListView);

        } catch (Exception ex) {
            LogException("[Exception in creating trip list view]" + "[createManifestView]" + "[" + ex.getLocalizedMessage() + "]");
        }
        return mainPanel;
    }
    @SuppressWarnings("deprecation")
    @SuppressLint("NewApi")
    private void OpenTripView(int TripIndex) {
        try {
            currentTrip = tripAdapter.getItem(TripIndex);

            if (currentTrip.bWillCallRequest == true) {
                showToastMessageFromString(Farsi.Convert(getResources().getString(R.string.Wait_For_PickUp_Time)));

            } else if (!currentTrip.ConfirmNumber.equalsIgnoreCase(";") && !currentTrip.ConfirmNumber.equalsIgnoreCase("-")) {
                if (!(currentTrip.state.equalsIgnoreCase(States.CANCELLED) || currentTrip.state.equalsIgnoreCase(States.NOSHOW))) {

                    if (tripView != null)
                        tripView.invalidate();
                    tripView = createTripView();
                    tripView.setKeepScreenOn(true);

					/*
					 * if (tripView == null) {
					 * tripView = createTripView();
					 * tripView.setKeepScreenOn(true);
					 * } else {
					 * tripView.invalidate();
					 * tripView = createTripView();
					 * tripView.setKeepScreenOn(true);
					 * }
					 */

                    ((ViewGroup) ((ViewGroup) ((ViewGroup) tripView).getChildAt(0)).getChildAt(0)).getChildAt(0).setOnClickListener(new OnClickListener() {

                        private long firstClickTime = 0;

                        @Override
                        public void onClick(View v) {

                            if ((System.currentTimeMillis() - firstClickTime) < 400)
                                if (currentTrip.state.equalsIgnoreCase(States.ACCEPTED)) {
                                    sendTripResponse(States.IRTPU);
                                    enableTripView();

                                } else if (currentTrip.state.equalsIgnoreCase(States.IRTPU)) {
                                    disableTripView();
                                    sendTripResponse(States.ACCEPTED);
                                }
                            firstClickTime = System.currentTimeMillis();

                        }
                    });

                    currentView = tripView;
                    setContentView(currentView);

                    drawable = PickedButton.getBackground();
                    drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                        PickedButton.setBackground(drawable);
                    else
                        PickedButton.setBackgroundDrawable(drawable);

                    drawable = DroppedButton.getBackground();
                    drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                        DroppedButton.setBackground(drawable);
                    else
                        DroppedButton.setBackgroundDrawable(drawable);

                    drawable = callOutButton.getBackground();
                    drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                        callOutButton.setBackground(drawable);
                    else
                        callOutButton.setBackgroundDrawable(drawable);

                    drawable = NoShowButton.getBackground();
                    drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                        NoShowButton.setBackground(drawable);
                    else
                        NoShowButton.setBackgroundDrawable(drawable);

                    if (currentTrip.state.equalsIgnoreCase(States.ACCEPTED) && !currentTrip.allowDirectPickup)
                        disableTripView();
                    else if (currentTrip.state.equalsIgnoreCase(States.IRTPU))
                        enableTripView();
                    else if (currentTrip.state.equalsIgnoreCase(States.PICKEDUP)) {

                        enableTripView();
                        if (!AVL_Service.ShowTogglePickUpDropOffBTN) {
                            drawable = PickedButton.getBackground();
                            drawable.setColorFilter(Color.GREEN, Mode.SRC_IN);
                            // drawable.setColorFilter(0xFFFF0000, android.graphics.PorterDuff.Mode.MULTIPLY); // Azhar
                            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                                PickedButton.setBackground(drawable);
                            else
                                PickedButton.setBackgroundDrawable(drawable);
                        }

                    } else if (currentTrip.state.equalsIgnoreCase(States.DROPPED)) {

                        if (AVL_Service.ShowTogglePickUpDropOffBTN) {
                            drawable = PickedButton.getBackground();
                            drawable.setColorFilter(Color.GREEN, Mode.SRC_IN);
                            // drawable.setColorFilter(0xFFFF0000, android.graphics.PorterDuff.Mode.MULTIPLY); // Azhar
                            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                                PickedButton.setBackground(drawable);
                            else
                                PickedButton.setBackgroundDrawable(drawable);
                        } else {
                            drawable = DroppedButton.getBackground();
                            drawable.setColorFilter(Color.GREEN, Mode.SRC_IN);
                            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                                DroppedButton.setBackground(drawable);
                            else
                                DroppedButton.setBackgroundDrawable(drawable);
                        }
                        disableTripView();

                    } else if (currentTrip.state.equalsIgnoreCase(States.CALLOUT)) {

                        enableTripView();

                        drawable = callOutButton.getBackground();
                        drawable.setColorFilter(Color.GREEN, Mode.SRC_IN);
                        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                            callOutButton.setBackground(drawable);
                        else
                            callOutButton.setBackgroundDrawable(drawable);

                    } else if (currentTrip.state.equalsIgnoreCase(States.NOSHOWREQ)) {

                        enableTripView();

                        drawable = NoShowButton.getBackground();
                        drawable.setColorFilter(Color.GREEN, Mode.SRC_IN);
                        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                            NoShowButton.setBackground(drawable);
                        else
                            NoShowButton.setBackgroundDrawable(drawable);

                    }

                    updateTripDetailView(currentTrip);

                } else if (currentTrip.state.equalsIgnoreCase(States.NOSHOW))
                    // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.TripApprovedNOSHOW)), Toast.LENGTH_SHORT).show();
                    showToastMessage(R.string.TripApprovedNOSHOW);
                else {
                    String StateString = "";
                    if (AVL_Service.pref.getString("AppLanguage", "en").equalsIgnoreCase("en"))
                        StateString = getResources().getString(R.string.ThisTriphasState) + currentTrip.state;
                    else
                        StateString = getDataFromResourse(currentTrip.state) + getResources().getString(R.string.ThisTriphasState);
                    // Toast.makeText(getApplicationContext(), Farsi.Convert(StateString), Toast.LENGTH_SHORT).show();
                    showToastMessageFromString(StateString);
                }
            } else if (currentTrip.ConfirmNumber.equalsIgnoreCase("-")) {
                if (MFView.get(currentTrip.manifestNum)) {
                    MFView.remove(currentTrip.manifestNum);
                    MFView.put(currentTrip.manifestNum, false);
                } else {
                    MFView.remove(currentTrip.manifestNum);
                    MFView.put(currentTrip.manifestNum, true);
                }

                sortTripList();
                currentTrip = null;
            }
        } catch (Exception ex) {
            LogException("[Exception in OpenTripView]" + "[OpenTripView]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }

    private ViewGroup CreateListViewControls() {

        LinearLayout mainPanel = new LinearLayout(this);
        try {
            mainPanel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
            mainPanel.setOrientation(LinearLayout.VERTICAL);

            View line = new View(this);
            line.setBackgroundColor(Color.BLUE);
            line.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, 1));
            // line.setMinimumHeight(2);

            View Bottomline = new View(this);
            Bottomline.setBackgroundColor(Color.BLUE);
            Bottomline.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, 1));
            // Bottomline.setMinimumHeight(2);

            final LinearLayout headingRow = new LinearLayout(this);
            headingRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            headingRow.setOrientation(LinearLayout.HORIZONTAL);

            TextView lblHeading = new TextView(this);
            lblHeading.setText(Farsi.Convert(getResources().getString(R.string.StartFlaggerorFromList)));
            lblHeading.setTypeface(null, Typeface.BOLD);
            lblHeading.setGravity(Gravity.CENTER);
            lblHeading.setTextColor(Color.YELLOW);
            lblHeading.setTextSize(miscFont + 1);
            lblHeading.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
            headingRow.addView(lblHeading);

            final LinearLayout BottonRow = new LinearLayout(this);
            BottonRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            BottonRow.setGravity(Gravity.CENTER);
            BottonRow.setOrientation(LinearLayout.HORIZONTAL);

            Button btnOK = new Button(this);
            btnOK.setText(Farsi.Convert(getResources().getString(R.string.ok)));
            btnOK.setTextSize(miscFont - 1);
            btnOK.setTypeface(Typeface.DEFAULT_BOLD);
            btnOK.setLayoutParams(new LayoutParams(screenWidth / 3, 80));
            btnOK.setGravity(Gravity.CENTER);
            btnOK.setOnClickListener(new View.OnClickListener() {
                public void onClick(View view) {
                    AVL_Service.pref.edit().putString("FlaggerDrop", "Unknown").commit();// to clear flagger drop before any use
                    pickedUp();
                    TripNoListDialog.dismiss();
                }
            });

            Button btnCancel = new Button(this);
            btnCancel.setText(Farsi.Convert(getResources().getString(R.string.Cancel)));
            btnCancel.setTextSize(miscFont - 1);
            btnCancel.setTypeface(Typeface.DEFAULT_BOLD);
            btnCancel.setLayoutParams(new LayoutParams(screenWidth / 3, 80));
            btnCancel.setGravity(Gravity.CENTER);
            btnCancel.setOnClickListener(new View.OnClickListener() {
                public void onClick(View view) {
                    MeterTimeOffTripCreated = false;
                    TripNoListDialog.dismiss();
                }
            });
            BottonRow.addView(btnOK);
            BottonRow.addView(btnCancel);
            try {
                final LinearLayout headerRow = new LinearLayout(this);
                headerRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
                headerRow.setOrientation(LinearLayout.HORIZONTAL);

                tcn = new ListView(this);
                tcn.setOnItemClickListener(new OnItemClickListener() {

                    public void onItemClick(AdapterView<?> arg0, View arg1, int index, long arg3) {
                        String TripNumber = TripNumbers.get(index).trim();
                        int TripIndex = -1;
                        for (int i = 0; i < arrayListOftrips.size(); i++) {
                            String lTripNo = arrayListOftrips.get(i).ConfirmNumber.trim();
                            if (lTripNo.equals(TripNumber)) {
                                TripIndex = i;
                                break;
                            }
                        }
                        OpenTripView(TripIndex);
                        TripSelectedFromMeterPickUp = true;
                        if (currentTrip != null && (currentTrip.state.equalsIgnoreCase(States.ACCEPTED) || currentTrip.state.equalsIgnoreCase(States.DISPATCHED) || currentTrip.state
                                .equalsIgnoreCase(States.ATLOCATION))) {
                            pickedUp();
                            LogException("flagger : Auto Flagger 5" + "[CreateListViewControls]");
                        }
                        TripNoListDialog.dismiss();
                    }
                });
                tcn.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
                tripNoAdapter = new TripNoAdapter(this, R.layout.tripno_list, TripNumbers);
                tcn.setAdapter(this.tripNoAdapter);
                mainPanel.addView(headerRow);
                mainPanel.addView(headingRow);
                mainPanel.addView(line);
                mainPanel.addView(tcn);
                mainPanel.addView(BottonRow);

            } catch (NotFoundException e) {
                e.printStackTrace();
            }
        } catch (Exception ex) {
            LogException("[Exception in CreateListViewControls]" + "[CreateListViewControls]" + "[" + ex.getLocalizedMessage() + "]");
        }
        return mainPanel;
    }



    class TripNoAdapter extends ArrayAdapter<String> {

        private final List<String> TripNo;

        public TripNoAdapter(Context context, int textViewResourceId, List<String> objects) {
            super(context, textViewResourceId, objects);
            this.TripNo = objects;

        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            View v = convertView;
            try {
                if (v == null) {
                    LayoutInflater vi = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                    v = vi.inflate(R.layout.tripno_list, null);
                }

                String tripNo = TripNo.get(position);

                if (tripNo != null) {

                    TextView tvtripno = (TextView) v.findViewById(R.id.tvtripno);
                    tvtripno.setText(tripNo);
                    tvtripno.setTextSize(miscFont + 1);
                    tvtripno.setTypeface(Typeface.SERIF, Typeface.BOLD);
                    tvtripno.setTextColor(Color.WHITE);

                }
            } catch (Exception ex) {
                LogException("[Exception in TripNoAdapter]" + "[TripNoAdapter]" + "[" + ex.getLocalizedMessage() + "]");
            }
            return v;
        }
    }
	/*--------------------------------------------------------------createFlaggerTripCostEstimationView---------------------------------------------------------------*/

    @SuppressWarnings("deprecation")
    @SuppressLint("NewApi")
    private ViewGroup createFlaggerTripCostEstimationView() {
        LinearLayout linear = new LinearLayout(this);
        try {
            SetApplicationLocal();
            final String[] States = {"Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "Delaware", "District of Columbia", "Florida", "Georgiav", "Hawaii", "Idaho",
                    "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", "Missouri", "Montana", "Nebraska",
                    "Nevada", "New Hampshire", "New Jersey", "New Mexico", "New York", "North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island",
                    "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", "Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin", "Wyoming"};

            final String[] StateSymbols = {"AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "DC", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO",
                    "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY"};

            Context ctx = getBaseContext();

            // Main Layout of Flagger Trip Cost Estimation View

            linear.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
            linear.setOrientation(LinearLayout.VERTICAL);

            final LinearLayout emergencyButtonRow = new LinearLayout(this);
            emergencyButtonRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            emergencyButtonRow.setOrientation(LinearLayout.HORIZONTAL);
            emergencyButtonRow.setGravity(Gravity.CENTER_HORIZONTAL);
            // emergencyButtonRow.setPadding(5, 0, 5, 0);

            estimateView_breakBtn = new Button(this);
            drawable = estimateView_breakBtn.getBackground();
            drawable.setColorFilter(Color.parseColor(AVL_Service.SDBreakColor), Mode.SRC_IN);
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                estimateView_breakBtn.setBackground(drawable);
            else
                estimateView_breakBtn.setBackgroundDrawable(drawable);
            estimateView_breakBtn.setTypeface(null, Typeface.BOLD);
            estimateView_breakBtn.setTextSize(miscFont - 1);
            estimateView_breakBtn.setTextColor(Color.WHITE);
            if (break_status == 1) {
                // estimateView_breakBtn.setTextColor(Color.BLACK);
                drawable = estimateView_breakBtn.getBackground();
                drawable.setColorFilter(Color.parseColor(AVL_Service.SDResumeColor), Mode.SRC_IN);
                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                    estimateView_breakBtn.setBackground(drawable);
                else
                    estimateView_breakBtn.setBackgroundDrawable(drawable);
                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                    estimateView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                    estimateView_breakBtn.setText(resumeButtonLabel);
                } else
                    estimateView_breakBtn.setText(Farsi.Convert(resumeButtonLabel));

            } else if (break_status == 0) {
                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                    estimateView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                    estimateView_breakBtn.setText(breakBtnLabel);
                } else
                    estimateView_breakBtn.setText(Farsi.Convert(breakBtnLabel));

                //
                drawable = estimateView_breakBtn.getBackground();
                drawable.setColorFilter(Color.parseColor(AVL_Service.SDBreakColor), Mode.SRC_IN);
                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                    estimateView_breakBtn.setBackground(drawable);
                else
                    estimateView_breakBtn.setBackgroundDrawable(drawable);
            }
            estimateView_breakBtn.setOnClickListener(breakButtonLintener);
            // breakBtn.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));

            Button EmgBtn = new Button(this);
            drawable = EmgBtn.getBackground();
            drawable.setColorFilter(Color.RED, Mode.SRC_IN);
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                EmgBtn.setBackground(drawable);
            else
                EmgBtn.setBackgroundDrawable(drawable);
            EmgBtn.setTypeface(null, Typeface.BOLD);
            EmgBtn.setTextSize(miscFont);

            EmgBtn.setTextColor(Color.WHITE);
            EmgBtn.setText(Farsi.Convert(AVL_Service.pref.getString("Company", "Company Name")) + "\n" + AVL_Service.pref.getString("NTEPNumber", "12-XXP"));
            // EmgBtn.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
            EmgBtn.setOnClickListener(emergencyButtonLintener);

            Button pttBtn = new Button(this);
            drawable = pttBtn.getBackground();
            drawable.setColorFilter(Color.BLUE, Mode.SRC_IN);
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                pttBtn.setBackground(drawable);
            else
                pttBtn.setBackgroundDrawable(drawable);
            pttBtn.setTypeface(null, Typeface.BOLD);
            pttBtn.setTextSize(miscFont - 1);
            pttBtn.setTextColor(Color.WHITE);
            pttBtn.setText(Farsi.Convert(getResources().getString(R.string.PTT)));
            pttBtn.setOnClickListener(pttButtonLintener);

            if (AVL_Service.sdEnableBreak && AVL_Service.sdEnablePPT && AVL_Service.sdEnableEmergency) {
                EmgBtn.setTextSize(miscFont - 1);
                for (int i = 0; i < AVL_Service.SDBreakEmergencyPPTPosition.length(); i++) {
                    if (AVL_Service.SDBreakEmergencyPPTPosition.charAt(i) == 'b')
                        emergencyButtonRow.addView(estimateView_breakBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.4f));
                    else if (AVL_Service.SDBreakEmergencyPPTPosition.charAt(i) == 'e')
                        emergencyButtonRow.addView(EmgBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.2f));
                    else if (AVL_Service.SDBreakEmergencyPPTPosition.charAt(i) == 'p')
                        emergencyButtonRow.addView(pttBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.4f));
                }
            } else {
                for (int i = 0; i < AVL_Service.SDBreakEmergencyPPTPosition.length(); i++) {
                    if (AVL_Service.SDBreakEmergencyPPTPosition.charAt(i) == 'b') {
                        if (AVL_Service.sdEnableBreak)
                            emergencyButtonRow.addView(estimateView_breakBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.33f));
                    } else if (AVL_Service.SDBreakEmergencyPPTPosition.charAt(i) == 'e') {
                        if (AVL_Service.sdEnableEmergency)
                            emergencyButtonRow.addView(EmgBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.33f));
                    } else if (AVL_Service.SDBreakEmergencyPPTPosition.charAt(i) == 'p') {
                        if (AVL_Service.sdEnablePPT)
                            emergencyButtonRow.addView(pttBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.33f));
                    }
                }
            }

            LinearLayout upperPanel = new LinearLayout(ctx);
            upperPanel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            upperPanel.setOrientation(LinearLayout.VERTICAL);

            // Row1
            final LinearLayout headerRow = new LinearLayout(ctx);
            headerRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            headerRow.setGravity(Gravity.CENTER);
            headerRow.setOrientation(LinearLayout.HORIZONTAL);

            TextView lblEstimateCost = new TextView(ctx);
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                lblEstimateCost.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                lblEstimateCost.setText(getResources().getString(R.string.EstimateTripcost));
            } else {
                lblEstimateCost.setText(Farsi.Convert(getResources().getString(R.string.EstimateTripcost)));
                lblEstimateCost.setTypeface(null, Typeface.BOLD);
            }

            lblEstimateCost.setGravity(Gravity.CENTER);
            lblEstimateCost.setTextSize(labelFont);
            lblEstimateCost.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));

            headerRow.addView(lblEstimateCost);

            // Row2
            View line = new View(ctx);
            line.setBackgroundColor(Color.BLUE);
            line.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, 1));
            // line.setMinimumHeight(2);

            // Row3
            final LinearLayout PickUpRow = new LinearLayout(ctx);
            PickUpRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            PickUpRow.setOrientation(LinearLayout.HORIZONTAL);
            PickUpRow.setPadding(0, screenHeight / 30, 0, 0);
            PickUpRow.setGravity(Gravity.LEFT);

            final LinearLayout PickUplblRow = new LinearLayout(ctx);
            PickUplblRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            PickUplblRow.setOrientation(LinearLayout.HORIZONTAL);
            PickUplblRow.setPadding(0, screenHeight / 30, 0, 0);
            PickUplblRow.setGravity(Gravity.LEFT);

            TextView lblPickupAddress = new TextView(this);
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                lblPickupAddress.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                lblPickupAddress.setText(getResources().getString(R.string.PickupAddress));
            } else {
                lblPickupAddress.setText(Farsi.Convert(getResources().getString(R.string.PickupAddress)));
                lblPickupAddress.setTypeface(Typeface.DEFAULT_BOLD);
            }

            lblPickupAddress.setTextSize(labelFont);
            lblPickupAddress.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
            lblPickupAddress.setGravity(Gravity.LEFT);

            final EditText etPickUpAddress = new EditText(this);
            etPickUpAddress.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 1));
            etPickUpAddress.setSingleLine(false);
            etPickUpAddress.setSelectAllOnFocus(true);
            etPickUpAddress.setTextSize(miscFont);

            final EditText etPickCity = new EditText(this);
            final EditText etPickZipCode = new EditText(this);
            // Row5
            final LinearLayout PickCityRow = new LinearLayout(this);
            PickCityRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            PickCityRow.setOrientation(LinearLayout.HORIZONTAL);

            etPickCity.setLayoutParams(new LayoutParams(((int) (screenWidth / 1.37)), LayoutParams.WRAP_CONTENT));
            // etCity.setInputType(InputType.TYPE_NUMBER_FLAG_DECIMAL + InputType.TYPE_CLASS_NUMBER);
            etPickCity.setSingleLine();
            etPickCity.setTextSize(miscFont);
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                etPickCity.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                etPickCity.setHint(getResources().getString(R.string.City));
            } else
                etPickCity.setHint(Farsi.Convert(getResources().getString(R.string.City)));

            etPickCity.setSelectAllOnFocus(true);

            PickCityRow.addView(etPickCity);

            final LinearLayout PickStatesRow = new LinearLayout(this);
            PickStatesRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            PickStatesRow.setOrientation(LinearLayout.HORIZONTAL);

            Spinner spPickStates = new Spinner(this);
            spPickStates.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, .5f));

            ArrayAdapter<String> pickAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, States);

            pickAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
            spPickStates.setAdapter(pickAdapter);
            spPickStates.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
                public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                    // Toast.makeText(getApplicationContext(), StateSymbols[position], Toast.LENGTH_LONG).show();
                    usPickUpState = StateSymbols[position];
                }

                public void onNothingSelected(AdapterView<?> parent) {
                }
            });

            etPickZipCode.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, .5f));
            etPickZipCode.setInputType(InputType.TYPE_CLASS_NUMBER);
            etPickZipCode.setSingleLine();
            etPickZipCode.setTextSize(miscFont);
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                etPickZipCode.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                etPickZipCode.setHint(getResources().getString(R.string.ZipCode));
            } else
                etPickZipCode.setHint(Farsi.Convert(getResources().getString(R.string.ZipCode)));

            etPickZipCode.setSelectAllOnFocus(true);

            PickStatesRow.addView(spPickStates);
            PickStatesRow.addView(etPickZipCode);

            PickUplblRow.addView(lblPickupAddress);
            PickUpRow.addView(etPickUpAddress);

            if (AVL_Service.pref.getString("Address", "Unknown Address").contains(",")) {
                String[] PickAddress = AVL_Service.pref.getString("Address", "Unknown Address").toString().split(",");
                // String[] PickAddress = "Snoufer School, Gaithersburg, MD 45123".split(",");
                if (PickAddress.length > 0)
                    etPickUpAddress.setText(PickAddress[0]);
                if (PickAddress.length > 1)
                    etPickCity.setText(PickAddress[1]);
                if (PickAddress.length > 2) {
                    String[] getStateCity = PickAddress[2].trim().split(" ");
                    if (getStateCity.length > 0) {
                        int pos = 0;
                        for (int i = 0; i < StateSymbols.length; i++)
                            if (StateSymbols[i].equals(getStateCity[0])) {
                                pos = i;
                                break;
                            }

                        spPickStates.setSelection(pos);
                    }
                    if (getStateCity.length > 1)
                        etPickZipCode.setText(getStateCity[1]);
                }

            } else {
                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                    etPickUpAddress.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                    etPickUpAddress.setText(getResources().getString(R.string.Unknown_Address));
                } else {
                    etPickUpAddress.setText(Farsi.Convert(getResources().getString(R.string.Unknown_Address)));

                }

            }

            // Row4
            final LinearLayout DropOfflblRow = new LinearLayout(ctx);
            DropOfflblRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            DropOfflblRow.setOrientation(LinearLayout.HORIZONTAL);
            DropOfflblRow.setPadding(0, screenHeight / 30, 0, 0);

            final LinearLayout DropOffStreetRow = new LinearLayout(this);
            DropOffStreetRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            DropOffStreetRow.setOrientation(LinearLayout.HORIZONTAL);
            DropOffStreetRow.setPadding(0, screenHeight / 30, 0, 0);

            TextView lblDropOffAddress = new TextView(this);
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                lblDropOffAddress.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                lblDropOffAddress.setText(getResources().getString(R.string.DropOffAddress));
            } else {
                lblDropOffAddress.setText(Farsi.Convert(getResources().getString(R.string.DropOffAddress)));
                lblDropOffAddress.setTypeface(Typeface.DEFAULT_BOLD);
            }

            lblDropOffAddress.setGravity(Gravity.LEFT);
            lblDropOffAddress.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
            lblDropOffAddress.setTextSize(labelFont);

            final EditText etStreet = new EditText(this);
            final EditText etdropCity = new EditText(this);
            final EditText etZipCode = new EditText(this);

            etStreet.setLayoutParams(new LayoutParams(((int) (screenWidth / 1.07)), LayoutParams.WRAP_CONTENT, 1));
            // etStreet.setInputType(InputType.TYPE_NUMBER_FLAG_DECIMAL + InputType.TYPE_CLASS_NUMBER);
            etStreet.setSingleLine();
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                etStreet.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                etStreet.setHint(getResources().getString(R.string.Street));
            } else
                etStreet.setHint(Farsi.Convert(getResources().getString(R.string.Street)));

            etStreet.setSelectAllOnFocus(true);
            etStreet.setTextSize(miscFont);

            // Row5
            final LinearLayout dropCityRow = new LinearLayout(this);
            dropCityRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            dropCityRow.setOrientation(LinearLayout.HORIZONTAL);

            etdropCity.setLayoutParams(new LayoutParams(((int) (screenWidth / 1.37)), LayoutParams.WRAP_CONTENT));
            // etCity.setInputType(InputType.TYPE_NUMBER_FLAG_DECIMAL + InputType.TYPE_CLASS_NUMBER);
            etdropCity.setSingleLine();
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                etdropCity.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                etdropCity.setHint(getResources().getString(R.string.City));
            } else
                etdropCity.setHint(Farsi.Convert(getResources().getString(R.string.City)));

            etdropCity.setSelectAllOnFocus(true);
            etdropCity.setTextSize(miscFont);

            // Row6
            final LinearLayout DropStatesRow = new LinearLayout(this);
            DropStatesRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            DropStatesRow.setOrientation(LinearLayout.HORIZONTAL);

            Spinner spDropStates = new Spinner(this);
            spDropStates.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, .5f));

            ArrayAdapter<String> adapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, States);

            adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
            spDropStates.setAdapter(adapter);
            spDropStates.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
                public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                    // Toast.makeText(getApplicationContext(), StateSymbols[position], Toast.LENGTH_LONG).show();
                    usDropOffState = StateSymbols[position];
                }

                public void onNothingSelected(AdapterView<?> parent) {
                }
            });

            etZipCode.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, .5f));
            etZipCode.setInputType(InputType.TYPE_CLASS_NUMBER);
            etZipCode.setSingleLine();
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                etZipCode.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                etZipCode.setHint(getResources().getString(R.string.ZipCode));
            } else
                etZipCode.setHint(Farsi.Convert(getResources().getString(R.string.ZipCode)));

            etZipCode.setSelectAllOnFocus(true);
            etZipCode.setTextSize(miscFont);

            DropOfflblRow.addView(lblDropOffAddress);
            DropOffStreetRow.addView(etStreet);
            dropCityRow.addView(etdropCity);
            DropStatesRow.addView(spDropStates);
            DropStatesRow.addView(etZipCode);

			/*
			 * etPickUpAddress.setText("501 South Madison Street Bloomington");
			 * etPickCity.setText("Bloomington");
			 * etPickZipCode.setText("47403");
			 * etStreet.setText("101 Varsity Lane");
			 * etdropCity.setText("Bloomington");
			 * etZipCode.setText("47408");
			 */
            // Row8
            LinearLayout preAuthorization = new LinearLayout(this);
            preAuthorization.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 1));
            preAuthorization.setOrientation(LinearLayout.HORIZONTAL);
            // preAuthorization.setPadding(0, 30, 0, 0);

            // Row9
            final LinearLayout buttonRow = new LinearLayout(this);
            buttonRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            // buttonRow.setOrientation(LinearLayout.HORIZONTAL);
            buttonRow.setVerticalGravity(Gravity.BOTTOM);

            Button btnClose = new Button(ctx);
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                btnClose.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                btnClose.setText(getResources().getString(R.string.Close));
            } else {
                btnClose.setText(Farsi.Convert(getResources().getString(R.string.Close)));
                btnClose.setTypeface(Typeface.DEFAULT_BOLD);
            }

            btnClose.setTextSize(labelFont + 1);

            btnClose.setLayoutParams(new LayoutParams(screenWidth / 3, LayoutParams.WRAP_CONTENT));
            btnClose.setGravity(Gravity.CENTER);
            btnClose.setOnClickListener(new View.OnClickListener() {
                public void onClick(View view) {
                    setContentView(mainView);
                }
            });

            Button btnEstimateCost = new Button(ctx);
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                btnEstimateCost.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                btnEstimateCost.setText(getResources().getString(R.string.EstimateCost));
            } else {
                btnEstimateCost.setText(Farsi.Convert(getResources().getString(R.string.EstimateCost)));
                btnEstimateCost.setTypeface(Typeface.DEFAULT_BOLD);
            }

            btnEstimateCost.setTextSize(labelFont + 1);

            btnEstimateCost.setLayoutParams(new LayoutParams((int) (screenWidth / 2.3), LayoutParams.WRAP_CONTENT));
            btnEstimateCost.setGravity(Gravity.CENTER);
            btnEstimateCost.setOnClickListener(new View.OnClickListener() {
                public void onClick(View view) {
                    try {

                        if (!(etPickUpAddress.getText().toString().trim().length() > 0)) {
                            // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.PickUpStreetNotEmpty)), Toast.LENGTH_LONG).show();
                            showToastMessage(R.string.PickUpStreetNotEmpty);
                        } else if (!(etPickCity.getText().toString().trim().length() > 0)) {
                            // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.PickupCityNotEmpty)), Toast.LENGTH_LONG).show();
                            showToastMessage(R.string.PickupCityNotEmpty);
                        } else if (!(etStreet.getText().toString().trim().length() > 0)) {
                            // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.DropOffStreetNotEmpty)), Toast.LENGTH_LONG).show();
                            showToastMessage(R.string.DropOffStreetNotEmpty);
                        } else if (!(etdropCity.getText().toString().trim().length() > 0)) {
                            // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.DropOffCityNotEmpty)), Toast.LENGTH_LONG).show();
                            showToastMessage(R.string.DropOffCityNotEmpty);
                        } else {

                            f_DropOffAddress = etStreet.getText().toString().trim() + "," + etdropCity.getText() + "," + usDropOffState + " " + etZipCode.getText().toString().trim();
                            TempDropOff = f_DropOffAddress;
                            f_PickUpAddress = etPickUpAddress.getText().toString().trim() + "," + etPickCity.getText() + "," + usPickUpState + " " + etPickZipCode.getText().toString().trim();
                            Toast.makeText(getApplicationContext(), f_PickUpAddress + " Drop address :   " + f_DropOffAddress, Toast.LENGTH_LONG).show();
                            // DistanceCalculator.calculateDrivingDistance(f_PickUpAddress, f_DropOffAddress);
                            new DistanceCalculatorTask_forFlaggerCostEstimation().execute(f_PickUpAddress, f_DropOffAddress);

                            // sendFlaggerInfoToServer();
                            // lblEstimatedCost.setText(AVL_Service.pref.getString("EstimateFare", "0"));
                        }
                    } catch (Exception e) {
                        handleException("[Exception on estimate fare button in flagger]" + "[createFlaggerTripCostEstimationView]" + "[" + e.getLocalizedMessage() + "]");
                    }
                }
            });

            buttonRow.addView(btnEstimateCost);
            buttonRow.addView(btnClose);

            upperPanel.addView(headerRow);
            upperPanel.addView(line);

            upperPanel.addView(PickUplblRow);
            upperPanel.addView(PickUpRow);
            upperPanel.addView(PickCityRow);
            upperPanel.addView(PickStatesRow);
            upperPanel.addView(DropOfflblRow);
            upperPanel.addView(DropOffStreetRow);
            upperPanel.addView(dropCityRow);
            upperPanel.addView(DropStatesRow);

            LinearLayout body = new LinearLayout(this);
            body.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 1));
            body.addView(upperPanel);

            ScrollView scroll = new ScrollView(this);
            scroll.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 1f));
            scroll.addView(body);

            linear.addView(emergencyButtonRow);
            linear.addView(scroll);
            linear.addView(buttonRow);

        } catch (Exception ex) {
            LogException("[Exception in createFlaggerTripCostEstimationView]" + "[createFlaggerTripCostEstimationView]" + "[" + ex.getLocalizedMessage() + "]");
        }
        return linear;
    }
    /*--------------------------------------------------------------setMeterStatus-----------------------------------------------------------------*/
    public void setMeterStatus(final boolean updateMRMS, final String calledBy, final boolean isBluetoothConnected) {
        try {
            if (serviceHandle.loggedIn()) {
                if (updateMRMS)
                    handleShowProgress(Farsi.Convert(getResources().getString(R.string.Updating_Meter_Status)));
                final Date date = new Date();
                mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
                new Thread() {
                    @Override
                    public void run() {
                        if (updateMRMS) {
                            try {
                                StringBuilder setMeterStatus_envelope = new StringBuilder();
                                if (AVL_Service.pref.getBoolean("BluetoothMeter", false)) {

                                    if (Meter != null && calledBy.equalsIgnoreCase("0"))
                                        setMeterStatus_envelope = new StringBuilder(
                                                "<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><UpdateSmartDeviceMeterInfo xmlns=\"http://Itcurves.net/\"><deviceNumber>")
                                                .append(AVL_Service.tm.getDeviceId())
                                                .append("</deviceNumber><IsMeterConnected>")
                                                .append(Meter.isConnectionAlive() ? "true" : "false")
                                                .append("</IsMeterConnected><deviceTime>")
                                                .append(MRMS_DateFormat.format(date))
                                                .append("</deviceTime><IsBlueToothConnected>")
                                                .append(String.valueOf(isBluetoothConnected))
                                                .append("</IsBlueToothConnected><meterName>")
                                                .append(
                                                        Meter.isConnectionAlive() ? (AVL_Service.pref.getBoolean("CentrodyneMeter", false) ? "Centrodyne" : (AVL_Service.pref.getBoolean(
                                                                "BluetoothMeter",
                                                                false)) ? "Pulsar" : "") : "")
                                                .append("</meterName></UpdateSmartDeviceMeterInfo></soap:Body></soap:Envelope>");
                                    else if ((calledBy.equalsIgnoreCase("Quit") || calledBy.equalsIgnoreCase("EndShift"))) {
                                        if (Meter != null)
                                            setMeterStatus_envelope = new StringBuilder(
                                                    "<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><UpdateSmartDeviceMeterInfo xmlns=\"http://Itcurves.net/\"><deviceNumber>")
                                                    .append(AVL_Service.tm.getDeviceId())
                                                    .append("</deviceNumber><IsMeterConnected>")
                                                    .append("false</IsMeterConnected><deviceTime>")
                                                    .append(MRMS_DateFormat.format(date))
                                                    .append("</deviceTime><IsBlueToothConnected>")
                                                    .append("false")
                                                    .append("</IsBlueToothConnected><meterName>")
                                                    .append(
                                                            Meter.isConnectionAlive() ? (AVL_Service.pref.getBoolean("CentrodyneMeter", false) ? "Centrodyne" : (AVL_Service.pref.getBoolean(
                                                                    "BluetoothMeter",
                                                                    false)) ? "Pulsar" : "") : "")
                                                    .append("</meterName></UpdateSmartDeviceMeterInfo></soap:Body></soap:Envelope>");
                                        else
                                            setMeterStatus_envelope = new StringBuilder(
                                                    "<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><UpdateSmartDeviceMeterInfo xmlns=\"http://Itcurves.net/\"><deviceNumber>")
                                                    .append(AVL_Service.tm.getDeviceId())
                                                    .append("</deviceNumber><IsMeterConnected>")
                                                    .append("false</IsMeterConnected><deviceTime>")
                                                    .append(MRMS_DateFormat.format(date))
                                                    .append("</deviceTime><IsBlueToothConnected>")
                                                    .append("false")
                                                    .append("</IsBlueToothConnected><meterName></meterName></UpdateSmartDeviceMeterInfo></soap:Body></soap:Envelope>");
                                    }

                                    else
                                        setMeterStatus_envelope = new StringBuilder(
                                                "<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><UpdateSmartDeviceMeterInfo xmlns=\"http://Itcurves.net/\"><deviceNumber>")
                                                .append(AVL_Service.tm.getDeviceId())
                                                .append("</deviceNumber><IsMeterConnected>")
                                                .append("false</IsMeterConnected><deviceTime>")
                                                .append(MRMS_DateFormat.format(date))
                                                .append("</deviceTime><IsBlueToothConnected>")
                                                .append(String.valueOf(isBluetoothConnected))
                                                .append("</IsBlueToothConnected><meterName>")
                                                .append("Unknown")
                                                .append("</meterName></UpdateSmartDeviceMeterInfo></soap:Body></soap:Envelope>");
                                } else {
                                    setMeterStatus_envelope = new StringBuilder(
                                            "<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><UpdateSmartDeviceMeterInfo xmlns=\"http://Itcurves.net/\"><deviceNumber>")
                                            .append(AVL_Service.tm.getDeviceId())
                                            .append("</deviceNumber><IsMeterConnected>")
                                            .append("false</IsMeterConnected><deviceTime>")
                                            .append(MRMS_DateFormat.format(date))
                                            .append("</deviceTime><IsBlueToothConnected>")
                                            .append(String.valueOf(isBluetoothConnected))
                                            .append("</IsBlueToothConnected><meterName></meterName></UpdateSmartDeviceMeterInfo></soap:Body></soap:Envelope>");
                                }
                                // Calling Web Service and Parsing Response
                                WS_Response tempResponse = CallingWS.submit(AVL_Service.webServiceURL, AVL_Service.soapAction_UpdateSmartDeviceMeterInfo, setMeterStatus_envelope.toString());
                                if (tempResponse != null && tempResponse.responseType != null && tempResponse.responseType.equalsIgnoreCase("UpdateSmartDeviceMeterInfoResult")) {
                                    prev_MeterState = curr_MeterState;
                                    runOnUiThread(new Runnable() {
                                        public void run() {
                                            if (AVL_Service.pref.getBoolean("BluetoothMeter", false)) {

                                                if (Meter != null)
                                                    if (Meter.isConnectionAlive()) {
                                                        tvTaxiMeter.setText(Farsi.Convert(getResources().getString(R.string.Connected)));
                                                        // ConnectToMeter.setEnabled(false);
                                                        ConnectToMeter.setVisibility(Button.GONE);
                                                    } else {
                                                        tvTaxiMeter.setText(Farsi.Convert(getResources().getString(R.string.NotConnected)));
                                                        // ConnectToMeter.setEnabled(true);
                                                        ConnectToMeter.setVisibility(Button.VISIBLE);
                                                    }
                                                else {
                                                    tvTaxiMeter.setText(Farsi.Convert(getResources().getString(R.string.NotConnected)));
                                                    // ConnectToMeter.setEnabled(true);
                                                    ConnectToMeter.setVisibility(Button.VISIBLE);
                                                }

                                            }

                                            if (AVL_Service.pref.getBoolean("BlueBambooDevice", false)) {
                                                if (bluebambooPrinter != null && bluebambooPrinter.isConnectionAlive())
                                                    tvBackSeatDevice.setText(Farsi.Convert(getResources().getString(R.string.Connected)));
                                                else
                                                    tvBackSeatDevice.setText(Farsi.Convert(getResources().getString(R.string.NotConnected)));
                                            }
                                            if (AVL_Service.pref.getBoolean("VivotechDevice", false)) {
                                                if (Vivotech != null)
                                                    tvBackSeatDevice.setText(Farsi.Convert(getResources().getString(R.string.Connected)));
                                                else
                                                    tvBackSeatDevice.setText(Farsi.Convert(getResources().getString(R.string.NotConnected)));
                                            }

                                        }
                                    });
                                } else {
                                    exception("[Exception in setMeterStatus]" + "[setMeterStatus]");
                                }

                            } catch (Exception e) {
                                exception("[Exception in setMeterStatus]" + "[setMeterStatus]" + "[" + e.getLocalizedMessage() + "]");
                            }
                            hideProgressDialog();
                        }

                    }// run

                }.start();
            } // IsLogged In
        } catch (Exception e) {
            Toast.makeText(getApplicationContext(), e.getLocalizedMessage(), Toast.LENGTH_LONG).show();
            exception("[Exception in setMeterStatus]" + "[setMeterStatus]" + "[" + e.getLocalizedMessage() + "]");
            // handleException(e.getStackTrace()[0].getFileName() + "| " + e.getLocalizedMessage() + " in " + e.getStackTrace()[0].getMethodName() + " Line " +
            // e.getStackTrace()[0].getLineNumber());
        }
    }

    /*--------------------------------------------------------------createStatusView----------------------------------------------------------------*/
    @SuppressWarnings("deprecation")
    @SuppressLint("NewApi")
    private ViewGroup createStatusView() {
        SetApplicationLocal();
        LinearLayout panel = new LinearLayout(this);
        panel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 1));
        panel.setOrientation(LinearLayout.VERTICAL);

        DisplayMetrics metrics = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(metrics);
        int h = metrics.heightPixels; // 1280
        int w = metrics.widthPixels; // 720

        View line = new View(this);
        line.setBackgroundColor(Color.DKGRAY);
        line.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, 1));
        // line.setMinimumHeight(1);
        // line.setPadding(5, 10, 5, 10);

        // /////////////////////////////

        final LinearLayout DriverSnapRow = new LinearLayout(this);

        LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(screenHeight / 5, screenHeight / 5);
        layoutParams.gravity = Gravity.CENTER;
        DriverSnapRow.setLayoutParams(layoutParams);
        DriverSnapRow.setOrientation(LinearLayout.HORIZONTAL);
        DriverSnapRow.setPadding(0, screenHeight / 20, 0, 0);

        DriverSnap = new ImageView(this);
        // setting image resource
        DriverSnap.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        DriverSnapRow.addView(DriverSnap);
        // //////////////////////////////////////

        // Row1
        final LinearLayout bookedZoneRow = new LinearLayout(this);
        bookedZoneRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        bookedZoneRow.setOrientation(LinearLayout.HORIZONTAL);
        bookedZoneRow.setPadding(0, screenHeight / 20, 0, 0);

        TextView bookedZone = new TextView(this);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            bookedZone.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            bookedZone.setText(getResources().getString(R.string.zone));
        } else
            bookedZone.setText(Farsi.Convert(getResources().getString(R.string.zone)));

        bookedZone.setGravity(Gravity.RIGHT);
        bookedZone.setTextSize(labelFont);
        bookedZone.setSingleLine(true);
        bookedZone.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.16f));

        bookedZoneValue = new TextView(this);
        bookedZoneValue.setText("");
        bookedZoneValue.setTextSize(labelFont);
        bookedZoneValue.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.13f));
        bookedZoneValue.setGravity(Gravity.LEFT);
        bookedZoneValue.setSingleLine(true);
        bookedZoneValue.addTextChangedListener(new TextWatcher() {

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

            }

            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @SuppressLint("NewApi")
            @Override
            public void afterTextChanged(Editable s) {

                if (bookedZoneValue.getText().toString().equalsIgnoreCase("None") || bookedZoneValue.getText().toString().equalsIgnoreCase("Unknown") || bookedZoneValue.getText().toString().equalsIgnoreCase("Unkwn") || bookedZoneValue.getText().toString().equalsIgnoreCase("0")) {
                    bookedZoneValue.setTextColor(Color.RED);
                    if (NearByZoneButton != null) {
                        drawable = NearByZoneButton.getBackground();
                        drawable.setColorFilter(null);
                        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                            NearByZoneButton.setBackground(drawable);
                        else
                            NearByZoneButton.setBackgroundDrawable(drawable);
                        NearByZoneButton.setEnabled(false);
                    }
                } else {
                    bookedZoneValue.setTextColor(Color.YELLOW);
                    if (NearByZoneButton != null) {
                        NearByZoneButton.setEnabled(true);
                    }
                }
            }
        });

        TextView bookedZoneRank = new TextView(this);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            bookedZoneRank.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            bookedZoneRank.setText(getResources().getString(R.string.rank));
        } else
            bookedZoneRank.setText(Farsi.Convert(getResources().getString(R.string.rank)));

        bookedZoneRank.setGravity(Gravity.RIGHT);
        bookedZoneRank.setTextSize(labelFont);
        bookedZoneRank.setSingleLine(true);
        bookedZoneRank.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.20f));

        zoneRankValue = new TextView(this);
        zoneRankValue.setText("");
        zoneRankValue.setTextSize(labelFont);
        zoneRankValue.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.20f));
        zoneRankValue.setSingleLine(true);
        zoneRankValue.setTextColor(Color.YELLOW);
        zoneRankValue.setGravity(Gravity.LEFT);

        // Row2
        final LinearLayout Stand = new LinearLayout(this);
        Stand.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        Stand.setOrientation(LinearLayout.HORIZONTAL);

        TextView bookedStand = new TextView(this);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            bookedStand.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            bookedStand.setText(getResources().getString(R.string.stand));
        } else
            bookedStand.setText(Farsi.Convert(getResources().getString(R.string.stand)));

        bookedStand.setTextSize(labelFont);
        bookedStand.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.26f));
        bookedStand.setGravity(Gravity.RIGHT);
        bookedStand.setSingleLine(true);

        bookedStandValue = new TextView(this);
        bookedStandValue.setText("");
        bookedStandValue.setTextSize(labelFont);
        bookedStandValue.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.24f));
        bookedStandValue.setGravity(Gravity.LEFT);
        bookedStandValue.setSingleLine(true);
        bookedStandValue.addTextChangedListener(new TextWatcher() {

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
            }

            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
            }

            @Override
            public void afterTextChanged(Editable s) {

                if (bookedStandValue.getText().toString().equalsIgnoreCase("None"))
                    bookedStandValue.setTextColor(Color.RED);
                else
                    bookedStandValue.setTextColor(Color.YELLOW);

            }
        });

        TextView standRank = new TextView(this);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            standRank.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            standRank.setText(getResources().getString(R.string.rank));
        } else
            standRank.setText(Farsi.Convert(getResources().getString(R.string.rank)));

        standRank.setTextSize(labelFont);
        standRank.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.25f));
        standRank.setGravity(Gravity.RIGHT);
        standRank.setSingleLine(true);

        standRankValue = new TextView(this);
        standRankValue.setText("");
        standRankValue.setTextSize(labelFont);
        standRankValue.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.25f));
        standRankValue.setGravity(Gravity.LEFT);
        standRankValue.setTextColor(Color.YELLOW);
        standRankValue.setSingleLine(true);

        // Row3
        final LinearLayout SpeedDirection = new LinearLayout(this);
        SpeedDirection.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        SpeedDirection.setOrientation(LinearLayout.HORIZONTAL);

        TextView speed = new TextView(this);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            speed.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            speed.setText(getResources().getString(R.string.speed));
        } else
            speed.setText(Farsi.Convert(getResources().getString(R.string.speed)));

        speed.setTextSize(labelFont);
        speed.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.25f));
        speed.setGravity(Gravity.RIGHT);

        speedValue = new TextView(this);
        speedValue.setGravity(Gravity.LEFT);

        if (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("Mile")) {
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                speedValue.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                speedValue.setText(AVL_Service.pref.getString("Speed", "00.0") + " " + getResources().getString(R.string.nMiles1));
            } else
                speedValue.setText(AVL_Service.pref.getString("Speed", "00.0") + " " + Farsi.Convert(getResources().getString(R.string.nMiles1)));

        } else {
            double ans_KM = Double.parseDouble(AVL_Service.pref.getString("Speed", "00.0")) * 1.60934;
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                speedValue.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                speedValue.setText(ans_KM + " " + getResources().getString(R.string.nMiles));
            } else
                speedValue.setText(ans_KM + " " + Farsi.Convert(getResources().getString(R.string.nMiles)));
        }
        speedValue.setTextColor(Color.CYAN);
        speedValue.setTextSize(labelFont);
        speedValue.setSingleLine(true);
        speedValue.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.25f));

        TextView Direction = new TextView(this);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            Direction.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            Direction.setText(getResources().getString(R.string.direction));
        } else
            Direction.setText(Farsi.Convert(getResources().getString(R.string.direction)));

        Direction.setTextSize(labelFont);
        Direction.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.25f));
        Direction.setSingleLine(true);
        Direction.setGravity(Gravity.RIGHT);

        directionValue = new TextView(this);
        directionValue.setGravity(Gravity.LEFT);
        directionValue.setText(AVL_Service.pref.getString("Direction", "XX"));
        directionValue.setTextSize(labelFont);
        directionValue.setTextColor(Color.YELLOW);
        directionValue.setSingleLine(true);
        directionValue.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.25f));

        // Row4
		/*
		 * final LinearLayout LatLong = new LinearLayout(this); LatLong.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
		 * LatLong.setOrientation(LinearLayout.HORIZONTAL);
		 */

        final LinearLayout AVL = new LinearLayout(this);
        AVL.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        AVL.setOrientation(LinearLayout.HORIZONTAL);
        // AVL.setPadding(0, screenHeight / 30, 0, 0);

        imgwifi = new ImageView(this);

        if (AVL_Service.isNetworkReachable == false) {
            // imgwifi.setImageResource(R.drawable.internet_icon);
            imgwifi.setBackgroundResource(R.drawable.internet_icon);
        } else {
            // imgwifi.setImageResource(R.drawable.internet_icon_green);
            imgwifi.setBackgroundResource(R.drawable.internet_icon_green);
        }

        imgGPS = new ImageView(this);

        if (AVL_Service.locManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {
            imgGPS.setBackgroundResource(R.drawable.gps_1);
        } else {
            imgGPS.setBackgroundResource(R.drawable.gps_2);
        }

        TextView avlZone = new TextView(this);
        avlZone.setText(Farsi.Convert(getResources().getString(R.string.avl)));
        avlZone.setTextSize(labelFont);
        avlZone.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.25f));
        avlZone.setGravity(Gravity.RIGHT);

        avlZoneValue = new TextView(this);
        avlZoneValue.setGravity(Gravity.LEFT);
        avlZoneValue.setText("");
        // avlZoneValue.setTextSize(24);

        avlZoneValue.setTextSize(labelFont);
        avlZoneValue.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.25f));

        avlZoneValue.addTextChangedListener(new TextWatcher() {

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

            }

            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void afterTextChanged(Editable s) {

                if (avlZoneValue.getText().toString().equalsIgnoreCase("Unknown") || avlZoneValue.getText().toString().equalsIgnoreCase("0") || avlZoneValue.getText().toString().equalsIgnoreCase("None") || avlZoneValue.getText().toString().equalsIgnoreCase("UnKWN"))
                    avlZoneValue.setTextColor(Color.RED);
                else {
                    avlZoneValue.setTextColor(Color.YELLOW);
                    if (NearByZoneButton != null) {
                        NearByZoneButton.setEnabled(true);
                    }
                }
            }
        });

        timer = new TextView(this);
        timer.setTextColor(Color.YELLOW);
        timer.setTextSize(labelFont);
        timer.setId(23);
        timer.setText("(00:00:00)");
        timer.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.13f));
        timer.setGravity(Gravity.LEFT);

        TextView versionNumber = new TextView(this);
        versionNumber.setGravity(Gravity.LEFT);
        versionNumber.setText("ver " + AVL_Service.appVersion);
        versionNumber.setTextSize(labelFont);
        versionNumber.setTextColor(Color.MAGENTA);
        versionNumber.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.25f));

        AVL.addView(imgGPS);
        AVL.addView(bookedZone);
        AVL.addView(bookedZoneValue);
        AVL.addView(timer);
        AVL.addView(imgwifi);

        bookedZoneRow.addView(avlZone);
        bookedZoneRow.addView(avlZoneValue);
        if (AVL_Service.ShowSDStandRankOnStatus) {
            bookedZoneRow.addView(bookedStand);
            bookedZoneRow.addView(bookedStandValue);

            Stand.addView(bookedZoneRank);
            Stand.addView(zoneRankValue);
            Stand.addView(standRank);
            Stand.addView(standRankValue);
        } else {
            bookedZoneRow.addView(bookedZoneRank);
            bookedZoneRow.addView(zoneRankValue);
        }
        // AVL.addView(versionNumber);

        // Row6
        final LinearLayout Cab = new LinearLayout(this);
        Cab.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        Cab.setOrientation(LinearLayout.HORIZONTAL);
        Cab.setPadding(0, screenHeight / 20, 0, 0);

        TextView cabNum = new TextView(this);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            cabNum.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            cabNum.setText(getResources().getString(R.string.vehicle));
        } else
            cabNum.setText(Farsi.Convert(getResources().getString(R.string.vehicle)));
        cabNum.setTextSize(labelFont);
        cabNum.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.24f));
        cabNum.setGravity(Gravity.RIGHT);

        cabValue = new TextView(this);
        cabValue.setGravity(Gravity.LEFT);
        cabValue.setText(AVL_Service.pref.getString("VehicleID", "Unknown"));
        cabValue.setTextColor(Color.YELLOW);
        cabValue.setTextSize(labelFont);
        cabValue.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.26f));

        TextView driverNum = new TextView(this);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            driverNum.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            driverNum.setText(getResources().getString(R.string.driver));
        } else
            driverNum.setText(Farsi.Convert(getResources().getString(R.string.driver)));

        driverNum.setTextSize(labelFont);
        driverNum.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.24f));
        driverNum.setGravity(Gravity.RIGHT);

        driverValue = new TextView(this);
        driverValue.setGravity(Gravity.LEFT);
        driverValue.setText(AVL_Service.pref.getString("DriverID", "Unknown"));
        driverValue.setTextSize(labelFont);
        driverValue.setTextColor(Color.YELLOW);
        driverValue.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.26f));

        final LinearLayout DriverNameRow = new LinearLayout(this);
        DriverNameRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        DriverNameRow.setOrientation(LinearLayout.HORIZONTAL);

        TextView driverName = new TextView(this);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            driverName.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            driverName.setText(getResources().getString(R.string.drivername));
        } else
            driverName.setText(Farsi.Convert(getResources().getString(R.string.drivername)));

        driverName.setTextSize(labelFont);
        driverName.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.24f));
        driverName.setGravity(Gravity.RIGHT);

        driverNameValue = new TextView(this);
        driverNameValue.setGravity(Gravity.LEFT);
        driverNameValue.setText(Driver_name);
        driverNameValue.setTextSize(labelFont);
        driverNameValue.setTextColor(Color.YELLOW);
        driverNameValue.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.26f));

        Cab.addView(cabNum);
        Cab.addView(cabValue);
        Cab.addView(speed);
        Cab.addView(speedValue);
        SpeedDirection.addView(driverNum);
        SpeedDirection.addView(driverValue);
        SpeedDirection.addView(Direction);
        SpeedDirection.addView(directionValue);
        DriverNameRow.addView(driverName);
        DriverNameRow.addView(driverNameValue);
        // tvTaxiMeter, tvBackSeatDevice
        // BlueTooth devices
        final LinearLayout TaxiMeter = new LinearLayout(this);
        TaxiMeter.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        TaxiMeter.setOrientation(LinearLayout.HORIZONTAL);
        TaxiMeter.setPadding(0, screenHeight / 20, 0, 0);

        TextView lTaxiMeter = new TextView(this);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            lTaxiMeter.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            lTaxiMeter.setText(getResources().getString(R.string.TaxiMeter));
        } else
            lTaxiMeter.setText(Farsi.Convert(getResources().getString(R.string.TaxiMeter)));

        lTaxiMeter.setTextSize(labelFont);
        lTaxiMeter.setGravity(Gravity.RIGHT);
        lTaxiMeter.setId(20);
        lTaxiMeter.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.6f));

        tvTaxiMeter = new TextView(this);
        tvTaxiMeter.setTextColor(Color.YELLOW);
        tvTaxiMeter.setTextSize(labelFont);
        tvTaxiMeter.setId(21);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            tvTaxiMeter.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            tvTaxiMeter.setText(getResources().getString(R.string.NotConnected));
        } else
            tvTaxiMeter.setText(Farsi.Convert(getResources().getString(R.string.NotConnected)));

        tvTaxiMeter.setGravity(Gravity.LEFT);
        tvTaxiMeter.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.4f));
        tvTaxiMeter.addTextChangedListener(new TextWatcher() {

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
            }

            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
            }

            @Override
            public void afterTextChanged(Editable s) {

                if (tvTaxiMeter.getText().toString().equalsIgnoreCase("Connected")) {
                    tvTaxiMeter.setTextColor(Color.GREEN);

                    if (AVL_Service.pref.getBoolean("VeriFoneDevice", true)) {
                        if ((System.currentTimeMillis() - lastVerifoneCMD1MessageTime) > 30000) {
                            if (VerifoneCMD1AckCount > 0)
                                IsVerifoneConnectionMSGSend = true; // to
                            VerifoneCMD1AckCount = 0;
                            lastVerifoneCMD1MessageTime = System.currentTimeMillis();
                            SendVeriFoneLoginStream();
                        }
                    }

                } else
                    tvTaxiMeter.setTextColor(Color.RED);

            }
        });

        TaxiMeter.addView(lTaxiMeter);
        TaxiMeter.addView(tvTaxiMeter);

        final LinearLayout BackSeatDevice = new LinearLayout(this);
        BackSeatDevice.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        BackSeatDevice.setOrientation(LinearLayout.HORIZONTAL);

        TextView lBackSeatDevice = new TextView(this);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            lBackSeatDevice.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            lBackSeatDevice.setText(getResources().getString(R.string.BackSeatDevice));
        } else
            lBackSeatDevice.setText(Farsi.Convert(getResources().getString(R.string.BackSeatDevice)));

        lBackSeatDevice.setTextSize(labelFont);
        lBackSeatDevice.setGravity(Gravity.RIGHT);
        lBackSeatDevice.setId(22);
        lBackSeatDevice.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.6f));

        tvBackSeatDevice = new TextView(this);
        tvBackSeatDevice.setTextColor(Color.YELLOW);
        tvBackSeatDevice.setTextSize(labelFont);
        tvBackSeatDevice.setId(23);
        tvBackSeatDevice.setText(Farsi.Convert(getResources().getString(R.string.NotConnected)));
        tvBackSeatDevice.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.4f));
        tvBackSeatDevice.setGravity(Gravity.LEFT);
        tvBackSeatDevice.addTextChangedListener(new TextWatcher() {

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
            }

            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
            }

            @Override
            public void afterTextChanged(Editable s) {

                if (tvBackSeatDevice.getText().toString().equalsIgnoreCase("Connected"))
                    tvBackSeatDevice.setTextColor(Color.GREEN);
                else
                    tvBackSeatDevice.setTextColor(Color.RED);

            }
        });

        BackSeatDevice.addView(lBackSeatDevice);
        BackSeatDevice.addView(tvBackSeatDevice);

        BackSeatDevice.setVisibility(View.GONE);

        final LinearLayout tfHTimerView = new LinearLayout(this);
        tfHTimerView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        tfHTimerView.setOrientation(LinearLayout.HORIZONTAL);

        TextView ltfTimer = new TextView(this);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            ltfTimer.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            ltfTimer.setText(getResources().getString(R.string.last24));
        } else
            ltfTimer.setText(Farsi.Convert(getResources().getString(R.string.last24)));

        ltfTimer.setTextSize(labelFont);
        ltfTimer.setGravity(Gravity.RIGHT);
        ltfTimer.setId(22);
        ltfTimer.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.4f));

        tftimer = new TextView(this);
        tftimer.setTextColor(Color.YELLOW);
        tftimer.setTextSize(labelFont);
        tftimer.setId(23);
        tftimer.setText("0.0");
        tftimer.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.6f));
        tftimer.setGravity(Gravity.LEFT);

        tfHTimerView.addView(ltfTimer);
        tfHTimerView.addView(tftimer);

        final LinearLayout edTimerView = new LinearLayout(this);
        tfHTimerView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        tfHTimerView.setOrientation(LinearLayout.HORIZONTAL);

        TextView ledTimer = new TextView(this);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            ledTimer.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            ledTimer.setText(getResources().getString(R.string.last8days));
        } else
            ledTimer.setText(Farsi.Convert(getResources().getString(R.string.last8days)));

        ledTimer.setTextSize(labelFont);
        ledTimer.setGravity(Gravity.RIGHT);
        ledTimer.setId(22);
        ledTimer.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.4f));

        edtimer = new TextView(this);
        edtimer.setTextColor(Color.YELLOW);
        edtimer.setTextSize(labelFont);
        edtimer.setId(23);
        edtimer.setText("0.0");
        edtimer.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.6f));
        edtimer.setGravity(Gravity.LEFT);

        edTimerView.addView(ledTimer);
        edTimerView.addView(edtimer);

        min = 0;
        hour = 0;
        sec = 0;

        r1 = new Runnable() {

            @Override
            public void run() {
                if (sec == 59) {
                    sec = 0;
                    min++;
                } else {
                    sec++;
                }
                if (min == 60) {
                    min = 0;
                    hour++;
                }
                String totalTime = "";
                totalTime = totalTime + "("
                        + (String.valueOf(hour).length() == 1 ? "0" + hour : hour)
                        + ":"
                        + (String.valueOf(min).length() == 1 ? "0" + min : min)
                        + ":"
                        + (String.valueOf(sec).length() == 1 ? "0" + sec : sec)
                        + ")";
                timer.setText(totalTime);
                htimer.postDelayed(r1, 1000);
            }
        };

        htimer = new Handler();

        htimer.postDelayed(r1, 1000);

        final LinearLayout MeterConnection = new LinearLayout(this);
        BackSeatDevice.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        MeterConnection.setGravity(Gravity.CENTER);
        BackSeatDevice.setOrientation(LinearLayout.HORIZONTAL);

        ConnectToMeter = new Button(this);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            ConnectToMeter.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            ConnectToMeter.setText(getResources().getString(R.string.Connect_Meter));
        } else
            ConnectToMeter.setText(Farsi.Convert(getResources().getString(R.string.Connect_Meter)));
        ConnectToMeter.setTextSize(buttonFont);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            ConnectToMeter.setBackground(drawable);
        else
            ConnectToMeter.setBackgroundDrawable(drawable);
        if (!AVL_Service.pref.getBoolean("BluetoothMeter", false))
            // ConnectToMeter.setEnabled(false);
            ConnectToMeter.setVisibility(Button.GONE);
        else
            ConnectToMeter.setVisibility(Button.VISIBLE);
        drawable = ConnectToMeter.getBackground();
        drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            ConnectToMeter.setBackground(drawable);
        else
            ConnectToMeter.setBackgroundDrawable(drawable);
        ConnectToMeter.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
        ConnectToMeter.setGravity(Gravity.CENTER);
        ConnectToMeter.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                ConnectToMeter.setEnabled(false);
                SHOW_PAIRED_DEVICES_DIALOG = true;
                ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
                scheduler.schedule(new Runnable() {

                    @Override
                    public void run() {

                        runOnUiThread(new Runnable() {
                            public void run() {
                                ConnectToMeter.setEnabled(true);
                            }
                        });

                    }
                }, 8, TimeUnit.SECONDS);

                bluetoothExecption = false;
                UpdateMeterState();
//                SoftmeterView();
            }
        });

        ConnectToDialie = new Button(this);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            ConnectToDialie.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            ConnectToDialie.setText(getResources().getString(R.string.Connect_Dialie));
        } else
            ConnectToDialie.setText(Farsi.Convert(getResources().getString(R.string.Connect_Dialie)));
        ConnectToDialie.setTextSize(buttonFont);
        drawable = ConnectToDialie.getBackground();
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            ConnectToDialie.setBackground(drawable);
        else
            ConnectToDialie.setBackgroundDrawable(drawable);
        if (AVL_Service.enableDialiePackageOnDevice)
            ConnectToDialie.setVisibility(View.VISIBLE);
        else
            ConnectToDialie.setVisibility(View.GONE);
        ConnectToDialie.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
        ConnectToDialie.setGravity(Gravity.RIGHT);

        ConnectToDialie.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {

                checkIPPIM();
                sendIPPIM(DialiePIMIP);

                DeviceInformationFrame(
                        "3012082222",
                        "ITC-wi-fi-" + AVL_Service.pref.getString("VehicleID", "").trim(),
                        AVL_Service.pref.getString("VehicleID", "").trim(),
                        checkIPPIM(),
                        getLocalIpAddress(),
                        "N7100",
                        AVL_Service.appVersion,
                        AVL_Service.appVersion,
                        "false");
                IsSendToDialieClicked = true;
            }
        });

        MeterConnection.addView(ConnectToMeter);
        if (AVL_Service.enableDialiePackageOnDevice)
            MeterConnection.addView(ConnectToDialie);

        final LinearLayout rowBalance = new LinearLayout(this);
        rowBalance.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        rowBalance.setOrientation(LinearLayout.HORIZONTAL);
        rowBalance.setPadding(0, screenHeight / 30, screenHeight / 50, 0);

        balance = new TextView(this);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            balance.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            balance.setText(getResources().getString(R.string.Balance));
        } else
            balance.setText(Farsi.Convert(getResources().getString(R.string.Balance)));

        balance.setTextSize(labelFont);
        balance.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.50f));
        balance.setGravity(Gravity.RIGHT);

        balanceValue = new TextView(this);
        balanceValue.setGravity(Gravity.LEFT);
        balanceValue.setText(BalanceOfDriver);
        balanceValue.setTextColor(Color.YELLOW);
        balanceValue.setTextSize(labelFont);
        balanceValue.setSingleLine(true);
        balanceValue.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.50f));

        btnAccounts = new Button(this);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            btnAccounts.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            btnAccounts.setText(getResources().getString(R.string.Accounts));
        } else
            btnAccounts.setText(Farsi.Convert(getResources().getString(R.string.Accounts)));

        btnAccounts.setTextSize(buttonFont);
        drawable = btnAccounts.getBackground();
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            btnAccounts.setBackground(drawable);
        else
            btnAccounts.setBackgroundDrawable(drawable);
        btnAccounts.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.50f));
        btnAccounts.setGravity(Gravity.CENTER);
        drawable = btnAccounts.getBackground();
        drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.SRC_IN);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            btnAccounts.setBackground(drawable);
        else
            btnAccounts.setBackgroundDrawable(drawable);
        btnAccounts.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                setContentView(createAccountsTab());

            }
        });

        rowBalance.addView(balance);
        rowBalance.addView(balanceValue);
        rowBalance.addView(btnAccounts);

        final LinearLayout milageRow = new LinearLayout(this);
        milageRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        milageRow.setOrientation(LinearLayout.HORIZONTAL);
        milageRow.setPadding(0, screenHeight / 20, 0, 0);

        TextView vehicleMilageLbl = new TextView(this);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            vehicleMilageLbl.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            vehicleMilageLbl.setText(getResources().getString(R.string.Vehicle_Milage));
        } else
            vehicleMilageLbl.setText(Farsi.Convert(getResources().getString(R.string.Vehicle_Milage)));
        vehicleMilageLbl.setTextSize(labelFont);
        vehicleMilageLbl.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.55f));
        vehicleMilageLbl.setGravity(Gravity.RIGHT);

        milageTxt = new TextView(this);
        milageTxt.setGravity(Gravity.LEFT);
        milageTxt.setText(AVL_Service.pref.getString("VehicleMilage", "0"));
        milageTxt.setTextColor(Color.YELLOW);
        milageTxt.setTextSize(labelFont);
        milageTxt.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.45f));

        milageRow.addView(vehicleMilageLbl);
        milageRow.addView(milageTxt);

        // Row5
        final LinearLayout ADDRS = new LinearLayout(this);
        ADDRS.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        ADDRS.setOrientation(LinearLayout.VERTICAL);
        ADDRS.setVerticalGravity(Gravity.BOTTOM);
        ADDRS.setPadding(0, screenHeight / 20, 0, 0);
		/*
		 * TextView address = new TextView(this); address.setText("Current Location: "); address.setTextSize(labelFont);
		 * address.setLayoutParams(new
		 * LayoutParams((int) (screenWidth * 0.40), LayoutParams.WRAP_CONTENT)); address.setGravity(Gravity.LEFT);
		 */
        avlAddress = new TextView(this);
        avlAddress.setGravity(Gravity.BOTTOM + Gravity.CENTER_HORIZONTAL);
        String address = AVL_Service.pref.getString("Address", "Unknown Address");
        address = ((address != null) ? address : "Unknown");
        if (address.contains(",")) {
            String[] AddressInParts = address.split(",");
            address = AddressInParts[0] + AddressInParts[1];
        }
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            avlAddress.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            avlAddress.setText(address);
        } else
            avlAddress.setText(Farsi.Convert(address));

        avlAddress.setTextSize(miscFont);
        avlAddress.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        avlAddress.addTextChangedListener(new TextWatcher() {

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

            }

            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void afterTextChanged(Editable s) {

                if (avlAddress.getText().toString().contains("GPS") || avlAddress.getText().toString().contains("Unknown"))
                    avlAddress.setTextColor(Color.RED);
                else
                    avlAddress.setTextColor(Color.YELLOW);
            }
        });

        // Row6
        final LinearLayout LatLongValue = new LinearLayout(this);
        LatLongValue.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        LatLongValue.setOrientation(LinearLayout.HORIZONTAL);

        LatValue = new TextView(this);
        LatValue.setText(AVL_Service.pref.getString("LastLatitude", "0.000000"));
        LatValue.setTextSize(miscFont);
        LatValue.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.5f));
        LatValue.setGravity(Gravity.CENTER);
        LatValue.setTextColor(Color.LTGRAY);

        LongValue = new TextView(this);
        LongValue.setText(AVL_Service.pref.getString("LastLongitude", "0.000000"));
        LongValue.setTextSize(miscFont);
        LongValue.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.5f));
        LongValue.setGravity(Gravity.CENTER);
        LongValue.setTextColor(Color.LTGRAY);

        LatLongValue.addView(LatValue);
        LatLongValue.addView(LongValue);

        ADDRS.addView(avlAddress);
        ADDRS.addView(line);
        ADDRS.addView(LatLongValue);

        if (AVL_Service.ShowSDAVLOnStatus)
            panel.addView(AVL);

        if (AVL_Service.ShowSDDriverPhoto)
            panel.addView(DriverSnapRow);

        panel.addView(bookedZoneRow);
        if (AVL_Service.ShowSDStandRankOnStatus)
            panel.addView(Stand);
        panel.addView(Cab);
        panel.addView(SpeedDirection);
        panel.addView(DriverNameRow);
        if (AVL_Service.ShowSDTaxiMeterOnStatus) {
            panel.addView(MeterConnection);
            panel.addView(TaxiMeter);
        }
        panel.addView(tfHTimerView);
        panel.addView(edTimerView);
        if (AVL_Service.ShowSDBackSeatOnStatus)
            panel.addView(BackSeatDevice);
        if (AVL_Service.PPV_UsePPVModule)
            panel.addView(rowBalance);

        if (AVL_Service.SDShowMileageOnStatusTab)
            panel.addView(milageRow);
        panel.addView(ADDRS);

        LinearLayout linear = new LinearLayout(this);
        linear.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));

        if ((h == 1776 || h == 1920) && w == 1080) {

            linear.setPadding(0, screenHeight / 20, 0, 0);

        } else if (h == 1280 && w == 720) {
            linear.setPadding(0, screenHeight / 40, 0, 0);

        }

        else {
            linear.setPadding(0, 0, 0, 0);

        }

        linear.setScrollContainer(true);
        ScrollView scrollPanel = new ScrollView(this);
        scrollPanel.setVerticalScrollBarEnabled(false);
        scrollPanel.setHorizontalScrollBarEnabled(false);
        scrollPanel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        scrollPanel.setFillViewport(true);

        scrollPanel.addView(panel);
        linear.addView(scrollPanel);

        return linear;

    }
	/*-----------------------------------------------------createAccounts ---------------------------------------*/

    @SuppressWarnings("deprecation")
    @SuppressLint("NewApi")
    private ViewGroup createAccountsTab() {
        SetApplicationLocal();
        // TopupCustomerBalance_Driver();

        LinearLayout panel = new LinearLayout(this);
        panel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 1));
        panel.setOrientation(LinearLayout.VERTICAL);

        DisplayMetrics metrics = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(metrics);
        int h = metrics.heightPixels; // 1280
        int w = metrics.widthPixels; // 720

        final LinearLayout emergencyButtonRow = new LinearLayout(this);
        emergencyButtonRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        emergencyButtonRow.setOrientation(LinearLayout.HORIZONTAL);
        emergencyButtonRow.setGravity(Gravity.CENTER_HORIZONTAL);
        // emergencyButtonRow.setPadding(5, 0, 5, 0);

        topUpView_breakBtn = new Button(this);
        drawable = topUpView_breakBtn.getBackground();
        drawable.setColorFilter(Color.parseColor(AVL_Service.SDBreakColor), Mode.SRC_IN);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            topUpView_breakBtn.setBackground(drawable);
        else
            topUpView_breakBtn.setBackgroundDrawable(drawable);
        topUpView_breakBtn.setTypeface(null, Typeface.BOLD);
        topUpView_breakBtn.setTextSize(miscFont - 1);
        if (break_status == 1) {
            // topUpView_breakBtn.setTextColor(Color.BLACK);
            drawable = topUpView_breakBtn.getBackground();
            drawable.setColorFilter(Color.parseColor(AVL_Service.SDResumeColor), Mode.SRC_IN);
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                topUpView_breakBtn.setBackground(drawable);
            else
                topUpView_breakBtn.setBackgroundDrawable(drawable);
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                topUpView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                topUpView_breakBtn.setText(resumeButtonLabel);
            } else
                topUpView_breakBtn.setText(Farsi.Convert(resumeButtonLabel));

        } else if (break_status == 0) {
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                topUpView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                topUpView_breakBtn.setText(breakBtnLabel);
            } else
                topUpView_breakBtn.setText(Farsi.Convert(breakBtnLabel));

            // topUpView_breakBtn.setTextColor(Color.WHITE);
            drawable = tabberView_breakBtn.getBackground();
            drawable.setColorFilter(Color.parseColor(AVL_Service.SDBreakColor), Mode.SRC_IN);
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                tabberView_breakBtn.setBackground(drawable);
            else
                tabberView_breakBtn.setBackgroundDrawable(drawable);
        }
        topUpView_breakBtn.setOnClickListener(breakButtonLintener);
        // breakBtn.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));

        Button EmgBtn = new Button(this);
        drawable = EmgBtn.getBackground();
        drawable.setColorFilter(Color.RED, Mode.SRC_IN);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            EmgBtn.setBackground(drawable);
        else
            EmgBtn.setBackgroundDrawable(drawable);
        EmgBtn.setTypeface(null, Typeface.BOLD);
        EmgBtn.setTextSize(miscFont);

        EmgBtn.setTextColor(Color.WHITE);
        EmgBtn.setText(Farsi.Convert(AVL_Service.pref.getString("Company", "Company Name")) + "\n" + AVL_Service.pref.getString("NTEPNumber", "12-XXP"));
        // EmgBtn.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        EmgBtn.setOnClickListener(emergencyButtonLintener);

        Button pttBtn = new Button(this);
        drawable = pttBtn.getBackground();
        drawable.setColorFilter(Color.BLUE, Mode.SRC_IN);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            pttBtn.setBackground(drawable);
        else
            pttBtn.setBackgroundDrawable(drawable);
        pttBtn.setTypeface(null, Typeface.BOLD);
        pttBtn.setTextSize(miscFont - 1);
        pttBtn.setTextColor(Color.WHITE);
        pttBtn.setText(Farsi.Convert(getResources().getString(R.string.PTT)));
        pttBtn.setOnClickListener(pttButtonLintener);

        if (AVL_Service.sdEnableBreak && AVL_Service.sdEnablePPT && AVL_Service.sdEnableEmergency) {
            EmgBtn.setTextSize(miscFont - 1);
            for (int i = 0; i < AVL_Service.SDBreakEmergencyPPTPosition.length(); i++) {
                if (AVL_Service.SDBreakEmergencyPPTPosition.charAt(i) == 'b')
                    emergencyButtonRow.addView(topUpView_breakBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.4f));
                else if (AVL_Service.SDBreakEmergencyPPTPosition.charAt(i) == 'e')
                    emergencyButtonRow.addView(EmgBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.2f));
                else if (AVL_Service.SDBreakEmergencyPPTPosition.charAt(i) == 'p')
                    emergencyButtonRow.addView(pttBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.4f));
            }
        } else {
            for (int i = 0; i < AVL_Service.SDBreakEmergencyPPTPosition.length(); i++) {
                if (AVL_Service.SDBreakEmergencyPPTPosition.charAt(i) == 'b') {
                    if (AVL_Service.sdEnableBreak)
                        emergencyButtonRow.addView(topUpView_breakBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.33f));
                } else if (AVL_Service.SDBreakEmergencyPPTPosition.charAt(i) == 'e') {
                    if (AVL_Service.sdEnableEmergency)
                        emergencyButtonRow.addView(EmgBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.33f));
                } else if (AVL_Service.SDBreakEmergencyPPTPosition.charAt(i) == 'p') {
                    if (AVL_Service.sdEnablePPT)
                        emergencyButtonRow.addView(pttBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.33f));
                }
            }
        }
        View line = new View(this);
        line.setBackgroundColor(Color.DKGRAY);
        line.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, 1));

        final LinearLayout Avaliable_Row = new LinearLayout(this);
        Avaliable_Row.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        Avaliable_Row.setOrientation(LinearLayout.HORIZONTAL);
        // AVL.setPadding(0, screenHeight / 30, 0, 0);

        TextView Avaiable = new TextView(this);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            Avaiable.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            Avaiable.setText(getResources().getString(R.string.Available));
        } else
            Avaiable.setText(Farsi.Convert(getResources().getString(R.string.Available)));

        Avaiable.setTextSize(labelFont);
        Avaiable.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.25f));
        Avaiable.setGravity(Gravity.CENTER_HORIZONTAL);

        Avaliable_Row.addView(Avaiable);

        final LinearLayout balance_Row = new LinearLayout(this);
        balance_Row.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        balance_Row.setOrientation(LinearLayout.HORIZONTAL);

        TopUpAmount_Text = new TextView(this);
        TopUpAmount_Text.setText("0.0");
        TopUpAmount_Text.setTextSize(labelFont);
        TopUpAmount_Text.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.26f));
        TopUpAmount_Text.setGravity(Gravity.CENTER_HORIZONTAL);
        TopUpAmount_Text.setSingleLine(true);

        if (AVL_Service.SDUnitOfCurrency.equalsIgnoreCase("SAR"))
            TopUpAmount_Text.setText(Farsi.Convert(getResources().getString(R.string.Riyal)) + " " + BalanceOfDriver);
        else
            TopUpAmount_Text.setText(AVL_Service.SDUnitOfCurrency + " " + BalanceOfDriver);

        balance_Row.addView(TopUpAmount_Text);

        View line1 = new View(this);
        line1.setBackgroundColor(Color.RED);
        line1.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, 1));

        final LinearLayout CardRow = new LinearLayout(this);
        CardRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        CardRow.setOrientation(LinearLayout.HORIZONTAL);

        TopUpCardNo = new EditText(this);
        TopUpCardNo.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.7f));
        TopUpCardNo.setInputType(InputType.TYPE_CLASS_NUMBER);
        // ET_CardNumber.setFilters(mmyyFilter);
        TopUpCardNo.setSingleLine();
        TopUpCardNo.setHint("Card Number");
        TopUpCardNo.setText("");
        TopUpCardNo.setTextSize(labelFont - 1);
        TopUpCardNo.setTypeface(Typeface.DEFAULT_BOLD);

        CardRow.addView(TopUpCardNo);

        final LinearLayout LoadButton_Row = new LinearLayout(this);
        LoadButton_Row.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        LoadButton_Row.setOrientation(LinearLayout.HORIZONTAL);

        Button btnCredit = new Button(this);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            btnCredit.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            btnCredit.setText(getResources().getString(R.string.Credit));
        } else
            btnCredit.setText(Farsi.Convert(getResources().getString(R.string.Credit)));

        btnCredit.setTextSize(buttonFont + 9);
        btnCredit.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.33f));
        btnCredit.setGravity(Gravity.CENTER);
        drawable = btnCredit.getBackground();
        drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.SRC_IN);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            btnCredit.setBackground(drawable);
        else
            btnCredit.setBackgroundDrawable(drawable);
        btnCredit.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                AVL_Service.pref.edit().putString("TopUpCardNo", TopUpCardNo.getText().toString()).commit();
                TopupCustomerBalance_Driver();
            }
        });

        Button btnCancel = new Button(this);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            btnCancel.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            btnCancel.setText(getResources().getString(R.string.Cancel));
        } else
            btnCancel.setText(Farsi.Convert(getResources().getString(R.string.Cancel)));

        btnCancel.setTextSize(buttonFont + 9);
        // btnCancel.setTypeface(Typeface.DEFAULT_BOLD);
        btnCancel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.33f));
        btnCancel.setGravity(Gravity.CENTER);
        drawable = btnCancel.getBackground();
        drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.SRC_IN);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            btnCancel.setBackground(drawable);
        else
            btnCancel.setBackgroundDrawable(drawable);
        btnCancel.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                setContentView(mainView);
            }
        });

        LoadButton_Row.addView(btnCredit);
        LoadButton_Row.addView(btnCancel);

        panel.addView(emergencyButtonRow);
        panel.addView(Avaliable_Row);
        panel.addView(balance_Row);
        panel.addView(line1);
        panel.addView(CardRow);
        panel.addView(LoadButton_Row);

        LinearLayout linear = new LinearLayout(this);
        linear.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));

        if (h == 1776 && w == 1080) {

            linear.setPadding(0, screenHeight / 20, 0, 0);

        } else if (h == 1280 && w == 720) {
            linear.setPadding(0, screenHeight / 40, 0, 0);

        }

        else {
            linear.setPadding(0, 0, 0, 0);

        }

        linear.setScrollContainer(true);
        ScrollView scroll = new ScrollView(this);
        scroll.setPadding(0, 0, 0, 0);
        scroll.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        scroll.setFillViewport(true);

        scroll.addView(panel);
        linear.addView(scroll);

        return linear;

    }

    @SuppressWarnings("deprecation")
    @SuppressLint("NewApi")
    private ViewGroup createZoneView() {
        SetApplicationLocal();
        LinearLayout mainPanel = new LinearLayout(this);
        mainPanel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        mainPanel.setOrientation(LinearLayout.VERTICAL);

        // change by hamza
        DisplayMetrics metrics = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(metrics);
        int h = metrics.heightPixels; // 1280
        int w = metrics.widthPixels; // 720

        // for adding buttons and text view
        final LinearLayout twolayout = new LinearLayout(this);
        twolayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        twolayout.setOrientation(LinearLayout.HORIZONTAL);

        if (h == 1280 && w == 720) {

            twolayout.setPadding(0, screenHeight / 40, 0, 0);

        } else if ((h == 1776 || h == 1920) && w == 1080) {
            twolayout.setPadding(0, screenHeight / 20, 0, 0);
        }

        else {
            twolayout.setPadding(0, 0, 0, 0);

        }
        // change end

        final LinearLayout zoneRow = new LinearLayout(this);
        zoneRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.5f));
        zoneRow.setOrientation(LinearLayout.HORIZONTAL);

        // change by hamza
        final LinearLayout farevehical_row = new LinearLayout(this);
        // farevehical_row.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        farevehical_row.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.8f)); // 0.8
        farevehical_row.setOrientation(LinearLayout.VERTICAL);
        farevehical_row.setWeightSum(1);

        bookAVLButton = new Button(this);
        // bookAVLButton.setTextColor(Color.WHITE);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            bookAVLButton.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            bookAVLButton.setText(getResources().getString(R.string.AutoZone));
        } else
            bookAVLButton.setText(Farsi.Convert(getResources().getString(R.string.AutoZone)));

        bookAVLButton.setTextSize(buttonFont);
        drawable = bookAVLButton.getBackground();
        drawable.setColorFilter(Color.YELLOW, Mode.SRC_IN);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            bookAVLButton.setBackground(drawable);
        else
            bookAVLButton.setBackgroundDrawable(drawable);
        if (!AVL_Service.Allow_Book_In_AutoZone) {
            drawable = bookAVLButton.getBackground();
            drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.SRC_IN);
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                bookAVLButton.setBackground(drawable);
            else
                bookAVLButton.setBackgroundDrawable(drawable);
            lastRequestedBookedZone = "Unknown";
        }

        if (autoZoneSetting == 0) {
            drawable = bookAVLButton.getBackground();
            drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.SRC_IN);
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                bookAVLButton.setBackground(drawable);
            else
                bookAVLButton.setBackgroundDrawable(drawable);
            autoZoneSetting = 1;
        }

        bookAVLButton.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
        // bookAVLButton.setBackgroundDrawable(getResources().getDrawable(R.drawable.icongreen));
        // bookAVLButton.setHeight(40);
        // bidButton.setGravity(Gravity.RIGHT);

        bookAVLButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                if (AVL_Service.Allow_Book_In_AutoZone) {
                    // fare.setTextColor(Color.WHITE); // ////////updated/////////////////////
                    // fare.setText("Fare / Taxi "); // /////////////////////////
                    // fareclicked = false; // /////////////////////////////////////
                    handleShowProgress(Farsi.Convert(getResources().getString(R.string.AutoBookinProg)));
                    avlbutton = true;
                    zoneBookIn("998", "0");
                    lastRequestedBookedZone = "998";
                    drawable = bookAVLButton.getBackground();
                    drawable.setColorFilter(Color.YELLOW, Mode.SRC_IN);
                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                        bookAVLButton.setBackground(drawable);
                    else
                        bookAVLButton.setBackgroundDrawable(drawable);
                    if (AVL_Service.ShowNearZoneFeatureOnSD)
                        NearByZoneButton.setText(Farsi.Convert(getResources().getString(R.string.NearByZone)));
                    SetBookedZoneBackground();
                } else
                    // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.AutoZonebookindisabled)), Toast.LENGTH_LONG).show();
                    showToastMessage(R.string.AutoZonebookindisabled);
            }
        });

        final Button updateButton = new Button(this);
        // updateButton.setText(Farsi.Convert(getResources().getString(R.string.UpdateList)));
        updateButton.setTextSize(buttonFont);
        updateButton.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
        drawable = updateButton.getBackground();
        drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            updateButton.setBackground(drawable);
        else
            updateButton.setBackgroundDrawable(drawable);

        updateButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {

                drawable = NearByZoneButton.getBackground();
                drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                    NearByZoneButton.setBackground(drawable);
                else
                    NearByZoneButton.setBackgroundDrawable(drawable);

                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                    NearByZoneButton.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                    NearByZoneButton.setText(getResources().getString(R.string.NearByZone));
                } else
                    NearByZoneButton.setText(Farsi.Convert(getResources().getString(R.string.NearByZone)));

                handleShowProgress(Farsi.Convert(getResources().getString(R.string.UpdatingZones)));
                schedulerForCreateZoneView = Executors.newSingleThreadScheduledExecutor();
                schedulerForCreateZoneView.schedule(new Runnable() {

                    @Override
                    public void run() {
                        runOnUiThread(new Runnable() {
                            public void run() {
                                hideProgressDialog();
                                // Toast.makeText(getApplicationContext(), "Zone list will be updated shortlty.", Toast.LENGTH_LONG).show();

                            }
                        });

                    }
                }, 15, TimeUnit.SECONDS);
                serviceHandle.sendMessageToServer("ZFT", "SDHS", MsgType.ZFTReq, AckType.NEW, MsgValidity.Medium, MsgPriority.Normal);
            }
        });

        fare = new TextView(this);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            fare.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            fare.setText(getResources().getString(R.string.FareVehicle));
        } else
            fare.setText(Farsi.Convert(getResources().getString(R.string.FareVehicle)));

        fare.setTextSize((miscFont));
        fare.setGravity(Gravity.CENTER_HORIZONTAL);
        fare.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 1f));

        // Updated, on click of Fare/Taxi
        fare.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                if (fareclicked)
                    fareclicked = false;
                else
                    fareclicked = true;
                fareSort();
                SetBookedZoneBackground();
            }
        });

        // final LinearLayout NearzoneRow = new LinearLayout(this);
        // NearzoneRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        // NearzoneRow.setOrientation(LinearLayout.HORIZONTAL);

        NearByZoneButton = new Button(this);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            NearByZoneButton.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            NearByZoneButton.setText(getResources().getString(R.string.NearByZone));
        } else
            NearByZoneButton.setText(Farsi.Convert(getResources().getString(R.string.NearByZone)));

        NearByZoneButton.setTextSize(buttonFont);
        drawable = NearByZoneButton.getBackground();
        drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), Mode.MULTIPLY);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            NearByZoneButton.setBackground(drawable);
        else
            NearByZoneButton.setBackgroundDrawable(drawable);
        NearByZoneButton.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT));
        // bookAVLButton.setBackgroundDrawable(getResources().getDrawable(R.drawable.icongreen));
        // bookAVLButton.setHeight(40);
        // bidButton.setGravity(Gravity.RIGHT);
        if((bookedZoneValue.getText().toString().equalsIgnoreCase("None") || bookedZoneValue.getText().toString().equalsIgnoreCase("Unknown") || bookedZoneValue.getText().toString().equalsIgnoreCase("Unkwn") || bookedZoneValue.getText().toString().equalsIgnoreCase("0")) &&
                (avlZoneValue.getText().toString().equalsIgnoreCase("Unknown") || avlZoneValue.getText().toString().equalsIgnoreCase("0") || avlZoneValue.getText().toString().equalsIgnoreCase("None") || avlZoneValue.getText().toString().equalsIgnoreCase("UnKWN"))   ){
            NearByZoneButton.setEnabled(false);
        } else
            NearByZoneButton.setEnabled(true);

        NearByZoneButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                if (NearByAllZones) {
                    boolean isAvailable = false;
                    for (int i = 0; i < AVL_Service.Zone_NAMES.length; i++) {
                        if (bookedZoneValue.getText().toString().trim().equalsIgnoreCase(AVL_Service.Zone_NAMES[i].toString().trim())) {
                            SetNearByZone(AVL_Service.Adjacent_ZoneNAMES[i]);
                            isAvailable = true;
                        }
                    }
                    if(!isAvailable){
                        for (int i = 0; i < AVL_Service.Zone_NAMES.length; i++) {
                            if (avlZoneValue.getText().toString().trim().equalsIgnoreCase(AVL_Service.Zone_NAMES[i].toString().trim())) {
                                SetNearByZone(AVL_Service.Adjacent_ZoneNAMES[i]);
                                isAvailable = true;
                            }
                        }
                    }
                    if(!AVL_Service.SDOnlyNearZoneMode) {
                        if (isAvailable) {
                            NearByZoneButton.setText(Farsi.Convert(getResources().getString(R.string.AllZones)));
                            NearByAllZones = false;
                        } else {
                            // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.NoNearByZone)), Toast.LENGTH_LONG).show();
                            showToastMessage(R.string.NoNearByZone);
                        }
                    }
                } else {
                    NearByAllZones = true;
                    SetAllZones();
                    NearByZoneButton.setText(Farsi.Convert(getResources().getString(R.string.NearByZone)));
                }
            }
        });
        // AllZonesButton

        AllZonesButton = new Button(this);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            AllZonesButton.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            AllZonesButton.setText(R.string.AllZones);
        } else
            AllZonesButton.setText(Farsi.Convert(getResources().getString(R.string.AllZones)));
        AllZonesButton.setTextSize(buttonFont);
        AllZonesButton.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));

        AllZonesButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                drawable = NearByZoneButton.getBackground();
                drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.SRC_IN);
                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                    NearByZoneButton.setBackground(drawable);
                else
                    NearByZoneButton.setBackgroundDrawable(drawable);

                drawable = AllZonesButton.getBackground();
                drawable.setColorFilter(Color.YELLOW, Mode.SRC_IN);
                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                    AllZonesButton.setBackground(drawable);
                else
                    AllZonesButton.setBackgroundDrawable(drawable);

                SetAllZones();
            }
        });

        zoneRow.addView(bookAVLButton);
        zoneRow.addView(updateButton);
        if (AVL_Service.ShowNearZoneFeatureOnSD) {
            updateButton.setSingleLine();
            drawable = getResources().getDrawable(R.drawable.refresh);
            updateButton.setCompoundDrawablesWithIntrinsicBounds(drawable, null, null, null);
            zoneRow.addView(NearByZoneButton);
        } else {

            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                bookAVLButton.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                bookAVLButton.setText(R.string.AutoZoneBookin);
            } else
                bookAVLButton.setText(Farsi.Convert(getResources().getString(R.string.AutoZoneBookin)));

            updateButton.setText(Farsi.Convert(getResources().getString(R.string.UpdateList)));
        }

        // change by hamza
        // zoneRow.addView(fare);

        farevehical_row.addView(fare);

        twolayout.addView(zoneRow);
        twolayout.addView(farevehical_row);

        // mainPanel.addView(zoneRow);
        mainPanel.addView(twolayout);

		/*
		 * NearzoneRow.addView(NearByZoneButton);
		 * NearzoneRow.addView(AllZonesButton);
		 * if (AVL_Service.ShowNearZoneFeatureOnSD)
		 * mainPanel.addView(NearzoneRow);
		 */

        scrollPanelzone = new ScrollView(this);
        zonePanel = new LinearLayout(this);
        zonePanel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.5f));
        zonePanel.setOrientation(LinearLayout.VERTICAL);
        scrollPanelzone.addView(zonePanel);

        mainPanel.addView(scrollPanelzone);
        return mainPanel;
    }
    /*--------------------------------------------------------------addZone - Colo-------------------------------------------------------------------------*/
    private View addZone(String zoneName, String[] stand, String fare, String taxi) {
        SetApplicationLocal();
        final ArrayList<String[]> _stand = new ArrayList<String[]>();
        boolean isStand = false;
        for (int i = 0; i < stand.length; i++)
            _stand.add(stand[i].split("\\$"));

        final String _zoneName = zoneName;
        final String[] _standName;
        int j, k;
        if (_stand.get(0)[0].equalsIgnoreCase("0")) {
            j = 1;
            _standName = new String[_stand.size() - 1];
        } else {
            j = 0;
            _standName = new String[_stand.size()];
        }
        k = 0;
        for (; j < _stand.size(); j++) {
            _standName[k] = _stand.get(j)[0];
            k++;
            isStand = true;
        }

        final LinearLayout zoneRow = new LinearLayout(this);
        zoneRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        zoneRow.setOrientation(LinearLayout.HORIZONTAL);

        zoneButton = new Button(this);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            zoneButton.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            zoneButton.setText(R.string.zones);
        } else
            zoneButton.setText(Farsi.Convert(getResources().getString(R.string.zones)));

        zoneButton.setTextSize(buttonFont);
        zoneButton.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
        zoneButton.setId(ID.ZoneBtn);
        // zoneButton.setTag(latitude);

        zoneButton.setOnClickListener(new View.OnClickListener() {
            @SuppressWarnings("deprecation")
            @SuppressLint("NewApi")
            public void onClick(View view) {
                if (AVL_Service.pref.getBoolean("AllowZoneBookin", true)) {
                    showProgressDialog(Farsi.Convert(getResources().getString(R.string.Bookinginzone)));
                    zoneBookIn(_zoneName, "0");
                    lastRequestedBookedZone = _zoneName;
                    drawable = bookAVLButton.getBackground();
                    drawable.setColorFilter(Color.WHITE, Mode.SRC_IN);
                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                        bookAVLButton.setBackground(drawable);
                    else
                        bookAVLButton.setBackgroundDrawable(drawable);
                    drawable = NearByZoneButton.getBackground();
                    drawable.setColorFilter(null);
                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                        NearByZoneButton.setBackground(drawable);
                    else
                        NearByZoneButton.setBackgroundDrawable(drawable);
                } else
                    // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.ManualZoneBookinRestricted)), Toast.LENGTH_LONG).show();
                    showToastMessage(R.string.ManualZoneBookinRestricted);
            }
        });

        final Button standButton = new Button(this);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            standButton.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            standButton.setText(R.string.stands);
        } else
            standButton.setText(Farsi.Convert(getResources().getString(R.string.stands)));
        standButton.setTextSize(buttonFont);
        standButton.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
        standButton.setId(ID.StandBtn);
        // standButton.setTag(longitude);

        standButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {

                if (_zoneName.equalsIgnoreCase(avlZone)) {
                    LayoutInflater factory = getLayoutInflater();
                    View content = factory.inflate(R.layout.stand_list, null);

                    ListView lv = (ListView) content.findViewById(R.id.list);
                    lv.setAdapter(new ArrayAdapter<String>(TaxiPlexer.this, android.R.layout.simple_list_item_1, _standName));
                    // lv.setChoiceMode(ListView.CHOICE_MODE_SINGLE);

                    AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                    builder.setView(content);
                    zoneDialog = builder.create();
                    zoneDialog.show();
                    zoneDialog.getWindow().setLayout(200, 400); // Controlling width and height.

                    lv.setOnItemClickListener(new OnItemClickListener() {
                        public void onItemClick(AdapterView<?> parent, final View view, int position, long id) {

                            // Get the data associated with selected item
                            String myStand = ((TextView) view).getText().toString();
                            if (myStand.equalsIgnoreCase(_zoneName))
                                myStand = "0";
                            zoneDialog.dismiss();
                            // Edited by Salman due to ETS by myounis
                            if (Double.valueOf(AVL_Service.pref.getString("LastLatitude", "0")) == 0 || Double.valueOf(AVL_Service.pref.getString("LastLongitude", "0")) == 0) {
                                AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                                builder.setIcon(android.R.drawable.ic_dialog_alert).setTitle(Farsi.Convert(getResources().getString(R.string.StandBookinFailed))).setMessage(
                                        Farsi.Convert(getResources().getString(R.string.UnknownGPSLocation))).setPositiveButton(
                                        Farsi.Convert(getResources().getString(R.string.ok)),
                                        new DialogInterface.OnClickListener() {
                                            @Override
                                            public void onClick(DialogInterface dialog, int which) {
                                                dialog.dismiss();
                                            } // onClick

                                        });
                                AlertDialog alert = builder.create();
                                alert.show();

                                dialogFontSize(alert);
                            }
                            // Edited by Salman due to ETS by myounis
                            else {
                                double distance = DistanceCalculator.CalculateDistance(Double.valueOf(AVL_Service.pref.getString("LastLatitude", "0")), Double.valueOf(AVL_Service.pref.getString(
                                        "LastLongitude",
                                        "0")), Double.valueOf(_stand.get(position)[1]), Double.valueOf(_stand.get(position)[2]));
                                if (distance < AVL_Service.pref.getLong(Constants.Allowable_Stand_Distance, 900))
                                    serviceHandle.sendMessageToServer("Stand" + Constants.COLSEPARATOR
                                            + _zoneName
                                            + Constants.COLSEPARATOR
                                            + AVL_Service.pref.getString("LastLatitude", "0")
                                            + Constants.COLSEPARATOR
                                            + AVL_Service.pref.getString("LastLongitude", "0")
                                            + Constants.COLSEPARATOR
                                            + AVL_Service.pref.getString("Accuracy", "0.0")
                                            + Constants.COLSEPARATOR
                                            + AVL_Service.pref.getString("Alt", "1")
                                            + Constants.COLSEPARATOR
                                            + myStand
                                            + Constants.COLSEPARATOR
                                            + "0"
                                            + Constants.COLSEPARATOR
                                            + "0", "SDHS", MsgType.BookinReq, AckType.NEW, MsgValidity.Medium, MsgPriority.AboveNormal);

                                else {
                                    if (AVL_Service.NotAllowActionIfAway.charAt(4) == '1' && AVL_Service.locManager.isProviderEnabled(LocationManager.GPS_PROVIDER) == true) {
                                        if (AVL_Service.MessageTypeIfActionNotAllowed.charAt(4) == '1') {

                                            AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                                            builder.setIcon(android.R.drawable.ic_dialog_alert).setTitle(Farsi.Convert(getResources().getString(R.string.StandBookinFailed))).setMessage(
                                                    (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("mile")) ? String.format(
                                                            Farsi.Convert(getResources().getString(R.string.MilesAwayCanNotPerform)),
                                                            dFormat.format(distance / 1609),
                                                            dFormat.format(AVL_Service.pref.getLong(Constants.Allowable_Stand_Distance, 900) / 1609)) : String.format(Farsi.Convert(getResources().getString(
                                                            R.string.KmAwayCanNotPerform)), dFormat.format(distance / 1000), dFormat
                                                            .format(AVL_Service.pref.getLong(Constants.Allowable_Stand_Distance, 900) / 1000))).setPositiveButton(
                                                    Farsi.Convert(getResources().getString(R.string.ok)),
                                                    new DialogInterface.OnClickListener() {
                                                        @Override
                                                        public void onClick(DialogInterface dialog, int which) {
                                                            dialog.dismiss();
                                                        } // onClick

                                                    });
                                            AlertDialog alert = builder.create();
                                            alert.show();

                                            dialogFontSize(alert);
                                        } else {
                                            Toast.makeText(
                                                    getApplicationContext(),
                                                    (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("mile")) ? String.format(
                                                            Farsi.Convert(getResources().getString(R.string.MilesAwayCanNotPerform)),
                                                            dFormat.format(distance / 1609),
                                                            dFormat.format(AVL_Service.pref.getLong(Constants.Allowable_Stand_Distance, 900) / 1609)) : String.format(Farsi.Convert(getResources().getString(
                                                            R.string.KmAwayCanNotPerform)), dFormat.format(distance / 1000), dFormat
                                                            .format(AVL_Service.pref.getLong(Constants.Allowable_Stand_Distance, 900) / 1000)),
                                                    Toast.LENGTH_SHORT).show();
                                        }
                                    } else {
                                        if (AVL_Service.MessageTypeIfActionNotAllowed.charAt(4) == '1') {
                                            AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                                            builder
                                                    .setIcon(android.R.drawable.ic_dialog_alert)
                                                    .setTitle(Farsi.Convert(getResources().getString(R.string.StandBookinConfirmation)))
                                                    .setMessage(
                                                            (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("mile")) ? String.format(
                                                                    Farsi.Convert(getResources().getString(R.string.MilesAwayFromStand)),
                                                                    dFormat.format(distance / 1609)) : String.format(Farsi.Convert(getResources().getString(R.string.KmAwayFromStand)), dFormat
                                                                    .format(distance / 1000)))
                                                    .setPositiveButton(Farsi.Convert(getResources().getString(R.string.Yes)), new DialogInterface.OnClickListener() {

                                                        @Override
                                                        public void onClick(DialogInterface dialog, int which) {
                                                            String myStand = ((TextView) view).getText().toString();
                                                            if (myStand.equalsIgnoreCase(_zoneName))
                                                                myStand = "0";
                                                            serviceHandle.sendMessageToServer("Stand" + Constants.COLSEPARATOR
                                                                    + _zoneName
                                                                    + Constants.COLSEPARATOR
                                                                    + AVL_Service.pref.getString("LastLatitude", "0")
                                                                    + Constants.COLSEPARATOR
                                                                    + AVL_Service.pref.getString("LastLongitude", "0")
                                                                    + Constants.COLSEPARATOR
                                                                    + AVL_Service.pref.getString("Accuracy", "0.0")
                                                                    + Constants.COLSEPARATOR
                                                                    + AVL_Service.pref.getString("Alt", "1")
                                                                    + Constants.COLSEPARATOR
                                                                    + myStand
                                                                    + Constants.COLSEPARATOR
                                                                    + "0"
                                                                    + Constants.COLSEPARATOR
                                                                    + "0", "SDHS", MsgType.BookinReq, AckType.NEW, MsgValidity.Medium, MsgPriority.AboveNormal);

                                                        } // onClick

                                                    })
                                                    .setNegativeButton(Farsi.Convert(getResources().getString(R.string.No)), null);
                                            AlertDialog alert = builder.create();
                                            alert.show();

                                            dialogFontSize(alert);
                                        } else {
                                            Toast.makeText(
                                                    getApplicationContext(),
                                                    (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("mile")) ? String.format(
                                                            Farsi.Convert(getResources().getString(R.string.MilesAwayCanNotPerform)),
                                                            dFormat.format(distance / 1609),
                                                            dFormat.format(AVL_Service.pref.getLong(Constants.Allowable_Stand_Distance, 900) / 1609)) : String.format(Farsi.Convert(getResources().getString(
                                                            R.string.KmAwayCanNotPerform)), dFormat.format(distance / 1000), dFormat
                                                            .format(AVL_Service.pref.getLong(Constants.Allowable_Stand_Distance, 900) / 1000)),
                                                    Toast.LENGTH_SHORT).show();

                                            String myStand1 = ((TextView) view).getText().toString();
                                            if (myStand1.equalsIgnoreCase(_zoneName))
                                                myStand1 = "0";
                                            serviceHandle.sendMessageToServer("Stand" + Constants.COLSEPARATOR
                                                    + _zoneName
                                                    + Constants.COLSEPARATOR
                                                    + AVL_Service.pref.getString("LastLatitude", "0")
                                                    + Constants.COLSEPARATOR
                                                    + AVL_Service.pref.getString("LastLongitude", "0")
                                                    + Constants.COLSEPARATOR
                                                    + AVL_Service.pref.getString("Accuracy", "0.0")
                                                    + Constants.COLSEPARATOR
                                                    + AVL_Service.pref.getString("Alt", "1")
                                                    + Constants.COLSEPARATOR
                                                    + myStand1
                                                    + Constants.COLSEPARATOR
                                                    + "0"
                                                    + Constants.COLSEPARATOR
                                                    + "0", "SDHS", MsgType.BookinReq, AckType.NEW, MsgValidity.Medium, MsgPriority.AboveNormal);
                                        }
                                    }
                                }

                            }
                        }
                    });

                } else
                    // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.ManualStandBookinRestricted)), Toast.LENGTH_LONG).show();
                    showToastMessage(R.string.ManualStandBookinRestricted);

            }
        });

        TextView zoneLabel = new TextView(this);
        zoneLabel.setText(_zoneName);
        zoneLabel.setTextSize(labelFont);
        zoneLabel.setLayoutParams(new LayoutParams((int) (screenWidth * 0.30), LayoutParams.WRAP_CONTENT, 0.5f));
        zoneLabel.setId(ID.ZoneLbl);

        fareLabel = new TextView(this); // ////////////////////////////////////////////
        // fareLabel.setGravity(Gravity.RIGHT);
        fareLabel.setText(fare + "/");
        fareLabel.setGravity(Gravity.RIGHT);
        fareLabel.setTextSize(labelFont);
        fareLabel.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, 0.5f));
        fareLabel.setId(ID.FareLbl);

        TextView taxiLabel = new TextView(this);
        taxiLabel.setText(taxi);
        taxiLabel.setTextSize(labelFont);
        taxiLabel.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, 0.5f));
        taxiLabel.setId(ID.TaxiLbl);

        if (Integer.valueOf(fare) > Integer.valueOf(taxi)) {
            fareLabel.setTextColor(Color.GREEN);
            taxiLabel.setTextColor(Color.GREEN);
        } else {
            fareLabel.setTextColor(Color.LTGRAY);
            taxiLabel.setTextColor(Color.LTGRAY);
        }

        zoneRow.addView(zoneButton);
        // if (Double.valueOf(_stand.get(index)[1]) == 0 || Double.valueOf(_stand.get(index)[2]) == 0)
        if (!isStand)
            standButton.setEnabled(false);

        if (AVL_Service.ShowStandsOnSD)
            standButton.setVisibility(Button.VISIBLE);
        else
            standButton.setVisibility(Button.GONE);

        zoneRow.addView(standButton);
        zoneRow.addView(zoneLabel);
        zoneRow.addView(fareLabel);
        zoneRow.addView(taxiLabel);

        return zoneRow;

    }
    // Overriding addZone for Backward Compatibility
	/*--------------------------------------------------------------addZone-------------------------------------------------------------------------*/
    @SuppressWarnings("deprecation")
    @SuppressLint("NewApi")
    private View addZone(String zoneName, String standName, String fare, String taxi, final Double latitude, final Double longitude) {
        SetApplicationLocal();
        final String _zoneName = zoneName;
        final String _standName = standName;

        final LinearLayout zoneRow = new LinearLayout(this);
        zoneRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        zoneRow.setOrientation(LinearLayout.HORIZONTAL);

        zoneButton = new Button(this);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            zoneButton.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            zoneButton.setText(R.string.zones);
        } else
            zoneButton.setText("  " + Farsi.Convert(getResources().getString(R.string.zones)) + "  ");
        zoneButton.setTextSize(buttonFont);
        zoneButton.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
        zoneButton.setId(ID.ZoneBtn);
        zoneButton.setTag(latitude);

        // change by hamza
        drawable = zoneButton.getBackground();
        drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            zoneButton.setBackground(drawable);
        else
            zoneButton.setBackgroundDrawable(drawable);

        zoneButton.setOnClickListener(new View.OnClickListener() {
            @SuppressLint("NewApi")
            public void onClick(View view) {
                if (AVL_Service.pref.getBoolean("AllowZoneBookin", true)) {
                    showProgressDialog(Farsi.Convert(getResources().getString(R.string.Bookinginzone)));
                    zoneBookIn(_zoneName, "0");
                    lastRequestedBookedZone = _zoneName;
                    drawable = bookAVLButton.getBackground();
                    drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                        bookAVLButton.setBackground(drawable);
                    else
                        bookAVLButton.setBackgroundDrawable(drawable);
                    drawable = NearByZoneButton.getBackground();
                    drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                        NearByZoneButton.setBackground(drawable);
                    else
                        NearByZoneButton.setBackgroundDrawable(drawable);
                } else
                    // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.ManualZoneRestricted)), Toast.LENGTH_LONG).show();
                    showToastMessage(R.string.ManualZoneRestricted);
            }
        });

        final Button standButton = new Button(this);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            standButton.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            standButton.setText(R.string.stands);
        } else
            standButton.setText("  " + Farsi.Convert(getResources().getString(R.string.stands)) + "  ");

        standButton.setTextSize((buttonFont));
        standButton.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
        standButton.setId(ID.StandBtn);
        standButton.setTag(longitude);
        drawable = standButton.getBackground();
        drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            standButton.setBackground(drawable);
        else
            standButton.setBackgroundDrawable(drawable);

        standButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                if (_zoneName.equalsIgnoreCase(avlZone)) {
                    // Edited by Salman due to ETS by myounis
                    if (Double.valueOf(AVL_Service.pref.getString("LastLatitude", "0")) == 0 || Double.valueOf(AVL_Service.pref.getString("LastLongitude", "0")) == 0) {
                        AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                        builder.setIcon(android.R.drawable.ic_dialog_alert).setTitle(Farsi.Convert(getResources().getString(R.string.StandBookinFailed))).setMessage(
                                Farsi.Convert(getResources().getString(R.string.UnknownGPSLocation))).setPositiveButton(
                                Farsi.Convert(getResources().getString(R.string.ok)),
                                new DialogInterface.OnClickListener() {
                                    @Override
                                    public void onClick(DialogInterface dialog, int which) {
                                        dialog.dismiss();
                                    } // onClick

                                });
                        AlertDialog alert = builder.create();
                        alert.show();

                        dialogFontSize(alert);
                    }
                    // Edited by Salman due to ETS by myounis
                    else {
                        double distance = DistanceCalculator.CalculateDistance(Double.valueOf(AVL_Service.pref.getString("LastLatitude", "0")), Double.valueOf(AVL_Service.pref.getString(
                                "LastLongitude",
                                "0")), latitude, longitude);
                        if (distance < AVL_Service.pref.getLong(Constants.Allowable_Stand_Distance, 900))
                            serviceHandle.sendMessageToServer("Stand" + Constants.COLSEPARATOR
                                    + _standName
                                    + Constants.COLSEPARATOR
                                    + AVL_Service.pref.getString("LastLatitude", "0")
                                    + Constants.COLSEPARATOR
                                    + AVL_Service.pref.getString("LastLongitude", "0")
                                    + Constants.COLSEPARATOR
                                    + AVL_Service.pref.getString("Accuracy", "0.0")
                                    + Constants.COLSEPARATOR
                                    + AVL_Service.pref.getString("Alt", "1")
                                    + Constants.COLSEPARATOR
                                    + "0"
                                    + Constants.COLSEPARATOR
                                    + "0"
                                    + Constants.COLSEPARATOR
                                    + "0", "SDHS", MsgType.BookinReq, AckType.NEW, MsgValidity.Medium, MsgPriority.AboveNormal);

                        else {
                            if (AVL_Service.NotAllowActionIfAway.charAt(4) == '1' && AVL_Service.locManager.isProviderEnabled(LocationManager.GPS_PROVIDER) == true) {
                                if (AVL_Service.MessageTypeIfActionNotAllowed.charAt(4) == '1') {

                                    AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                                    builder.setIcon(android.R.drawable.ic_dialog_alert).setTitle(Farsi.Convert(getResources().getString(R.string.StandBookinFailed))).setMessage(
                                            (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("mile")) ? String.format(Farsi.Convert(getResources().getString(R.string.MilesAwayCanNotPerform)), dFormat
                                                    .format(distance / 1609), dFormat.format(AVL_Service.pref.getLong(Constants.Allowable_Stand_Distance, 900) / 1609)) : String.format(Farsi
                                                    .Convert(getResources().getString(R.string.KmAwayCanNotPerform)), dFormat.format(distance / 1000), dFormat.format(AVL_Service.pref.getLong(
                                                    Constants.Allowable_Stand_Distance,
                                                    900) / 1000))).setPositiveButton(Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int which) {
                                            dialog.dismiss();
                                        } // onClick

                                    });
                                    AlertDialog alert = builder.create();
                                    alert.show();

                                    dialogFontSize(alert);
                                } else {
                                    Toast.makeText(
                                            getApplicationContext(),
                                            (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("mile")) ? String.format(Farsi.Convert(getResources().getString(R.string.MilesAwayCanNotPerform)), dFormat
                                                    .format(distance / 1609), dFormat.format(AVL_Service.pref.getLong(Constants.Allowable_Stand_Distance, 900) / 1609)) : String.format(Farsi
                                                    .Convert(getResources().getString(R.string.KmAwayCanNotPerform)), dFormat.format(distance / 1000), dFormat.format(AVL_Service.pref.getLong(
                                                    Constants.Allowable_Stand_Distance,
                                                    900) / 1000)),
                                            Toast.LENGTH_SHORT).show();
                                }
                            } else {
                                if (AVL_Service.MessageTypeIfActionNotAllowed.charAt(4) == '1') {
                                    AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                                    builder
                                            .setIcon(android.R.drawable.ic_dialog_alert)
                                            .setTitle(Farsi.Convert(getResources().getString(R.string.StandBookinConfirmation)))
                                            .setMessage(
                                                    (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("mile")) ? String.format(Farsi.Convert(getResources().getString(R.string.MilesAwayFromStand)), dFormat
                                                            .format(distance / 1609)) : String.format(Farsi.Convert(getResources().getString(R.string.KmAwayFromStand)), dFormat.format(distance / 1000)))
                                            .setPositiveButton(Farsi.Convert(getResources().getString(R.string.Yes)), new DialogInterface.OnClickListener() {

                                                @Override
                                                public void onClick(DialogInterface dialog, int which) {
                                                    serviceHandle.sendMessageToServer("Stand" + Constants.COLSEPARATOR
                                                            + _standName
                                                            + Constants.COLSEPARATOR
                                                            + AVL_Service.pref.getString("LastLatitude", "0")
                                                            + Constants.COLSEPARATOR
                                                            + AVL_Service.pref.getString("LastLongitude", "0")
                                                            + Constants.COLSEPARATOR
                                                            + AVL_Service.pref.getString("Accuracy", "0.0")
                                                            + Constants.COLSEPARATOR
                                                            + AVL_Service.pref.getString("Alt", "1")
                                                            + Constants.COLSEPARATOR
                                                            + "0"
                                                            + Constants.COLSEPARATOR
                                                            + "0"
                                                            + Constants.COLSEPARATOR
                                                            + "0", "SDHS", MsgType.BookinReq, AckType.NEW, MsgValidity.Medium, MsgPriority.AboveNormal);

                                                } // onClick

                                            })
                                            .setNegativeButton(Farsi.Convert(getResources().getString(R.string.No)), null);
                                    AlertDialog alert = builder.create();
                                    alert.show();

                                    dialogFontSize(alert);
                                } else {
                                    Toast.makeText(
                                            getApplicationContext(),
                                            (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("mile")) ? String.format(Farsi.Convert(getResources().getString(R.string.MilesAwayCanNotPerform)), dFormat
                                                    .format(distance / 1609), dFormat.format(AVL_Service.pref.getLong(Constants.Allowable_Stand_Distance, 900) / 1609)) : String.format(Farsi
                                                    .Convert(getResources().getString(R.string.KmAwayCanNotPerform)), dFormat.format(distance / 1000), dFormat.format(AVL_Service.pref.getLong(
                                                    Constants.Allowable_Stand_Distance,
                                                    900) / 1000)),
                                            Toast.LENGTH_SHORT).show();
                                    serviceHandle.sendMessageToServer("Stand" + Constants.COLSEPARATOR
                                            + _standName
                                            + Constants.COLSEPARATOR
                                            + AVL_Service.pref.getString("LastLatitude", "0")
                                            + Constants.COLSEPARATOR
                                            + AVL_Service.pref.getString("LastLongitude", "0")
                                            + Constants.COLSEPARATOR
                                            + AVL_Service.pref.getString("Accuracy", "0.0")
                                            + Constants.COLSEPARATOR
                                            + AVL_Service.pref.getString("Alt", "1")
                                            + Constants.COLSEPARATOR
                                            + "0"
                                            + Constants.COLSEPARATOR
                                            + "0"
                                            + Constants.COLSEPARATOR
                                            + "0", "SDHS", MsgType.BookinReq, AckType.NEW, MsgValidity.Medium, MsgPriority.AboveNormal);
                                }
                            }
                        }

                    }
                } else
                    // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.ManualStandRestricted)), Toast.LENGTH_LONG).show();
                    showToastMessage(R.string.ManualStandBookinRestricted);

            }
        });

        TextView zoneLabel = new TextView(this);
        zoneLabel.setText(Farsi.Convert(_zoneName));
        zoneLabel.setTextSize(labelFont);
        zoneLabel.setLayoutParams(new LayoutParams((int) (screenWidth * 0.30), LayoutParams.WRAP_CONTENT, 0.5f));
        zoneLabel.setId(ID.ZoneLbl);

        fareLabel = new TextView(this); // ////////////////////////////////////////////
        // fareLabel.setGravity(Gravity.RIGHT);
        fareLabel.setText(fare + "/");
        fareLabel.setGravity(Gravity.RIGHT);
        fareLabel.setTextSize(labelFont);
        fareLabel.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, 0.5f));
        fareLabel.setId(ID.FareLbl);

        TextView taxiLabel = new TextView(this);
        taxiLabel.setText(taxi);
        taxiLabel.setTextSize(labelFont);
        taxiLabel.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, 0.5f));
        taxiLabel.setId(ID.TaxiLbl);

        if (Integer.valueOf(fare) > Integer.valueOf(taxi)) {
            fareLabel.setTextColor(Color.GREEN);
            taxiLabel.setTextColor(Color.GREEN);
        } else {
            fareLabel.setTextColor(Color.LTGRAY);
            taxiLabel.setTextColor(Color.LTGRAY);
        }
        if (AVL_Service.ShowStandsOnSD)
            standButton.setVisibility(Button.VISIBLE);
        else
            standButton.setVisibility(Button.GONE);

        zoneRow.addView(zoneButton);
        if (latitude == 0 || longitude == 0)
            standButton.setEnabled(false);
        zoneRow.addView(standButton);
        zoneRow.addView(zoneLabel);
        zoneRow.addView(fareLabel);
        zoneRow.addView(taxiLabel);

        return zoneRow;

    }
    /*--------------------------------------------------------------zoneBookIn----------------------------------------------------------------------*/
    protected void zoneBookIn(String zoneName, String bAutoZoneOnDevice) {
        if (avlbutton) {
            avlbutton = false;
            serviceHandle.sendMessageToServer("Zone" + Constants.COLSEPARATOR
                    + zoneName
                    + Constants.COLSEPARATOR
                    + AVL_Service.pref.getString("LastLatitude", "0")
                    + Constants.COLSEPARATOR
                    + AVL_Service.pref.getString("LastLongitude", "0")
                    + Constants.COLSEPARATOR
                    + AVL_Service.pref.getString("Accuracy", "0.0")
                    + Constants.COLSEPARATOR
                    + AVL_Service.pref.getString("Alt", "1")
                    + Constants.COLSEPARATOR
                    + "0"
                    + Constants.COLSEPARATOR
                    + bAutoZoneOnDevice
                    + Constants.COLSEPARATOR
                    + "1", "SDHS", MsgType.BookinReq, AckType.NEW, MsgValidity.Medium, MsgPriority.AboveNormal);
        } else {
            serviceHandle.sendMessageToServer("Zone" + Constants.COLSEPARATOR
                    + zoneName
                    + Constants.COLSEPARATOR
                    + AVL_Service.pref.getString("LastLatitude", "0")
                    + Constants.COLSEPARATOR
                    + AVL_Service.pref.getString("LastLongitude", "0")
                    + Constants.COLSEPARATOR
                    + AVL_Service.pref.getString("Accuracy", "0.0")
                    + Constants.COLSEPARATOR
                    + AVL_Service.pref.getString("Alt", "1")
                    + Constants.COLSEPARATOR
                    + "0"
                    + Constants.COLSEPARATOR
                    + bAutoZoneOnDevice
                    + Constants.COLSEPARATOR
                    + "0", "SDHS", MsgType.BookinReq, AckType.NEW, MsgValidity.Medium, MsgPriority.AboveNormal);
        }
    }

    public int getResId(String variableName, Context context, Class<?> c) {

        try {
            Field idField = c.getDeclaredField(variableName);
            return idField.getInt(idField);
        } catch (Exception e) {
            e.printStackTrace();
            return -1;
        }
    }
    /*--------------------------------------------------------------createBidsView------------------------------------------------------------------*/
    private ViewGroup createBidsView() {

        bidPanel = new LinearLayout(this);
        bidPanel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        bidPanel.setOrientation(LinearLayout.VERTICAL);
        DisplayMetrics metrics = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(metrics);

        int h = metrics.heightPixels; // 1280
        int w = metrics.widthPixels; // 720

        if ((h == 1776 || h == 1920) && w == 1080) {

            bidPanel.setPadding(0, screenHeight / 20, 0, 0);

        } else if (h == 1280 && w == 720) {

            bidPanel.setPadding(0, screenHeight / 40, 0, 0);

        }

        else {
            bidPanel.setPadding(0, 0, 0, 0);

        }

        ScrollView l = new ScrollView(this);

        l.addView(bidPanel);

        return l;
    }

    /*--------------------------------------------------------------insertBid-----------------------------------------------------------------------*/
    private View insertBid(String bidID, String bidZone, String oraID) {

        final String _oraID = oraID;
        final String _bidID = bidID;
        final String _bidZone = bidZone;

        final LinearLayout bidRow = new LinearLayout(this);
        try {
            bidRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
            bidRow.setOrientation(LinearLayout.HORIZONTAL);
            bidRow.setTag(bidZone);
            bidRow.setId(Integer.parseInt(_bidID));

            TextView bidsLabel = new TextView(this);
            bidsLabel.setText(bidZone);
            bidsLabel.setTypeface(null, Typeface.BOLD);
            bidsLabel.setTextSize(labelFont + 5);
            bidsLabel.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, 0.5f));

            final Button bidButton = new Button(this);
            bidButton.setText(Farsi.Convert(getResources().getString(R.string.Bid)));
            bidButton.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
            bidButton.setTextSize(labelFont + 5);
            bidButton.setOnClickListener(new View.OnClickListener() {
                public void onClick(View view) {
                    try {
                        serviceHandle.sendMessageToServer(_bidID + Constants.COLSEPARATOR + "B", _oraID, MsgType.BID, AckType.NEW, MsgValidity.Medium, MsgPriority.Normal);
                        isAppActive = true;
                        removeBid(_bidZone);
                        if (mTTS.isSpeaking())
                            mTTS.stop();

                    } catch (Exception ex) {
                        LogException("[Exception onbidbutton click]" + "[insertBid]" + "[" + ex.getLocalizedMessage() + "]");
                    }
                }
            });

            final Button noBidButton = new Button(this);
            noBidButton.setText(Farsi.Convert(getResources().getString(R.string.NoBid)));
            noBidButton.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
            noBidButton.setTextSize(labelFont + 5);
            noBidButton.setOnClickListener(new View.OnClickListener() {
                public void onClick(View view) {
                    try {
                        serviceHandle.sendMessageToServer(_bidID + Constants.COLSEPARATOR + "N", _oraID, MsgType.BID, AckType.NEW, MsgValidity.Medium, MsgPriority.Normal);
                        isAppActive = true;
                        removeBid(_bidZone);
                        if (mTTS.isSpeaking())
                            mTTS.stop();

                    } catch (Exception ex) {
                        LogException("[Exception on nobidbutton click]" + "[insertBid]" + "[" + ex.getLocalizedMessage() + "]");
                    }
                }
            });

            bidRow.addView(bidsLabel);
            bidRow.addView(bidButton);
            bidRow.addView(noBidButton);

        } catch (Exception ex) {
            LogException("[Exception in insertBid]" + "[insertBid]" + "[" + ex.getLocalizedMessage() + "]");
        }
        return bidRow;

    }

    /*--------------------------------------------------------------removeBid-----------------------------------------------------------------------*/
    protected void removeBid(String bidZone) {
        try {
            View bid;
            for (int i = 0; i < bidPanel.getChildCount(); i++) {
                bid = bidPanel.getChildAt(i);
                if (bid.getTag().toString().equalsIgnoreCase(bidZone) || Integer.toString(bid.getId()).equalsIgnoreCase(bidZone)) {
                    bidPanel.removeViewAt(i);
                    i--;
                }
            }// for
            // int i = Integer.parseInt("abc");
            bidCount = bidPanel.getChildCount() + 1;

            ImageView iv = (ImageView) tabHost.getTabWidget().getChildAt(BidIndex).findViewById(android.R.id.icon);
            notificationManager.cancel(10);
            iv.setImageDrawable(getResources().getDrawable(R.drawable.icon + (bidCount > 10 ? 10 : bidCount)));
        } catch (Exception ex) {
            LogException("[Exception in removeBid]" + "[removeBid]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }

    /*--------------------------------------------------------------clearTrip-----------------------------------------------------------------------*/
    protected void clearTrip(final String tripID, String msg, String reason) {
        try {
            if (tripAdapter == null)
                tabHost.setCurrentTab(TripIndex);
            String lConfirmationNo = "";
            ArrayList<Trip> tempArray = new ArrayList<Trip>();
            // ArrayList<Trip> tempArray1 = new ArrayList<Trip>();

            // ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            boolean isTripInOthersTrips = false;
            for (int i = 0; i < arrayListOftrips.size(); i++) {
                if (arrayListOftrips.get(i).tripNumber.equalsIgnoreCase(tripID)) {
                    if (!arrayListOftrips.get(i).state.equalsIgnoreCase(States.CANCELLED) && !arrayListOftrips.get(i).state.equalsIgnoreCase(States.DROPPED)
                            && !arrayListOftrips.get(i).state.equalsIgnoreCase(States.NOSHOW)) {
                        isTripInOthersTrips = true;
                    }
                    if (reason.equalsIgnoreCase("C")) {
                        arrayListOftrips.get(i).state = States.CANCELLED;
                        // synchronized (arrayListOfOtherTrips) {
                        // synchronized (arrayListOfTreatedTrips) {
                        synchronized (arrayListOftrips) {

                            // tempArray.add(arrayListOftrips.get(i));
                            // arrayListOfOtherTrips.remove(arrayListOfOtherTrips.get(i));
                            // arrayListOfTreatedTrips.add(arrayListOfOtherTrips.get(i));
                            arrayListOftrips.notifyAll();
                            // isTripInOthersTrips = true;
                            // {
                            // arrayListOfOtherTrips.notifyAll();
                            // {
                        }

                    } else if (reason.equalsIgnoreCase("U")) {
                        if (arrayListOftrips.get(i).manifestNum.length() > 2) {
                            tempArray.add(arrayListOftrips.get(i));
                            // arrayListOftrips.remove(arrayListOftrips.get(i));
                            // tripAdapter.notifyDataSetChanged();
                            // if (!arrayListOfOtherTrips.isEmpty()) {
                            for (Trip tempTrip : arrayListOftrips) {
                                if (tempTrip.manifestNum.equalsIgnoreCase(arrayListOftrips.get(i).manifestNum))
                                    break;
                                // else
                                // //manifestNum.setText(Farsi.Convert(getResources().getString(R.string.NotAssigned)));
                            }
                            // } else
                            // manifestNum.setText(Farsi.Convert(getResources().getString(R.string.NotAssigned)));
                        } else
                            // tempArray.add(arrayListOfOtherTrips.get(i));
                            tempArray.add(arrayListOftrips.get(i));
                        // tripAdapter.notifyDataSetChanged();
                        // isTripInOthersTrips = true;
                    }
                    lConfirmationNo = arrayListOftrips.get(i).ConfirmNumber;

                }// if
            }// for

            // if (!isTripInOthersTrips)
            // for (int i = 0; i < arrayListOfTreatedTrips.size(); i++) {
            // if (arrayListOfTreatedTrips.get(i).tripNumber.equalsIgnoreCase(tripID)) {
            // if (reason.equalsIgnoreCase("U")) {
            // if (arrayListOfTreatedTrips.get(i).manifestNum.length() > 2) {
            // tempArray1.add(arrayListOfTreatedTrips.get(i));
            // // arrayListOfOtherTrips.remove(arrayListOfOtherTrips.get(i));
            // tripAdapter.notifyDataSetChanged();
            // if (!arrayListOfTreatedTrips.isEmpty()) {
            // for (Trip tempTrip : arrayListOfTreatedTrips) {
            // if (tempTrip.manifestNum.equalsIgnoreCase(arrayListOfTreatedTrips.get(i).manifestNum))
            // break;
            // else
            // manifestNum.setText(Farsi.Convert(getResources().getString(R.string.NotAssigned)));
            // }
            // } else
            // manifestNum.setText(Farsi.Convert(getResources().getString(R.string.NotAssigned)));
            // } else
            // tempArray1.add(arrayListOfTreatedTrips.get(i));
            // // arrayListOfOtherTrips.remove(arrayListOfOtherTrips.get(i));
            // // isTripInOthersTrips = true;
            // }
            // lConfirmationNo = arrayListOfTreatedTrips.get(i).ConfirmNumber;
            //
            // }// if
            // }// for

            // ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            // for (Trip thisTrip : arrayListOfTreatedTrips) {
            // if (thisTrip.tripNumber.equalsIgnoreCase(tripID)) {
            // if (reason.equalsIgnoreCase("C"))
            // thisTrip.state = States.CANCELLED;
            // else if (reason.equalsIgnoreCase("U")) {
            // if (thisTrip.manifestNum.length() > 2) {
            // arrayListOfTreatedTrips.remove(thisTrip);
            // tripAdapter.notifyDataSetChanged();
            // if (!arrayListOfTreatedTrips.isEmpty()) {
            // for (Trip tempTrip : arrayListOfTreatedTrips) {
            // if (tempTrip.manifestNum.equalsIgnoreCase(thisTrip.manifestNum))
            // break;
            // else
            // manifestNum.setText(Farsi.Convert(getResources().getString(R.string.NotAssigned)));
            // }
            // } else
            // manifestNum.setText(Farsi.Convert(getResources().getString(R.string.NotAssigned)));
            // } else
            // arrayListOfTreatedTrips.remove(thisTrip);
            //
            // }
            // lConfirmationNo = thisTrip.ConfirmNumber;
            //
            // }// if
            // }// for
            // arrayListOfTreatedTrips.removeAll(tempArray1);
            arrayListOftrips.removeAll(tempArray);
            // tempArray.clear();
            if (lConfirmationNo != "") {

                // tripAdapter.notifyDataSetChanged();
                sortTripList();
                if (currentTrip != null && currentTrip.tripNumber.equalsIgnoreCase(tripID)) {
                    Fare = "0";
                    Extras = "0";
                    Tip = "0";
                    currentTrip = null;
                    setContentView(mainView);
                    currentView = mainView;

                }
                if (isTripInOthersTrips) {
                    AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                    builder.setIcon(android.R.drawable.ic_dialog_alert).setTitle(Farsi.Convert(getResources().getString(R.string.TripCleared))).setMessage(getDataFromResourse(msg)).setPositiveButton(
                            Farsi.Convert(getResources().getString(R.string.ok)),
                            new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    dialog.dismiss();
                                } // onClick
                            }).setCancelable(false);
                    AlertDialog alert = builder.create();
                    alert.show();

                    dialogFontSize(alert);
                }

                if (TTS)
                    if (isTripInOthersTrips) {
                        isTripInOthersTrips = true;
                        onRadioClick(getDataFromResourse(msg)); // Drop all pending entries in the playback queue.
                    } // else
                // manifestSound.start();
            }
            sortTripList();
        } catch (Exception ex) {
            LogException("[Exception in cleartrip]" + "[cleartrip]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }
    /*--------------------------------------------------------------createTripView------------------------------------------------------------------*/
    @SuppressWarnings("deprecation")
    @SuppressLint("NewApi")
    private ViewGroup createTripView() {
        SetApplicationLocal();
        if(tripStartedfromSoftMeter) {
            tripStartedfromSoftMeter = false;
            AVL_Service.sendMessageToSoftMeter(currentTrip.ClassOfServiceID, MsgType.MSG_QTD, AVL_Service.pref.getString("VehicleID", "Unknown"), AVL_Service.getDeviceID());
        }
        final RelativeLayout main = new RelativeLayout(this);
        RelativeLayout.LayoutParams Params = new RelativeLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
        main.setLayoutParams(Params);

        Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        Params.addRule(RelativeLayout.ALIGN_PARENT_TOP, RelativeLayout.TRUE);
        final LinearLayout emergencyButtonRow = new LinearLayout(this);
        emergencyButtonRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        emergencyButtonRow.setOrientation(LinearLayout.HORIZONTAL);
        emergencyButtonRow.setGravity(Gravity.CENTER_HORIZONTAL);
        // emergencyButtonRow.setPadding(5, 0, 5, 0);

        tripView_breakBtn = new Button(this);
        drawable = tripView_breakBtn.getBackground();
        drawable.setColorFilter(Color.parseColor(AVL_Service.SDBreakColor), Mode.SRC_IN);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            tripView_breakBtn.setBackground(drawable);
        else
            tripView_breakBtn.setBackgroundDrawable(drawable);
        tripView_breakBtn.setTextSize(miscFont - 1);
        tripView_breakBtn.setTextColor(Color.WHITE);
        if (break_status == 1) {
            // tripView_breakBtn.setTextColor(Color.BLACK);
            drawable = tripView_breakBtn.getBackground();
            drawable.setColorFilter(Color.parseColor(AVL_Service.SDResumeColor), Mode.SRC_IN);
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                tripView_breakBtn.setBackground(drawable);
            else
                tripView_breakBtn.setBackgroundDrawable(drawable);
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                tripView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                tripView_breakBtn.setText(resumeButtonLabel);
            } else {
                tripView_breakBtn.setText(Farsi.Convert(resumeButtonLabel));
                tripView_breakBtn.setTypeface(null, Typeface.BOLD);
            }

        } else if (break_status == 0) {
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                tripView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                tripView_breakBtn.setText(breakBtnLabel);
            } else {
                tripView_breakBtn.setText(Farsi.Convert(breakBtnLabel));
                tripView_breakBtn.setTypeface(null, Typeface.BOLD);
            }

            //
            drawable = tripView_breakBtn.getBackground();
            drawable.setColorFilter(Color.parseColor(AVL_Service.SDBreakColor), Mode.SRC_IN);
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                tripView_breakBtn.setBackground(drawable);
            else
                tripView_breakBtn.setBackgroundDrawable(drawable);
        }
        tripView_breakBtn.setOnClickListener(breakButtonLintener);
        // breakBtn.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));

        Button EmgBtn = new Button(this);
        drawable = EmgBtn.getBackground();
        drawable.setColorFilter(Color.RED, Mode.SRC_IN);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            EmgBtn.setBackground(drawable);
        else
            EmgBtn.setBackgroundDrawable(drawable);
        EmgBtn.setTypeface(null, Typeface.BOLD);
        EmgBtn.setTextSize(miscFont);
        EmgBtn.setTextColor(Color.WHITE);
        if (AVL_Service.pref.getString("Company", "Company Name").equalsIgnoreCase("My Taxi")) {
            EmgBtn.setText(Farsi.Convert(getResources().getString(R.string.Mytaxi)) + "\n" + AVL_Service.pref.getString("NTEPNumber", "12-XXP"));
        } else
            EmgBtn.setText(Farsi.Convert(AVL_Service.pref.getString("Company", "Company Name")) + "\n" + AVL_Service.pref.getString("NTEPNumber", "12-XXP")); // EmgBtn.setLayoutParams(new
        // LayoutParams(LayoutParams.MATCH_PARENT,
        // LayoutParams.MATCH_PARENT));
        EmgBtn.setOnClickListener(emergencyButtonLintener);

        Button pttBtn = new Button(this);
        drawable = pttBtn.getBackground();
        drawable.setColorFilter(Color.BLUE, Mode.SRC_IN);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            pttBtn.setBackground(drawable);
        else
            pttBtn.setBackgroundDrawable(drawable);
        pttBtn.setTypeface(null, Typeface.BOLD);
        pttBtn.setTextSize(miscFont - 1);
        pttBtn.setTextColor(Color.WHITE);
        pttBtn.setText("D2C");
        pttBtn.setOnClickListener(pttButtonLintener);

        emergencyButtonRow.setId(131);

        if (AVL_Service.sdEnableBreak && AVL_Service.sdEnablePPT && AVL_Service.sdEnableEmergency) {
            EmgBtn.setTextSize(miscFont - 1);
            for (int i = 0; i < AVL_Service.SDBreakEmergencyPPTPosition.length(); i++) {
                if (AVL_Service.SDBreakEmergencyPPTPosition.charAt(i) == 'b')
                    emergencyButtonRow.addView(tripView_breakBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.4f));
                else if (AVL_Service.SDBreakEmergencyPPTPosition.charAt(i) == 'e')
                    emergencyButtonRow.addView(EmgBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.2f));
                else if (AVL_Service.SDBreakEmergencyPPTPosition.charAt(i) == 'p')
                    emergencyButtonRow.addView(pttBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.4f));
            }
        } else {
            for (int i = 0; i < AVL_Service.SDBreakEmergencyPPTPosition.length(); i++) {
                if (AVL_Service.SDBreakEmergencyPPTPosition.charAt(i) == 'b') {
                    if (AVL_Service.sdEnableBreak)
                        emergencyButtonRow.addView(tripView_breakBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.33f));
                } else if (AVL_Service.SDBreakEmergencyPPTPosition.charAt(i) == 'e') {
                    if (AVL_Service.sdEnableEmergency)
                        emergencyButtonRow.addView(EmgBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.33f));
                } else if (AVL_Service.SDBreakEmergencyPPTPosition.charAt(i) == 'p') {
                    if (AVL_Service.sdEnablePPT)
                        emergencyButtonRow.addView(pttBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.33f));
                }
            }
        }

        Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        Params.addRule(RelativeLayout.BELOW, emergencyButtonRow.getId());
        tripNumber = new TextView(this);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            tripNumber.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            tripNumber.setText(getResources().getString(R.string.ConfirmationNo) + " 123456");
        } else
            tripNumber.setText(Farsi.Convert(getResources().getString(R.string.ConfirmationNo)) + " 123456");

        tripNumber.setTextSize(labelFont);
        tripNumber.setTextColor(Color.MAGENTA);
        tripNumber.setTypeface(Typeface.DEFAULT_BOLD);
        tripNumber.setGravity(Gravity.CENTER);
        tripNumber.setId(1);
        tripNumber.setLayoutParams(Params);

        Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        Params.addRule(RelativeLayout.BELOW, tripNumber.getId());
        serviceId = new TextView(this);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            serviceId.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            serviceId.setText(getResources().getString(R.string.Service_Id) + " 123456");
        } else
            serviceId.setText(getResources().getString(R.string.Service_Id) + " 123456");

        serviceId.setTextSize(labelFont);
        serviceId.setTextColor(Color.MAGENTA);
        serviceId.setTypeface(Typeface.DEFAULT_BOLD);
        serviceId.setGravity(Gravity.CENTER);
        serviceId.setId(2);
        serviceId.setLayoutParams(Params);

        Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        Params.addRule(RelativeLayout.BELOW, serviceId.getId());
        passenger = new TextView(this);
        passenger.setText(Farsi.Convert("IT Curves"));
        passenger.setTextSize(labelFont + 5);
        passenger.setTextColor(Color.YELLOW);
        passenger.setTypeface(Typeface.DEFAULT_BOLD);
        passenger.setGravity(Gravity.CENTER);
        passenger.setSingleLine();
        passenger.setId(3);
        passenger.setLayoutParams(Params);
		/*
		 * Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
		 * Params.addRule(RelativeLayout.BELOW, passenger.getId());
		 * FavoriteName = new TextView(this);
		 * FavoriteName.setText(Farsi.Convert("IT Curves"));
		 * FavoriteName.setTextSize(labelFont + 5);
		 * FavoriteName.setTextColor(Color.YELLOW);
		 * FavoriteName.setTypeface(Typeface.DEFAULT_BOLD);
		 * FavoriteName.setGravity(Gravity.CENTER);
		 * FavoriteName.setSingleLine();
		 * FavoriteName.setId(3);
		 * FavoriteName.setLayoutParams(Params);
		 */

        // Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        // Params.addRule(RelativeLayout.BELOW, FavoriteName.getId());
        Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        Params.addRule(RelativeLayout.BELOW, passenger.getId());
        phone = new TextView(this);
        phone.setText("");
        phone.setTextSize(labelFont + 5);
        phone.setTextColor(Color.CYAN);
        phone.setTypeface(Typeface.DEFAULT_BOLD);
        phone.setGravity(Gravity.CENTER);
        phone.setId(4);
        phone.setLayoutParams(Params);

        Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        Params.addRule(RelativeLayout.BELOW, phone.getId());
        puDateTime = new TextView(this);
        puDateTime.setText("");
        puDateTime.setTextSize(labelFont + 1);
        puDateTime.setTextColor(Color.GREEN);
        puDateTime.setTypeface(Typeface.DEFAULT_BOLD);
        puDateTime.setGravity(Gravity.CENTER);
        puDateTime.setId(141);
        puDateTime.setLayoutParams(Params);
        // if (!currentTrip.bShowPhoneNumberOnTrip)
        // phone.setVisibility(View.GONE);

        Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        Params.addRule(RelativeLayout.BELOW, puDateTime.getId());
        Params.setMargins(0, 20, 0, 0);
        pickupPOI = new TextView(this);
        pickupPOI.setText(Farsi.Convert("Point of interest (POI)"));
        pickupPOI.setTextSize(labelFont + 1);
        pickupPOI.setTextColor(Color.rgb(128, 0, 255));
        pickupPOI.setLayoutParams(Params);
        pickupPOI.setId(5);
        pickupPOI.setGravity(Gravity.CENTER);

        Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        Params.addRule(RelativeLayout.BELOW, pickupPOI.getId());
        pickupRouteButton = new Button(this);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            pickupRouteButton.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            pickupRouteButton.setText(getResources().getString(R.string.PickUpNavigate));
        } else
            pickupRouteButton.setText(Farsi.Convert(getResources().getString(R.string.PickUpNavigate)));

        pickupRouteButton.setTextSize(miscFont);
        pickupRouteButton.setLayoutParams(Params);
        pickupRouteButton.setId(6);
        drawable = pickupRouteButton.getBackground();
        drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            pickupRouteButton.setBackground(drawable);
        else
            pickupRouteButton.setBackgroundDrawable(drawable);
        pickupRouteButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                try {
                    if (getApplicationContext().getPackageName().contains("infonetmytaxi") || currentTrip.PUaddress.trim().equalsIgnoreCase(""))
                        startActivityForResult(new Intent(Intent.ACTION_VIEW, Uri.parse("google.navigation:q=" + currentTrip.PUlat + "," + currentTrip.PUlong)), 8000);
                    else
                        startActivityForResult(new Intent(Intent.ACTION_VIEW, Uri.parse("google.navigation:q=" + currentTrip.PUaddress)), 8000);

					/*
					 * String uri = "http://maps.google.com/maps?saddr=" + AVL_Service.pref.getString("LastLatitude", "0")
					 * + ","
					 * + AVL_Service.pref.getString("LastLongitude", "0")
					 * + "&daddr="
					 * + currentTrip.PUlat
					 * + ","
					 * + currentTrip.PUlong;
					 * Intent intent = new Intent(android.content.Intent.ACTION_VIEW, Uri.parse(uri));
					 * intent.setClassName("com.google.android.apps.maps", "com.google.android.maps.MapsActivity");
					 * startActivity(intent);
					 */

                } catch (ActivityNotFoundException e) {
                    handleException("[Exception on pickuproutebutton click]" + "[createTripView]" + "[" + e.getLocalizedMessage() + "]");
                    showToastMessage(R.string.Navigation_Not_Supported);
                    // Toast.makeText(getApplicationContext(), "Navigation Not Supported on this device", Toast.LENGTH_SHORT).show();
                }
            }
        });

        Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        Params.addRule(RelativeLayout.RIGHT_OF, pickupRouteButton.getId());
        Params.addRule(RelativeLayout.ALIGN_TOP, pickupRouteButton.getId());
        pickup = new TextView(this);
        pickup.setText("8210 Beechcraft Ave. Gaithersburg MD 20879\n");
        pickup.setTextSize(labelFont + 1);
        pickup.setLayoutParams(Params);
        pickup.setId(7);
        pickup.setGravity(Gravity.LEFT);

        Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        Params.addRule(RelativeLayout.BELOW, pickupRouteButton.getId());
        Params.setMargins(0, 20, 0, 0);
        pickUnitLabel = new TextView(this);
        pickUnitLabel.setTextSize(labelFont + 1);
        pickUnitLabel.setLayoutParams(Params);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            pickUnitLabel.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            pickUnitLabel.setText(getResources().getString(R.string.Unit));
        } else
            pickUnitLabel.setText(Farsi.Convert(getResources().getString(R.string.Unit)));

        pickUnitLabel.setTextColor(Color.WHITE);
        pickUnitLabel.setId(8);

        Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        Params.addRule(RelativeLayout.RIGHT_OF, pickUnitLabel.getId());
        Params.addRule(RelativeLayout.ALIGN_TOP, pickUnitLabel.getId());
        pickUnitNumber = new TextView(this);
        pickUnitNumber.setTextSize(labelFont + 1);
        pickUnitNumber.setLayoutParams(Params);
        pickUnitNumber.setTextColor(Color.rgb(250, 130, 2));
        pickUnitNumber.setSingleLine();
        pickUnitNumber.setId(9);

        Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        Params.addRule(RelativeLayout.BELOW, pickUnitLabel.getId());
        pickRemarks = new TextView(this);
        pickRemarks.setTextSize(miscFont - 1);
        pickRemarks.setLayoutParams(Params);
        pickRemarks.setTextColor(Color.YELLOW);
        pickRemarks.setSingleLine();
        pickRemarks.setId(10);

        Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        Params.addRule(RelativeLayout.BELOW, pickRemarks.getId());
        Params.setMargins(0, 20, 0, 0);
        dropoffPOI = new TextView(this);
        dropoffPOI.setText("Point of interest (POI)");
        dropoffPOI.setTextSize(labelFont + 1);
        dropoffPOI.setTextColor(Color.rgb(128, 0, 255));
        dropoffPOI.setLayoutParams(Params);
        dropoffPOI.setId(11);
        dropoffPOI.setGravity(Gravity.CENTER);

        Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        Params.addRule(RelativeLayout.BELOW, dropoffPOI.getId());
        dropoffRouteButton = new Button(this);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            dropoffRouteButton.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            dropoffRouteButton.setText(getResources().getString(R.string.DropOffNavigate));
        } else
            dropoffRouteButton.setText(Farsi.Convert(getResources().getString(R.string.DropOffNavigate)));

        dropoffRouteButton.setTextSize(miscFont);
        dropoffRouteButton.setLayoutParams(Params);
        dropoffRouteButton.setId(12);
        drawable = dropoffRouteButton.getBackground();
        drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            dropoffRouteButton.setBackground(drawable);
        else
            dropoffRouteButton.setBackgroundDrawable(drawable);

        dropoffRouteButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                try {

                    if (AVL_Service.SDDropNavigationWithMap && currentTrip.DOlat.equalsIgnoreCase("0") && currentTrip.DOlong.equalsIgnoreCase("0")) {
                        // List<Address> foundGeocode = null;
                        Intent intent = new Intent(TaxiPlexer.this, Maps.class);
                        startActivity(intent);
						/* find the addresses by using getFromLocationName() method with the given address */
						/*
						 * Geocoder geoCoder = new Geocoder(getBaseContext(), Locale.getDefault());
						 * foundGeocode = geoCoder.getFromLocationName(dropoff.getText().toString(), 1);
						 * double Location1 = foundGeocode.get(0).getLatitude(); // getting latitude
						 * double Location2 = foundGeocode.get(0).getLongitude();// getting longitude
						 * startActivityForResult(new Intent(Intent.ACTION_VIEW, Uri.parse("google.navigation:q=" + Location1 + "," + Location2)), 8000);
						 */
                    } else {
                        if (getApplicationContext().getPackageName().contains("infonetmytaxi") || currentTrip.DOaddress.trim().equalsIgnoreCase("")) {
                            if (!currentTrip.DOlat.equalsIgnoreCase("0") && !currentTrip.DOlong.equalsIgnoreCase("0"))
                                startActivityForResult(new Intent(Intent.ACTION_VIEW, Uri.parse("google.navigation:q=" + currentTrip.DOlat + "," + currentTrip.DOlong)), 8000);
                            else
                                startActivityForResult(new Intent(Intent.ACTION_VIEW, Uri.parse("google.navigation:q=" + dropoff.getText().toString())), 8000);
                        } else
                            startActivityForResult(new Intent(Intent.ACTION_VIEW, Uri.parse("google.navigation:q=" + dropoff.getText().toString())), 8000);

                    }

					/*
					 * String uri = "http://maps.google.com/maps?saddr=" + AVL_Service.pref.getString("LastLatitude", "0")
					 * + ","
					 * + AVL_Service.pref.getString("LastLongitude", "0")
					 * + "&daddr="
					 * + currentTrip.DOlat
					 * + ","
					 * + currentTrip.DOlong;
					 * Intent intent = new Intent(android.content.Intent.ACTION_VIEW, Uri.parse(uri));
					 * intent.setClassName("com.google.android.apps.maps", "com.google.android.maps.MapsActivity");
					 * startActivity(intent);
					 */

                } catch (ActivityNotFoundException e) {
                    handleException("[Exception on dropoffroutebutton click]" + "[createTripView]" + "[" + e.getLocalizedMessage() + "]");
                    // Toast.makeText(getApplicationContext(), "Navigation Not Supported on this device", Toast.LENGTH_SHORT).show();
                    showToastMessage(R.string.Navigation_Not_Supported);

                }/*
				 * catch (IOException e) {
				 * handleException(e.getStackTrace()[0].getFileName() + "| "
				 * + e.getLocalizedMessage()
				 * + " in "
				 * + e.getStackTrace()[0].getMethodName()
				 * + " Line "
				 * + e.getStackTrace()[0].getLineNumber());
				 * Toast.makeText(getApplicationContext(), "Navigation Not Supported on this device", Toast.LENGTH_SHORT).show();
				 * }
				 */

            }
        });

        Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        Params.addRule(RelativeLayout.RIGHT_OF, dropoffRouteButton.getId());
        Params.addRule(RelativeLayout.ALIGN_TOP, dropoffRouteButton.getId());
        dropoff = new EditText(this);
        dropoff.setBackgroundColor(Color.BLACK);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            dropoff.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            dropoff.setHint(getResources().getString(R.string.AddressforNavigation));
        } else
            dropoff.setHint(Farsi.Convert(getResources().getString(R.string.AddressforNavigation)));

        dropoff.setHintTextColor(Color.rgb(119, 60, 0));
        dropoff.setTextColor(Color.WHITE);
        dropoff.setGravity(Gravity.LEFT);
        dropoff.setTextSize(labelFont + 1);
        dropoff.setLayoutParams(Params);
        dropoff.setId(13);

        Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        Params.addRule(RelativeLayout.BELOW, dropoff.getId());
        bottomRow8 = new LinearLayout(this);
        bottomRow8.setLayoutParams(Params);
        bottomRow8.setOrientation(LinearLayout.HORIZONTAL);
        bottomRow8.setId(14);
        dropUnitLabel = new TextView(this);
        dropUnitLabel.setTextSize(labelFont + 1);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            dropUnitLabel.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            dropUnitLabel.setText(getResources().getString(R.string.Unit));
        } else
            dropUnitLabel.setText(Farsi.Convert(getResources().getString(R.string.Unit)));

        dropUnitLabel.setTextColor(Color.WHITE);

        dropUnitNumber = new TextView(this);
        dropUnitNumber.setTextSize(labelFont + 1);

        dropUnitNumber.setTextColor(Color.rgb(250, 130, 2));
        dropUnitNumber.setSingleLine();

        bottomRow8.addView(dropUnitLabel);
        bottomRow8.addView(dropUnitNumber);

        Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        Params.addRule(RelativeLayout.BELOW, bottomRow8.getId());
        dropRemarks = new TextView(this);
        dropRemarks.setTextSize(miscFont - 1);
        dropRemarks.setLayoutParams(Params);
        dropRemarks.setTextColor(Color.YELLOW);
        dropRemarks.setSingleLine();
        dropRemarks.setId(16);

        Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        Params.addRule(RelativeLayout.BELOW, dropRemarks.getId());
        Params.setMargins(0, 20, 0, 0);
        extraInfo = new TextView(this);
        extraInfo.setText("Other info about Passenger");
        extraInfo.setTextSize(labelFont + 1);
        extraInfo.setLayoutParams(Params);
        extraInfo.setTextColor(Color.YELLOW);
        extraInfo.setId(17);

        Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        Params.addRule(RelativeLayout.BELOW, extraInfo.getId());
        bottomRow9 = new LinearLayout(this);
        bottomRow9.setLayoutParams(Params);
        bottomRow9.setOrientation(LinearLayout.HORIZONTAL);
        bottomRow9.setId(18);
        fundingLabel = new TextView(this);
        fundingLabel.setTextSize(labelFont + 1);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            fundingLabel.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            fundingLabel.setText(getResources().getString(R.string.FundingSource));
        } else
            fundingLabel.setText(Farsi.Convert(getResources().getString(R.string.FundingSource)));

        fundingLabel.setTextColor(Color.WHITE);

        fundingSource = new TextView(this);
        fundingSource.setTextSize(labelFont + 1);

        fundingSource.setTextColor(Color.rgb(250, 130, 2));
        fundingSource.setSingleLine();

        bottomRow9.addView(fundingLabel);
        bottomRow9.addView(fundingSource);

        Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        Params.addRule(RelativeLayout.BELOW, bottomRow9.getId());
        bottomRow2 = new LinearLayout(this);
        bottomRow2.setLayoutParams(Params);
        bottomRow2.setOrientation(LinearLayout.HORIZONTAL);
        bottomRow2.setId(789);

        // Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        // Params.addRule(RelativeLayout.BELOW, fundingLabel.getId());
        paytypeLabel = new TextView(this);
        paytypeLabel.setTextSize(labelFont + 1);
        // paytypeLabel.setLayoutParams(Params);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            paytypeLabel.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            paytypeLabel.setText(getResources().getString(R.string.PaymentType));
        } else
            paytypeLabel.setText(Farsi.Convert(getResources().getString(R.string.PaymentType)));
        paytypeLabel.setTextColor(Color.WHITE);
        // paytypeLabel.setId(123);

        // Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        // Params.addRule(RelativeLayout.RIGHT_OF, paytypeLabel.getId());
        // Params.addRule(RelativeLayout.BELOW, fundingLabel.getId());
        // Params.addRule(RelativeLayout.ALIGN_TOP, paytypeLabel.getId());
        paymentType = new TextView(this);
        paymentType.setTextSize(labelFont + 1);
        // paymentType.setLayoutParams(Params);
        paymentType.setTextColor(Color.CYAN);
        // paymentType.setId(1234);

        bottomRow2.addView(paytypeLabel);
        bottomRow2.addView(paymentType);

        Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        Params.addRule(RelativeLayout.BELOW, bottomRow2.getId());
        bottomRow1 = new LinearLayout(this);
        bottomRow1.setLayoutParams(Params);
        bottomRow1.setOrientation(LinearLayout.HORIZONTAL);
        bottomRow1.setId(98765);
        copayLbl = new TextView(this);
        copayLbl.setTextSize(labelFont + 1);
        // copayLbl.setLayoutParams(Params);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            copayLbl.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            copayLbl.setText(getResources().getString(R.string.Copay));
        } else
            copayLbl.setText(Farsi.Convert(getResources().getString(R.string.Copay)));

        copayLbl.setTextColor(Color.WHITE);
        // copayLbl.setId(12345);

        // Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        // Params.addRule(RelativeLayout.RIGHT_OF, copayLbl.getId());
        // Params.addRule(RelativeLayout.BELOW, paytypeLabel.getId());
        // Params.addRule(RelativeLayout.ALIGN_TOP, copayLabel.getId());
        copayValue = new TextView(this);
        copayValue.setTextSize(labelFont + 1);
        // copayValue.setLayoutParams(Params);
        copayValue.setTextColor(Color.RED);
        copayValue.setText("");
        // copayValue.setId(123456);

        bottomRow1.addView(copayLbl);
        bottomRow1.addView(copayValue);

        Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        Params.addRule(RelativeLayout.BELOW, bottomRow1.getId());
        bottomRow3 = new LinearLayout(this);
        bottomRow3.setLayoutParams(Params);
        bottomRow3.setOrientation(LinearLayout.HORIZONTAL);
        bottomRow3.setId(1234567);
        tfareLabel = new TextView(this);
        tfareLabel.setTextSize(labelFont + 1);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            tfareLabel.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            tfareLabel.setText(getResources().getString(R.string.fare));
        } else
            tfareLabel.setText(Farsi.Convert(getResources().getString(R.string.fare)));

        tfareLabel.setTextColor(Color.WHITE);

        tfareValue = new TextView(this);
        tfareValue.setTextSize(labelFont + 1);
        tfareValue.setTextColor(Color.RED);
        tfareValue.setText("");

        bottomRow3.addView(tfareLabel);
        bottomRow3.addView(tfareValue);

        Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        Params.addRule(RelativeLayout.BELOW, bottomRow3.getId());
        bottomRow4 = new LinearLayout(this);
        bottomRow4.setLayoutParams(Params);
        bottomRow4.setOrientation(LinearLayout.HORIZONTAL);
        bottomRow4.setId(123456789);
        ttipLabel = new TextView(this);
        ttipLabel.setTextSize(labelFont + 1);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            ttipLabel.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            ttipLabel.setText(getResources().getString(R.string.tip));
        } else
            ttipLabel.setText(Farsi.Convert(getResources().getString(R.string.tip)));

        ttipLabel.setTextColor(Color.WHITE);

        ttipValue = new TextView(this);
        ttipValue.setTextSize(labelFont + 1);

        ttipValue.setTextColor(Color.RED);
        ttipValue.setText("");

        bottomRow4.addView(ttipLabel);
        bottomRow4.addView(ttipValue);

        Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        Params.addRule(RelativeLayout.BELOW, bottomRow4.getId());
        bottomRow5 = new LinearLayout(this);
        bottomRow5.setLayoutParams(Params);
        bottomRow5.setOrientation(LinearLayout.HORIZONTAL);
        bottomRow5.setId(2345);
        textraLabel = new TextView(this);
        textraLabel.setTextSize(labelFont + 1);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            textraLabel.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            textraLabel.setText(getResources().getString(R.string.extra));
        } else
            textraLabel.setText(Farsi.Convert(getResources().getString(R.string.extra)));

        textraLabel.setTextColor(Color.WHITE);

        textraValue = new TextView(this);
        textraValue.setTextSize(labelFont + 1);

        textraValue.setTextColor(Color.RED);
        textraValue.setText("");

        bottomRow5.addView(textraLabel);
        bottomRow5.addView(textraValue);

        Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        Params.addRule(RelativeLayout.BELOW, bottomRow5.getId());
        bottomRow6 = new LinearLayout(this);
        bottomRow6.setLayoutParams(Params);
        bottomRow6.setOrientation(LinearLayout.HORIZONTAL);
        bottomRow6.setId(234567);
        tCCLabel = new TextView(this);
        tCCLabel.setTextSize(labelFont + 1);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            tCCLabel.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            tCCLabel.setText(getResources().getString(R.string.credit));
        } else
            tCCLabel.setText(Farsi.Convert(getResources().getString(R.string.credit)));

        tCCLabel.setTextColor(Color.WHITE);

        tCCValue = new TextView(this);
        tCCValue.setTextSize(labelFont + 1);

        tCCValue.setTextColor(Color.RED);
        tCCValue.setText("");

        bottomRow6.addView(tCCLabel);
        bottomRow6.addView(tCCValue);

        Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        Params.addRule(RelativeLayout.BELOW, bottomRow6.getId());
        bottomRow7 = new LinearLayout(this);
        bottomRow7.setLayoutParams(Params);
        bottomRow7.setOrientation(LinearLayout.HORIZONTAL);
        bottomRow7.setId(23456789);
        tAuthLabel = new TextView(this);
        tAuthLabel.setTextSize(labelFont + 1);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            tAuthLabel.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            tAuthLabel.setText(getResources().getString(R.string.auth));
        } else
            tAuthLabel.setText(Farsi.Convert(getResources().getString(R.string.auth)));

        tAuthLabel.setTextColor(Color.WHITE);

        tAuthValue = new TextView(this);
        tAuthValue.setTextSize(labelFont + 1);

        tAuthValue.setTextColor(Color.RED);
        tAuthValue.setText("");

        bottomRow7.addView(tAuthLabel);
        bottomRow7.addView(tAuthValue);

        Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        Params.addRule(RelativeLayout.BELOW, bottomRow7.getId());
        bottomRow10 = new LinearLayout(this);
        bottomRow10.setLayoutParams(Params);
        bottomRow10.setOrientation(LinearLayout.HORIZONTAL);
        bottomRow10.setId(98986540);
        odoStartLabel = new TextView(this);
        odoStartLabel.setTextSize(labelFont + 1);


            odoStartLabel.setText(Farsi.Convert(getResources().getString(R.string.Odo_Start_Value)));

        odoStartLabel.setTextColor(Color.WHITE);

        odoStartValue = new TextView(this);
        odoStartValue.setTextSize(labelFont + 1);

        odoStartValue.setTextColor(Color.RED);
        odoStartValue.setText("");

        bottomRow10.addView(odoStartLabel);
        bottomRow10.addView(odoStartValue);

        Params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        Params.addRule(RelativeLayout.BELOW, bottomRow10.getId());
        bottomRow11 = new LinearLayout(this);
        bottomRow11.setLayoutParams(Params);
        bottomRow11.setOrientation(LinearLayout.HORIZONTAL);
        bottomRow11.setId(98986541);
        odoEndLabel = new TextView(this);
        odoEndLabel.setTextSize(labelFont + 1);


            odoEndLabel.setText(Farsi.Convert(getResources().getString(R.string.Odo_End_Value)));

        odoEndLabel.setTextColor(Color.WHITE);

        odoEndValue = new TextView(this);
        odoEndValue.setTextSize(labelFont + 1);

        odoEndValue.setTextColor(Color.RED);
        odoEndValue.setText("");

        bottomRow11.addView(odoEndLabel);
        bottomRow11.addView(odoEndValue);
        // Params = new RelativeLayout.LayoutParams(screenWidth / 4, RelativeLayout.LayoutParams.WRAP_CONTENT);
        // Params.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM, RelativeLayout.TRUE);
        PickedButton = new Button(this);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            PickedButton.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            PickedButton.setText(getResources().getString(R.string.PickUp));
        } else {
            PickedButton.setText(Farsi.Convert(getResources().getString(R.string.PickUp)));
            PickedButton.setTypeface(null, Typeface.BOLD);
        }

        PickedButton.setTextSize(miscFont + 1);
        PickedButton.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.WRAP_CONTENT, 1));
        PickedButton.setId(34);

        if (currentTrip.state.equalsIgnoreCase(States.PICKEDUP) || currentTrip.state.equalsIgnoreCase(States.ATLOCATION)
                || (currentTrip.state.equalsIgnoreCase(States.DROPPED) && currentTrip.total > 0 && (AVL_Service.pref.getBoolean("BlueBambooDevice", false) || (AVL_Service.pref.getBoolean(
                "BluetoothMeter",
                false)))))
            PickedButton.setEnabled(true);
        else if (currentTrip.state.equalsIgnoreCase(States.IRTPU)) {
            ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
            scheduler.schedule(new Runnable() {

                @Override
                public void run() {

                    runOnUiThread(new Runnable() {
                        public void run() {
                            PickedButton.setEnabled(true);
                        }
                    });

                }
            }, AVL_Service.pref.getInt("BtnDisableTime", 10), TimeUnit.SECONDS);
        } else
            PickedButton.setEnabled(false);
        PickedButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {

                if (!AVL_Service.ShowTogglePickUpDropOffBTN) {
                    PickUp();

                } else {// can perform Picked up in CAllout state as we do not have automatic mechnaism to respond Callout
                    if (currentTrip.state.equalsIgnoreCase(States.IRTPU) || currentTrip.state.equalsIgnoreCase(States.ATLOCATION)
                            || currentTrip.state.equalsIgnoreCase(States.CALLOUT)
                            || currentTrip.state.equalsIgnoreCase(States.DROPPED)) {
                        PickUp();

                    } else if (currentTrip.state.equalsIgnoreCase(States.PICKEDUP)) {
                        droppedOff("SoftButton");
                    }
                }
            }
        });
        if (currentTrip.state.equalsIgnoreCase(States.PICKEDUP) && AVL_Service.ShowTogglePickUpDropOffBTN)
            PickedButton.setText(Farsi.Convert(getResources().getString(R.string.Payment)));

        // Params = new RelativeLayout.LayoutParams(screenWidth / 4, RelativeLayout.LayoutParams.WRAP_CONTENT);
        // Params.addRule(RelativeLayout.RIGHT_OF, PickedButton.getId());
        // Params.addRule(RelativeLayout.ALIGN_TOP, PickedButton.getId());
        DroppedButton = new Button(this);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            DroppedButton.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            DroppedButton.setText(getResources().getString(R.string.Payment));
        } else {
            DroppedButton.setText(Farsi.Convert(getResources().getString(R.string.Payment)));
            DroppedButton.setTypeface(null, Typeface.BOLD);
        }

        DroppedButton.setTextSize(miscFont + 1);
        DroppedButton.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.WRAP_CONTENT, 1));
        DroppedButton.setId(35);

        if (currentTrip.state.equalsIgnoreCase(States.PICKEDUP)) {
            ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
            scheduler.schedule(new Runnable() {

                @Override
                public void run() {

                    runOnUiThread(new Runnable() {
                        public void run() {
                            DroppedButton.setEnabled(true);
                        }
                    });

                }
            }, AVL_Service.pref.getInt("BtnDisableTime", 10), TimeUnit.SECONDS);
        } else
            DroppedButton.setEnabled(false);
        DroppedButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                if (currentTrip.clientName.trim().equalsIgnoreCase("flagger")) {
                    droppedOff("SoftButton");
                } else {
                    double distance = DistanceCalculator.CalculateDistance(Double.valueOf(AVL_Service.pref.getString("LastLatitude", "0")), Double.valueOf(AVL_Service.pref.getString(
                            "LastLongitude",
                            "0")), Double.valueOf(currentTrip.DOlat), Double.valueOf(currentTrip.DOlong));
                    if (distance < AVL_Service.pref.getLong(Constants.Allowable_Stand_Distance, 900)) {
                        droppedOff("SoftButton");
                    } else {
                        if (AVL_Service.NotAllowActionIfAway.charAt(5) == '0' || AVL_Service.locManager.isProviderEnabled(LocationManager.GPS_PROVIDER) == false) {
                            if (AVL_Service.MessageTypeIfActionNotAllowed.charAt(5) == '1') {
                                AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                                builder
                                        .setIcon(android.R.drawable.ic_dialog_alert)
                                        .setTitle(Farsi.Convert(getResources().getString(R.string.DropOffConfirmation)))
                                        .setMessage(
                                                (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("mile")) ? String.format(Farsi.Convert(getResources().getString(R.string.MilesAwayFromDropOff)), dFormat
                                                        .format(distance / 1609)) : String.format(Farsi.Convert(getResources().getString(R.string.kmsAwayFromDropOff)), dFormat.format(distance / 1000)))
                                        .setPositiveButton(Farsi.Convert(getResources().getString(R.string.Yes)), new DialogInterface.OnClickListener() {
                                            @Override
                                            public void onClick(DialogInterface dialog, int which) {
                                                droppedOff("SoftButton");

                                            }
                                        })
                                        .setNegativeButton(Farsi.Convert(getResources().getString(R.string.No)), null);
                                AlertDialog alert = builder.create();
                                alert.show();

                                dialogFontSize(alert);

                            } else {
                                Toast.makeText(
                                        getApplicationContext(),
                                        (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("mile")) ? String.format(Farsi.Convert(getResources().getString(R.string.UnableToPerformDropOffMiles)), dFormat
                                                .format(distance / 1609)) : String.format(Farsi.Convert(getResources().getString(R.string.UnableToPerformDropOffKms)), dFormat.format(distance / 1000)),
                                        Toast.LENGTH_SHORT).show();
                                droppedOff("SoftButton");
                            }
                        } else {
                            if (AVL_Service.MessageTypeIfActionNotAllowed.charAt(5) == '1') {
                                PickupUPDistanceDialog = new AlertDialog.Builder(TaxiPlexer.this)
                                        .setIcon(android.R.drawable.ic_dialog_alert)
                                        .setTitle(Farsi.Convert(getResources().getString(R.string.DropOffMessage)))
                                        .setMessage(
                                                (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("mile")) ? String.format(Farsi.Convert(getResources().getString(R.string.UnableToPerformDropOffMiles)), dFormat
                                                        .format(distance / 1609)) : String.format(Farsi.Convert(getResources().getString(R.string.UnableToPerformDropOffKms)), dFormat.format(distance / 1000)))
                                        .setNegativeButton(Farsi.Convert(getResources().getString(R.string.ok)), null)
                                        .create();

                                PickupUPDistanceDialog.show();

                                dialogFontSize(PickupUPDistanceDialog);
                            } else {
                                Toast.makeText(
                                        getApplicationContext(),
                                        (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("mile")) ? String.format(Farsi.Convert(getResources().getString(R.string.UnableToPerformDropOffMiles)), dFormat
                                                .format(distance / 1609)) : String.format(Farsi.Convert(getResources().getString(R.string.UnableToPerformDropOffKms)), dFormat.format(distance / 1000)),
                                        Toast.LENGTH_SHORT).show();
                            }
                        }
                    }
                }
            }
        });

        // Params = new RelativeLayout.LayoutParams(screenWidth / 4, RelativeLayout.LayoutParams.WRAP_CONTENT);
        // Params.addRule(RelativeLayout.RIGHT_OF, DroppedButton.getId());
        // Params.addRule(RelativeLayout.ALIGN_TOP, DroppedButton.getId());
        callOutButton = new Button(this);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            callOutButton.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            callOutButton.setText(getResources().getString(R.string.CallOut));
        } else {
            callOutButton.setText(Farsi.Convert(getResources().getString(R.string.CallOut)));
            callOutButton.setTypeface(null, Typeface.BOLD);
        }

        callOutButton.setTextSize(miscFont + 1);
        callOutButton.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.WRAP_CONTENT, 1));
        callOutButton.setId(36);

        drawable = callOutButton.getBackground();
        drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            callOutButton.setBackground(drawable);
        else
            callOutButton.setBackgroundDrawable(drawable);

        callOutButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {

                double distance = DistanceCalculator.CalculateDistance(Double.valueOf(AVL_Service.pref.getString("LastLatitude", "0")), Double
                        .valueOf(AVL_Service.pref.getString("LastLongitude", "0")), Double.valueOf(currentTrip.PUlat), Double.valueOf(currentTrip.PUlong));
                if (distance < Double.valueOf(AVL_Service.allowableCallOutDistance) || Double.valueOf(AVL_Service.allowableCallOutDistance) == 0) {
                    if (currentTrip.state.equalsIgnoreCase(States.IRTPU) || currentTrip.state.equalsIgnoreCase(States.ATLOCATION)) {
                        if (AVL_Service.SDEnableCentralizedAsteriskService) {
                            Callout_Response resp = new Callout_Response();
                            resp.execute();
                        } else
                            sendTripResponse(States.CALLOUT);

                        String StateString = "";
                        if (AVL_Service.pref.getString("AppLanguage", "en").equalsIgnoreCase("en"))
                            StateString = AVL_Service.callOutRequestPrompt;
                        else {
                            if (AVL_Service.callOutRequestPrompt_ar.trim().length() == 0)
                                StateString = AVL_Service.callOutRequestPrompt;
                            else
                                StateString = AVL_Service.callOutRequestPrompt_ar;
                        }
                        Toast.makeText(getApplicationContext(), Farsi.Convert(StateString), Toast.LENGTH_LONG).show();

                    } else {
                        String StateString = "";
                        if (AVL_Service.pref.getString("AppLanguage", "en").equalsIgnoreCase("en"))
                            StateString = getResources().getString(R.string.CannotPerformCallOutinstate) + currentTrip.state;
                        else
                            StateString = getDataFromResourse(currentTrip.state) + getResources().getString(R.string.CannotPerformCallOutinstate);
                        // Toast.makeText(getApplicationContext(), Farsi.Convert(StateString), Toast.LENGTH_LONG).show();
                        showToastMessageFromString(StateString);
                    }
                } else {
                    if (currentTrip.state.equalsIgnoreCase(States.IRTPU) || currentTrip.state.equalsIgnoreCase(States.ATLOCATION)) {
                        // Toast.makeText(
                        // getApplicationContext(),
                        // "Cannot Perform CallOut at distance greater than " + String.valueOf(AVL_Service.pref.getLong(Constants.Allowable_Stand_Distance, 900)) + "m",
                        // Toast.LENGTH_LONG).show();
                        if (AVL_Service.NotAllowActionIfAway.charAt(2) == '0' || AVL_Service.locManager.isProviderEnabled(LocationManager.GPS_PROVIDER) == false) {
                            if (AVL_Service.MessageTypeIfActionNotAllowed.charAt(2) == '1') {
                                AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                                builder
                                        .setIcon(android.R.drawable.ic_dialog_alert)
                                        .setTitle(Farsi.Convert(getResources().getString(R.string.CallOutConfirmation)))
                                        .setMessage(
                                                (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("mile")) ? String.format(Farsi.Convert(getResources().getString(R.string.MilesAwayFromCallOut)), dFormat
                                                        .format(distance / 1609)) : String.format(Farsi.Convert(getResources().getString(R.string.KmsAwayFromCallOut)), dFormat.format(distance / 1000)))
                                        .setPositiveButton(Farsi.Convert(getResources().getString(R.string.Yes)), new DialogInterface.OnClickListener() {
                                            @Override
                                            public void onClick(DialogInterface dialog, int which) {

                                                if (AVL_Service.SDEnableCentralizedAsteriskService) {
                                                    Callout_Response resp = new Callout_Response();
                                                    resp.execute();
                                                } else
                                                    sendTripResponse(States.CALLOUT);

                                                String StateString = "";
                                                if (AVL_Service.pref.getString("AppLanguage", "en").equalsIgnoreCase("en"))
                                                    StateString = AVL_Service.callOutRequestPrompt;
                                                else {
                                                    if (AVL_Service.callOutRequestPrompt_ar.trim().length() == 0)
                                                        StateString = AVL_Service.callOutRequestPrompt;
                                                    else
                                                        StateString = AVL_Service.callOutRequestPrompt_ar;
                                                }
                                                Toast.makeText(getApplicationContext(), Farsi.Convert(StateString), Toast.LENGTH_LONG).show();

                                            } // onClick

                                        })
                                        .setNegativeButton(Farsi.Convert(getResources().getString(R.string.No)), null);
                                AlertDialog alert = builder.create();
                                alert.show();

                                dialogFontSize(alert);
                            } else {
                                Toast.makeText(
                                        getApplicationContext(),
                                        (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("mile")) ? String.format(Farsi.Convert(getResources().getString(R.string.UnableToPerformCallOutMiles)), dFormat
                                                .format(distance / 1609)) : String.format(Farsi.Convert(getResources().getString(R.string.UnableToPerformCallOutKms)), dFormat.format(distance / 1000)),
                                        Toast.LENGTH_SHORT).show();
                                if (AVL_Service.SDEnableCentralizedAsteriskService) {
                                    Callout_Response resp = new Callout_Response();
                                    resp.execute();
                                } else
                                    sendTripResponse(States.CALLOUT);

                                String StateString = "";
                                if (AVL_Service.pref.getString("AppLanguage", "en").equalsIgnoreCase("en"))
                                    StateString = AVL_Service.callOutRequestPrompt;
                                else {
                                    if (AVL_Service.callOutRequestPrompt_ar.trim().length() == 0)
                                        StateString = AVL_Service.callOutRequestPrompt;
                                    else
                                        StateString = AVL_Service.callOutRequestPrompt_ar;
                                }
                                Toast.makeText(getApplicationContext(), Farsi.Convert(StateString), Toast.LENGTH_LONG).show();
                            }
                        } else {
                            if (AVL_Service.MessageTypeIfActionNotAllowed.charAt(2) == '1') {
                                AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                                builder
                                        .setIcon(android.R.drawable.ic_dialog_alert)
                                        .setTitle(Farsi.Convert(getResources().getString(R.string.CallOutMessage)))
                                        .setMessage(
                                                (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("mile")) ? String.format(Farsi.Convert(getResources().getString(R.string.UnableToPerformCallOutMiles)), dFormat
                                                        .format(distance / 1609)) : String.format(Farsi.Convert(getResources().getString(R.string.UnableToPerformCallOutKms)), dFormat.format(distance / 1000)))
                                        .setNegativeButton(Farsi.Convert(getResources().getString(R.string.ok)), null);
                                AlertDialog alert = builder.create();
                                alert.show();

                                dialogFontSize(alert);
                            } else {
                                Toast.makeText(
                                        getApplicationContext(),
                                        (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("mile")) ? String.format(Farsi.Convert(getResources().getString(R.string.UnableToPerformCallOutMiles)), dFormat
                                                .format(distance / 1609)) : String.format(Farsi.Convert(getResources().getString(R.string.UnableToPerformCallOutKms)), dFormat.format(distance / 1000)),
                                        Toast.LENGTH_SHORT).show();
                            }
                        }
                    }

                    else {
                        String StateString = "";
                        if (AVL_Service.pref.getString("AppLanguage", "en").equalsIgnoreCase("en"))
                            StateString = getResources().getString(R.string.CannotPerformCallOutinstate) + currentTrip.state;
                        else
                            StateString = getDataFromResourse(currentTrip.state) + getResources().getString(R.string.CannotPerformCallOutinstate);
                        // Toast.makeText(getApplicationContext(), Farsi.Convert(StateString), Toast.LENGTH_LONG).show();
                        showToastMessageFromString(StateString);
                    }
                }

            }
        });

        // Params = new RelativeLayout.LayoutParams(screenWidth / 4, RelativeLayout.LayoutParams.WRAP_CONTENT);
        // Params.addRule(RelativeLayout.RIGHT_OF, callOutButton.getId());
        // Params.addRule(RelativeLayout.ALIGN_TOP, callOutButton.getId());
        NoShowButton = new Button(this);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            NoShowButton.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            NoShowButton.setText(getResources().getString(R.string.NoShowReq));
        } else {
            NoShowButton.setText(Farsi.Convert(getResources().getString(R.string.NoShowReq)));
            NoShowButton.setTypeface(null, Typeface.BOLD);
        }

        NoShowButton.setTextSize(miscFont + 1);
        NoShowButton.setSingleLine(true);
        NoShowButton.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.WRAP_CONTENT, 1));
        NoShowButton.setId(37);

        NoShowButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                if (currentTrip.state.equalsIgnoreCase(States.IRTPU) || currentTrip.state.equalsIgnoreCase(States.CALLOUT) || currentTrip.state.equalsIgnoreCase(States.ATLOCATION)) {
                    double distance = (float) DistanceCalculator.CalculateDistance(Double.valueOf(AVL_Service.pref.getString("LastLatitude", "0")), Double.valueOf(AVL_Service.pref.getString(
                            "LastLongitude",
                            "0")), Double.valueOf(currentTrip.PUlat), Double.valueOf(currentTrip.PUlong));
                    if (distance < AVL_Service.pref.getLong(Constants.Allowable_Stand_Distance, 900)) {
                        AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                        builder.setIcon(android.R.drawable.ic_dialog_alert).setTitle(Farsi.Convert(getResources().getString(R.string.NoShowConfirmation))).setMessage(
                                Farsi.Convert(getResources().getString(R.string.MarkAsNoShow))).setPositiveButton(
                                Farsi.Convert(getResources().getString(R.string.Yes)),
                                new DialogInterface.OnClickListener() {
                                    @Override
                                    public void onClick(DialogInterface dialog, int which) {

                                        sendTripResponse(States.NOSHOWREQ);
                                        AlertDialog.Builder builder1 = new AlertDialog.Builder(TaxiPlexer.this);
                                        builder1.setIcon(android.R.drawable.ic_dialog_alert).setTitle(Farsi.Convert(getResources().getString(R.string.NoShowConfirmation))).setMessage(
                                                Farsi.Convert(getResources().getString(R.string.NOSHOWForApproval))).setPositiveButton(
                                                Farsi.Convert(getResources().getString(R.string.ok)),
                                                new DialogInterface.OnClickListener() {
                                                    @Override
                                                    public void onClick(DialogInterface dialog, int which) {

                                                        setContentView(mainView);
                                                        currentView = mainView;
                                                        currentTrip = null;
                                                        // tripAdapter.notifyDataSetChanged();
                                                        try {
                                                            sortTripList();
                                                        } catch (Exception e) {

                                                            e.printStackTrace();
                                                        }
                                                    } // onClick

                                                });
                                        AlertDialog alert = builder1.create();
                                        alert.show();

                                        dialogFontSize(alert);

                                    } // onClick

                                }).setNegativeButton(Farsi.Convert(getResources().getString(R.string.No)), null);
                        AlertDialog alert = builder.create();
                        alert.show();

                        dialogFontSize(alert);
                    } else {
                        if (AVL_Service.NotAllowActionIfAway.charAt(1) == '0' || AVL_Service.locManager.isProviderEnabled(LocationManager.GPS_PROVIDER) == false) {
                            if (AVL_Service.MessageTypeIfActionNotAllowed.charAt(1) == '1') {
                                AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                                builder
                                        .setIcon(android.R.drawable.ic_dialog_alert)
                                        .setTitle(Farsi.Convert(getResources().getString(R.string.NoShowConfirmation)))
                                        .setMessage(
                                                (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("mile")) ? String.format(Farsi.Convert(getResources().getString(R.string.MilesAwayFromNoShow)), dFormat
                                                        .format(distance / 1609)) : String.format(Farsi.Convert(getResources().getString(R.string.KmsAwayFromNoShow)), dFormat.format(distance / 1000)))
                                        .setPositiveButton(Farsi.Convert(getResources().getString(R.string.Yes)), new DialogInterface.OnClickListener() {
                                            @Override
                                            public void onClick(DialogInterface dialog, int which) {

                                                sendTripResponse(States.NOSHOWREQ);

                                                setContentView(mainView);
                                                currentView = mainView;
                                                // tripAdapter.notifyDataSetChanged();
                                                try {
                                                    sortTripList();
                                                } catch (Exception e) {
                                                    // TODO Auto-generated catch block
                                                    e.printStackTrace();
                                                }

                                            } // onClick

                                        })
                                        .setNegativeButton(Farsi.Convert(getResources().getString(R.string.No)), null);
                                AlertDialog alert = builder.create();
                                alert.show();

                                dialogFontSize(alert);

                            } else {
                                Toast.makeText(
                                        getApplicationContext(),
                                        (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("mile")) ? String.format(Farsi.Convert(getResources().getString(R.string.UnableToPerformNoShowMiles)), dFormat
                                                .format(distance / 1609)) : String.format(Farsi.Convert(getResources().getString(R.string.UnableToPerformNoShowKms)), dFormat.format(distance / 1000)),
                                        Toast.LENGTH_SHORT).show();
                                sendTripResponse(States.NOSHOWREQ);

                                setContentView(mainView);
                                currentView = mainView;
                                // tripAdapter.notifyDataSetChanged();
                                try {
                                    sortTripList();
                                } catch (Exception e) {
                                    // TODO Auto-generated catch block
                                    e.printStackTrace();
                                }

                            }
                        } else {
                            if (AVL_Service.MessageTypeIfActionNotAllowed.charAt(1) == '1') {
                                AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                                builder
                                        .setIcon(android.R.drawable.ic_dialog_alert)
                                        .setTitle(Farsi.Convert(getResources().getString(R.string.NoShowMessage)))
                                        .setMessage(
                                                (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("mile")) ? String.format(Farsi.Convert(getResources().getString(R.string.UnableToPerformNoShowMiles)), dFormat
                                                        .format(distance / 1609)) : String.format(Farsi.Convert(getResources().getString(R.string.UnableToPerformNoShowKms)), dFormat.format(distance / 1000)))
                                        .setNegativeButton(Farsi.Convert(getResources().getString(R.string.ok)), null);
                                AlertDialog alert = builder.create();
                                alert.show();

                                dialogFontSize(alert);

                            } else {
                                Toast.makeText(
                                        getApplicationContext(),
                                        (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("mile")) ? String.format(Farsi.Convert(getResources().getString(R.string.UnableToPerformNoShowMiles)), dFormat
                                                .format(distance / 1609)) : String.format(Farsi.Convert(getResources().getString(R.string.UnableToPerformNoShowKms)), dFormat.format(distance / 1000)),
                                        Toast.LENGTH_SHORT).show();

                            }
                        }
                    }

                } else
					/*
					 * Toast.makeText(
					 * getApplicationContext(),
					 * Farsi.Convert(getResources().getString(R.string.CannotPerformNoShow)) + getDataFromResourse(currentTrip.state) +
					 * Farsi.Convert(getResources().getString(R.string.State)),
					 * Toast.LENGTH_LONG).show();
					 */
                    showToastMessageFromString(getResources().getString(R.string.CannotPerformNoShow) + getDataFromResourse(currentTrip.state) + getResources().getString(R.string.State));
            }

        });

        overlay = new RelativeLayout(this);
        Params = new RelativeLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
        overlay.setLayoutParams(Params);
        overlay.setBackgroundColor(0xB8C3C3C3);
        overlay.setPadding(0, 0, 0, 100);
        overlay.setId(38);

        Button onLocationBtn = new Button(this);
        onLocationBtn.setTextSize(25);
        onLocationBtn.setTypeface(Typeface.DEFAULT_BOLD);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            onLocationBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            onLocationBtn.setText(getResources().getString(R.string.AtLocation));
        } else
            onLocationBtn.setText(Farsi.Convert(getResources().getString(R.string.AtLocation)));

        // onLocationBtn.setBackgroundResource(R.drawable.status);
        Params = new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
        Params.addRule(RelativeLayout.CENTER_HORIZONTAL, RelativeLayout.TRUE);
        Params.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM, RelativeLayout.TRUE);
        onLocationBtn.setLayoutParams(Params);
        onLocationBtn.setId(39);
        onLocationBtn.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View arg0) {
                double distance = (float) DistanceCalculator.CalculateDistance(Double.valueOf(AVL_Service.pref.getString("LastLatitude", "0")), Double.valueOf(AVL_Service.pref.getString(
                        "LastLongitude",
                        "0")), Double.valueOf(currentTrip.PUlat), Double.valueOf(currentTrip.PUlong));
                if (distance < AVL_Service.pref.getLong(Constants.Allowable_Stand_Distance, 900)) {
                    sendTripResponse(States.ATLOCATION);
                    main.removeView(overlay);
                    // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.AtLocationConfirmed)), Toast.LENGTH_LONG).show();
                    showToastMessage(R.string.AtLocationConfirmed);
                } else {
                    // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.NotAtLocation)), Toast.LENGTH_LONG).show();
                    // showToastMessage(R.string.NotAtLocation);
                    if (AVL_Service.NotAllowActionIfAway.charAt(3) == '0' || AVL_Service.locManager.isProviderEnabled(LocationManager.GPS_PROVIDER) == false) {
                        if (AVL_Service.MessageTypeIfActionNotAllowed.charAt(3) == '1') {
                            AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                            builder
                                    .setIcon(android.R.drawable.ic_dialog_alert)
                                    .setTitle(Farsi.Convert(getResources().getString(R.string.AtLocationConfirmation)))
                                    .setMessage(
                                            (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("mile")) ? String.format(Farsi.Convert(getResources().getString(R.string.MilesAwayFromLocation)), dFormat
                                                    .format(distance / 1609)) : String.format(Farsi.Convert(getResources().getString(R.string.KmsAwayFromLocation)), dFormat.format(distance / 1000)))
                                    .setPositiveButton(Farsi.Convert(getResources().getString(R.string.Yes)), new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int which) {

                                            sendTripResponse(States.ATLOCATION);
                                            main.removeView(overlay);
                                            // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.AtLocationConfirmed)),
                                            // Toast.LENGTH_LONG).show();
                                            showToastMessage(R.string.AtLocationConfirmed);

                                        } // onClick

                                    })
                                    .setNegativeButton(Farsi.Convert(getResources().getString(R.string.No)), null);
                            AlertDialog alert = builder.create();
                            alert.show();

                            dialogFontSize(alert);
                        } else {
                            Toast.makeText(
                                    getApplicationContext(),
                                    (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("mile")) ? String.format(Farsi.Convert(getResources().getString(R.string.NotAtLocationMiles)), dFormat
                                            .format(distance / 1609)) : String.format(Farsi.Convert(getResources().getString(R.string.NotAtLocationKms)), dFormat.format(distance / 1000)),
                                    Toast.LENGTH_SHORT).show();
                            sendTripResponse(States.ATLOCATION);
                            main.removeView(overlay);
                            // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.AtLocationConfirmed)),
                            // Toast.LENGTH_LONG).show();
                            showToastMessage(R.string.AtLocationConfirmed);
                        }
                    } else {
                        if (AVL_Service.MessageTypeIfActionNotAllowed.charAt(3) == '1') {
                            AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this).setIcon(android.R.drawable.ic_dialog_alert).setTitle(
                                    Farsi.Convert(getResources().getString(R.string.NotAtLocationMessage))).setMessage(
                                    (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("mile")) ? String.format(Farsi.Convert(getResources().getString(R.string.NotAtLocationMiles)), dFormat
                                            .format(distance / 1609)) : String.format(Farsi.Convert(getResources().getString(R.string.NotAtLocationKms)), dFormat.format(distance / 1000))).setNegativeButton(
                                    Farsi.Convert(getResources().getString(R.string.ok)),
                                    null);
                            AlertDialog alert = builder.create();
                            alert.show();

                            dialogFontSize(alert);
                        } else {
                            Toast.makeText(
                                    getApplicationContext(),
                                    (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("mile")) ? String.format(Farsi.Convert(getResources().getString(R.string.NotAtLocationMiles)), dFormat
                                            .format(distance / 1609)) : String.format(Farsi.Convert(getResources().getString(R.string.NotAtLocationKms)), dFormat.format(distance / 1000)),
                                    Toast.LENGTH_SHORT).show();
                        }
                    }
                }
            }
        });
        overlay.addView(onLocationBtn);

        main.addView(emergencyButtonRow, 0);
        main.addView(tripNumber, 1);
        main.addView(serviceId, 2);
        main.addView(passenger, 3);
        // main.addView(FavoriteName, 3);
        main.addView(phone, 4);
        main.addView(puDateTime, 5);
        main.addView(pickupRouteButton, 6);
        main.addView(pickupPOI, 7);
        main.addView(pickup, 8);
        main.addView(pickUnitLabel, 9);
        main.addView(pickUnitNumber, 10);
        main.addView(pickRemarks, 11);
        main.addView(dropoffRouteButton, 12);
        main.addView(dropoffPOI, 13);
        main.addView(dropoff, 14);
        main.addView(bottomRow8, 15);

        main.addView(dropRemarks, 16);
        main.addView(extraInfo, 17);
        main.addView(bottomRow9, 18);

        main.addView(bottomRow2, 19);
        main.addView(bottomRow1, 20);
        main.addView(bottomRow3, 21);
        main.addView(bottomRow4, 22);
        main.addView(bottomRow5, 23);
        main.addView(bottomRow6, 24);
        main.addView(bottomRow7, 25);
        main.addView(bottomRow10, 26);
        main.addView(bottomRow11, 27);

        if (!currentTrip.state.equalsIgnoreCase(States.DROPPED)) {
            tfareLabel.setVisibility(View.GONE);
            tfareValue.setVisibility(View.GONE);
            ttipLabel.setVisibility(View.GONE);
            ttipValue.setVisibility(View.GONE);
            textraLabel.setVisibility(View.GONE);
            textraValue.setVisibility(View.GONE);
            tCCLabel.setVisibility(View.GONE);
            tCCValue.setVisibility(View.GONE);
            tAuthLabel.setVisibility(View.GONE);
            tAuthValue.setVisibility(View.GONE);
            odoStartValue.setVisibility(View.GONE);
            odoStartLabel.setVisibility(View.GONE);
            odoEndValue.setVisibility(View.GONE);
            odoEndLabel.setVisibility(View.GONE);
        }

        // if (currentTrip.state.equalsIgnoreCase(States.DROPPED) && (currentTrip.paymentMethod.contains("Cash") || currentTrip.paymentMethod.contains("Voucher"))) {
        // tCCLabel.setVisibility(View.INVISIBLE);
        // tCCValue.setVisibility(View.INVISIBLE);
        // tAuthLabel.setVisibility(View.INVISIBLE);
        // tAuthValue.setVisibility(View.INVISIBLE);
        // }
        if (currentTrip.state.equalsIgnoreCase(States.DROPPED) && AVL_Service.SDEnableOdometerInput == 0) {
            odoStartValue.setVisibility(View.GONE);
            odoStartLabel.setVisibility(View.GONE);
            odoEndValue.setVisibility(View.GONE);
            odoEndLabel.setVisibility(View.GONE);
        }
        if (!AVL_Service.ShowSDCoPayOnTripDetail) {
            copayLbl.setVisibility(View.GONE);
            copayValue.setVisibility(View.GONE);
        }

        if (!AVL_Service.ShowSDFundingSourceOnTripDetail) {
            fundingLabel.setVisibility(View.GONE);
            fundingSource.setVisibility(View.GONE);
        }
        if (!AVL_Service.ShowSDPaymentTypeOnTripDetail) {
            paytypeLabel.setVisibility(View.GONE);
            paymentType.setVisibility(View.GONE);
        }

        if (!AVL_Service.ShowSDApartmentOnTripDetail) {
            pickUnitLabel.setVisibility(View.GONE);
            pickUnitNumber.setVisibility(View.GONE);
            dropUnitLabel.setVisibility(View.GONE);
            dropUnitNumber.setVisibility(View.GONE);
        }

        if (!AVL_Service.SDShowPUDateTimeOnTripDetail)
            puDateTime.setVisibility(View.GONE);

        if (!AVL_Service.SDShowServiceID) {
            serviceId.setVisibility(View.GONE);
        }

        main.setOnLongClickListener(new OnLongClickListener() {

            @Override
            public boolean onLongClick(View v) {
                if (currentTrip.state.equalsIgnoreCase(States.ATLOCATION) || currentTrip.state.equalsIgnoreCase(States.IRTPU) || currentTrip.state.equalsIgnoreCase(States.PICKEDUP)) {
                    swipeCommand = StringUtil.hexStringToBytes(Command.LOAD_CARD_P25);
                    // byte[] cancelrsp = PocketPos.FramePack(PocketPos.FRAME_RSP,commandcancel, 0, Command.CANCEL_RSP.length());
                    if (bluebambooPrinter != null) {
                        if (bluebambooPrinter.isConnectionAlive()) {
                            bluebambooPrinter.sendSocketMsg(swipeCommand);
                            handleShowCustomToast(Farsi.Convert(getResources().getString(R.string.SwipeCardOnP)), R.drawable.bluebamboo);
                        } else
                            showPrinterDialog();
                    } else
                        showPrinterDialog();
                }
                return false;
            }
        });
        ScrollView scroll = new ScrollView(this);
        scroll.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        scroll.setFillViewport(true);
        scroll.addView(main);

        LinearLayout bottomRow = new LinearLayout(this);
        bottomRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        bottomRow.setGravity(Gravity.BOTTOM);

        if (currentTrip.nodeType.equalsIgnoreCase("PU")) {
            bottomRow.addView(PickedButton);
            bottomRow.addView(callOutButton);
            bottomRow.addView(NoShowButton);
        } else if (currentTrip.nodeType.equalsIgnoreCase("DO")) {
            bottomRow.addView(DroppedButton);
        } else if ((currentTrip.state.equalsIgnoreCase(States.DROPPED) && currentTrip.total > 0 && (AVL_Service.pref.getBoolean("BlueBambooDevice", false) || (AVL_Service.pref.getBoolean(
                "BluetoothMeter",
                false))))) {
            bottomRow.addView(PickedButton);
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                PickedButton.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                PickedButton.setText(getResources().getString(R.string.ReprintReceipt));
            } else {
                PickedButton.setText(Farsi.Convert(getResources().getString(R.string.ReprintReceipt)));
                PickedButton.setTypeface(null, Typeface.BOLD);
            }
        } else if ((currentTrip.state.equalsIgnoreCase(States.DROPPED) && currentTrip.total == 0 && (AVL_Service.pref.getBoolean("BlueBambooDevice", false) || (AVL_Service.pref.getBoolean(
                "BluetoothMeter",
                false))))) {
            bottomRow.addView(PickedButton);
            if (!AVL_Service.ShowTogglePickUpDropOffBTN) {
                bottomRow.addView(DroppedButton);
                drawable = DroppedButton.getBackground();
                drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                    DroppedButton.setBackground(drawable);
                else
                    DroppedButton.setBackgroundDrawable(drawable);
            }
            bottomRow.addView(callOutButton);
            bottomRow.addView(NoShowButton);
            Toast.makeText(getApplicationContext(), "Cannot Show Reprint Button because Trip Fare is Zero.", Toast.LENGTH_LONG).show();
        } else {
            bottomRow.addView(PickedButton);
            if (!AVL_Service.ShowTogglePickUpDropOffBTN) {
                bottomRow.addView(DroppedButton);
                drawable = DroppedButton.getBackground();
                drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                    DroppedButton.setBackground(drawable);
                else
                    DroppedButton.setBackgroundDrawable(drawable);
            }
            bottomRow.addView(callOutButton);
            bottomRow.addView(NoShowButton);
        }

        if (AVL_Service.pref.getBoolean("VeriFoneDevice", true) && IsMeterOnCreatedTrip) {
            IsMeterOnCreatedTrip = false;
            LogException("[create trip view]" + "[createTripView]" + "Trip Number:" + currentTrip.ConfirmNumber);
            AVL_Service.pref.edit().putString("TripConfirmationNo", currentTrip.ConfirmNumber).commit();
            VerifoneCMD2AckCount = 0;
            SendVeriFoneCMD2Stream();
        }

        LinearLayout body = new LinearLayout(this);
        body.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 1));
        body.addView(scroll);

        LinearLayout linear = new LinearLayout(this);
        linear.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        linear.setOrientation(LinearLayout.VERTICAL);
        linear.setWeightSum(1);
        linear.setScrollContainer(true);

        linear.addView(body);
        linear.addView(bottomRow);

        linear.setId(TRIPDETAILVIEW);

        return linear;
    }
    /*--------------------------------------------------------------createPaymentView---------------------------------------------------------------*/
    @SuppressWarnings("deprecation")
    @SuppressLint("NewApi")
    private ViewGroup createPaymentView() {

        bMerchantCopyPrinted = false;
        Context ctx = getBaseContext();
        int maxLength = 7;
        String CurrentLanguage = Locale.getDefault().getLanguage();
        tempSignType = "";
        signType = "";

        TripPaymentDataReceivedFromVeriFone = "";
        LinearLayout panel = new LinearLayout(ctx);
        panel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        panel.setOrientation(LinearLayout.VERTICAL);

        final LinearLayout emergencyButtonRow = new LinearLayout(this);
        emergencyButtonRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        emergencyButtonRow.setOrientation(LinearLayout.HORIZONTAL);
        emergencyButtonRow.setGravity(Gravity.CENTER_HORIZONTAL);
        // emergencyButtonRow.setPadding(5, 0, 5, 0);

        paymentView_breakBtn = new Button(this);
        drawable = paymentView_breakBtn.getBackground();
        drawable.setColorFilter(Color.parseColor(AVL_Service.SDBreakColor), Mode.SRC_IN);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            paymentView_breakBtn.setBackground(drawable);
        else
            paymentView_breakBtn.setBackgroundDrawable(drawable);
        paymentView_breakBtn.setTypeface(null, Typeface.BOLD);
        paymentView_breakBtn.setTextSize(miscFont - 1);
        if (break_status == 1) {
            // paymentView_breakBtn.setTextColor(Color.BLACK);
            drawable = paymentView_breakBtn.getBackground();
            drawable.setColorFilter(Color.parseColor(AVL_Service.SDResumeColor), Mode.SRC_IN);
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                paymentView_breakBtn.setBackground(drawable);
            else
                paymentView_breakBtn.setBackgroundDrawable(drawable);
            paymentView_breakBtn.setTextColor(Color.WHITE);
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                paymentView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                paymentView_breakBtn.setText(resumeButtonLabel);
            } else
                paymentView_breakBtn.setText(Farsi.Convert(resumeButtonLabel));

        } else if (break_status == 0) {
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                paymentView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                paymentView_breakBtn.setText(breakBtnLabel);
            } else
                paymentView_breakBtn.setText(Farsi.Convert(breakBtnLabel));

            drawable = paymentView_breakBtn.getBackground();
            drawable.setColorFilter(Color.parseColor(AVL_Service.SDBreakColor), Mode.SRC_IN);
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                paymentView_breakBtn.setBackground(drawable);
            else
                paymentView_breakBtn.setBackgroundDrawable(drawable);
        }
        paymentView_breakBtn.setOnClickListener(breakButtonLintener);
        // breakBtn.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));

        Button EmgBtn = new Button(this);
        drawable = EmgBtn.getBackground();
        drawable.setColorFilter(Color.RED, Mode.SRC_IN);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            EmgBtn.setBackground(drawable);
        else
            EmgBtn.setBackgroundDrawable(drawable);
        EmgBtn.setTypeface(null, Typeface.BOLD);
        EmgBtn.setTextSize(miscFont);
        EmgBtn.setTextColor(Color.WHITE);
        if (AVL_Service.pref.getString("Company", "Company Name").equalsIgnoreCase("My Taxi")) {
            EmgBtn.setText(Farsi.Convert(getResources().getString(R.string.Mytaxi)) + "\n" + AVL_Service.pref.getString("NTEPNumber", "12-XXP"));
        } else
            EmgBtn.setText(Farsi.Convert(AVL_Service.pref.getString("Company", "Company Name")) + "\n" + AVL_Service.pref.getString("NTEPNumber", "12-XXP"));// EmgBtn.setLayoutParams(new
        // LayoutParams(LayoutParams.MATCH_PARENT,
        // LayoutParams.MATCH_PARENT));
        EmgBtn.setOnClickListener(emergencyButtonLintener);

        Button pttBtn = new Button(this);
        drawable = pttBtn.getBackground();
        drawable.setColorFilter(Color.BLUE, Mode.SRC_IN);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            pttBtn.setBackground(drawable);
        else
            pttBtn.setBackgroundDrawable(drawable);
        pttBtn.setTypeface(null, Typeface.BOLD);
        pttBtn.setTextSize(miscFont - 1);
        pttBtn.setTextColor(Color.WHITE);
        pttBtn.setText(Farsi.Convert(getResources().getString(R.string.PTT)));
        pttBtn.setOnClickListener(pttButtonLintener);

        emergencyButtonRow.setId(131);

        if (AVL_Service.sdEnableBreak && AVL_Service.sdEnablePPT && AVL_Service.sdEnableEmergency) {
            EmgBtn.setTextSize(miscFont - 1);
            for (int i = 0; i < AVL_Service.SDBreakEmergencyPPTPosition.length(); i++) {
                if (AVL_Service.SDBreakEmergencyPPTPosition.charAt(i) == 'b')
                    emergencyButtonRow.addView(paymentView_breakBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.4f));
                else if (AVL_Service.SDBreakEmergencyPPTPosition.charAt(i) == 'e')
                    emergencyButtonRow.addView(EmgBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.2f));
                else if (AVL_Service.SDBreakEmergencyPPTPosition.charAt(i) == 'p')
                    emergencyButtonRow.addView(pttBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.4f));
            }
        } else {
            for (int i = 0; i < AVL_Service.SDBreakEmergencyPPTPosition.length(); i++) {
                if (AVL_Service.SDBreakEmergencyPPTPosition.charAt(i) == 'b') {
                    if (AVL_Service.sdEnableBreak)
                        emergencyButtonRow.addView(paymentView_breakBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.33f));
                } else if (AVL_Service.SDBreakEmergencyPPTPosition.charAt(i) == 'e') {
                    if (AVL_Service.sdEnableEmergency)
                        emergencyButtonRow.addView(EmgBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.33f));
                } else if (AVL_Service.SDBreakEmergencyPPTPosition.charAt(i) == 'p') {
                    if (AVL_Service.sdEnablePPT)
                        emergencyButtonRow.addView(pttBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.33f));
                }
            }
        }

        LinearLayout upperPanel = new LinearLayout(ctx);
        upperPanel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 1));
        upperPanel.setOrientation(LinearLayout.VERTICAL);
        // upperPanel.setPadding(0, 0, 0, 40);

        // Row1
        final LinearLayout headerRow = new LinearLayout(ctx);
        headerRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        headerRow.setOrientation(LinearLayout.HORIZONTAL);

        TextView tripCompleteLbl = new TextView(ctx);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            tripCompleteLbl.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            tripCompleteLbl.setText(getResources().getString(R.string.TripCompleted));
        } else
            tripCompleteLbl.setText(Farsi.Convert(getResources().getString(R.string.TripCompleted)));

        tripCompleteLbl.setGravity(Gravity.RIGHT);
        tripCompleteLbl.setTextSize(labelFont);
        tripCompleteLbl.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.4f));

        TextView summaryLbl = new TextView(ctx);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            summaryLbl.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            summaryLbl.setText(getResources().getString(R.string.Summary));
        } else
            summaryLbl.setText(Farsi.Convert(getResources().getString(R.string.Summary)));

        summaryLbl.setTextSize(labelFont);
        summaryLbl.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.6f));
        summaryLbl.setGravity(Gravity.CENTER);

        headerRow.addView(tripCompleteLbl);
        headerRow.addView(summaryLbl);

        // Row2
        View line = new View(ctx);
        line.setBackgroundColor(Color.BLUE);
        line.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, 1));
        // line.setMinimumHeight(2);

        // Row3
        final LinearLayout creditCardRow = new LinearLayout(ctx);
        creditCardRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        creditCardRow.setOrientation(LinearLayout.HORIZONTAL);
        creditCardRow.setPadding(0, screenHeight / 30, 0, 0);
        creditCardRow.setGravity(Gravity.CENTER_HORIZONTAL);

        creditBtn = new Button(this);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            creditBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            creditBtn.setText(getResources().getString(R.string.Credit));
        } else {
            creditBtn.setText(Farsi.Convert(getResources().getString(R.string.Credit)));
            creditBtn.setTypeface(Typeface.DEFAULT_BOLD);
        }

        creditBtn.setTextSize(labelFont + 2);
        creditBtn.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.33f));
        creditBtn.setGravity(Gravity.CENTER);
        drawable = creditBtn.getBackground();
        drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            creditBtn.setBackground(drawable);
        else
            creditBtn.setBackgroundDrawable(drawable);

        creditBtn.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                try {
                    currentTrip.paymentMethod = "Credit Card";
                    if (ttfCCNumber.isEnabled()) {
                        int i = 0;
                        while (i < CreditCardType.cardTypeFullNames.length) {
                            if (currentTrip.cardType != null && currentTrip.cardType.equalsIgnoreCase(CreditCardType.cardTypeFullNames[i]))
                                break;
                            i++;
                        }
                        String CCnum = new String(CreditCardNumber);
                        if (CCnum.trim().length() > 10 && i == CreditCardType.cardTypeFullNames.length)
                            currentTrip.cardType = CreditCardType.determineCreditCardType(CCnum.trim()).getFullName();
                        // currentTrip.cardType = CreditCardType.determineCreditCardType(ttfCCNumber.getText().toString()).getFullName();

                    }

                    String processor = "";
                    if (AVL_Service.CardMappings.containsKey(currentTrip.cardType.toUpperCase())) {
                        processor = AVL_Service.CardMappings.get(currentTrip.cardType.toUpperCase()).getCardProcessingCompany();
                        if (AVL_Service.CCProcessorList.get(processor).get_PaymentProcessingMethod().equalsIgnoreCase("-1")) {
                            EnableTwoStepPaymentProcessingforcredit = AVL_Service.SDEnableTwoStepPaymentProcessing;

                        } else if (AVL_Service.CCProcessorList.get(processor).get_PaymentProcessingMethod().equalsIgnoreCase("2")) {
                            EnableTwoStepPaymentProcessingforcredit = true;

                        } else
                            EnableTwoStepPaymentProcessingforcredit = false;

                    }

                    if (EnableTwoStepPaymentProcessingforcredit && !bMerchantCopyPrinted) {

                        if ((!(currentTrip.authCode.length() > 2) || AVL_Service.CCProcessorList.get(processor).get_MultiStepScenario().equalsIgnoreCase("2")) && !(currentTrip.TripPayStatus == 2)) {
                            if (!AVL_Service.SDEnableSignatureFeature) {
                                signType = "zz";
                            }
                            if (!signType.equalsIgnoreCase("")) {
                                PaymentConfirmationDialog = new AlertDialog.Builder(TaxiPlexer.this)
                                        .setIcon(android.R.drawable.ic_dialog_alert)
                                        .setTitle(Farsi.Convert(getResources().getString(R.string.Confirmation)))
                                        .setMessage(
                                                AVL_Service.CCProcessorList.get(processor).get_MultiStepScenario().equalsIgnoreCase("2") ? Farsi.Convert(getResources().getString(R.string.SaleWithCreditCard)) : (Farsi
                                                        .Convert(getResources().getString(R.string.holdwithCREDITCARD)) + "\n "
                                                        + Farsi.Convert(getResources().getString(R.string.Total1))
                                                        + AVL_Service.SDUnitOfCurrency + ttfTotal.getText().toString()))
                                        .setPositiveButton(Farsi.Convert(getResources().getString(R.string.Yes)), new DialogInterface.OnClickListener() {
                                            public void onClick(DialogInterface dialog, int id) {
                                                currentTrip.binprocess = true;
                                                holdAmount = ttfTotal.getText().toString();
                                                ActualPaymentAmount = (dFormat.format(total)).toString();
                                                if (cnnxManager.getActiveNetworkInfo() != null ? cnnxManager.getActiveNetworkInfo().isConnected() : false) {
                                                    try {
                                                        if (Float.parseFloat(holdAmount) > 0)
                                                            if (Float.parseFloat(holdAmount) < AVL_Service.pref.getFloat("MaxCCAmount", 0.0f)) {
                                                                if (AVL_Service.CardMappings.containsKey(currentTrip.cardType.toUpperCase())) {
                                                                    showProgressDialog(Farsi.Convert(getResources().getString(R.string.Processing_Credit_Card)));
                                                                    if (AVL_Service.CardMappings.get(currentTrip.cardType.toUpperCase()).getCardProcessingCompany().equalsIgnoreCase("MJM")) {
                                                                        currentTrip.cardProcessor = "MJM";
                                                                        MJM_PreAuth(holdAmount);
                                                                    } else if (AVL_Service.CardMappings.get(currentTrip.cardType.toUpperCase()).getCardProcessingCompany().equalsIgnoreCase("CMT")) {
                                                                        currentTrip.cardProcessor = "CMT";
                                                                        Thread processCreditCard = new Thread(new Runnable() {
                                                                            @Override
                                                                            public void run() {
                                                                                Thread.currentThread().setName("Credit Card");
                                                                                itcurves.ncs.CreditCard cc = new itcurves.ncs.CreditCard();
                                                                                cc.setCardNumber(ttfCCNumber.getText().toString());
                                                                                cc.setExpirationDate(ttfCCExpiry.getText().toString());
                                                                                CMT_Verify(holdAmount, "0", "0", "0", cc);
                                                                            }
                                                                        });
                                                                        processCreditCard.start();

                                                                    } else if (AVL_Service.CardMappings.get(currentTrip.cardType.toUpperCase()).getCardProcessingCompany().equalsIgnoreCase("CAW")) {
                                                                        currentTrip.cardProcessor = "CAW";
                                                                        sendCAWTransaction(TransactionType.AUTH_ONLY, holdAmount, "");
                                                                    } else if (AVL_Service.CardMappings.get(currentTrip.cardType.toUpperCase()).getCardProcessingCompany().equalsIgnoreCase("Authorize")) {
                                                                        currentTrip.cardProcessor = "Authorize";
                                                                        SendAuthorizeTransaction("PreAuth", holdAmount);
                                                                    } else if (AVL_Service.CardMappings.get(currentTrip.cardType.toUpperCase()).getCardProcessingCompany().equalsIgnoreCase("SlimCD")) {
                                                                        currentTrip.cardProcessor = "SlimCD";

                                                                        if (AVL_Service.CCProcessorList.get("SlimCD").get_MultiStepScenario().equalsIgnoreCase("2")) {
                                                                            tempPayStatus = currentTrip.TripPayStatus;
                                                                            currentTrip.TripPayStatus = 2;
                                                                            OldTip = Tip;
                                                                            if (currentTrip.authCode.length() > 2) {
                                                                                SendSlimCDTransaction("FORCE", holdAmount);
                                                                            } else
                                                                                SendSlimCDTransaction("SALE", holdAmount);
                                                                        } else {
                                                                            bPreAuthOnPaymentView = true;
                                                                            SendSlimCDTransaction("AUTH", holdAmount);
                                                                        }
                                                                    }
                                                                } else
                                                                    Toast
                                                                            .makeText(getApplicationContext(), "Cannot Process " + CreditCard_ITC.getCardType().getFullName() + " Card", Toast.LENGTH_LONG)
                                                                            .show();

                                                            } // if TOTAL > MaxCCAmount
                                                            else
                                                                Toast.makeText(
                                                                        getApplicationContext(),
                                                                        "Cannot hold more than $" + AVL_Service.pref.getFloat("MaxCCAmount", 0.0f)
                                                                                + " on Credit Card\nContact back office to charge this amount",
                                                                        Toast.LENGTH_LONG).show();
                                                        else
                                                            Toast.makeText(getApplicationContext(), "Please Enter a valid amount", Toast.LENGTH_LONG).show();
                                                    } catch (Exception e) {
                                                        handleException("[Exception on creditcardbutton click]" + "[createpaymentview]" + "[" + e.getLocalizedMessage() + "]");
                                                    }

                                                } else
                                                    exception("[Exception on creditcardbutton click]" + "[createpaymentview]");
                                            }
                                        })
                                        .setNegativeButton(Farsi.Convert(getResources().getString(R.string.No)), new DialogInterface.OnClickListener() {
                                            public void onClick(DialogInterface dialog, int id) {
                                                dialog.dismiss();

                                            }
                                        })
                                        .create();
                                PaymentConfirmationDialog.show();
                            } else {
                                AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this).setIcon(android.R.drawable.ic_dialog_alert).setTitle(
                                        Farsi.Convert(getResources().getString(R.string.Alert))).setMessage(R.string.SignatureRequired).setCancelable(true).setPositiveButton(
                                        Farsi.Convert(getResources().getString(R.string.ok)),
                                        new DialogInterface.OnClickListener() {
                                            @Override
                                            public void onClick(DialogInterface dialog, int which) {
                                                dialog.dismiss();
                                            }
                                        });
                                AlertDialog alert = builder.create();
                                alert.show();

                                dialogFontSize(alert);
                            }

                        } else {
                            if (AVL_Service.pref.getBoolean("BluetoothMeter", false) || AVL_Service.pref.getBoolean("BlueBambooDevice", false))
                                handlePaymentResp("A");
                            else {
                                bMerchantCopyPrinted = true;
                                creditBtn.performClick();
                            }
                        }

                    } else {
                        if (!AVL_Service.SDEnableSignatureFeature) {
                            signType = "zz";
                        }
                        if (!signType.equalsIgnoreCase("")) {
                            ActualPaymentAmount = (dFormat.format(total)).toString();
                            if (currentTrip != null) {
                                float maxAllowedTiponSD;
                                if (currentTrip.maxTipInPercentage)
                                    maxAllowedTiponSD = (currentTrip.maxTip * (ParseFloatFromString(ttfFare.getText().toString()) + ParseFloatFromString(ttfExtras.getText().toString()))) / 100;
                                else
                                    maxAllowedTiponSD = currentTrip.maxTip;
                                if (ParseFloatFromString(ttfTip.getText().toString()) <= ParseFloatFromString(String.valueOf(maxAllowedTiponSD)) || maxAllowedTiponSD == 0) {

                                    currentTrip.paymentMethod = "Credit Card";
                                    if (ttfCCNumber.isEnabled()) {
                                        int i = 0;
                                        while (i < CreditCardType.cardTypeFullNames.length) {
                                            if (currentTrip.cardType != null && currentTrip.cardType.equalsIgnoreCase(CreditCardType.cardTypeFullNames[i]))
                                                break;
                                            i++;
                                        }
                                        String CCnum = new String(CreditCardNumber);
                                        if (CCnum.trim().length() > 10 && i == CreditCardType.cardTypeFullNames.length)
                                            currentTrip.cardType = CreditCardType.determineCreditCardType(CCnum.trim()).getFullName();
                                        // currentTrip.cardType = CreditCardType.determineCreditCardType(ttfCCNumber.getText().toString()).getFullName();

                                    }

                                    boolean bDirectDropforSlimCD = false;
                                    if (AVL_Service.CardMappings.containsKey(currentTrip.cardType.toUpperCase())) {

                                        if (currentTrip.TripPayStatus == 2 && AVL_Service.CardMappings.get(currentTrip.cardType.toUpperCase()).getCardProcessingCompany().equalsIgnoreCase("SlimCD")) {
                                            if ((Double.parseDouble(Tip) - Double.parseDouble(OldTip)) <= 0.0)
                                                bDirectDropforSlimCD = true;
                                            else if (!EnableTwoStepPaymentProcessingforcredit)
                                                bDirectDropforSlimCD = true;
                                            currentTrip.cardProcessor = "SlimCD";
                                        } else if (currentTrip.TripPayStatus == 2) {
                                            bDirectDropforSlimCD = true;
                                        }

                                    }
                                    PaymentConfirmationDialog = new AlertDialog.Builder(TaxiPlexer.this)
                                            .setIcon(android.R.drawable.ic_dialog_alert)
                                            .setTitle(Farsi.Convert(getResources().getString(R.string.Confirmation)))
                                            .setMessage(
                                                    bDirectDropforSlimCD == false ? (Farsi.Convert(getResources().getString(R.string.PaywithCREDITCARD)) + "\n "
                                                            + Farsi.Convert(getResources().getString(R.string.Total1))
                                                            + AVL_Service.SDUnitOfCurrency + ttfTotal.getText().toString()) : (Farsi.Convert(getResources().getString(R.string.DirectDropforSlimCD))))
                                            .setPositiveButton(Farsi.Convert(getResources().getString(R.string.Yes)), new DialogInterface.OnClickListener() {
                                                public void onClick(DialogInterface dialog, int id) {
                                                    try {
                                                        bMerchantCopyPrinted = true;
                                                        currentTrip.paymentMethod = "Credit Card";
                                                        creditBtn.setEnabled(false);
                                                        cashBtn.setEnabled(false);
                                                        voucherBtn.setEnabled(false);

                                                        // ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
                                                        // scheduler.schedule(new Runnable() {
                                                        //
                                                        // @Override
                                                        // public void run() {
                                                        //
                                                        // runOnUiThread(new Runnable() {
                                                        // public void run() {
                                                        // // if (!(currentTrip.paymentMethod.equalsIgnoreCase("Call& R-V")))
                                                        // if (creditdisable == false) {
                                                        // creditBtn.setEnabled(true);
                                                        // cashBtn.setEnabled(true);
                                                        // voucherBtn.setEnabled(true);
                                                        // } else {
                                                        // creditdisable = false;
                                                        // }
                                                        // }
                                                        // });
                                                        //
                                                        // }
                                                        // }, 1, TimeUnit.SECONDS);

                                                        float totalAmount = Float.parseFloat(ttfTotal.getText().toString().trim().equalsIgnoreCase("") ? "0.0" : ttfTotal.getText().toString().trim());

                                                        if (currentTrip.creditCardExpiry.equalsIgnoreCase("") || ((currentTrip.creditCardExpiry.length() > 1) && (Integer
                                                                .parseInt(currentTrip.creditCardExpiry.substring(0, 2)) < 13)))
                                                            if (totalAmount > 0)
                                                                if (totalAmount < AVL_Service.pref.getFloat("MaxCCAmount", 0.0f) || currentTrip.authCode.trim().length() > 2) {

                                                                    if (AVL_Service.CardMappings.containsKey(currentTrip.cardType.toUpperCase())) {

                                                                        if (cnnxManager.getActiveNetworkInfo() != null ? cnnxManager.getActiveNetworkInfo().isConnected() : false) {
                                                                            float percent = (float) 0.25;
                                                                            float Pofpreauth = percent * Float
                                                                                    .parseFloat(currentTrip.preAuthAmount.trim().equalsIgnoreCase("") ? "0.0" : currentTrip.preAuthAmount.trim());
                                                                            if (AVL_Service.CardMappings.get(currentTrip.cardType.toUpperCase()).getCardProcessingCompany().equalsIgnoreCase("CAW")) {
                                                                                currentTrip.cardProcessor = "CAW";
                                                                                if (currentTrip.TripPayStatus == 2) {

                                                                                    sendTripResponse(States.DROPPED);
                                                                                    receivedPaymentResp("CAW_Header" + Constants.BODYSEPARATOR + "1^CreditCard Payment successful");

                                                                                } else {
                                                                                    if (currentTrip.authCode.trim().length() > 2) {
                                                                                        if (AVL_Service.pref.getBoolean("PostAuthDependent", true))
                                                                                            if (totalAmount <= (Float
                                                                                                    .parseFloat(currentTrip.preAuthAmount.trim().equalsIgnoreCase("") ? "0.0" : currentTrip.preAuthAmount
                                                                                                            .trim()) + Pofpreauth))
                                                                                                sendCAWTransaction(TransactionType.FORCE, ttfTotal.getText().toString(), currentTrip.CAW_GatewayRef);
                                                                                            else {
                                                                                                Toast.makeText(
                                                                                                        getApplicationContext(),
                                                                                                        "Cannot perform Post-Auth more than $" + currentTrip.preAuthAmount,
                                                                                                        Toast.LENGTH_LONG).show();
                                                                                                creditBtn.setEnabled(true);
                                                                                                cashBtn.setEnabled(true);
                                                                                                voucherBtn.setEnabled(true);
                                                                                            }
                                                                                        else
                                                                                            sendCAWTransaction(TransactionType.FORCE, ttfTotal.getText().toString(), currentTrip.CAW_GatewayRef);
                                                                                    } else
                                                                                        sendCAWTransaction(TransactionType.SALE, ttfTotal.getText().toString(), "");
                                                                                }

                                                                            } else if (AVL_Service.CardMappings.get(currentTrip.cardType.toUpperCase()).getCardProcessingCompany().equalsIgnoreCase("CMT")) {
                                                                                Thread processCreditCard = new Thread(new Runnable() {
                                                                                    @Override
                                                                                    public void run() {
                                                                                        Thread.currentThread().setName("Credit Card");
                                                                                        currentTrip.cardProcessor = "CMT";
                                                                                        if (currentTrip.authCode.trim().length() > 2) {
                                                                                            if (CMT_Adjust(currentTrip.authCode, currentTrip.transactionID, dFormat.format(total), Fare, Extras, Tip))
                                                                                                CMT_Settle();
                                                                                        } else if (CMT_PreAuth(dFormat.format(total), Fare, Extras, Tip)) {
                                                                                            CMT_Settle();
                                                                                        }
                                                                                    }
                                                                                });
                                                                                processCreditCard.start();
                                                                            } else if (AVL_Service.CardMappings.get(currentTrip.cardType.toUpperCase()).getCardProcessingCompany().equalsIgnoreCase("MJM")) {
                                                                                currentTrip.cardProcessor = "MJM";
                                                                                if (currentTrip.TripPayStatus == 2) {

                                                                                    sendTripResponse(States.DROPPED);
                                                                                    receivedPaymentResp("MJM_Header" + Constants.BODYSEPARATOR + "1^CreditCard Payment successful");

                                                                                } else {
                                                                                    if (currentTrip.paymentMethod.equalsIgnoreCase("Credit Card")) {
                                                                                        currentTrip.paymentMethod = "Call& R-V";
                                                                                        SendMJMGiftCardSale();
                                                                                    }
                                                                                }

                                                                            } else if (AVL_Service.CardMappings.get(currentTrip.cardType.toUpperCase()).getCardProcessingCompany().equalsIgnoreCase(
                                                                                    "Authorize")) {
                                                                                currentTrip.cardProcessor = "Authorize";
                                                                                if (currentTrip.TripPayStatus == 2) {

                                                                                    sendTripResponse(States.DROPPED);
                                                                                    receivedPaymentResp("Authorize_Header" + Constants.BODYSEPARATOR + "1^CreditCard Payment successful");

                                                                                } else {
                                                                                    if (currentTrip.authCode.trim().length() > 2) {
                                                                                        if (AVL_Service.pref.getBoolean("PostAuthDependent", true))
                                                                                            if (totalAmount <= (Float
                                                                                                    .parseFloat(currentTrip.preAuthAmount.trim().equalsIgnoreCase("") ? "0.0" : currentTrip.preAuthAmount
                                                                                                            .trim()) + Pofpreauth))
                                                                                                SendAuthorizeTransaction("PostAuth", ttfTotal.getText().toString());
                                                                                            else {
                                                                                                Toast.makeText(
                                                                                                        getApplicationContext(),
                                                                                                        "Cannot perform Post-Auth more than $" + currentTrip.preAuthAmount,
                                                                                                        Toast.LENGTH_LONG).show();
                                                                                                creditBtn.setEnabled(true);
                                                                                                cashBtn.setEnabled(true);
                                                                                                voucherBtn.setEnabled(true);
                                                                                            }
                                                                                        else
                                                                                            SendAuthorizeTransaction("PostAuth", ttfTotal.getText().toString());
                                                                                    } else
                                                                                        SendAuthorizeTransaction("Sale", ttfTotal.getText().toString());
                                                                                }

                                                                            } else if (AVL_Service.CardMappings.get(currentTrip.cardType.toUpperCase()).getCardProcessingCompany().equalsIgnoreCase(
                                                                                    "Vantiv")) {
                                                                                currentTrip.cardProcessor = "Vantiv";
                                                                                if (currentTrip.TripPayStatus == 2) {

                                                                                    sendTripResponse(States.DROPPED);
                                                                                    receivedPaymentResp("Authorize_Header" + Constants.BODYSEPARATOR + "1^CreditCard Payment successful");

                                                                                } else {
                                                                                    SendVantivTransaction(totalAmount);
                                                                                }
                                                                            } else if (AVL_Service.CardMappings.get(currentTrip.cardType.toUpperCase()).getCardProcessingCompany().equalsIgnoreCase(
                                                                                    "SlimCD")) {
                                                                                currentTrip.cardProcessor = "SlimCD";
                                                                                if (currentTrip.TripPayStatus == 2) {
                                                                                    if (EnableTwoStepPaymentProcessingforcredit && (Double.parseDouble(Tip) > Double.parseDouble(OldTip)))
                                                                                        SendSlimCDTransaction("TIPEDIT", ttfTotal.getText().toString());
                                                                                    else {
                                                                                        ttfTip.setText(OldTip);
                                                                                        sendTripResponse(States.DROPPED);
                                                                                        receivedPaymentResp("SlimCD_Header" + Constants.BODYSEPARATOR + "1^CreditCard Payment successful");
                                                                                    }

                                                                                }else if (!currentTrip.creditCardTrackII.equalsIgnoreCase("") && currentTrip.preAuthAmount.equalsIgnoreCase(""))
                                                                                    SendSlimCDTransaction("SALE", ttfTotal.getText().toString());
                                                                                else if (!ttfCCNumber.getText().toString().equalsIgnoreCase("") && !ttfCCExpiry.getText().toString().equalsIgnoreCase(""))
                                                                                    SendSlimCDTransaction("SALE", ttfTotal.getText().toString());
                                                                                else if (!currentTrip.transactionID.equalsIgnoreCase("") && !currentTrip.preAuthAmount.equalsIgnoreCase("")) {

                                                                                    if (AVL_Service.pref.getBoolean("PostAuthDependent", true))
                                                                                        if (totalAmount <= (Float
                                                                                                .parseFloat(currentTrip.preAuthAmount.trim().equalsIgnoreCase("") ? "0.0" : currentTrip.preAuthAmount.trim()) + Pofpreauth))
                                                                                            SendSlimCDTransaction("FORCE", ttfTotal.getText().toString());
                                                                                        else {
                                                                                            Toast.makeText(
                                                                                                    getApplicationContext(),
                                                                                                    "Cannot perform Post-Auth more than $" + currentTrip.preAuthAmount
                                                                                                            + ", Adjust Fare to allowed amount to Post-Auth and get remaining amount as Cash",
                                                                                                    Toast.LENGTH_LONG).show();
                                                                                            creditBtn.setEnabled(true);
                                                                                            cashBtn.setEnabled(true);
                                                                                            voucherBtn.setEnabled(true);
                                                                                        }
                                                                                } else if (!currentTrip.GateID.equalsIgnoreCase(""))
                                                                                    SendSlimCDTransaction("SALE", ttfTotal.getText().toString());

                                                                            }
                                                                        } else {
                                                                            exception("[Exception on creditcardbutton click]" + "[createpaymentview]");
                                                                            creditBtn.setEnabled(true);
                                                                            cashBtn.setEnabled(true);
                                                                            voucherBtn.setEnabled(true);
                                                                        }
                                                                    } else if (!currentTrip.GateID.equalsIgnoreCase("")) { // in this case card type is not coming
                                                                        SendSlimCDTransaction("SALE", ttfTotal.getText().toString());

                                                                    }
                                                                    // else if (!currentTrip.GateID.equalsIgnoreCase("")) {
                                                                    // currentTrip.cardProcessor = "SlimCD";
                                                                    // SendSlimCDTransaction("SALE", ttfTotal.getText().toString());
                                                                    // creditBtn.setEnabled(true);
                                                                    // cashBtn.setEnabled(true);
                                                                    // voucherBtn.setEnabled(true);
                                                                    // }
                                                                    else {
                                                                        Toast
                                                                                .makeText(getApplicationContext(), "Cannot Process " + currentTrip.cardType + " Card, Contact Office", Toast.LENGTH_LONG)
                                                                                .show();
                                                                        creditBtn.setEnabled(true);
                                                                        cashBtn.setEnabled(true);
                                                                        voucherBtn.setEnabled(true);
                                                                    }
                                                                }// if TOTAL > MaxCCAmount

                                                                else {
                                                                    Toast.makeText(
                                                                            getApplicationContext(),
                                                                            "Cannot charge more than $" + AVL_Service.pref.getFloat("MaxCCAmount", 0.0f)
                                                                                    + " on Credit Card\nContact back office to charge this amount",
                                                                            Toast.LENGTH_LONG).show();
                                                                    creditBtn.setEnabled(true);
                                                                    cashBtn.setEnabled(true);
                                                                    voucherBtn.setEnabled(true);
                                                                }
                                                            else {
                                                                // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.EntervalidAmount)),
                                                                // Toast.LENGTH_LONG).show();
                                                                showToastMessage(R.string.EntervalidAmount);
                                                                creditBtn.setEnabled(true);
                                                                cashBtn.setEnabled(true);
                                                                voucherBtn.setEnabled(true);
                                                            }

                                                        else {
                                                            // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.EntervalidExpiryDate)),
                                                            // Toast.LENGTH_LONG).show();
                                                            showToastMessage(R.string.EntervalidExpiryDate);
                                                            creditBtn.setEnabled(true);
                                                            cashBtn.setEnabled(true);
                                                            voucherBtn.setEnabled(true);
                                                        }

                                                    } catch (Exception e) {
                                                        handleException("[Exception on creditcardbutton click]" + "[createpaymentview]" + "[" + e.getLocalizedMessage() + "]");
                                                        creditBtn.setEnabled(true);
                                                        cashBtn.setEnabled(true);
                                                        voucherBtn.setEnabled(true);
                                                    }
                                                }
                                            })
                                            .setNegativeButton(Farsi.Convert(getResources().getString(R.string.No)), new DialogInterface.OnClickListener() {
                                                public void onClick(DialogInterface dialog, int id) {
                                                    dialog.dismiss();
                                                }
                                            })
                                            .create();
                                    PaymentConfirmationDialog.show();
                                } else
                                    // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.TipAmountisgreater)),
                                    // Toast.LENGTH_LONG).show();
                                    showToastMessage(R.string.TipAmountisgreater);
                            } else
                                // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.NoTripAssigned)), Toast.LENGTH_LONG).show();
                                showToastMessage(R.string.NoTripAssigned);
                        } else {
                            AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this).setIcon(android.R.drawable.ic_dialog_alert).setTitle(
                                    Farsi.Convert(getResources().getString(R.string.Alert))).setMessage(R.string.SignatureRequired).setCancelable(true).setPositiveButton(
                                    Farsi.Convert(getResources().getString(R.string.ok)),
                                    new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int which) {
                                            dialog.dismiss();
                                        }
                                    });
                            AlertDialog alert = builder.create();
                            alert.show();

                            dialogFontSize(alert);
                        }

                    }

                } catch (Exception e) {
                    handleException("[Exception on creditcardbutton click]" + "[createpaymentview]" + "[" + e.getLocalizedMessage() + "]");
                }
            }
        });

        TextView lblCCard = new TextView(this);
        lblCCard.setText("CC#: ");
        lblCCard.setTextSize(labelFont);
        lblCCard.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
        lblCCard.setGravity(Gravity.LEFT);

        ttfCCExpiry = new EditText(this);
        ttfCCExpiry.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.7f));
        ttfCCExpiry.setInputType(InputType.TYPE_CLASS_NUMBER);
        ttfCCExpiry.setFilters(mmyyFilter);
        ttfCCExpiry.setSingleLine();
        // ttfCCExpiry.setText("0120");
        ttfCCExpiry.setHint("mmyy");
        ttfCCExpiry.setTextSize(labelFont - 1);
        ttfCCExpiry.setTypeface(Typeface.DEFAULT_BOLD);
        if (AVL_Service.pref.getBoolean("AllowCreditCard", true))
            ttfCCExpiry.addTextChangedListener(new TextWatcher() {

                @Override
                public void onTextChanged(CharSequence s, int start, int before, int count) {
                }

                @Override
                public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                }

                @Override
                public void afterTextChanged(Editable s) {
                    try {
                        if ((ttfCCNumber.getText().length() > 12) && (ttfCCExpiry.getText().length() == 4)) {
                            currentTrip.creditCardExpiry = ttfCCExpiry.getText().toString();
                            creditBtn.setEnabled(true);
                        } else if (currentTrip.authCode.trim().length() > 2 || (!currentTrip.transactionID.equalsIgnoreCase("") && !currentTrip.transactionID.equalsIgnoreCase("0"))
                                || (!currentTrip.GateID.equalsIgnoreCase("") && (Integer.parseInt(currentTrip.GateID) > 0)))
                            creditBtn.setEnabled(true);
                        else
                            creditBtn.setEnabled(false);

                    } catch (Exception e) {
                        handleException("[Exception in ttffccexpiry on text changed listener]" + "[createpaymentview]" + "[" + e.getLocalizedMessage() + "]");
                    }
                }
            });

        ttfCCNumber = new EditText(this);
        ttfCCNumber.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.3f));
        ttfCCNumber.setInputType(InputType.TYPE_CLASS_NUMBER);
        ttfCCNumber.setFilters(creditCardFilter);
        ttfCCNumber.setSingleLine();
        // ttfCCNumber.setText("4358803691232414");
        ttfCCNumber.setTextSize(labelFont - 1);

        ttfCCNumber.setSelectAllOnFocus(true);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            ttfCCNumber.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            ttfCCNumber.setHint(getResources().getString(R.string.CreditCardNum));
        } else {
            ttfCCNumber.setHint(Farsi.Convert(getResources().getString(R.string.CreditCardNum)));
            ttfCCNumber.setTypeface(Typeface.DEFAULT_BOLD);
        }

        // if (currentTrip.GateID != null) {
        // if (!currentTrip.GateID.equalsIgnoreCase("")) {
        // creditBtn.setEnabled(true);
        // }
        // }
        if ((AVL_Service.pref.getBoolean("AllowCreditCard", true) && (currentTrip.creditCardNum.length() > 12)) || !currentTrip.GateID.equalsIgnoreCase("")) {
            ttfCCNumber.setText(currentTrip.creditCardNum);
            ttfCCExpiry.setText(currentTrip.creditCardExpiry);
            creditBtn.setEnabled(true);
        } else {
            ttfCCNumber.setSelectAllOnFocus(true);
            ttfCCExpiry.setSelectAllOnFocus(true);
            if (currentTrip.authCode.trim().length() > 2)
                creditBtn.setEnabled(true);
            else
                creditBtn.setEnabled(false);
        }

        ttfCCNumber.setOnFocusChangeListener(new View.OnFocusChangeListener() {

            @Override
            public void onFocusChange(View arg0, boolean hasFocus) {
                if (hasFocus) {
                    CreditCard_CAW = null;
                    if (CreditCard_ITC == null)
                        CreditCard_ITC = new itcurves.ncs.CreditCard();
                    else
                        CreditCard_ITC.sanitize();
                }
            }
        });
        final Handler handlerForCCNum = new Handler();
        if (AVL_Service.pref.getBoolean("AllowCreditCard", true))
            ttfCCNumber.addTextChangedListener(new TextWatcher() {

                @Override
                public void onTextChanged(CharSequence s, int start, int before, int count) {
                }

                @Override
                public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                }

                @Override
                public void afterTextChanged(Editable s) {
                    try {
                        handlerForCCNum.removeCallbacksAndMessages(null);

                        String TempCCNum = "";

                        for (int i = 0; i < ttfCCNumber.getText().toString().trim().length(); i++) {

                            // if (i == 0) {
                            // if (ttfCCNumber.getText().toString().trim().length() < CreditCardNumber.toString().trim().length()) {
                            // for (int j = ttfCCNumber.getText().toString().trim().length(); j < 16; j++)
                            // CreditCardNumber[j] = ' ';
                            // }
                            // }

                            char c = s.charAt(i);
                            if (i <= 11) {
                                if (i < ttfCCNumber.getText().toString().trim().length() - 1) {
                                    TempCCNum = TempCCNum + "*";
                                } else {
                                    TempCCNum = TempCCNum + c;
                                    handlerForCCNum.postDelayed(new Runnable() {

                                        @Override
                                        public void run() {
                                            String TempCCNum = "";
                                            for (int i = 0; i < ttfCCNumber.getText().toString().trim().length(); i++) {

                                                // if (i == 0) {
                                                // if (ttfCCNumber.getText().toString().trim().length() < CreditCardNumber.toString().trim().length()) {
                                                // for (int j = ttfCCNumber.getText().toString().trim().length(); j < 16; j++)
                                                // CreditCardNumber[j] = ' ';
                                                // }
                                                // }

                                                char c = ttfCCNumber.getText().toString().charAt(i);
                                                if (i <= 11) {

                                                    TempCCNum = TempCCNum + "*";

                                                } else {
                                                    TempCCNum = TempCCNum + c;
                                                }
                                                if (c != '*')
                                                    CreditCardNumber[i] = c;

                                                if (i == ttfCCNumber.getText().toString().trim().length() - 1) {
                                                    for (int j = ttfCCNumber.getText().toString().trim().length(); j < 16; j++)
                                                        CreditCardNumber[j] = ' ';
                                                }
                                            }

                                            if (IsCCNumEnter) {
                                                IsCCNumEnter = false;
                                                ttfCCNumber.setText(TempCCNum);
                                                ttfCCNumber.setSelection(TempCCNum.length());
                                            } else
                                                IsCCNumEnter = true;

                                            if (ttfCCNumber.getText().toString().trim().length() == 0) {
                                                for (int j = 0; j < 16; j++)
                                                    CreditCardNumber[j] = ' ';
                                            }
                                        }
                                    }, 1000);
                                }
                            } else {
                                TempCCNum = TempCCNum + c;
                            }
                            if (c != '*')
                                CreditCardNumber[i] = c;

                            if (i == ttfCCNumber.getText().toString().trim().length() - 1) {
                                for (int j = ttfCCNumber.getText().toString().trim().length(); j < 16; j++)
                                    CreditCardNumber[j] = ' ';
                            }
                        }

                        if (IsCCNumEnter) {
                            IsCCNumEnter = false;
                            ttfCCNumber.setText(TempCCNum);
                            ttfCCNumber.setSelection(TempCCNum.length());
                        } else
                            IsCCNumEnter = true;

                        if (ttfCCNumber.getText().toString().trim().length() == 0) {
                            for (int j = 0; j < 16; j++)
                                CreditCardNumber[j] = ' ';
                        }

                        if ((ttfCCNumber.getText().length() > 12)) {
                            String CCnum = new String(CreditCardNumber);
                            currentTrip.creditCardNum = CCnum.trim();
                            // currentTrip.creditCardNum = ttfCCNumber.getText().toString();
                            currentTrip.creditCardExpiry = ttfCCExpiry.getText().toString();
                            // CreditCard_ITC.setCardNumber(ttfCCNumber.getText().toString());
                            CreditCard_ITC.setCardNumber(CCnum.trim());
                            currentTrip.creditCardTrackII = currentTrip.creditCardTrackII.contains(currentTrip.creditCardNum) ? currentTrip.creditCardTrackII : "";
                            if (ttfCCExpiry.getText().length() == 4)
                                creditBtn.setEnabled(true);
                        } else {
                            creditBtn.setEnabled(false);
                            vantiveEncTrack = "";
                            vantivKSN = "";
                            // Here we can empty the fields for vantiv
                        }

                        // CreditCardNumber = ttfCCNumber.getText().toString();
                    } catch (Exception e) {
                        handleException("[Exception in ttffcnumber on text changed listener]" + "[createpaymentview]" + "[" + e.getLocalizedMessage() + "]");
                    }

                }
            });

        // creditCardRow.addView(lblCCard);
        final LinearLayout swipeRow = new LinearLayout(this);
        swipeRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        swipeRow.setOrientation(LinearLayout.HORIZONTAL);
        swipeRow.setGravity(Gravity.CENTER);
        swipeRow.setPadding(0, 0, 10, 0);

        SwipeBtn = new Button(this);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            SwipeBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            SwipeBtn.setText(getResources().getString(R.string.Swipecard));
        } else
            SwipeBtn.setText(Farsi.Convert(getResources().getString(R.string.Swipecard)));
        SwipeBtn.setTextSize(labelFont - 1);
        SwipeBtn.setTypeface(Typeface.DEFAULT_BOLD);
        SwipeBtn.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
        drawable = SwipeBtn.getBackground();
        drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            SwipeBtn.setBackground(drawable);
        else
            SwipeBtn.setBackgroundDrawable(drawable);

        // SwipeBtn.setEnabled(true);
        SwipeBtn.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                swipeCommand = StringUtil.hexStringToBytes(Command.LOAD_CARD_P25);
                // byte[] cancelrsp = PocketPos.FramePack(PocketPos.FRAME_RSP,commandcancel, 0, Command.CANCEL_RSP.length());
                if (bluebambooPrinter != null) {
                    if (bluebambooPrinter.isConnectionAlive()) {
                        bluebambooPrinter.sendSocketMsg(swipeCommand);
                        // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.SwipeCardOnP)), Toast.LENGTH_SHORT).show();
                        showToastMessage(R.string.SwipeCardOnP);
                    } else
                        showPrinterDialog();
                } else
                    showPrinterDialog();
            }
        });

        EnableAJRBtn = new Button(this);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            EnableAJRBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            EnableAJRBtn.setText(getResources().getString(R.string.EnableAJR));
        } else
            EnableAJRBtn.setText(Farsi.Convert(getResources().getString(R.string.EnableAJR)));

        EnableAJRBtn.setTextSize(labelFont - 1);
        EnableAJRBtn.setTypeface(Typeface.DEFAULT_BOLD);
        EnableAJRBtn.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
        // SwipeBtn.setEnabled(true);
        EnableAJRBtn.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                startMSR();
            }
        });

        swipeButton = new Button(this);
        swipeButtonForIDTech = new Button(this);
        swipeButtonForIDTech.setTextSize(labelFont - 1);
        swipeButtonForIDTech.setTypeface(Typeface.DEFAULT_BOLD);
        swipeButtonForIDTech.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
        drawable = swipeButtonForIDTech.getBackground();
        drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            swipeButtonForIDTech.setBackground(drawable);
        else
            swipeButtonForIDTech.setBackgroundDrawable(drawable);
        swipeButtonForIDTech.setText(Farsi.Convert(getResources().getString(R.string.SWIPE)));
        swipeButtonForIDTech.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                if (myUniMagReader != null) {

                    if (myUniMagReader.startSwipeCard()) {
                        swipeButtonForIDTech.setEnabled(false);

                    } else
                        showToastMessageFromString(Farsi.Convert(getResources().getString(R.string.Cannot_Swipe_Card)));

                }
            }
        });

        // ShowCCCharacters = new CheckBox(this);
        // ShowCCCharacters.setButtonDrawable(R.drawable.checkbox);
        // if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
        // ShowCCCharacters.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
        // ShowCCCharacters.setText(getResources().getString(R.string.ShowCharacters));
        // } else
        // ShowCCCharacters.setText(Farsi.Convert(getResources().getString(R.string.ShowCharacters)));
        //
        // ShowCCCharacters.setChecked(false);
        //
        // ShowCCCharacters.setOnCheckedChangeListener(new OnCheckedChangeListener() {
        //
        // @Override
        // public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
        // // TODO Auto-generated method stub
        // if (ShowCCCharacters.isChecked()) {
        // IsCCNumEnter = false;
        // String CCnum = new String(CreditCardNumber);
        // ttfCCNumber.setText(CCnum.trim());
        // ttfCCNumber.setSelection(CCnum.trim().length());
        // } else {
        // IsCCNumEnter = true;
        // String CCnum = new String(CreditCardNumber);
        // ttfCCNumber.setText(CCnum.trim());
        // ttfCCNumber.setSelection(CCnum.trim().length());
        // }
        // }
        // });

        // swipeRow.addView(ShowCCCharacters);
        swipeRow.addView(SwipeBtn);
        swipeRow.addView(EnableAJRBtn);
        swipeRow.addView(swipeButtonForIDTech);
        if (AVL_Service.pref.getBoolean("VentiveAJR", false)) {

            swipeRow.addView(swipeButton);
            // swipeRow.addView(isSwiperHereButton);
            initViews();
            startCallStateService();

            stateChangedListener = new StateChangedListener();
            if (swiperController == null)
                swiperController = SwiperController.createInstance(this, stateChangedListener);
            setSwiperControllerValues();
        }

        creditCardRow.addView(ttfCCNumber);
        creditCardRow.addView(ttfCCExpiry);

        final LinearLayout mileageRow = new LinearLayout(this);
        mileageRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        mileageRow.setOrientation(LinearLayout.HORIZONTAL);
        mileageRow.setGravity(Gravity.CENTER);
        // mileageRow.setPadding(0, 0, 10, 0);

        TextView mileageText = new TextView(this);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            mileageText.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            mileageText.setText(getResources().getString(R.string.Mileage) + ((dFormat.format(Distance).equalsIgnoreCase("0.00")) ? currentTrip.miles : dFormat.format(Distance)) + " mi");
        } else
            mileageText.setText(Farsi.Convert(getResources().getString(R.string.Mileage)) + ((dFormat.format(Distance).equalsIgnoreCase("0.00")) ? currentTrip.miles : dFormat.format(Distance))
                    + " mi");

        mileageText.setTextColor(Color.YELLOW);

        mileageRow.addView(mileageText);
        // Row4
        final LinearLayout fareRow = new LinearLayout(this);
        fareRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        fareRow.setOrientation(LinearLayout.HORIZONTAL);
        fareRow.setPadding(0, screenHeight / 30, 0, 0);

        TextView lblFare = new TextView(this);

        if (CurrentLanguage.equals("ar")) {
            if (AVL_Service.SDUnitOfCurrency.equalsIgnoreCase("SAR")) {
                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                    lblFare.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                    lblFare.setText(getResources().getString(R.string.Fare));
                } else
                    lblFare.setText(Farsi.Convert(getResources().getString(R.string.Fare)));

            } else {
                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                    lblFare.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                    lblFare.setText(getResources().getString(R.string.Fare1) + AVL_Service.SDUnitOfCurrency);
                } else
                    lblFare.setText(Farsi.Convert(getResources().getString(R.string.Fare1) + AVL_Service.SDUnitOfCurrency));

            }
        } else {
            if (AVL_Service.SDUnitOfCurrency.equalsIgnoreCase("SAR")) {
                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                    lblFare.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                    lblFare.setText(getResources().getString(R.string.Fare));
                } else
                    lblFare.setText(Farsi.Convert(getResources().getString(R.string.Fare)));

            } else {
                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                    lblFare.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                    lblFare.setText(getResources().getString(R.string.Fare1) + AVL_Service.SDUnitOfCurrency);
                } else
                    lblFare.setText(Farsi.Convert(getResources().getString(R.string.Fare1) + AVL_Service.SDUnitOfCurrency));
            }
        }

        // lblFare.setText(Farsi.Convert(getResources().getString(R.string.Fare1)) + AVL_Service.SDUnitOfCurrency);
        lblFare.setGravity(Gravity.RIGHT);
        lblFare.setTextSize(labelFont);
        lblFare.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.7f));

        ttfFare = new EditText(this);
        ttfExtras = new EditText(this);

        estFare = new TextView(this);
        // change by hamza
        // estFare.setText(" $" + dFormat.format(Float.parseFloat(currentTrip.estimatedCost)) + Farsi.Convert(getResources().getString(R.string.Estimated)));

        String estfarestring = AVL_Service.SDUnitOfCurrency + dFormat.format(Float.parseFloat(currentTrip.estimatedCost)) + Farsi.Convert(getResources().getString(R.string.Estimated));
        // if (currentTrip.Actual_TipPercent != 0) {
        // estfarestring += "\n" + currentTrip.Actual_TipPercent + "%AllowedTip";
        // } else if (!currentTrip.Tip.equalsIgnoreCase("") && Float.parseFloat(currentTrip.Tip) != 0) {
        // estfarestring += "\n$" + String.format("%.2f", Float.parseFloat(currentTrip.Tip)) + "AllowedTip";
        // }

        estFare.setText(estfarestring);

        estFare.setGravity(Gravity.RIGHT);
        estFare.setTextSize(miscFont);
        estFare.setTextColor(Color.YELLOW);
        estFare.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.55f));

        ttfFare.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.75f));
        ttfFare.setInputType(InputType.TYPE_NUMBER_FLAG_DECIMAL + InputType.TYPE_CLASS_NUMBER);
        ttfFare.setSingleLine();
        ttfFare.setTextSize(miscFont);
        ttfFare.setHint("0.00");
        ttfFare.setFilters(new InputFilter[]{new InputFilter.LengthFilter(maxLength)});
        ttfFare.setSelectAllOnFocus(true);

        if (Float.parseFloat(Fare.trim().equalsIgnoreCase("") ? "0.0" : Fare) > 0) {
            ttfFare.setText(dFormat.format(Float.parseFloat(Fare.trim().equalsIgnoreCase("") ? "0.0" : Fare)));
            ttfExtras.setText(dFormat.format(Float.parseFloat(Extras)));
            ttfFare.setFocusable(true);
        } else if (Float.parseFloat(currentTrip.estimatedCost) > 0) {
            ttfFare.setText(dFormat.format(Float.parseFloat(currentTrip.estimatedCost)));
            Fare = currentTrip.estimatedCost;
            ttfFare.setFocusable(true);
        } else {
            ttfFare.setText(dFormat.format(Float.parseFloat("0")));
        }

        if(currentTrip.bCopayAllowedOnPaymentScreen) {
            tempFare = ttfFare.getText().toString();
            ttfFare.setText(dFormat.format(Float.parseFloat("0")));
            ttfFare.setEnabled(false);
            Fare = "0";
        }


        // ttfFare.setOnFocusChangeListener(new View.OnFocusChangeListener() {
        //
        // @Override
        // public void onFocusChange(View v, boolean hasFocus) {
        // if (hasFocus)
        // ttfFare.setSelection(((EditText) v).getText().length());
        // else {
        // if (!((EditText) v).getText().toString().equalsIgnoreCase(""))
        // ttfFare.setText(dFormat.format(Float.parseFloat(((EditText) v).getText().toString())));
        // }
        // }
        // });

        ttfFare.setOnKeyListener(new OnKeyListener() {
            @Override
            public boolean onKey(View v, int keyCode, KeyEvent event) {
                // You can identify which key pressed buy checking keyCode value with KeyEvent.KEYCODE_
                if (keyCode == KeyEvent.KEYCODE_DEL) {

                }
                return false;
            }
        });

        ttfFare.addTextChangedListener(new TextWatcher() {

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

            }

            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void afterTextChanged(Editable s) {
                try {

                    // New code for tip
                    // if (!ttfFare.getText().toString().equalsIgnoreCase(""))

                    String temp = s.toString();
                    String temp1 = "";

                    if (temp.contains("."))
                        temp = temp.substring(0, temp.lastIndexOf('.')) + temp.substring(temp.lastIndexOf('.') + 1);

                    if (temp.length() > 0) {
                        if (temp.charAt(0) == '0') {
                            for (int i = 1; i < temp.length(); i++) {
                                temp1 = temp1 + temp.charAt(i);
                            }
                            temp = temp1;
                        }
                    }

                    String temp2 = null;
                    if (temp.length() == 1) {
                        temp = "0.0" + temp;
                    } else if (temp.length() == 2) {
                        temp = "0." + temp;
                    } else if (temp.length() > 2) {
                        temp2 = temp.substring(0, temp.length() - 2);
                        temp2 = temp2 + "." + temp.substring(temp.length() - 2, temp.length());
                        temp = temp2;
                    } else {
                        temp = "0.00";
                    }

                    if (isttfnumber) {
                        isttfnumber = false;
                        ttfFare.setText(temp);
                        ttfFare.setSelection(temp.length());

                    } else
                        isttfnumber = true;

                    if (currentTrip != null)

                        if (currentTrip.tipApplicable) {
                            tipAmount_1 = ((ParseFloatFromString(ttfFare.getText().toString()) + ParseFloatFromString(ttfExtras.getText().toString())) * currentTrip.tipAmount1) / 100;
                            tipAmount_2 = ((ParseFloatFromString(ttfFare.getText().toString()) + ParseFloatFromString(ttfExtras.getText().toString())) * currentTrip.tipAmount2) / 100;
                            tipAmount_3 = ((ParseFloatFromString(ttfFare.getText().toString()) + ParseFloatFromString(ttfExtras.getText().toString())) * currentTrip.tipAmount3) / 100;
                            tipAmount_4 = ((ParseFloatFromString(ttfFare.getText().toString()) + ParseFloatFromString(ttfExtras.getText().toString())) * currentTrip.tipAmount4) / 100;

                            if (currentTrip.Actual_TipPercent != 0) {
                                changePercentTip = false;
                                ttfTip.setText(String.format(
                                        "%.2f",
                                        (Float.parseFloat(ttfFare.getText().toString()) + Float.parseFloat(ttfExtras.getText().toString())) * (currentTrip.Actual_TipPercent / 100)));

                            } else if (tipBtn1.isPressed()) {
                                changePercentTip = false;
                                ttfTip.setText(dFormat.format(tipAmount_1));
                            } else if (tipBtn2.isPressed()) {
                                changePercentTip = false;
                                ttfTip.setText(dFormat.format(tipAmount_2));
                            } else if (tipBtn3.isPressed()) {
                                changePercentTip = false;
                                ttfTip.setText(dFormat.format(tipAmount_3));
                            } else if (tipBtn4.isPressed()) {
                                changePercentTip = false;
                                ttfTip.setText(dFormat.format(tipAmount_4));
                            }
                        }
                    changePercentTip = true;
                    tip = Float.parseFloat(Tip.trim().equalsIgnoreCase("") ? "0.0" : Tip);
                    total = Float.parseFloat(temp.trim().equalsIgnoreCase("") ? "0.0" : temp) + Float.parseFloat(Extras.trim().equalsIgnoreCase("") ? "0.0" : Extras) + tip;

                    TPromotionRow.setText("0");
                    currentTrip.PromotionalValue = 0;

                    ttfTotal.setText(dFormat.format(total));
                    Fare = temp;
                    TipA = Double.toString((total - tip) * 0.10);
                    TipB = Double.toString((total - tip) * 0.15);
                    TipC = Double.toString((total - tip) * 0.20);

                } catch (NumberFormatException e) {
                    handleException("[Exception in ttfffare on text changed listener]" + "[createpaymentview]" + "[" + e.getLocalizedMessage() + "]");
                }
            }
        });

        // ttfFare.setOnTouchListener(new View.OnTouchListener() {
        //
        // @Override
        // public boolean onTouch(View arg0, MotionEvent arg1) {
        // ttfFare.setSelection(((EditText) arg0).getText().length());
        // return false;
        // }
        // });
        fareRow.addView(lblFare);
        fareRow.addView(ttfFare);
        fareRow.addView(estFare);

        // Row5
        final LinearLayout extrasRow = new LinearLayout(this);
        extrasRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        extrasRow.setOrientation(LinearLayout.HORIZONTAL);

        TextView extraCharges = new TextView(this);

        if (CurrentLanguage.equals("ar")) {
            if (AVL_Service.SDUnitOfCurrency.equalsIgnoreCase("SAR")) {
                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                    extraCharges.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                    extraCharges.setText(getResources().getString(R.string.Extras));
                } else
                    extraCharges.setText(Farsi.Convert(getResources().getString(R.string.Extras)));
            } else {
                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                    extraCharges.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                    extraCharges.setText(getResources().getString(R.string.Extras1) + AVL_Service.SDUnitOfCurrency);
                } else
                    extraCharges.setText(Farsi.Convert(getResources().getString(R.string.Extras1) + AVL_Service.SDUnitOfCurrency));
            }
        } else {
            if (AVL_Service.SDUnitOfCurrency.equalsIgnoreCase("SAR")) {
                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                    extraCharges.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                    extraCharges.setText(getResources().getString(R.string.Extras));
                } else
                    extraCharges.setText(Farsi.Convert(getResources().getString(R.string.Extras)));
            } else {
                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                    extraCharges.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                    extraCharges.setText(getResources().getString(R.string.Extras1) + AVL_Service.SDUnitOfCurrency);
                } else
                    extraCharges.setText(Farsi.Convert(getResources().getString(R.string.Extras1) + AVL_Service.SDUnitOfCurrency));
            }
        }

        // extraCharges.setText(Farsi.Convert(getResources().getString(R.string.Extras1) + AVL_Service.SDUnitOfCurrency));
        extraCharges.setTextSize(labelFont);
        extraCharges.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.7f));
        extraCharges.setGravity(Gravity.RIGHT);

        ttfExtras.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.75f));
        ttfExtras.setInputType(InputType.TYPE_NUMBER_FLAG_DECIMAL + InputType.TYPE_CLASS_NUMBER);
        ttfExtras.setSingleLine();
        ttfExtras.setTextSize(miscFont);
        ttfExtras.setHint("0.00");
        if(!checkSoftMeterMON) {
            if (currentTrip.Extras.equalsIgnoreCase(""))
                ttfExtras.setText(dFormat.format(Float.parseFloat("0")));
            else {
                ttfExtras.setText(dFormat.format(Float.parseFloat(currentTrip.Extras)));
                Extras = currentTrip.Extras;
            }
        } else {
            ttfExtras.setText(Extras);
        }


        if(currentTrip.bCopayAllowedOnPaymentScreen) {
            tempExtras = ttfExtras.getText().toString();
            ttfExtras.setText(dFormat.format(Float.parseFloat("0")));
            ttfExtras.setEnabled(false);
            Extras = "0";
        }
        ttfExtras.setSelectAllOnFocus(true);
        ttfExtras.setFilters(new InputFilter[]{new InputFilter.LengthFilter(maxLength)});
        // ttfExtras.setOnFocusChangeListener(new View.OnFocusChangeListener() {
        //
        // @Override
        // public void onFocusChange(View v, boolean hasFocus) {
        // if (hasFocus) {
        // if (ttfExtras.getText().toString().equalsIgnoreCase("0.00"))
        // ttfExtras.setText("");
        // else
        // ttfExtras.setSelection(((EditText) v).getText().length());
        //
        // } else {
        // if (!((EditText) v).getText().toString().equalsIgnoreCase(""))
        // ttfExtras.setText(dFormat.format(Float.parseFloat(((EditText) v).getText().toString())));
        // }
        // }
        // });

        ttfExtras.addTextChangedListener(new TextWatcher() {

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

            }

            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void afterTextChanged(Editable s) {
                try {
                    // New code for tip
                    // if (!ttfExtras.getText().toString().equalsIgnoreCase(""))

                    String temp = s.toString();
                    String temp1 = "";

                    if (temp.contains("."))
                        temp = temp.substring(0, temp.lastIndexOf('.')) + temp.substring(temp.lastIndexOf('.') + 1);

                    if (temp.length() > 0) {
                        if (temp.charAt(0) == '0') {
                            for (int i = 1; i < temp.length(); i++) {
                                temp1 = temp1 + temp.charAt(i);
                            }
                            temp = temp1;
                        }
                    }

                    String temp2 = null;
                    if (temp.length() == 1) {
                        temp = "0.0" + temp;
                    } else if (temp.length() == 2) {
                        temp = "0." + temp;
                    } else if (temp.length() > 2) {
                        temp2 = temp.substring(0, temp.length() - 2);
                        temp2 = temp2 + "." + temp.substring(temp.length() - 2, temp.length());
                        temp = temp2;
                    } else {
                        temp = "0.00";
                    }

                    if (isttfextrasnumber) {
                        isttfextrasnumber = false;
                        ttfExtras.setText(temp);
                        ttfExtras.setSelection(temp.length());

                    } else
                        isttfextrasnumber = true;

                    if (currentTrip != null)
                        if (currentTrip.tipApplicable) {
                            tipAmount_1 = ((ParseFloatFromString(ttfFare.getText().toString()) + ParseFloatFromString(ttfExtras.getText().toString())) * currentTrip.tipAmount1) / 100;
                            tipAmount_2 = ((ParseFloatFromString(ttfFare.getText().toString()) + ParseFloatFromString(ttfExtras.getText().toString())) * currentTrip.tipAmount2) / 100;
                            tipAmount_3 = ((ParseFloatFromString(ttfFare.getText().toString()) + ParseFloatFromString(ttfExtras.getText().toString())) * currentTrip.tipAmount3) / 100;
                            tipAmount_4 = ((ParseFloatFromString(ttfFare.getText().toString()) + ParseFloatFromString(ttfExtras.getText().toString())) * currentTrip.tipAmount4) / 100;

                            if (currentTrip.Actual_TipPercent != 0) {
                                changePercentTip = false;
                                ttfTip.setText(String.format(
                                        "%.2f",
                                        (Float.parseFloat(ttfFare.getText().toString()) + Float.parseFloat(ttfExtras.getText().toString())) * (currentTrip.Actual_TipPercent / 100)));

                            } else if (tipBtn1.isPressed()) {
                                changePercentTip = false;
                                ttfTip.setText(dFormat.format(tipAmount_1));
                            } else if (tipBtn2.isPressed()) {
                                changePercentTip = false;
                                ttfTip.setText(dFormat.format(tipAmount_2));
                            } else if (tipBtn3.isPressed()) {
                                changePercentTip = false;
                                ttfTip.setText(dFormat.format(tipAmount_3));
                            } else if (tipBtn4.isPressed()) {
                                changePercentTip = false;
                                ttfTip.setText(dFormat.format(tipAmount_4));
                            }
                        }

                    tip = Float.parseFloat(Tip.trim().equalsIgnoreCase("") ? "0.0" : Tip);
                    Extras = temp;
                    total = Float.parseFloat(Extras.trim().equalsIgnoreCase("") ? "0.0" : Extras.trim()) + Float.parseFloat(Fare.trim().equalsIgnoreCase("") ? "0.0" : Fare)
                            + tip
                            - Float.parseFloat(TPromotionRow.getText().toString());

                    // TPromotionRow.setText("0");

                    ttfTotal.setText(dFormat.format(total));

                    TipA = Double.toString((total - tip) * 0.10);
                    TipB = Double.toString((total - tip) * 0.15);
                    TipC = Double.toString((total - tip) * 0.20);
                } catch (NumberFormatException e) {
                    handleException("[Exception in ttffccextras on text changed listener]" + "[createpaymentview]" + "[" + e.getLocalizedMessage() + "]");
                }
            }
        });

        extrasRow.addView(extraCharges);
        extrasRow.addView(ttfExtras);

        TextView lblTip = new TextView(this);

        if (CurrentLanguage.equals("ar")) {
            if (AVL_Service.SDUnitOfCurrency.equalsIgnoreCase("SAR")) {
                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                    lblTip.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                    lblTip.setText(getResources().getString(R.string.Tip));
                } else
                    lblTip.setText(Farsi.Convert(getResources().getString(R.string.Tip)));
            } else {
                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                    lblPassword.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                    lblTip.setText(getResources().getString(R.string.Tip1) + AVL_Service.SDUnitOfCurrency);
                } else
                    lblTip.setText(Farsi.Convert(getResources().getString(R.string.Tip1) + AVL_Service.SDUnitOfCurrency));
            }
        } else {
            if (AVL_Service.SDUnitOfCurrency.equalsIgnoreCase("SAR")) {
                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                    lblTip.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                    lblTip.setText(getResources().getString(R.string.Tip));
                } else
                    lblTip.setText(Farsi.Convert(getResources().getString(R.string.Tip)));
            } else {
                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                    lblTip.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                    lblTip.setText(getResources().getString(R.string.Tip1) + AVL_Service.SDUnitOfCurrency);
                } else
                    lblTip.setText(Farsi.Convert(getResources().getString(R.string.Tip1) + AVL_Service.SDUnitOfCurrency));
            }
        }

        // lblTip.setText(Farsi.Convert(getResources().getString(R.string.Tip1) + AVL_Service.SDUnitOfCurrency));
        lblTip.setTextSize(labelFont);
        lblTip.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.8f));
        lblTip.setGravity(Gravity.RIGHT);

        ttfTip = new EditText(this);
        ttfTip.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.75f));
        ttfTip.setInputType(InputType.TYPE_NUMBER_FLAG_DECIMAL + InputType.TYPE_CLASS_NUMBER);
        ttfTip.setSingleLine();
        ttfTip.setTextSize(miscFont);
        ttfTip.setHint("0.00");

        ttfTip.setFilters(new InputFilter[]{new InputFilter.LengthFilter(maxLength)});
        if (currentTrip.Tip.equalsIgnoreCase("") || Float.parseFloat(currentTrip.Tip) == 0)
            ttfTip.setText(dFormat.format(Float.parseFloat("0")));
        else {
            if (currentTrip.Actual_TipPercent != 0) {
                ttfTip.setText(String.format("%.2f", (Float.parseFloat(ttfFare.getText().toString()) + Float.parseFloat(ttfExtras.getText().toString())) * (currentTrip.Actual_TipPercent / 100)));

                total = Float.parseFloat(ttfFare.getText().toString().trim().equalsIgnoreCase("") ? "0.0" : ttfFare.getText().toString().trim()) + Float
                        .parseFloat(Extras.trim().equalsIgnoreCase("") ? "0.0" : Extras)
                        + tip;

                Tip = ttfTip.getText().toString();
                OldTip = Tip;

                // TPromotionRow.setText("0");

            } else {
                float ftemp = (Float.parseFloat(currentTrip.Tip));
                ttfTip.setText(String.format("%.2f", ftemp));

                total = Float.parseFloat(ttfFare.getText().toString().trim().equalsIgnoreCase("") ? "0.0" : ttfFare.getText().toString().trim()) + Float
                        .parseFloat(Extras.trim().equalsIgnoreCase("") ? "0.0" : Extras)
                        + tip;
                Tip = ttfTip.getText().toString();
                OldTip = Tip;
                // TPromotionRow.setText("0");

            }
        }

        ttfTip.setSelectAllOnFocus(true);
        ttfTip.addTextChangedListener(new TextWatcher() {

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

            }

            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void afterTextChanged(Editable s) {

                try {
                    // if (!ttfTip.getText().toString().equalsIgnoreCase(""))
                    if (currentTrip != null)
                        if (currentTrip.tipApplicable) {
                            if (currentTrip.tipAmount1 > 0 && tipAmount_1 == 0)
                                tipAmount_1 = ((ParseFloatFromString(ttfFare.getText().toString()) + ParseFloatFromString(ttfExtras.getText().toString())) * currentTrip.tipAmount1) / 100;
                            if (currentTrip.tipAmount2 > 0 && tipAmount_2 == 0)
                                tipAmount_2 = ((ParseFloatFromString(ttfFare.getText().toString()) + ParseFloatFromString(ttfExtras.getText().toString())) * currentTrip.tipAmount2) / 100;
                            if (currentTrip.tipAmount3 > 0 && tipAmount_3 == 0)
                                tipAmount_3 = ((ParseFloatFromString(ttfFare.getText().toString()) + ParseFloatFromString(ttfExtras.getText().toString())) * currentTrip.tipAmount3) / 100;
                            if (currentTrip.tipAmount4 > 0 && tipAmount_4 == 0)
                                tipAmount_4 = ((ParseFloatFromString(ttfFare.getText().toString()) + ParseFloatFromString(ttfExtras.getText().toString())) * currentTrip.tipAmount4) / 100;

                            // New Code to highlight tip buttons
                            if (ParseFloatFromString(ttfTip.getText().toString()) == Float.parseFloat(dFormat.format(tipAmount_1))) {
                                tipBtn1.setPressed(true);
                                tipBtn2.setPressed(false);
                                tipBtn3.setPressed(false);
                                tipBtn4.setPressed(false);
                            } else if (ParseFloatFromString(ttfTip.getText().toString()) == Float.parseFloat(dFormat.format(tipAmount_2))) {
                                tipBtn1.setPressed(false);
                                tipBtn2.setPressed(true);
                                tipBtn3.setPressed(false);
                                tipBtn4.setPressed(false);
                            } else if (ParseFloatFromString(ttfTip.getText().toString()) == Float.parseFloat(dFormat.format(tipAmount_3))) {
                                tipBtn1.setPressed(false);
                                tipBtn2.setPressed(false);
                                tipBtn3.setPressed(true);
                                tipBtn4.setPressed(false);
                            } else if (ParseFloatFromString(ttfTip.getText().toString()) == Float.parseFloat(dFormat.format(tipAmount_4))) {
                                tipBtn1.setPressed(false);
                                tipBtn2.setPressed(false);
                                tipBtn3.setPressed(false);
                                tipBtn4.setPressed(true);
                            } else {
                                tipBtn1.setPressed(false);
                                tipBtn2.setPressed(false);
                                tipBtn3.setPressed(false);
                                tipBtn4.setPressed(false);
                            }
                        }

                    String temp = s.toString();
                    String temp1 = "";

                    if (temp.contains("."))
                        temp = temp.substring(0, temp.lastIndexOf('.')) + temp.substring(temp.lastIndexOf('.') + 1);

                    if (temp.length() > 0) {
                        if (temp.charAt(0) == '0') {
                            for (int i = 1; i < temp.length(); i++) {
                                temp1 = temp1 + temp.charAt(i);
                            }
                            temp = temp1;
                        }
                    }

                    String temp2 = null;
                    if (temp.length() == 1) {
                        temp = "0.0" + temp;
                    } else if (temp.length() == 2) {
                        temp = "0." + temp;
                    } else if (temp.length() > 2) {
                        temp2 = temp.substring(0, temp.length() - 2);
                        temp2 = temp2 + "." + temp.substring(temp.length() - 2, temp.length());
                        temp = temp2;
                    } else {
                        temp = "0.00";
                    }

                    if (isttftipnumber) {
                        isttftipnumber = false;
                        ttfTip.setText(temp);
                        ttfTip.setSelection(temp.length());

                    } else
                        isttftipnumber = true;

                    Tip = temp;
                    tip = Float.parseFloat(Tip.trim().equalsIgnoreCase("") ? "0.0" : Tip);
                    if (changePercentTip == true) {
                        currentTrip.Tip = Tip;
                        currentTrip.Actual_TipPercent = 0;
                    }

                    if(currentTrip.bCopayAllowedOnPaymentScreen){
                        total = Float.parseFloat(Tip.trim().equalsIgnoreCase("") ? "0.0" : Tip)
                                + Float
                                .parseFloat(currentTrip.Copay.trim().equalsIgnoreCase("") ? "0.0" : currentTrip.Copay);

                    } else {
                        total = Float.parseFloat(Tip.trim().equalsIgnoreCase("") ? "0.0" : Tip) + Float.parseFloat(Extras.trim().equalsIgnoreCase("") ? "0.0" : Extras)
                                + Float.parseFloat(Fare.trim().equalsIgnoreCase("") ? "0.0" : Fare)
                                - Float.parseFloat(TPromotionRow.getText().toString());
                    }

                    // TPromotionRow.setText("0");

                    ttfTotal.setText(dFormat.format(total));

                } catch (NumberFormatException e) {
                    handleException("[Exception in ttfftip on text changed listener]" + "[createpaymentview]" + "[" + e.getLocalizedMessage() + "]");
                    // Tip = "0";
                }
            }
        });

        // ttfTip.setOnFocusChangeListener(new View.OnFocusChangeListener() {
        //
        // @Override
        // public void onFocusChange(View v, boolean hasFocus) {
        // if (hasFocus) {
        // if (ttfTip.getText().toString().equalsIgnoreCase("0.00"))
        // ttfTip.setText("");
        // else
        // ttfTip.setSelection(((EditText) v).getText().length());
        //
        // } else {
        // if (!((EditText) v).getText().toString().equalsIgnoreCase(""))
        // ttfTip.setText(dFormat.format(Float.parseFloat(((EditText) v).getText().toString())));
        //
        // }
        // }
        // });

        extrasRow.addView(lblTip);
        extrasRow.addView(ttfTip);

        // Row6
        final LinearLayout tipRow = new LinearLayout(this);
        tipRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        tipRow.setOrientation(LinearLayout.HORIZONTAL);

        tipBtn1 = new Button(this);
        drawable = tipBtn1.getBackground();
        drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            tipBtn1.setBackground(drawable);
        else
            tipBtn1.setBackgroundDrawable(drawable);

        if (currentTrip.tipAmount1 == 0) {
            tipBtnString1 = "Not Applicable";
            tipBtn1.setText("NA");
        } else {
            if ((int) currentTrip.tipAmount1 == currentTrip.tipAmount1) {
                tipBtnString1 = (int) currentTrip.tipAmount1 + "%";
                tipBtn1.setText(tipBtnString1);
            } else {
                tipBtnString1 = currentTrip.tipAmount1 + "%";
                tipBtn1.setText(tipBtnString1);
            }

        }

        tipBtn1.setOnTouchListener(new OnTouchListener() {

            @Override
            public boolean onTouch(View v, MotionEvent event) {
                if (event.getAction() == MotionEvent.ACTION_DOWN) {
                    v.setPressed(true);
                    tipBtn2.setPressed(false);
                    tipBtn3.setPressed(false);
                    tipBtn4.setPressed(false);
                    ttfTip.setText(dFormat.format(tipAmount_1));
                    String TipString = "";
                    if (AVL_Service.pref.getString("AppLanguage", "en").equalsIgnoreCase("en"))
                        TipString = tipBtnString1 + Farsi.Convert(getResources().getString(R.string.tipApplied));
                    else
                        TipString = Farsi.Convert(getResources().getString(R.string.tipApplied)) + tipBtnString1;
                    onRadioClick(TipString);

                    return true;
                }
                return true;
            }
        });

        tipBtn2 = new Button(this);
        drawable = tipBtn2.getBackground();
        drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            tipBtn2.setBackground(drawable);
        else
            tipBtn2.setBackgroundDrawable(drawable);

        if (currentTrip.tipAmount2 == 0) {
            tipBtnString2 = "Not Applicable";
            tipBtn2.setText("NA");
        } else {
            if ((int) currentTrip.tipAmount2 == currentTrip.tipAmount2) {
                tipBtnString2 = (int) currentTrip.tipAmount2 + "%";
                tipBtn2.setText(tipBtnString2);
            } else {
                tipBtnString2 = currentTrip.tipAmount2 + "%";
                tipBtn2.setText(tipBtnString2);
            }

        }

        tipBtn2.setOnTouchListener(new OnTouchListener() {

            @Override
            public boolean onTouch(View v, MotionEvent event) {
                if (event.getAction() == MotionEvent.ACTION_DOWN) {
                    v.setPressed(true);
                    tipBtn1.setPressed(false);
                    tipBtn3.setPressed(false);
                    tipBtn4.setPressed(false);
                    ttfTip.setText(dFormat.format(tipAmount_2));
                    String TipString = "";
                    if (AVL_Service.pref.getString("AppLanguage", "en").equalsIgnoreCase("en"))
                        TipString = tipBtnString2 + Farsi.Convert(getResources().getString(R.string.tipApplied));
                    else
                        TipString = Farsi.Convert(getResources().getString(R.string.tipApplied)) + tipBtnString2;
                    onRadioClick(TipString);

                    return true;
                }
                return true;
            }
        });

        tipBtn3 = new Button(this);
        drawable = tipBtn3.getBackground();
        drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            tipBtn3.setBackground(drawable);
        else
            tipBtn3.setBackgroundDrawable(drawable);

        if (currentTrip.tipAmount3 == 0) {
            tipBtnString3 = "Not Applicable";
            tipBtn3.setText("NA");
        } else {
            if ((int) currentTrip.tipAmount3 == currentTrip.tipAmount3) {
                tipBtnString3 = (int) currentTrip.tipAmount3 + "%";
                tipBtn3.setText(tipBtnString3);
            } else {
                tipBtnString3 = currentTrip.tipAmount3 + "%";
                tipBtn3.setText(tipBtnString3);
            }

        }

        tipBtn3.setOnTouchListener(new OnTouchListener() {

            @Override
            public boolean onTouch(View v, MotionEvent event) {
                if (event.getAction() == MotionEvent.ACTION_DOWN) {
                    v.setPressed(true);
                    tipBtn1.setPressed(false);
                    tipBtn2.setPressed(false);
                    tipBtn4.setPressed(false);
                    ttfTip.setText(dFormat.format(tipAmount_3));

                    String TipString = "";
                    if (AVL_Service.pref.getString("AppLanguage", "en").equalsIgnoreCase("en"))
                        TipString = tipBtnString3 + Farsi.Convert(getResources().getString(R.string.tipApplied));
                    else
                        TipString = Farsi.Convert(getResources().getString(R.string.tipApplied)) + tipBtnString3;
                    onRadioClick(TipString);

                    return true;
                }
                return true;

            }
        });

        tipBtn4 = new Button(this);
        drawable = tipBtn4.getBackground();
        drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            tipBtn4.setBackground(drawable);
        else
            tipBtn4.setBackgroundDrawable(drawable);

        if (currentTrip.tipAmount4 == 0) {
            tipBtnString4 = "Not Applicable";
            tipBtn4.setText("NA");
        } else {
            if ((int) currentTrip.tipAmount4 == currentTrip.tipAmount4) {
                tipBtnString4 = (int) currentTrip.tipAmount4 + "%";
                tipBtn4.setText(tipBtnString4);
            } else {
                tipBtnString4 = currentTrip.tipAmount4 + "%";
                tipBtn4.setText(tipBtnString4);
            }

        }

        tipBtn4.setOnTouchListener(new OnTouchListener() {

            @Override
            public boolean onTouch(View v, MotionEvent event) {
                if (event.getAction() == MotionEvent.ACTION_DOWN) {
                    v.setPressed(true);
                    tipBtn1.setPressed(false);
                    tipBtn2.setPressed(false);
                    tipBtn3.setPressed(false);
                    ttfTip.setText(dFormat.format(tipAmount_4));
                    String TipString = "";
                    if (AVL_Service.pref.getString("AppLanguage", "en").equalsIgnoreCase("en"))
                        TipString = tipBtnString4 + Farsi.Convert(getResources().getString(R.string.tipApplied));
                    else
                        TipString = Farsi.Convert(getResources().getString(R.string.tipApplied)) + tipBtnString4;
                    onRadioClick(TipString);

                    return true;

                }
                return true;
            }
        });

        tipRow.addView(tipBtn1, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.8f));
        tipRow.addView(tipBtn2, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.8f));
        tipRow.addView(tipBtn3, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.8f));
        tipRow.addView(tipBtn4, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.8f));

        // Row7
        final LinearLayout totalRow = new LinearLayout(this);
        totalRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        totalRow.setOrientation(LinearLayout.HORIZONTAL);
        totalRow.setPadding(0, screenHeight / 27, 0, 0);

        TextView lblTotal = new TextView(this);

        if (CurrentLanguage.equals("ar")) {
            if (AVL_Service.SDUnitOfCurrency.equalsIgnoreCase("SAR")) {
                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                    lblTotal.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                    lblTotal.setText(getResources().getString(R.string.Total));
                } else {
                    lblTotal.setText(Farsi.Convert(getResources().getString(R.string.Total)));
                    lblTotal.setTypeface(Typeface.DEFAULT_BOLD);
                }
            } else {
                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                    lblTotal.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                    lblTotal.setText(getResources().getString(R.string.Total1) + AVL_Service.SDUnitOfCurrency);
                } else {
                    lblTotal.setText(Farsi.Convert(getResources().getString(R.string.Total1) + AVL_Service.SDUnitOfCurrency));
                    lblTotal.setTypeface(Typeface.DEFAULT_BOLD);
                }
            }
        } else {
            if (AVL_Service.SDUnitOfCurrency.equalsIgnoreCase("SAR")) {
                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                    lblTotal.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                    lblTotal.setText(getResources().getString(R.string.Total));
                } else {
                    lblTotal.setText(Farsi.Convert(getResources().getString(R.string.Total)));
                    lblTotal.setTypeface(Typeface.DEFAULT_BOLD);
                }
            } else {
                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                    lblTotal.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                    lblTotal.setText(getResources().getString(R.string.Total1) + AVL_Service.SDUnitOfCurrency);
                } else {
                    lblTotal.setText(Farsi.Convert(getResources().getString(R.string.Total1) + AVL_Service.SDUnitOfCurrency));
                    lblTotal.setTypeface(Typeface.DEFAULT_BOLD);
                }
            }
        }

        lblTotal.setTextSize(labelFont);

        lblTotal.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.75f));
        lblTotal.setGravity(Gravity.RIGHT);

        ttfTotal = new EditText(this);
        ttfTotal.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.25f));
        ttfTotal.setInputType(InputType.TYPE_NUMBER_FLAG_DECIMAL + InputType.TYPE_CLASS_NUMBER);
        ttfTotal.setSingleLine();
        if(currentTrip.bCopayAllowedOnPaymentScreen){
            total = Float.parseFloat(ttfTip.getText().toString().trim().equalsIgnoreCase("") ? "0.0" : ttfTip.getText().toString().trim()) + Float
                    .parseFloat(currentTrip.Copay.trim().equalsIgnoreCase("") ? "0.0" : currentTrip.Copay);

        } else {
            total = Float.parseFloat(ttfTip.getText().toString().trim().equalsIgnoreCase("") ? "0.0" : ttfTip.getText().toString().trim()) + Float
                    .parseFloat(Extras.trim().equalsIgnoreCase("") ? "0.0" : Extras)
                    + Float.parseFloat(Fare.trim().equalsIgnoreCase("") ? "0.0" : Fare);
        }

        ttfTotal.setTextSize(miscFont);
        ttfTotal.setText(dFormat.format(total));
        ttfTotal.setFocusable(false);
        ttfTotal.setHint("0.00");
        ttfTotal.setTextColor(Color.RED);
        ttfTotal.setTypeface(Typeface.DEFAULT_BOLD);

        totalRow.addView(lblTotal);
        totalRow.addView(ttfTotal);

        // Row7
        final LinearLayout PhoneRow = new LinearLayout(this);
        PhoneRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        PhoneRow.setOrientation(LinearLayout.HORIZONTAL);
        PhoneRow.setPadding(0, screenHeight / 27, 0, 0);

        TextView lblPhoneNO = new TextView(this);
        lblPhoneNO.setTextSize(miscFont + 1);
        lblPhoneNO.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.75f));
        lblPhoneNO.setGravity(Gravity.RIGHT);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            lblPhoneNO.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            lblPhoneNO.setText(getResources().getString(R.string.phoneno));
        } else {
            lblPhoneNO.setText(Farsi.Convert(getResources().getString(R.string.phoneno)));
            lblPhoneNO.setTypeface(Typeface.DEFAULT_BOLD);
        }

        ttfCustomerPhoneNo = new EditText(this);
        ttfCustomerPhoneNo.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.25f));
        ttfCustomerPhoneNo.setInputType(InputType.TYPE_NUMBER_FLAG_DECIMAL + InputType.TYPE_CLASS_NUMBER);
        ttfCustomerPhoneNo.setSingleLine();

        ttfCustomerPhoneNo.setTextSize(miscFont);
        // ttfCustomerPhoneNo.setText(dFormat.format(total));
        if (currentTrip != null && currentTrip.clientPhoneNumber != null)
            ttfCustomerPhoneNo.setText(currentTrip.clientPhoneNumber);
        // ttfCustomerPhoneNo.setFocusable(false);
        // ttfCustomerPhoneNo.setTextColor(Color.RED);
        ttfCustomerPhoneNo.setInputType(InputType.TYPE_CLASS_NUMBER);
        InputFilter[] FilterArray = new InputFilter[1];
        FilterArray[0] = new InputFilter.LengthFilter(13);
        ttfCustomerPhoneNo.setFilters(FilterArray);
        ttfCustomerPhoneNo.setTypeface(Typeface.DEFAULT_BOLD);
        ttfCustomerPhoneNo.addTextChangedListener(new TextWatcher() {

            public void onTextChanged(CharSequence s, int start, int before, int count) {

                boolean flag = true;
                if (flag) {
                    // ttfCustomerPhoneNo.setOnKeyListener(new OnKeyListener() {
                    //
                    // public boolean onKey(View v, int keyCode, KeyEvent event) {
                    //
                    // if (keyCode == KeyEvent.KEYCODE_DEL)
                    // keyDel = 1;
                    // return false;
                    // }
                    // });

                    if (checkForDelKey > s.length()) {
                        keyDel = 1;
                    }

                    if (keyDel == 0) {

                        if (((ttfCustomerPhoneNo.getText().length() + 1) % 4) == 0) {
                            if (ttfCustomerPhoneNo.getText().toString().split("-").length <= 2) {
                                ttfCustomerPhoneNo.setText(ttfCustomerPhoneNo.getText() + "-");
                                ttfCustomerPhoneNo.setSelection(ttfCustomerPhoneNo.getText().length());
                            }
                        }
                        a = ttfCustomerPhoneNo.getText().toString();
                    } else {
                        a = ttfCustomerPhoneNo.getText().toString();
                        keyDel = 0;
                    }

                } else {
                    ttfCustomerPhoneNo.setText(a);
                    currentTrip.clientPhoneNumber = a;
                }

            }

            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                checkForDelKey = s.length();

            }

            public void afterTextChanged(Editable s) {

            }

        });
        PhoneRow.addView(lblPhoneNO);
        PhoneRow.addView(ttfCustomerPhoneNo);

        final LinearLayout PromotionRow = new LinearLayout(this);
        PromotionRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        PromotionRow.setOrientation(LinearLayout.HORIZONTAL);
        PromotionRow.setPadding(0, screenHeight / 30, 0, 0);

        TextView lblPromotionRow = new TextView(this);
        lblPromotionRow.setTextSize(miscFont);
        lblPromotionRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.25f));
        lblPromotionRow.setGravity(Gravity.RIGHT);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            lblPromotionRow.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            lblPromotionRow.setText(getResources().getString(R.string.Discount));
        } else
            lblPromotionRow.setText(getResources().getString(R.string.Discount));

        TPromotionRow = new EditText(this);
        TPromotionRow.setEnabled(false);
        TPromotionRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.25f));

        TPromotionRow.setTextSize(miscFont);

        TPromotionRow.setText("0");

        discountBtn = new Button(this);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            discountBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            discountBtn.setText(getResources().getString(R.string.Calculate));
        } else
            discountBtn.setText(getResources().getString(R.string.Calculate));
        discountBtn.setTextSize(miscFont);
        discountBtn.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.25f));
        discountBtn.setEnabled(true);
        PromotionCode = new EditText(this);

        discountBtn.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                if (!PromotionCode.getText().toString().trim().equalsIgnoreCase("")) {
                    handleShowProgress(Farsi.Convert(getResources().getString(R.string.Calculating_Discount)));
                    final RestClient client = new RestClient(AVL_Service.InLoadAPI_URL + "/TripReservation/CheckPromotionValidity");
                    try {
                        client.AddParam("vPromoCode", PromotionCode.getText().toString());
                        client.AddParam("iServiceID", currentTrip.tripNumber);
                        client.AddParam("tripCost", ttfFare.getText().toString());
                    } catch (JSONException e1) {
                        // TODO Auto-generated catch block
                        e1.printStackTrace();
                    }
                    client.AddHeader("Content-Type", "application/json");

                    new Thread() {
                        @Override
                        public void run() {
                            try {
                                client.Execute(RestClient.RequestMethod.POST);
                                final String response = client.getResponse();
                                if(client.getResponseCode() == 200) {
                                    if (response != null){
                                        JSONObject mainObject = new JSONObject(response);
                                        final boolean isvalid = mainObject.getBoolean("bValid");
                                        final double discount = mainObject.getDouble("dDiscountAmount");
                                        runOnUiThread(new Runnable() {
                                            public void run() {
                                                if (isvalid) {
                                                    currentTrip.PromotionalCode = PromotionCode.getText().toString();
                                                    currentTrip.PromotionalValue = (float) discount;
                                                    TPromotionRow.setText(String.valueOf(currentTrip.PromotionalValue));
                                                    total = Float.parseFloat(ttfTip.getText().toString().trim().equalsIgnoreCase("") ? "0.0" : ttfTip.getText().toString().trim()) + Float
                                                            .parseFloat(Extras.trim().equalsIgnoreCase("") ? "0.0" : Extras)
                                                            + Float.parseFloat(Fare.trim().equalsIgnoreCase("") ? "0.0" : Fare);
                                                    total = total - currentTrip.PromotionalValue;
                                                    ttfTotal.setText(dFormat.format(total));
                                                } else {
                                                    showToastMessageFromString(Farsi.Convert(getResources().getString(R.string.Promotion_Code_Not_Valid)));
                                                }
                                            }
                                        });
                                    }
                                }
//								StringBuffer envelope = new StringBuffer(
//									"<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><CheckPromotionValidity xmlns=\"http://Itcurves.net/\"><vPromoCode>" + PromotionCode
//										.getText()
//										.toString()
//											+ "</vPromoCode><tripCost>"
//											+ ttfFare.getText().toString()
//											+ "</tripCost><iServiceID>"
//											+ currentTrip.tripNumber
//											+ "</iServiceID><iPromoMode>"
//											+ 2
//											+ "</iPromoMode></CheckPromotionValidity></soap:Body></soap:Envelope>");
//								// Calling Web Service and Parsing Response
//								final WS_Response tempResponse = CallingWS.submit(AVL_Service.webServiceURL, AVL_Service.soapAction_CalculateDiscount, envelope.toString());
//								runOnUiThread(new Runnable() {
//									public void run() {
//										if (tempResponse != null && tempResponse.responseType != null && tempResponse.responseType.equalsIgnoreCase("CheckPromotionValidityResult")) {
//											if (tempResponse.discountcalc.get_Result() == true) {
//												currentTrip.PromotionalCode = PromotionCode.getText().toString();
//												currentTrip.PromotionalValue = tempResponse.discountcalc.get_Discount();
//												TPromotionRow.setText(String.valueOf(currentTrip.PromotionalValue));
//												total = Float.parseFloat(ttfTip.getText().toString().trim().equalsIgnoreCase("") ? "0.0" : ttfTip.getText().toString().trim()) + Float
//													.parseFloat(Extras.trim().equalsIgnoreCase("") ? "0.0" : Extras)
//														+ Float.parseFloat(Fare.trim().equalsIgnoreCase("") ? "0.0" : Fare);
//												total = total - currentTrip.PromotionalValue;
//												ttfTotal.setText(dFormat.format(total));
//											} else {
//												showToastMessageFromString(Farsi.Convert(getResources().getString(R.string.Promotion_Code_Not_Valid)));
//											}
//										} else {
//											exception("[Exception on discountbtnclick]" + "[createpaymentview]");
//										}
//									}
//								});

                            } catch (Exception e) {
                                exception("[Exception on discountbtnclick]" + "[createpaymentview]" + "[" + e.getLocalizedMessage() + "]");
                            }
                            hideProgressDialog();
                        }// run

                    }.start();
                }

            }
        });

        PromotionCode.setEnabled(true);
        PromotionCode.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.25f));

        PromotionCode.setTextSize(miscFont);

        if (currentTrip.PromotionalCode.equalsIgnoreCase("0") || currentTrip.PromotionalCode.equalsIgnoreCase("")) {
            PromotionCode.setText("");
            if (AVL_Service.Allow_Promotion_In_MARS_SDApp_Both == 1) {
                PromotionCode.setEnabled(false);
            }
        } else {
            PromotionCode.setText(String.valueOf(currentTrip.PromotionalCode));
            PromotionCode.setEnabled(false);
            checkforpromotioncode = true;
        }

        PromotionCode.addTextChangedListener(new TextWatcher() {

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                // TODO Auto-generated method stub

            }

            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                // TODO Auto-generated method stub

            }

            @Override
            public void afterTextChanged(Editable s) {
                TPromotionRow.setText("0");
                currentTrip.PromotionalValue = 0;
                currentTrip.PromotionalCode = "";

                total = Float.parseFloat(ttfTip.getText().toString().trim().equalsIgnoreCase("") ? "0.0" : ttfTip.getText().toString().trim()) + Float
                        .parseFloat(Extras.trim().equalsIgnoreCase("") ? "0.0" : Extras)
                        + Float.parseFloat(Fare.trim().equalsIgnoreCase("") ? "0.0" : Fare);

                ttfTotal.setText(dFormat.format(total));

            }
        });

        PromotionRow.addView(lblPromotionRow);
        PromotionRow.addView(TPromotionRow);
        PromotionRow.addView(discountBtn);
        PromotionRow.addView(PromotionCode);


        final LinearLayout CopayRow = new LinearLayout(this);
        CopayRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        CopayRow.setOrientation(LinearLayout.HORIZONTAL);
        CopayRow.setPadding(0, screenHeight / 27, 0, 0);

        TextView lblCopayRow = new TextView(this);
        lblCopayRow.setTextSize(miscFont + 1);
        lblCopayRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.75f));
        lblCopayRow.setGravity(Gravity.RIGHT);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            lblCopayRow.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            lblCopayRow.setText(R.string.Copay);
        } else {
            lblCopayRow.setText(Farsi.Convert(getResources().getString(R.string.Copay)));
            lblCopayRow.setTypeface(Typeface.DEFAULT_BOLD);
        }

        ttfCopayRow = new EditText(this);
        ttfCopayRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.25f));
        ttfCopayRow.setInputType(InputType.TYPE_NUMBER_FLAG_DECIMAL + InputType.TYPE_CLASS_NUMBER);
        ttfCopayRow.setSingleLine();

        ttfCopayRow.setTextSize(miscFont);
        ttfCopayRow.setText(currentTrip.Copay);
        ttfCopayRow.setEnabled(false);

        CopayRow.addView(lblCopayRow);
        CopayRow.addView(ttfCopayRow);

        // Row8
        preAuthorization = new LinearLayout(this);
        preAuthorization.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.5f));
        preAuthorization.setOrientation(LinearLayout.HORIZONTAL);
        preAuthorization.setPadding(0, 0, 0, 20);

        TextView lblPreAuth = new TextView(this);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            lblPreAuth.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            lblPreAuth.setText(getResources().getString(R.string.CreditCardonHold));
        } else {
            lblPreAuth.setText(Farsi.Convert(getResources().getString(R.string.CreditCardonHold)));
            lblPreAuth.setTypeface(Typeface.DEFAULT_BOLD);
        }

        lblPreAuth.setTextSize(miscFont);

        lblPreAuth.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.25f));
        lblPreAuth.setGravity(Gravity.RIGHT);

        lblPreAuthAmount = new TextView(this);
        lblPreAuthAmount.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.25f));
        // lblPreAuthAmount.setSingleLine();
        lblPreAuthAmount.setText(" $ " + Double.toString(Math.round((Double.parseDouble(currentTrip.preAuthAmount)) * 100.0) / 100.0));
        lblPreAuthAmount.setTextColor(Color.GREEN);
        lblPreAuthAmount.setTextSize(labelFont);
        lblPreAuthAmount.setTypeface(Typeface.DEFAULT_BOLD);
        lblPreAuthAmount.setGravity(Gravity.CENTER_VERTICAL);

        preAuthorization.addView(lblPreAuth);
        preAuthorization.addView(lblPreAuthAmount);

        final LinearLayout gateView = new LinearLayout(this);
        gateView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.5f));
        gateView.setOrientation(LinearLayout.HORIZONTAL);
        gateView.setPadding(0, 0, 0, 20);

        TextView lblGate = new TextView(this);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            lblGate.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            lblGate.setText(getResources().getString(R.string.CreditCardGate));
        } else {
            lblGate.setText(Farsi.Convert(getResources().getString(R.string.CreditCardGate)));
            lblGate.setTypeface(Typeface.DEFAULT_BOLD);
        }

        lblGate.setTextSize(miscFont);

        lblGate.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.25f));
        lblGate.setGravity(Gravity.RIGHT);

        gateView.addView(lblGate);

        // Row9
        FundingSource = new LinearLayout(this);
        FundingSource.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.5f));
        FundingSource.setOrientation(LinearLayout.VERTICAL);
        // fundingSource.setPadding(0, 0, 0, 40);
        FundingSource.setGravity(Gravity.CENTER_VERTICAL);

        lblFundingSrc = new TextView(this);
        lblFundingSrc.setText(Farsi.Convert(currentTrip.fundingSource));
        lblFundingSrc.setTextSize(labelFont);
        lblFundingSrc.setTypeface(Typeface.DEFAULT_BOLD);
        lblFundingSrc.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        lblFundingSrc.setGravity(Gravity.CENTER);
        lblFundingSrc.setTextColor(Color.MAGENTA);

        FundingSource.addView(lblFundingSrc);
        if ((currentTrip.authCode.trim().length() > 2 || Float.valueOf(currentTrip.preAuthAmount) > 0) && currentTrip.TripPayStatus != 2) {
            FundingSource.addView(preAuthorization);
            creditBtn.setEnabled(true);
            creditBtn.setText(R.string.Credit);
            if (ttfCCExpiry.getText().length() != 4)
                ttfCCExpiry.setText("0000");
            ttfCCNumber.setText(currentTrip.creditCardNum);
            ttfCCNumber.setEnabled(false);
            ttfCCExpiry.setEnabled(false);
            double ftemp = (Double.parseDouble(currentTrip.preAuthAmount) * 100) / 100;
            ttfFare.setText(String.format("%.2f", ftemp));
        }

        if (!currentTrip.GateID.equalsIgnoreCase("")) {
            FundingSource.addView(gateView);
        }

        final LinearLayout SendFare = new LinearLayout(this);
        SendFare.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.5f));
        SendFare.setOrientation(LinearLayout.VERTICAL);
        // fundingSource.setPadding(0, 0, 0, 40);
        SendFare.setGravity(Gravity.CENTER_VERTICAL);

        FareUpdateBtn = new Button(this);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            FareUpdateBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            FareUpdateBtn.setText(getResources().getString(R.string.Send_Fare));
        } else
            FareUpdateBtn.setText(getResources().getString(R.string.Send_Fare));
        FareUpdateBtn.setTextSize(labelFont + 4);
        FareUpdateBtn.setTypeface(Typeface.DEFAULT_BOLD);
        FareUpdateBtn.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
        FareUpdateBtn.setGravity(Gravity.CENTER);

        FareUpdateBtn.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                FlatRateFrame(Fare, Extras, "0", "1");
            }
        });

        SendFare.addView(FareUpdateBtn);

        // Row10
        final LinearLayout signatureRow = new LinearLayout(this);
        signatureRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        signatureRow.setOrientation(LinearLayout.HORIZONTAL);
        signatureRow.setPadding(15, 0, 15, 0);
        signatureRow.setGravity(Gravity.CENTER);

        signature = new ImageView(this);
        signature.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.33f));

        Button signatureBtn = new Button(this);
        signatureBtn.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.67f));
        signatureBtn.setText(R.string.signature);
        signatureBtn.setTextSize(labelFont - 5);
        signatureBtn.setTypeface(Typeface.DEFAULT_BOLD);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            signatureBtn.setBackground(getResources().getDrawable(R.drawable.button_gray));
        else
            signatureBtn.setBackgroundDrawable(getResources().getDrawable(R.drawable.button_gray));
        signatureBtn.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                SpannableString ss1 = new SpannableString(signatureTypes[0]);
                SpannableString ss2 = new SpannableString(signatureTypes[1]);
                SpannableString ss3 = new SpannableString(signatureTypes[2]);
                SpannableString ss4 = new SpannableString(signatureTypes[3]);
                switch (Integer.parseInt(Fonts[AVL_Service.pref.getInt("FontPosition", 4)])) {
                    case -8 :
                        ss1.setSpan(new RelativeSizeSpan(.25f), 0, ss1.length(), 0);
                        ss2.setSpan(new RelativeSizeSpan(.25f), 0, ss2.length(), 0);
                        ss3.setSpan(new RelativeSizeSpan(.25f), 0, ss3.length(), 0);
                        ss4.setSpan(new RelativeSizeSpan(.25f), 0, ss4.length(), 0);
                        break;
                    case -6 :
                        ss1.setSpan(new RelativeSizeSpan(.50f), 0, ss1.length(), 0);
                        ss2.setSpan(new RelativeSizeSpan(.50f), 0, ss2.length(), 0);
                        ss3.setSpan(new RelativeSizeSpan(.50f), 0, ss3.length(), 0);
                        ss4.setSpan(new RelativeSizeSpan(.50f), 0, ss4.length(), 0);
                        break;
                    case -4 :
                        ss1.setSpan(new RelativeSizeSpan(.75f), 0, ss1.length(), 0);
                        ss2.setSpan(new RelativeSizeSpan(.75f), 0, ss2.length(), 0);
                        ss3.setSpan(new RelativeSizeSpan(.75f), 0, ss3.length(), 0);
                        ss4.setSpan(new RelativeSizeSpan(.75f), 0, ss4.length(), 0);
                        break;
                    case -2 :
                        ss1.setSpan(new RelativeSizeSpan(1f), 0, ss1.length(), 0);
                        ss2.setSpan(new RelativeSizeSpan(1f), 0, ss2.length(), 0);
                        ss3.setSpan(new RelativeSizeSpan(1f), 0, ss3.length(), 0);
                        ss4.setSpan(new RelativeSizeSpan(1f), 0, ss4.length(), 0);
                        break;
                    case 0 :
                        ss1.setSpan(new RelativeSizeSpan(1.25f), 0, ss1.length(), 0);
                        ss2.setSpan(new RelativeSizeSpan(1.25f), 0, ss2.length(), 0);
                        ss3.setSpan(new RelativeSizeSpan(1.25f), 0, ss3.length(), 0);
                        ss4.setSpan(new RelativeSizeSpan(1.25f), 0, ss4.length(), 0);
                        break;
                    case 2 :
                        ss1.setSpan(new RelativeSizeSpan(1.50f), 0, ss1.length(), 0);
                        ss2.setSpan(new RelativeSizeSpan(1.50f), 0, ss2.length(), 0);
                        ss3.setSpan(new RelativeSizeSpan(1.50f), 0, ss3.length(), 0);
                        ss4.setSpan(new RelativeSizeSpan(1.50f), 0, ss4.length(), 0);
                        break;
                    case 4 :
                        ss1.setSpan(new RelativeSizeSpan(1.75f), 0, ss1.length(), 0);
                        ss2.setSpan(new RelativeSizeSpan(1.75f), 0, ss2.length(), 0);
                        ss3.setSpan(new RelativeSizeSpan(1.75f), 0, ss3.length(), 0);
                        ss4.setSpan(new RelativeSizeSpan(1.75f), 0, ss4.length(), 0);
                        break;
                    case 6 :
                        ss1.setSpan(new RelativeSizeSpan(2.0f), 0, ss1.length(), 0);
                        ss2.setSpan(new RelativeSizeSpan(2.0f), 0, ss2.length(), 0);
                        ss3.setSpan(new RelativeSizeSpan(2.0f), 0, ss3.length(), 0);
                        ss4.setSpan(new RelativeSizeSpan(2.0f), 0, ss4.length(), 0);
                        break;
                    case 8 :
                        ss1.setSpan(new RelativeSizeSpan(2.25f), 0, ss1.length(), 0);
                        ss2.setSpan(new RelativeSizeSpan(2.25f), 0, ss2.length(), 0);
                        ss3.setSpan(new RelativeSizeSpan(2.25f), 0, ss3.length(), 0);
                        ss4.setSpan(new RelativeSizeSpan(2.25f), 0, ss4.length(), 0);
                        break;
                }
                CharSequence[] signatureitems = {ss1, ss2, ss3, ss4};
                new AlertDialog.Builder(TaxiPlexer.this).setTitle(Farsi.Convert(getResources().getString(R.string.Select_Signature_Type))).setItems(
                        signatureitems,
                        new DialogInterface.OnClickListener() {

                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                switch (which) {
                                    case 0 :
                                        tempSignType = "M";
                                        break;

                                    case 1 :
                                        tempSignType = "F";
                                        break;

                                    case 2 :
                                        tempSignType = "Rep";
                                        break;

                                    case 3 :
                                        tempSignType = "R";
                                        break;

                                    default :
                                        break;
                                }

                                if (!tempSignType.equalsIgnoreCase("R")) {

                                    Bundle bndle = new Bundle();
                                    bndle.putString("ClientName", currentTrip.clientName);
                                    Intent intent = new Intent(TaxiPlexer.this, CaptureSignature.class);
                                    intent.putExtras(bndle);
                                    startActivityForResult(intent, Constants.SIGNATURE_CAPTURE);
                                } else {
                                    signature.setImageResource(R.drawable.puts);
                                    currentTrip.signatureURL = "puts";
                                    signType = "R";
                                }
                            }
                        }).create().show();

            }
        });

        if (AVL_Service.SDEnableSignatureFeature) {
            signatureRow.addView(signature);
            signatureRow.addView(signatureBtn);
        }

        // Row10
        final LinearLayout buttonRow = new LinearLayout(this);
        buttonRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        buttonRow.setOrientation(LinearLayout.HORIZONTAL);
        buttonRow.setVerticalGravity(Gravity.BOTTOM);

        cashBtn = new Button(this);
        cashBtn.setTextSize(labelFont + 2);
        cashBtn.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.33f));
        cashBtn.setGravity(Gravity.CENTER);
        drawable = cashBtn.getBackground();
        drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            cashBtn.setBackground(drawable);
        else
            cashBtn.setBackgroundDrawable(drawable);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            cashBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            cashBtn.setText(getResources().getString(R.string.Cash));
        } else {
            cashBtn.setText(Farsi.Convert(getResources().getString(R.string.Cash)));
            cashBtn.setTypeface(Typeface.DEFAULT_BOLD);
        }

        cashBtn.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                try {
                    currentTrip.paymentMethod = "Cash";
                    if (AVL_Service.SDEnableTwoStepPaymentProcessing && !bMerchantCopyPrinted
                            && (AVL_Service.pref.getBoolean("BluetoothMeter", false) || AVL_Service.pref.getBoolean("BlueBambooDevice", false))) {
                        PromotionCode.setEnabled(false);
                        discountBtn.setEnabled(false);
                        handlePaymentResp("A");

                    } else {

                        ActualPaymentAmount = (dFormat.format(total)).toString();
                        if (currentTrip != null) {
                            float maxAllowedTiponSD;
                            if (currentTrip.maxTipInPercentage)
                                maxAllowedTiponSD = (currentTrip.maxTip * (ParseFloatFromString(ttfFare.getText().toString()) + ParseFloatFromString(ttfExtras.getText().toString()))) / 100;
                            else
                                maxAllowedTiponSD = currentTrip.maxTip;
                            if (ParseFloatFromString(ttfTip.getText().toString()) <= ParseFloatFromString(String.valueOf(maxAllowedTiponSD)) || maxAllowedTiponSD == 0) {

                                PaymentConfirmationDialog = new AlertDialog.Builder(TaxiPlexer.this).setIcon(android.R.drawable.ic_dialog_alert).setTitle(
                                        Farsi.Convert(getResources().getString(R.string.Confirmation))).setMessage(
                                        Farsi.Convert(getResources().getString(R.string.PaywithCASH)) + "\n"
                                                + Farsi.Convert(getResources().getString(R.string.Total1))
                                                + AVL_Service.SDUnitOfCurrency
                                                + ttfTotal.getText().toString()).setPositiveButton(Farsi.Convert(getResources().getString(R.string.Yes)), new DialogInterface.OnClickListener() {
                                    public void onClick(DialogInterface dialog, int id) {
                                        if (Float.parseFloat(ttfTotal.getText().toString()) >= 0) {
                                            try {
                                                currentTrip.binprocess = true;
                                                bMerchantCopyPrinted = true;
                                                currentTrip.paymentMethod = "Cash";
                                                if (AVL_Service.enableDialiePackageOnDevice) {
                                                    if (!diale_Connectivity) {
                                                        AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this).setIcon(android.R.drawable.ic_dialog_alert).setTitle(
                                                                Farsi.Convert(getResources().getString(R.string.Info))).setMessage(
                                                                "Device is not connected to Dialie PIM. Do you want to process it without Dialie?").setCancelable(false).setPositiveButton(
                                                                Farsi.Convert(getResources().getString(R.string.Yes)),
                                                                new DialogInterface.OnClickListener() {
                                                                    @Override
                                                                    public void onClick(DialogInterface dialog, int which) {
                                                                        showProgressDialog(Farsi.Convert(getResources().getString(R.string.Processing_Dialie_Payment)));
                                                                        // FlatRateFrame(Float.toString(total));
                                                                        if (AVL_Service.bShuttle || PIMLastCommandName.equalsIgnoreCase("PRORS")) {
                                                                            sendTripResponse(States.DROPPED);
                                                                            leavepaymentScreen();
                                                                        } else
                                                                            ProcessCashRequest();
                                                                    }
                                                                }).setNegativeButton(Farsi.Convert(getResources().getString(R.string.No)), new DialogInterface.OnClickListener() {
                                                            @Override
                                                            public void onClick(DialogInterface dialog, int which) {
                                                                dialog.dismiss();
                                                            }
                                                        });
                                                        AlertDialog alert = builder.create();
                                                        alert.show();

                                                        dialogFontSize(alert);
                                                    } else {
                                                        showProgressDialog(Farsi.Convert(getResources().getString(R.string.Processing_Dialie_Payment)));
                                                        // FlatRateFrame(Float.toString(total));
                                                    }
                                                } else if (AVL_Service.bShuttle) {
                                                    sendTripResponse(States.DROPPED);
                                                    leavepaymentScreen();
                                                } else {
                                                    ProcessCashRequest();

                                                }

                                            } catch (Exception e) {
                                                handleException("[Exception on cashbtnclick]" + "[createpaymentview]" + "[" + e.getLocalizedMessage() + "]");
                                            }
                                        }
                                    }
                                }).setNegativeButton(Farsi.Convert(getResources().getString(R.string.No)), new DialogInterface.OnClickListener() {
                                    public void onClick(DialogInterface dialog, int id) {
                                        dialog.dismiss();
                                    }
                                }).create();
                                PaymentConfirmationDialog.show();

                                dialogFontSize(PaymentConfirmationDialog);
                            } else
                                // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.TipAmountisgreater)),
                                // Toast.LENGTH_LONG).show();
                                showToastMessage(R.string.TipAmountisgreater);
                        } else
                            // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.NoTripAssigned)), Toast.LENGTH_LONG).show();
                            showToastMessage(R.string.NoTripAssigned);
                    }
                } catch (Exception e) {
                    handleException("[Exception on cashbtnclick]" + "[createpaymentview]" + "[" + e.getLocalizedMessage() + "]");
                }
            }
        });

        voucherBtn = new Button(this);
        voucherBtn.setTextSize(labelFont - 1);
        voucherBtn.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.33f));
        voucherBtn.setGravity(Gravity.CENTER);
        drawable = voucherBtn.getBackground();
        drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            voucherBtn.setBackground(drawable);
        else
            voucherBtn.setBackgroundDrawable(drawable);

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            voucherBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            voucherBtn.setText(getResources().getString(R.string.Voucher));
        } else {

            voucherBtn.setText(Farsi.Convert(getResources().getString(R.string.Voucher)));
            voucherBtn.setTypeface(Typeface.DEFAULT_BOLD);
        }

        voucherBtn.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                try {
                    currentTrip.paymentMethod = "Voucher";
                    if (AVL_Service.SDEnableTwoStepPaymentProcessing && !bMerchantCopyPrinted
                            && (AVL_Service.pref.getBoolean("BluetoothMeter", false) || AVL_Service.pref.getBoolean("BlueBambooDevice", false))) {
                        PromotionCode.setEnabled(false);
                        discountBtn.setEnabled(false);
                        handlePaymentResp("A");

                    } else {
                        if (!AVL_Service.SDEnableSignatureFeature) {
                            signType = "zz";
                        }
                        if (!signType.equalsIgnoreCase("")) {
                            ActualPaymentAmount = (dFormat.format(total)).toString();
                            if (currentTrip != null) {
                                float maxAllowedTiponSD;
                                if (currentTrip.maxTipInPercentage)
                                    maxAllowedTiponSD = (currentTrip.maxTip * (ParseFloatFromString(ttfFare.getText().toString()) + ParseFloatFromString(ttfExtras.getText().toString()))) / 100;
                                else
                                    maxAllowedTiponSD = currentTrip.maxTip;
                                if (ParseFloatFromString(ttfTip.getText().toString()) <= ParseFloatFromString(String.valueOf(maxAllowedTiponSD)) || maxAllowedTiponSD == 0) {
                                    if (AVL_Service.PPV_UsePPVModule) {
                                        PaymentConfirmationDialog = new AlertDialog.Builder(TaxiPlexer.this).setIcon(android.R.drawable.ic_dialog_alert).setTitle(
                                                Farsi.Convert(getResources().getString(R.string.Confirmation))).setMessage(Farsi.Convert(getResources().getString(R.string.PaywithVOUCHER))).setPositiveButton(
                                                Farsi.Convert(getResources().getString(R.string.Yes)),
                                                new DialogInterface.OnClickListener() {
                                                    public void onClick(DialogInterface dialog, int id) {
                                                        if (Float.parseFloat(ttfTotal.getText().toString()) >= 0) {
                                                            new Thread(new Runnable() {

                                                                @Override
                                                                public void run() {

                                                                    final RestClient client = new RestClient(AVL_Service.InLoadAPI_URL +  "/PPV/DeductCustomerAmountOnTripCompletion");
                                                                    try {
                                                                        client.AddParam("refid", currentTrip.ConfirmNumber);
                                                                        client.AddParam("amount", ttfTotal.getText().toString());

                                                                        client.AddHeader("Content-Type", "application/json");

                                                                    } catch (JSONException e1) {
                                                                        // TODO Auto-generated catch block
                                                                        e1.printStackTrace();
                                                                    }

                                                                    try {
                                                                        client.Execute(RestClient.RequestMethod.POST);
                                                                        final String response = client.getResponse();

                                                                        if (client.getResponseCode() == 200) {
                                                                            JSONObject mainObject = new JSONObject(response);
//                                                                            final boolean result = mainObject.getBoolean("IsUpdated");


                                                                            runOnUiThread(new Runnable() {
                                                                                public void run() {

                                                                                    if (true) {
                                                                                        runOnUiThread(new Runnable() {
                                                                                            public void run() {
                                                                                                try {
                                                                                                    currentTrip.binprocess = true;
                                                                                                    bMerchantCopyPrinted = true;
                                                                                                    currentTrip.paymentMethod = "Voucher";
                                                                                                    voucherBtn.setEnabled(false);
                                                                                                    cashBtn.setEnabled(false);
                                                                                                    creditBtn.setEnabled(false);
                                                                                                    ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
                                                                                                    // scheduler.schedule(new Runnable() {
                                                                                                    //
                                                                                                    // @Override
                                                                                                    // public void run() {
                                                                                                    //
                                                                                                    // runOnUiThread(new Runnable() {
                                                                                                    // public void run() {
                                                                                                    // voucherBtn.setEnabled(true);
                                                                                                    // }
                                                                                                    // });
                                                                                                    //
                                                                                                    // }
                                                                                                    // }, 10, TimeUnit.SECONDS);

                                                                                                    if (currentTrip.paymentMethod.equalsIgnoreCase("Credit Card") || currentTrip.paymentMethod.equalsIgnoreCase("Cash"))
                                                                                                        currentTrip.paymentMethod = "Voucher";


                                                                                                    if (currentTrip.authCode.trim().length() > 2) {
                                                                                                        AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                                                                                                        builder
                                                                                                                .setIcon(android.R.drawable.ic_dialog_alert)
                                                                                                                .setTitle(Farsi.Convert(getResources().getString(R.string.CreditCardOnHold)))
                                                                                                                .setMessage(Farsi.Convert(getResources().getString(R.string.wantprocessasVOUCHER)))
                                                                                                                .setPositiveButton(Farsi.Convert(getResources().getString(R.string.Yes)), new DialogInterface.OnClickListener() {

                                                                                                                    @Override
                                                                                                                    public void onClick(DialogInterface dialog, int which) {

                                                                                                                        showProgressDialog(Farsi.Convert(getResources().getString(R.string.ProcessingPayment)));
                                                                                                                        sendTripResponse(States.DROPPED);
                                                                                                                        if(!currentTrip.bCopayAllowedOnPaymentScreen){
                                                                                                                            tempFare = "0";
                                                                                                                            tempExtras = "0";
                                                                                                                        } else {
                                                                                                                            String  temptotal = ttfTotal.getText().toString();
                                                                                                                            temptotal = String.valueOf(Float.parseFloat(temptotal) - Float.parseFloat(currentTrip.Copay));
                                                                                                                            ttfTotal.setText(temptotal);
                                                                                                                        }
                                                                                                                        serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                                                                                                                + AVL_Service.pref.getString("LastLongitude", "0")
                                                                                                                                + Constants.COLSEPARATOR
                                                                                                                                + currentTrip.tripNumber
                                                                                                                                + Constants.COLSEPARATOR
                                                                                                                                + "Voucher"
                                                                                                                                + Constants.COLSEPARATOR
                                                                                                                                + String.valueOf(Float.parseFloat(Fare) + Float.parseFloat(tempFare))
                                                                                                                                + Constants.COLSEPARATOR
                                                                                                                                + String.valueOf(Float.parseFloat(Extras) + Float.parseFloat(tempExtras))
                                                                                                                                + Constants.COLSEPARATOR
                                                                                                                                + Tip
                                                                                                                                + Constants.COLSEPARATOR
                                                                                                                                + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                                                                                                                                + Constants.COLSEPARATOR
                                                                                                                                + "0"
                                                                                                                                + Constants.COLSEPARATOR
                                                                                                                                + "0"
                                                                                                                                + Constants.COLSEPARATOR
                                                                                                                                + "0"
                                                                                                                                + Constants.COLSEPARATOR
                                                                                                                                + currentTrip.ConfirmNumber
                                                                                                                                + Constants.COLSEPARATOR
                                                                                                                                + currentTrip.authCode
                                                                                                                                + Constants.COLSEPARATOR
                                                                                                                                + "0"
                                                                                                                                + Constants.COLSEPARATOR
                                                                                                                                + "0"
                                                                                                                                + Constants.COLSEPARATOR
                                                                                                                                + "0"
                                                                                                                                + Constants.COLSEPARATOR
                                                                                                                                + "Driver-"
                                                                                                                                + AVL_Service.pref.getString("DriverID", "unknown")
                                                                                                                                + Constants.COLSEPARATOR
                                                                                                                                + "Success"
                                                                                                                                + Constants.COLSEPARATOR
                                                                                                                                + currentTrip.tripNumber
                                                                                                                                + Constants.COLSEPARATOR
                                                                                                                                + "1"
                                                                                                                                + Constants.COLSEPARATOR
                                                                                                                                + "0"
                                                                                                                                + Constants.COLSEPARATOR
                                                                                                                                + "No"
                                                                                                                                + Constants.COLSEPARATOR
                                                                                                                                + AVL_Service.pref.getString("DriverID", "Driver")
                                                                                                                                + Constants.COLSEPARATOR
                                                                                                                                + "0"
                                                                                                                                + Constants.COLSEPARATOR
                                                                                                                                + "0"
                                                                                                                                + Constants.COLSEPARATOR
                                                                                                                                + MRMS_DateFormat.format(currentTrip.PUTime)
                                                                                                                                + Constants.COLSEPARATOR
                                                                                                                                + ((dFormat.format(Distance).equalsIgnoreCase("0.00")) ? currentTrip.miles : dFormat.format(Distance))
                                                                                                                                + Constants.COLSEPARATOR
                                                                                                                                + ActualPaymentAmount
                                                                                                                                + Constants.COLSEPARATOR
                                                                                                                                + currentTrip.PromotionalCode
                                                                                                                                + Constants.COLSEPARATOR
                                                                                                                                + currentTrip.PromotionalValue, "SDHS", MsgType.Payment, AckType.NEW, MsgValidity.Short, MsgPriority.Highest);
                                                                                                                        receivedPaymentResp("Voucher_Header" + Constants.BODYSEPARATOR + "1^Voucher Payment successful");
                                                                                                                    } // onClick

                                                                                                                })
                                                                                                                .setNegativeButton(Farsi.Convert(getResources().getString(R.string.No)), new DialogInterface.OnClickListener() {

                                                                                                                    @Override
                                                                                                                    public void onClick(DialogInterface dialog, int which) {
                                                                                                                        dialog.dismiss();
                                                                                                                    } // onClick
                                                                                                                }); // updated so, it must enable GPS
                                                                                                        AlertDialog alert = builder.create();
                                                                                                        alert.show();

                                                                                                        dialogFontSize(alert);

                                                                                                    } else {

                                                                                                        showProgressDialog(Farsi.Convert(getResources().getString(R.string.ProcessingPayment)));
                                                                                                        sendTripResponse(States.DROPPED);
                                                                                                        if(!currentTrip.bCopayAllowedOnPaymentScreen){
                                                                                                            tempFare = "0";
                                                                                                            tempExtras = "0";
                                                                                                        } else {
                                                                                                            String  temptotal = ttfTotal.getText().toString();
                                                                                                            temptotal = String.valueOf(Float.parseFloat(temptotal) - Float.parseFloat(currentTrip.Copay));
                                                                                                            ttfTotal.setText(temptotal);
                                                                                                        }
                                                                                                        serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                                                                                                + AVL_Service.pref.getString("LastLongitude", "0")
                                                                                                                + Constants.COLSEPARATOR
                                                                                                                + currentTrip.tripNumber
                                                                                                                + Constants.COLSEPARATOR
                                                                                                                + "Voucher"
                                                                                                                + Constants.COLSEPARATOR
                                                                                                                + String.valueOf(Float.parseFloat(Fare) + Float.parseFloat(tempFare))
                                                                                                                + Constants.COLSEPARATOR
                                                                                                                + String.valueOf(Float.parseFloat(Extras) + Float.parseFloat(tempExtras))
                                                                                                                + Constants.COLSEPARATOR
                                                                                                                + Tip
                                                                                                                + Constants.COLSEPARATOR
                                                                                                                + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                                                                                                                + Constants.COLSEPARATOR
                                                                                                                + "0"
                                                                                                                + Constants.COLSEPARATOR
                                                                                                                + "0"
                                                                                                                + Constants.COLSEPARATOR
                                                                                                                + "0"
                                                                                                                + Constants.COLSEPARATOR
                                                                                                                + currentTrip.ConfirmNumber
                                                                                                                + Constants.COLSEPARATOR
                                                                                                                + currentTrip.authCode
                                                                                                                + Constants.COLSEPARATOR
                                                                                                                + "0"
                                                                                                                + Constants.COLSEPARATOR
                                                                                                                + "0"
                                                                                                                + Constants.COLSEPARATOR
                                                                                                                + "0"
                                                                                                                + Constants.COLSEPARATOR
                                                                                                                + "Driver-"
                                                                                                                + AVL_Service.pref.getString("DriverID", "unknown")
                                                                                                                + Constants.COLSEPARATOR
                                                                                                                + "Success"
                                                                                                                + Constants.COLSEPARATOR
                                                                                                                + currentTrip.tripNumber
                                                                                                                + Constants.COLSEPARATOR
                                                                                                                + "1"
                                                                                                                + Constants.COLSEPARATOR
                                                                                                                + "0"
                                                                                                                + Constants.COLSEPARATOR
                                                                                                                + "No"
                                                                                                                + Constants.COLSEPARATOR
                                                                                                                + AVL_Service.pref.getString("DriverID", "Driver")
                                                                                                                + Constants.COLSEPARATOR
                                                                                                                + "0"
                                                                                                                + Constants.COLSEPARATOR
                                                                                                                + "0"
                                                                                                                + Constants.COLSEPARATOR
                                                                                                                + MRMS_DateFormat.format(currentTrip.PUTime)
                                                                                                                + Constants.COLSEPARATOR
                                                                                                                + ((dFormat.format(Distance).equalsIgnoreCase("0.00")) ? currentTrip.miles : dFormat.format(Distance))
                                                                                                                + Constants.COLSEPARATOR
                                                                                                                + ActualPaymentAmount
                                                                                                                + Constants.COLSEPARATOR
                                                                                                                + currentTrip.PromotionalCode
                                                                                                                + Constants.COLSEPARATOR
                                                                                                                + currentTrip.PromotionalValue, "SDHS", MsgType.Payment, AckType.NEW, MsgValidity.Short, MsgPriority.Highest);
                                                                                                        receivedPaymentResp("Voucher2_Header" + Constants.BODYSEPARATOR + "1^Voucher Payment successful");
                                                                                                    }

                                                                                                } catch (Exception e) {
                                                                                                    handleException("[Exception on discountbtnclick]" + "[createpaymentview]" + "[" + e.getLocalizedMessage() + "]");
                                                                                                }
                                                                                            }
                                                                                        });
                                                                                    } else {
                                                                                        runOnUiThread(new Runnable() {
                                                                                            public void run() {
                                                                                                showToastMessageFromString(Farsi.Convert(getResources().getString(R.string.Not_Enough_Balance)));
                                                                                            }
                                                                                        });
                                                                                    }
                                                                                }
                                                                            });

                                                                        }else {
                                                                            runOnUiThread(new Runnable() {
                                                                                public void run() {
                                                                                    showToastMessageFromString(Farsi.Convert(getResources().getString(R.string.Not_Enough_Balance)));
                                                                                }
                                                                            });
                                                                        }


                                                                    } catch (Exception e) {
                                                                        exception("[Exception on discountbtnclick]" + "[createpaymentview]" + "[" + e.getLocalizedMessage() + "]");
                                                                    }


                                                                }
                                                            }).start();

                                                        }

                                                    }
                                                }).setNegativeButton(Farsi.Convert(getResources().getString(R.string.No)), new DialogInterface.OnClickListener() {
                                            public void onClick(DialogInterface dialog, int id) {
                                                dialog.dismiss();
                                            }
                                        }).create();
                                        PaymentConfirmationDialog.show();

                                        dialogFontSize(PaymentConfirmationDialog);
                                    } else {
                                        PaymentConfirmationDialog = new AlertDialog.Builder(TaxiPlexer.this).setIcon(android.R.drawable.ic_dialog_alert).setTitle(
                                                Farsi.Convert(getResources().getString(R.string.Confirmation))).setMessage(Farsi.Convert(getResources().getString(R.string.PaywithVOUCHER))).setPositiveButton(
                                                Farsi.Convert(getResources().getString(R.string.Yes)),
                                                new DialogInterface.OnClickListener() {
                                                    public void onClick(DialogInterface dialog, int id) {
                                                        if (Float.parseFloat(ttfTotal.getText().toString()) >= 0) {
                                                            try {
                                                                currentTrip.binprocess = true;
                                                                bMerchantCopyPrinted = true;
                                                                currentTrip.paymentMethod = "Voucher";
                                                                voucherBtn.setEnabled(false);
                                                                cashBtn.setEnabled(false);
                                                                creditBtn.setEnabled(false);
                                                                ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
                                                                // scheduler.schedule(new Runnable() {
                                                                //
                                                                // @Override
                                                                // public void run() {
                                                                //
                                                                // runOnUiThread(new Runnable() {
                                                                // public void run() {
                                                                // voucherBtn.setEnabled(true);
                                                                // }
                                                                // });
                                                                //
                                                                // }
                                                                // }, 10, TimeUnit.SECONDS);

                                                                if (currentTrip.paymentMethod.equalsIgnoreCase("Credit Card") || currentTrip.paymentMethod.equalsIgnoreCase("Cash"))
                                                                    currentTrip.paymentMethod = "Voucher";

                                                                if (currentTrip.authCode.trim().length() > 2) {
                                                                    AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                                                                    builder
                                                                            .setIcon(android.R.drawable.ic_dialog_alert)
                                                                            .setTitle(Farsi.Convert(getResources().getString(R.string.CreditCardOnHold)))
                                                                            .setMessage(Farsi.Convert(getResources().getString(R.string.wantprocessasVOUCHER)))
                                                                            .setPositiveButton(Farsi.Convert(getResources().getString(R.string.Yes)), new DialogInterface.OnClickListener() {

                                                                                @Override
                                                                                public void onClick(DialogInterface dialog, int which) {

                                                                                    showProgressDialog(Farsi.Convert(getResources().getString(R.string.ProcessingPayment)));
                                                                                    sendTripResponse(States.DROPPED);
                                                                                    if(!currentTrip.bCopayAllowedOnPaymentScreen){
                                                                                        tempFare = "0";
                                                                                        tempExtras = "0";
                                                                                    } else {
                                                                                        String  temptotal = ttfTotal.getText().toString();
                                                                                        temptotal = String.valueOf(Float.parseFloat(temptotal) - Float.parseFloat(currentTrip.Copay));
                                                                                        ttfTotal.setText(temptotal);
                                                                                    }
                                                                                    serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                                                                            + AVL_Service.pref.getString("LastLongitude", "0")
                                                                                            + Constants.COLSEPARATOR
                                                                                            + currentTrip.tripNumber
                                                                                            + Constants.COLSEPARATOR
                                                                                            + "Voucher"
                                                                                            + Constants.COLSEPARATOR
                                                                                            + String.valueOf(Float.parseFloat(Fare) + Float.parseFloat(tempFare))
                                                                                            + Constants.COLSEPARATOR
                                                                                            + String.valueOf(Float.parseFloat(Extras) + Float.parseFloat(tempExtras))
                                                                                            + Constants.COLSEPARATOR
                                                                                            + Tip
                                                                                            + Constants.COLSEPARATOR
                                                                                            + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                                                                                            + Constants.COLSEPARATOR
                                                                                            + "0"
                                                                                            + Constants.COLSEPARATOR
                                                                                            + "0"
                                                                                            + Constants.COLSEPARATOR
                                                                                            + "0"
                                                                                            + Constants.COLSEPARATOR
                                                                                            + currentTrip.ConfirmNumber
                                                                                            + Constants.COLSEPARATOR
                                                                                            + currentTrip.authCode
                                                                                            + Constants.COLSEPARATOR
                                                                                            + "0"
                                                                                            + Constants.COLSEPARATOR
                                                                                            + "0"
                                                                                            + Constants.COLSEPARATOR
                                                                                            + "0"
                                                                                            + Constants.COLSEPARATOR
                                                                                            + "Driver-"
                                                                                            + AVL_Service.pref.getString("DriverID", "unknown")
                                                                                            + Constants.COLSEPARATOR
                                                                                            + "Success"
                                                                                            + Constants.COLSEPARATOR
                                                                                            + currentTrip.tripNumber
                                                                                            + Constants.COLSEPARATOR
                                                                                            + "1"
                                                                                            + Constants.COLSEPARATOR
                                                                                            + "0"
                                                                                            + Constants.COLSEPARATOR
                                                                                            + "No"
                                                                                            + Constants.COLSEPARATOR
                                                                                            + AVL_Service.pref.getString("DriverID", "Driver")
                                                                                            + Constants.COLSEPARATOR
                                                                                            + "0"
                                                                                            + Constants.COLSEPARATOR
                                                                                            + "0"
                                                                                            + Constants.COLSEPARATOR
                                                                                            + MRMS_DateFormat.format(currentTrip.PUTime)
                                                                                            + Constants.COLSEPARATOR
                                                                                            + ((dFormat.format(Distance).equalsIgnoreCase("0.00")) ? currentTrip.miles : dFormat.format(Distance))
                                                                                            + Constants.COLSEPARATOR
                                                                                            + ActualPaymentAmount
                                                                                            + Constants.COLSEPARATOR
                                                                                            + currentTrip.PromotionalCode
                                                                                            + Constants.COLSEPARATOR
                                                                                            + currentTrip.PromotionalValue, "SDHS", MsgType.Payment, AckType.NEW, MsgValidity.Short, MsgPriority.Highest);

                                                                                    receivedPaymentResp("Voucher_Header" + Constants.BODYSEPARATOR + "1^Voucher Payment successful");
                                                                                } // onClick

                                                                            })
                                                                            .setNegativeButton(Farsi.Convert(getResources().getString(R.string.No)), new DialogInterface.OnClickListener() {

                                                                                @Override
                                                                                public void onClick(DialogInterface dialog, int which) {
                                                                                    dialog.dismiss();
                                                                                } // onClick
                                                                            }); // updated so, it must enable GPS
                                                                    AlertDialog alert = builder.create();
                                                                    alert.show();

                                                                    dialogFontSize(alert);

                                                                } else {

                                                                    showProgressDialog(Farsi.Convert(getResources().getString(R.string.ProcessingPayment)));
                                                                    sendTripResponse(States.DROPPED);
                                                                    if(!currentTrip.bCopayAllowedOnPaymentScreen){
                                                                        tempFare = "0";
                                                                        tempExtras = "0";
                                                                    } else {
                                                                        String  temptotal = ttfTotal.getText().toString();
                                                                        temptotal = String.valueOf(Float.parseFloat(temptotal) - Float.parseFloat(currentTrip.Copay));
                                                                        ttfTotal.setText(temptotal);
                                                                    }
                                                                    serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                                                            + AVL_Service.pref.getString("LastLongitude", "0")
                                                                            + Constants.COLSEPARATOR
                                                                            + currentTrip.tripNumber
                                                                            + Constants.COLSEPARATOR
                                                                            + "Voucher"
                                                                            + Constants.COLSEPARATOR
                                                                            + String.valueOf(Float.parseFloat(Fare) + Float.parseFloat(tempFare))
                                                                            + Constants.COLSEPARATOR
                                                                            + String.valueOf(Float.parseFloat(Extras) + Float.parseFloat(tempExtras))
                                                                            + Constants.COLSEPARATOR
                                                                            + Tip
                                                                            + Constants.COLSEPARATOR
                                                                            + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                                                                            + Constants.COLSEPARATOR
                                                                            + "0"
                                                                            + Constants.COLSEPARATOR
                                                                            + "0"
                                                                            + Constants.COLSEPARATOR
                                                                            + "0"
                                                                            + Constants.COLSEPARATOR
                                                                            + currentTrip.ConfirmNumber
                                                                            + Constants.COLSEPARATOR
                                                                            + currentTrip.authCode
                                                                            + Constants.COLSEPARATOR
                                                                            + "0"
                                                                            + Constants.COLSEPARATOR
                                                                            + "0"
                                                                            + Constants.COLSEPARATOR
                                                                            + "0"
                                                                            + Constants.COLSEPARATOR
                                                                            + "Driver-"
                                                                            + AVL_Service.pref.getString("DriverID", "unknown")
                                                                            + Constants.COLSEPARATOR
                                                                            + "Success"
                                                                            + Constants.COLSEPARATOR
                                                                            + currentTrip.tripNumber
                                                                            + Constants.COLSEPARATOR
                                                                            + "1"
                                                                            + Constants.COLSEPARATOR
                                                                            + "0"
                                                                            + Constants.COLSEPARATOR
                                                                            + "No"
                                                                            + Constants.COLSEPARATOR
                                                                            + AVL_Service.pref.getString("DriverID", "Driver")
                                                                            + Constants.COLSEPARATOR
                                                                            + "0"
                                                                            + Constants.COLSEPARATOR
                                                                            + "0"
                                                                            + Constants.COLSEPARATOR
                                                                            + MRMS_DateFormat.format(currentTrip.PUTime)
                                                                            + Constants.COLSEPARATOR
                                                                            + ((dFormat.format(Distance).equalsIgnoreCase("0.00")) ? currentTrip.miles : dFormat.format(Distance))
                                                                            + Constants.COLSEPARATOR
                                                                            + ActualPaymentAmount
                                                                            + Constants.COLSEPARATOR
                                                                            + currentTrip.PromotionalCode
                                                                            + Constants.COLSEPARATOR
                                                                            + currentTrip.PromotionalValue, "SDHS", MsgType.Payment, AckType.NEW, MsgValidity.Short, MsgPriority.Highest);

                                                                    receivedPaymentResp("Voucher2_Header" + Constants.BODYSEPARATOR + "1^Voucher Payment successful");
                                                                }

                                                            } catch (Exception e) {
                                                                handleException("[Exception on discountbtnclick]" + "[createpaymentview]" + "[" + e.getLocalizedMessage() + "]");
                                                            }
                                                        }
                                                    }
                                                }).setNegativeButton(Farsi.Convert(getResources().getString(R.string.No)), new DialogInterface.OnClickListener() {
                                            public void onClick(DialogInterface dialog, int id) {
                                                dialog.dismiss();
                                            }
                                        }).create();
                                        PaymentConfirmationDialog.show();

                                        dialogFontSize(PaymentConfirmationDialog);
                                    }
                                } else
                                    // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.TipAmountisgreater)),
                                    // Toast.LENGTH_LONG).show();
                                    showToastMessage(R.string.TipAmountisgreater);
                            } else
                                // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.NoTripAssigned)), Toast.LENGTH_LONG).show();
                                showToastMessage(R.string.NoTripAssigned);
                        } else {
                            AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this).setIcon(android.R.drawable.ic_dialog_alert).setTitle(
                                    Farsi.Convert(getResources().getString(R.string.Alert))).setMessage(R.string.SignatureRequired).setCancelable(true).setPositiveButton(
                                    Farsi.Convert(getResources().getString(R.string.ok)),
                                    new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int which) {
                                            dialog.dismiss();
                                        }
                                    });
                            AlertDialog alert = builder.create();
                            alert.show();

                            dialogFontSize(alert);
                        }
                    }
                } catch (Exception e) {
                    handleException("[Exception on voucherbtnclick]" + "[createpaymentview]" + "[" + e.getLocalizedMessage() + "]");
                }
            }
        });

        buttonRow.addView(cashBtn);
        buttonRow.addView(creditBtn);
        buttonRow.addView(voucherBtn);

        if (!AVL_Service.SDShowVoucherButton)
            voucherBtn.setVisibility(View.GONE);

        if (!AVL_Service.CreditCardFeature)
            creditBtn.setVisibility(View.GONE);

        LinearLayout lowerPanel = new LinearLayout(this);
        lowerPanel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        lowerPanel.setOrientation(LinearLayout.VERTICAL);
        lowerPanel.setGravity(Gravity.BOTTOM);
        lowerPanel.addView(signatureRow);
        lowerPanel.addView(buttonRow);

        upperPanel.addView(emergencyButtonRow);
        upperPanel.addView(headerRow);
        upperPanel.addView(line);
        upperPanel.addView(creditCardRow);
        if (AVL_Service.pref.getBoolean("BlueBambooDevice", false))
            SwipeBtn.setVisibility(Button.VISIBLE);
        else
            SwipeBtn.setVisibility(Button.GONE);

        if (AVL_Service.pref.getBoolean("AudiojJackPeripheral", false))
            EnableAJRBtn.setVisibility(Button.VISIBLE);
        else
            EnableAJRBtn.setVisibility(Button.GONE);

        if (AVL_Service.pref.getBoolean("IDTech", false))
            swipeButtonForIDTech.setVisibility(Button.VISIBLE);
        else
            swipeButtonForIDTech.setVisibility(Button.GONE);

        upperPanel.addView(swipeRow);
        if (AVL_Service.pref.getBoolean("BluetoothMeter", false))
            upperPanel.addView(mileageRow);
        upperPanel.addView(fareRow);
        upperPanel.addView(extrasRow);
        if (currentTrip.tipApplicable) {
            if (currentTrip.tipAmount1 == 0 && currentTrip.tipAmount2 == 0 && currentTrip.tipAmount3 == 0 && currentTrip.tipAmount4 == 0) {
            } else {
                upperPanel.addView(tipRow);
                if (AVL_Service.tipVoiceEnabled)
                    if (TTS)
                        if (!AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource))
                            onRadioClick(getResources().getString(R.string.WouldYouLikeToApplyTip));
            }

        } else
            ttfTip.setFocusable(false);

        if (AVL_Service.ShowSDOnlyFareOnPaymentScreen) {
            totalRow.setVisibility(LinearLayout.GONE);
            fundingSource.setVisibility(LinearLayout.GONE);
            swipeRow.setVisibility(LinearLayout.GONE);
            mileageRow.setVisibility(LinearLayout.GONE);
            // fareRow.setVisibility(LinearLayout.GONE);
            extrasRow.setVisibility(LinearLayout.GONE);
            tipRow.setVisibility(LinearLayout.GONE);
            creditCardRow.setVisibility(LinearLayout.GONE);
            estFare.setVisibility(TextView.GONE);
            lblFare.setTextSize(labelFont + 5);
            ttfFare.setTextSize(labelFont + 5);
            lblFare.setGravity(Gravity.CENTER);
        } else {
            if (currentTrip.paymentMethod.equalsIgnoreCase("Call& R-V")) {
                ttfCCExpiry.setText("");
                ttfCCNumber.setText("");
            }

            if (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource)) {
                ttfCCNumber.setEnabled(false);
                ttfCCExpiry.setEnabled(false);
                creditBtn.setEnabled(false);
                cashBtn.setEnabled(false);

                fareRow.setVisibility(View.GONE);
                extrasRow.setVisibility(View.GONE);
                totalRow.setVisibility(View.GONE);
                if (currentTrip.tipApplicable)
                    tipRow.setVisibility(View.GONE);
            }
        }
        upperPanel.addView(totalRow);
        if (AVL_Service.ShowClientPhoneNoOnReceipt)
            upperPanel.addView(PhoneRow);
        if (AVL_Service.Allow_Promotion_In_MARS_SDApp_Both != 0) {
            upperPanel.addView(PromotionRow);
        }

        if(currentTrip.bCopayAllowedOnPaymentScreen) {
            upperPanel.addView(CopayRow);
        }
        upperPanel.addView(FundingSource);
        if (AVL_Service.enableDialiePackageOnDevice)
            upperPanel.addView(SendFare);
        panel.addView(upperPanel);
        panel.addView(lowerPanel);

        panel.setScrollContainer(true);

        registerForContextMenu(panel);
        // Add scroll view
        ScrollView scrollPanel = new ScrollView(this);
        scrollPanel.setVerticalScrollBarEnabled(false);
        scrollPanel.setHorizontalScrollBarEnabled(false);
        scrollPanel.addView(panel);
        scrollPanel.setFillViewport(true);

        panel.setId(PAYMENTVIEW);
        scrollPanel.setId(PAYMENTVIEW);

        return scrollPanel;
    }
	/*--------------------------------------------------------------onCreateContextMenu---------------------------------------------------------------*/

    @Override
    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
        try {
            switch (v.getId()) {
                case PAYMENTVIEW :

                    SpannableString ss1 = new SpannableString("Print");

                    SpannableString ss2 = new SpannableString("Trip List");
                    SpannableString ss3 = new SpannableString("Connect Bluetooth");
                    switch (Integer.parseInt(Fonts[AVL_Service.pref.getInt("FontPosition", 4)])) {
                        case -8 :
                            ss1.setSpan(new RelativeSizeSpan(.25f), 0, ss1.length(), 0);
                            ss2.setSpan(new RelativeSizeSpan(.25f), 0, ss2.length(), 0);
                            ss3.setSpan(new RelativeSizeSpan(.25f), 0, ss3.length(), 0);
                            break;
                        case -6 :
                            ss1.setSpan(new RelativeSizeSpan(.50f), 0, ss1.length(), 0);
                            ss2.setSpan(new RelativeSizeSpan(.50f), 0, ss2.length(), 0);
                            ss3.setSpan(new RelativeSizeSpan(.50f), 0, ss3.length(), 0);
                            break;
                        case -4 :
                            ss1.setSpan(new RelativeSizeSpan(.75f), 0, ss1.length(), 0);
                            ss2.setSpan(new RelativeSizeSpan(.75f), 0, ss2.length(), 0);
                            ss3.setSpan(new RelativeSizeSpan(.75f), 0, ss3.length(), 0);
                            break;
                        case -2 :
                            ss1.setSpan(new RelativeSizeSpan(1f), 0, ss1.length(), 0);
                            ss2.setSpan(new RelativeSizeSpan(1f), 0, ss2.length(), 0);
                            ss3.setSpan(new RelativeSizeSpan(1f), 0, ss3.length(), 0);
                            break;
                        case 0 :
                            ss1.setSpan(new RelativeSizeSpan(1.25f), 0, ss1.length(), 0);
                            ss2.setSpan(new RelativeSizeSpan(1.25f), 0, ss2.length(), 0);
                            ss3.setSpan(new RelativeSizeSpan(1.25f), 0, ss3.length(), 0);
                            break;
                        case 2 :
                            ss1.setSpan(new RelativeSizeSpan(1.50f), 0, ss1.length(), 0);
                            ss2.setSpan(new RelativeSizeSpan(1.50f), 0, ss2.length(), 0);
                            ss3.setSpan(new RelativeSizeSpan(1.50f), 0, ss3.length(), 0);
                            break;
                        case 4 :
                            ss1.setSpan(new RelativeSizeSpan(1.75f), 0, ss1.length(), 0);
                            ss2.setSpan(new RelativeSizeSpan(1.75f), 0, ss2.length(), 0);
                            ss3.setSpan(new RelativeSizeSpan(1.75f), 0, ss3.length(), 0);
                            break;
                        case 6 :
                            ss1.setSpan(new RelativeSizeSpan(2.0f), 0, ss1.length(), 0);
                            ss2.setSpan(new RelativeSizeSpan(2.0f), 0, ss2.length(), 0);
                            ss3.setSpan(new RelativeSizeSpan(2.0f), 0, ss3.length(), 0);
                            break;
                        case 8 :
                            ss1.setSpan(new RelativeSizeSpan(2.25f), 0, ss1.length(), 0);
                            ss2.setSpan(new RelativeSizeSpan(2.25f), 0, ss2.length(), 0);
                            ss3.setSpan(new RelativeSizeSpan(2.25f), 0, ss3.length(), 0);
                            break;
                    }
                    CharSequence[] Paymentitems = {ss1, ss2, ss3};
                    AlertDialog.Builder builder = new AlertDialog.Builder(this);
                    builder.setTitle(Farsi.Convert(getResources().getString(R.string.Actions))).setItems(Paymentitems, new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                            switch (which) {

                                case ACTION_PRINT :
                                    reciept = "";

                                    String helpline = AVL_Service.ASCS_HelpLine_Number;
                                    if (AVL_Service.ASCS_HelpLine_Number.length() < 10) {
                                        helpline = "0" + helpline;
                                    }

                                    String temp = helpline;
                                    if (helpline.length() == 10) {
                                        helpline = temp.substring(0, 3) + "-" + temp.substring(3, 6) + "-" + temp.substring(6, 10);

                                    }
                                    if (!AVL_Service.pref.getBoolean("VeriFoneDevice", false)) {
                                        reciept = reciept + helpline;
                                    }
                                    if (!AVL_Service.pref.getBoolean("VeriFoneDevice", false)) {
                                        if (!AVL_Service.CompanyURL.equalsIgnoreCase("")) {
                                            reciept = reciept + "\n" + AVL_Service.CompanyURL;
                                        }
                                    }

                                    Date date = new Date();
                                    reciept = reciept + "\n\nVeh #"
                                            + AVL_Service.pref.getString("VehicleID", " ")
                                            + "\nDRIVER #"
                                            + AVL_Service.pref.getString("DriverID", " ")
                                            + "\nDate :"
                                            + displayDateFormat.format(date)
                                            + "\nStart :"
                                            + displayTimeFormat.format(currentTrip.PUTime)
                                            + "\nEnd :"
                                            + displayTimeFormat.format(currentTrip.DOTime)
                                            + "\nMiles :"
                                            + dFormat.format(Distance)
                                            + "\nCNF#  :"
                                            + currentTrip.ConfirmNumber;

                                    if (currentTrip.paymentMethod.contains("Credit"))
                                        reciept = reciept + "\n\nCC# xxx"
                                                + (currentTrip.creditCardNum.length() > 12 ? currentTrip.creditCardNum.substring(12) : "")
                                                + "\nAuth :"
                                                + currentTrip.authCode;

                                    else if (currentTrip.paymentMethod.contains("Call& R-V"))
                                        reciept = reciept + "\n\nCC# xxx"
                                                + (currentTrip.creditCardNum.length() > 12 ? currentTrip.creditCardNum.substring(12) : "")
                                                + "\nAuth :"
                                                + currentTrip.authCode
                                                + "\nPaid :$"
                                                + dFormat.format(Float.parseFloat(mjm_CardAmt.trim().equalsIgnoreCase("") ? "0.00" : Float.toString(total - Float.parseFloat(mjm_RemainingAmt))))
                                                + "\nOwed :$"
                                                + dFormat.format(Float.parseFloat(mjm_RemainingAmt.trim().equalsIgnoreCase("") ? "0.00" : dFormat.format(Float.parseFloat(mjm_RemainingAmt))))
                                                + "\nCC Bal :$"
                                                + dFormat.format(Float.parseFloat(mjm_Balance.trim().equalsIgnoreCase("") ? "0.00" : dFormat.format(Float.parseFloat(mjm_Balance))));
                                    if ((Float.parseFloat(Tip.trim().equalsIgnoreCase("") ? "0.0" : Tip) == 0)) {
                                        reciept = reciept + "\n\nFare  :$"
                                                + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(Float.parseFloat(Fare
                                                .trim()
                                                .equalsIgnoreCase("") ? "0.00" : Fare)))
                                                + "\nExtras:$"
                                                + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(ParseFloatFromString(Extras)));

                                        if (currentTrip.PromotionalValue > 0) {
                                            reciept = reciept + "\nDiscount:$"
                                                    + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(currentTrip.PromotionalValue));
                                        }

                                        reciept = reciept + "\n\nSub Total:$"
                                                + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(Math
                                                .round((ParseFloatFromString(Extras) + ParseFloatFromString(Fare) - currentTrip.PromotionalValue) * 100.0) / 100.0))
                                                + "\n\nTip :"
                                                + (Float.parseFloat(Tip.trim().equalsIgnoreCase("") ? "0.0" : Tip) == 0 ? "_____" : "$" + dFormat.format(ParseFloatFromString(Tip)))
                                                + "\n\nTotal :"
                                                + (Float.parseFloat(Tip.trim().equalsIgnoreCase("") ? "0.0" : Tip) == 0 ? "_____" : "$" + dFormat.format(total));
                                    } else {
                                        reciept = reciept + "\n\nFare  :$"
                                                + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(Float.parseFloat(Fare
                                                .trim()
                                                .equalsIgnoreCase("") ? "0.0" : Fare)))
                                                + "\nExtras:$"
                                                + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(ParseFloatFromString(Extras)))
                                                + "\nTip $:"
                                                + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(ParseFloatFromString(Tip)));
                                        if (currentTrip.PromotionalValue > 0) {
                                            reciept = reciept + "\nDiscount:$"
                                                    + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(currentTrip.PromotionalValue));
                                        }
                                        reciept = reciept + "\n\nTotal $:" + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(total));
                                    }

                                    if (AVL_Service.ShowClientPhoneNoOnReceipt) {
                                        if (ttfCustomerPhoneNo != null)
                                            currentTrip.clientPhoneNumber = ttfCustomerPhoneNo.getText().toString();
                                        reciept = reciept + "\n\n" + currentTrip.clientPhoneNumber.trim() + "\n\n";

                                    } else
                                        reciept = reciept + "\n\n";

                                    reciept = reciept + "X________\nMerchant Copy\n\nTHANK YOU!";

                                    String CompanyName = null;
                                    if (AVL_Service.CompanyName_Receipt.length() > 0) {
                                        CompanyName = AVL_Service.pref.getString("Company", "Payment Receipt");
                                        AVL_Service.pref.edit().putString("Company", AVL_Service.CompanyName_Receipt).commit();
                                    }
                                    if (!AVL_Service.pref.getBoolean("VeriFoneDevice", false)) {
                                        reciept = AVL_Service.pref.getString("Company", "Payment Receipt") + "\n" + reciept;
                                    } else {
                                        int companyNameAllowedLength = 255 - reciept.length() + 1;
                                        reciept = (AVL_Service.pref.getString("Company", "Payment Receipt").length() <= companyNameAllowedLength ? AVL_Service.pref.getString(
                                                "Company",
                                                "Payment Receipt") : (AVL_Service.pref.getString("Company", "Payment Receipt").substring(0, companyNameAllowedLength - 1))) + reciept;
                                    }
                                    if (AVL_Service.CompanyName_Receipt.length() > 0) {
                                        AVL_Service.pref.edit().putString("Company", CompanyName).commit();
                                    }

                                    if (AVL_Service.pref.getBoolean("BlueBambooDevice", false)) {
                                        if (bluebambooPrinter == null || !bluebambooPrinter.isConnectionAlive()) {
                                            showPrinterDialog();

                                            isPrinted = bluebambooPrinter.print(reciept);
                                            // if (bMerchantCopyPrinted == true)
                                            // handlePrinterResp();
                                            // else {
                                            // bMerchantCopyPrinted = true;
                                            // cashBtn.setEnabled(true);
                                            // creditBtn.setEnabled(true);
                                            // voucherBtn.setEnabled(true);
                                            // }
                                        } else {
                                            isPrinted = bluebambooPrinter.print(reciept);

                                            // if (bMerchantCopyPrinted == true)
                                            // handlePrinterResp();
                                            // else {
                                            // bMerchantCopyPrinted = true;
                                            // cashBtn.setEnabled(true);
                                            // creditBtn.setEnabled(true);
                                            // voucherBtn.setEnabled(true);
                                            // }
                                        }

                                    } else if (AVL_Service.pref.getBoolean("BluetoothMeter", false)) {
                                        if (meterType().equalsIgnoreCase("centrodyne")) {
                                            if (reciept.length() > 127) {
                                                reciept = "2" + reciept;
                                                taxiMeterReciept = new PrinterMessage(reciept, meterType());
                                                taxiMeterReciept2 = null;
                                            } else {
                                                int lReceiptLength = reciept.length();
                                                int lLastNewLineIndexofFirstReceipt = 0;
                                                int lLastNewLineIndexof2ndReceipt = 0;
                                                String lReceipt = reciept.substring(0, 127);
                                                lLastNewLineIndexofFirstReceipt = lReceipt.lastIndexOf('\n');
                                                lReceipt = reciept.substring(0, lLastNewLineIndexofFirstReceipt);
                                                lReceipt = "2" + lReceipt + "\n_______";
                                                taxiMeterReciept = new PrinterMessage(lReceipt, meterType());
                                                // 2nd
                                                if (lReceiptLength >= lLastNewLineIndexofFirstReceipt + 128) {
                                                    lReceipt = reciept.substring(lLastNewLineIndexofFirstReceipt, lLastNewLineIndexofFirstReceipt + 128);
                                                    lLastNewLineIndexof2ndReceipt = lReceipt.lastIndexOf('\n');
                                                    lReceipt = reciept.substring(lLastNewLineIndexofFirstReceipt, lLastNewLineIndexofFirstReceipt + lLastNewLineIndexof2ndReceipt);
                                                    lReceipt = "2" + lReceipt + "\n_______";
                                                    taxiMeterReciept2 = new PrinterMessage(lReceipt, meterType());
                                                    // 3rd

                                                    lReceipt = reciept.substring(lLastNewLineIndexofFirstReceipt + lLastNewLineIndexof2ndReceipt, lReceiptLength);
                                                    lReceipt = "2" + lReceipt + "\n_______";
                                                    taxiMeterReciept3 = new PrinterMessage(lReceipt, meterType());
                                                } else {
                                                    lReceipt = reciept.substring(lLastNewLineIndexofFirstReceipt, lReceiptLength);
                                                    lReceipt = "2" + lReceipt + "\n_______";
                                                    taxiMeterReciept2 = new PrinterMessage(lReceipt, meterType());
                                                    taxiMeterReciept3 = new PrinterMessage("2", meterType());
                                                }
                                            }
                                        } else if (AVL_Service.pref.getBoolean("VeriFoneDevice", false)) {
                                            reciept = "2" + reciept;
                                            taxiMeterReciept = new PrinterMessage(reciept, meterType());
                                        } else {

                                            if (reciept.length() < 127) {
                                                taxiMeterReciept = new PrinterMessage(reciept, meterType());
                                                taxiMeterReciept2 = null;
                                            } else {
                                                int lReceiptLength = reciept.length();
                                                int lLastNewLineIndexofFirstReceipt = 0;
                                                int lLastNewLineIndexof2ndReceipt = 0;
                                                String lReceipt = reciept.substring(0, 127);
                                                lLastNewLineIndexofFirstReceipt = lReceipt.lastIndexOf('\n');
                                                lReceipt = reciept.substring(0, lLastNewLineIndexofFirstReceipt);
                                                taxiMeterReciept = new PrinterMessage(lReceipt, meterType());
                                                // 2nd
                                                if (lReceiptLength >= lLastNewLineIndexofFirstReceipt + 128) {
                                                    lReceipt = reciept.substring(lLastNewLineIndexofFirstReceipt, lLastNewLineIndexofFirstReceipt + 128);
                                                    lLastNewLineIndexof2ndReceipt = lReceipt.lastIndexOf('\n');
                                                    lReceipt = reciept.substring(lLastNewLineIndexofFirstReceipt, lLastNewLineIndexofFirstReceipt + lLastNewLineIndexof2ndReceipt);
                                                    taxiMeterReciept2 = new PrinterMessage(lReceipt, meterType());
                                                    // 3rd

                                                    lReceipt = reciept.substring(lLastNewLineIndexofFirstReceipt + lLastNewLineIndexof2ndReceipt, lReceiptLength);
                                                    taxiMeterReciept3 = new PrinterMessage(lReceipt, meterType());
                                                } else {
                                                    lReceipt = reciept.substring(lLastNewLineIndexofFirstReceipt, lReceiptLength);
                                                    taxiMeterReciept2 = new PrinterMessage(lReceipt, meterType());
                                                    taxiMeterReciept3 = new PrinterMessage("", meterType());
                                                }
                                            }
                                        }

                                        if (taxiMeterPrinter != null) {
                                            if (taxiMeterPrinter.isConnectionAlive()) {
                                                isPrinted = taxiMeterPrinter.write(taxiMeterReciept);
                                                if (meterType().equalsIgnoreCase("centrodyne")) {
                                                    int Printertime = 0;
                                                    if (taxiMeterReciept2 != null && Printertime == 0) {

                                                        Date dt = new Date(System.currentTimeMillis());
                                                        boolean ischeck = true;
                                                        while (ischeck) {
                                                            Date dt2 = new Date(System.currentTimeMillis());
                                                            long difference = dt2.getTime() - dt.getTime();
                                                            if (difference > 3000)
                                                                break;
                                                        }
                                                        taxiMeterPrinter.FlushPrinterDataFromBuffer();

                                                        boolean is2nd = taxiMeterPrinter.write(taxiMeterReciept2);
                                                        if (is2nd) {
                                                            taxiMeterReciept2 = null;
                                                            Printertime = 1;
                                                        }

                                                    }
                                                    if (taxiMeterReciept3 != null && taxiMeterReciept2 == null && Printertime == 1) {

                                                        Date dt1 = new Date(System.currentTimeMillis());
                                                        boolean ischeck1 = true;
                                                        while (ischeck1) {
                                                            Date dt2 = new Date(System.currentTimeMillis());
                                                            long difference = dt2.getTime() - dt1.getTime();
                                                            if (difference > 3000)
                                                                break;
                                                        }
                                                        taxiMeterPrinter.FlushPrinterDataFromBuffer();

                                                        boolean is3rd = taxiMeterPrinter.write(taxiMeterReciept3);
                                                        if (is3rd) {
                                                            taxiMeterReciept3 = null;
                                                            Printertime = 0;
                                                        }

                                                    }
                                                }

                                                // if (bMerchantCopyPrinted == true)
                                                // handlePrinterResp();
                                                // else {
                                                // bMerchantCopyPrinted = true;
                                                // cashBtn.setEnabled(true);
                                                // creditBtn.setEnabled(true);
                                                // voucherBtn.setEnabled(true);
                                                // }
                                            } else
                                                showPrinterDialog();
                                        } else if (Meter != null && Meter.isConnectionAlive()) {
                                            taxiMeterPrinter = Meter;
                                            taxiPrinter = taxiMeter;
                                            AVL_Service.pref.edit().putString("PrinterAddress", AVL_Service.pref.getString("MeterAddress", "")).commit();
                                            isPrinted = taxiMeterPrinter.write(taxiMeterReciept);
                                            if (meterType().equalsIgnoreCase("centrodyne")) {
                                                int Printertime = 0;
                                                if (taxiMeterReciept2 != null && Printertime == 0) {

                                                    Date dt = new Date(System.currentTimeMillis());
                                                    boolean ischeck = true;
                                                    while (ischeck) {
                                                        Date dt2 = new Date(System.currentTimeMillis());
                                                        long difference = dt2.getTime() - dt.getTime();
                                                        if (difference > 3000)
                                                            break;
                                                    }
                                                    taxiMeterPrinter.FlushPrinterDataFromBuffer();

                                                    boolean is2nd = taxiMeterPrinter.write(taxiMeterReciept2);
                                                    if (is2nd) {
                                                        taxiMeterReciept2 = null;
                                                        Printertime = 1;
                                                    }

                                                }
                                                if (taxiMeterReciept3 != null && taxiMeterReciept2 == null && Printertime == 1) {

                                                    Date dt1 = new Date(System.currentTimeMillis());
                                                    boolean ischeck1 = true;
                                                    while (ischeck1) {
                                                        Date dt2 = new Date(System.currentTimeMillis());
                                                        long difference = dt2.getTime() - dt1.getTime();
                                                        if (difference > 3000)
                                                            break;
                                                    }
                                                    taxiMeterPrinter.FlushPrinterDataFromBuffer();

                                                    boolean is3rd = taxiMeterPrinter.write(taxiMeterReciept3);
                                                    if (is3rd) {
                                                        taxiMeterReciept3 = null;
                                                        Printertime = 0;
                                                    }

                                                }
                                            }

                                            // if (bMerchantCopyPrinted == true)
                                            // handlePrinterResp();
                                            // else {
                                            // bMerchantCopyPrinted = true;
                                            // cashBtn.setEnabled(true);
                                            // creditBtn.setEnabled(true);
                                            // voucherBtn.setEnabled(true);
                                            // }
                                        } else
                                            showPrinterDialog();
                                    } else {
                                        isPrinted = true;

                                        // if (bMerchantCopyPrinted == true)
                                        // handlePrinterResp();
                                        // else {
                                        // bMerchantCopyPrinted = true;
                                        // cashBtn.setEnabled(true);
                                        // creditBtn.setEnabled(true);
                                        // voucherBtn.setEnabled(true);
                                        // }

                                    }

                                    break;
                                case ACTION_TripList :
                                    isPrinted = true;
                                    handlePrinterResp();
                                    break;
                                case ACTION_CONNECTBT :
                                    showPrinterDialog();
                                    break;
                            }
                        }
                    });

                    AlertDialog alert = builder.create();
                    alert.show();

                    dialogFontSize(alert);

                    break;

                case ONDEMANDWALL :

                    final AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) menuInfo;
                    // final String TripNumber = v.getTag().toString();
                    if ((!AVL_Service.PPV_UsePPVModule) || (AVL_Service.PPV_UsePPVModule && (!BalanceCode.equalsIgnoreCase("2")))) {
                        if (!IsSelectedTripTimeExpired(info.targetView.getTag().toString())) {
                            SpannableString ss4 = new SpannableString(WALL_ACTIONS[0]);
                            switch (Integer.parseInt(Fonts[AVL_Service.pref.getInt("FontPosition", 4)])) {
                                case -8 :
                                    ss4.setSpan(new RelativeSizeSpan(.25f), 0, ss4.length(), 0);

                                    break;
                                case -6 :
                                    ss4.setSpan(new RelativeSizeSpan(.50f), 0, ss4.length(), 0);

                                    break;
                                case -4 :
                                    ss4.setSpan(new RelativeSizeSpan(.75f), 0, ss4.length(), 0);

                                    break;
                                case -2 :
                                    ss4.setSpan(new RelativeSizeSpan(1f), 0, ss4.length(), 0);

                                    break;
                                case 0 :
                                    ss4.setSpan(new RelativeSizeSpan(1.25f), 0, ss4.length(), 0);

                                    break;
                                case 2 :
                                    ss4.setSpan(new RelativeSizeSpan(1.50f), 0, ss4.length(), 0);

                                    break;
                                case 4 :
                                    ss4.setSpan(new RelativeSizeSpan(1.75f), 0, ss4.length(), 0);

                                    break;
                                case 6 :
                                    ss4.setSpan(new RelativeSizeSpan(2.0f), 0, ss4.length(), 0);

                                    break;
                                case 8 :
                                    ss4.setSpan(new RelativeSizeSpan(2.25f), 0, ss4.length(), 0);

                                    break;
                            }
                            CharSequence[] Wallitems = {ss4};
                            AlertDialog.Builder builder1 = new AlertDialog.Builder(this);
                            builder1.setTitle(Farsi.Convert(getResources().getString(R.string.TripOptions))).setItems(Wallitems, new DialogInterface.OnClickListener() {
                                public void onClick(DialogInterface dialog, int which) {
                                    dialog.dismiss();
                                    switch (which) {
                                        case 0 :

                                            serviceHandle.sendMessageToServer(info.targetView.getTag().toString(), "SDHS", MsgType.SDTRIPDTLREQ, AckType.NEW, MsgValidity.Medium, MsgPriority.Normal);
                                            showToastMessageFromString(getResources().getString(R.string.PerformTripRequest) + "\n"
                                                    + getResources().getString(R.string.TripNNumber)
                                                    + " = "
                                                    + info.targetView.getTag().toString());
                                            // Toast.makeText(
                                            // TaxiPlexer.this,
                                            // Farsi.Convert(getResources().getString(R.string.PerformTripRequest)) + "\n"
                                            // + Farsi.Convert(getResources().getString(R.string.TripNNumber))
                                            // + " = "
                                            // + info.targetView.getTag().toString(),
                                            // Toast.LENGTH_LONG).show();

                                            isWallTripResponse = "Y";
                                            AVL_Service.pref.edit().putString("LastWallTrip", info.targetView.getTag().toString().trim()).commit();
                                            break;
                                    }
                                }
                            });
                            AlertDialog alert1 = builder1.create();
                            alert1.show();

                            dialogFontSize(alert1);
                        }
                    } else if (AVL_Service.PPV_UsePPVModule && (BalanceCode.equalsIgnoreCase("2"))) {
                        AlertDialog.Builder builder2 = new AlertDialog.Builder(this)
                                .setIcon(android.R.drawable.ic_dialog_alert)
                                .setTitle(Farsi.Convert(getResources().getString(R.string.Alert)))
                                .setMessage(BalanceCodeMsg)
                                .setPositiveButton(Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {

                                    @Override
                                    public void onClick(DialogInterface dialog, int which) {
                                        dialog.dismiss();

                                    }
                                });
                        AlertDialog alert2 = builder2.create();
                        alert2.show();

                        dialogFontSize(alert2);
                    }
                    break;

                case MANIFESTWALL :

                    final AdapterView.AdapterContextMenuInfo info1 = (AdapterView.AdapterContextMenuInfo) menuInfo;
                    SpannableString ss4 = new SpannableString(MANIFEST_WALL_ACTIONS[0]);
                    switch (Integer.parseInt(Fonts[AVL_Service.pref.getInt("FontPosition", 4)])) {
                        case -8 :
                            ss4.setSpan(new RelativeSizeSpan(.25f), 0, ss4.length(), 0);

                            break;
                        case -6 :
                            ss4.setSpan(new RelativeSizeSpan(.50f), 0, ss4.length(), 0);

                            break;
                        case -4 :
                            ss4.setSpan(new RelativeSizeSpan(.75f), 0, ss4.length(), 0);

                            break;
                        case -2 :
                            ss4.setSpan(new RelativeSizeSpan(1f), 0, ss4.length(), 0);

                            break;
                        case 0 :
                            ss4.setSpan(new RelativeSizeSpan(1.25f), 0, ss4.length(), 0);

                            break;
                        case 2 :
                            ss4.setSpan(new RelativeSizeSpan(1.50f), 0, ss4.length(), 0);

                            break;
                        case 4 :
                            ss4.setSpan(new RelativeSizeSpan(1.75f), 0, ss4.length(), 0);

                            break;
                        case 6 :
                            ss4.setSpan(new RelativeSizeSpan(2.0f), 0, ss4.length(), 0);

                            break;
                        case 8 :
                            ss4.setSpan(new RelativeSizeSpan(2.25f), 0, ss4.length(), 0);

                            break;
                    }
                    CharSequence[] manifestWallitems = {ss4};

                    AlertDialog.Builder builder3 = new AlertDialog.Builder(this);
                    builder3.setTitle(Farsi.Convert(getResources().getString(R.string.ManifestOptions))).setItems(manifestWallitems, new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                            switch (which) {
                                case 0 :
                                    serviceHandle.sendMessageToServer(info1.targetView.getTag().toString(), "SDHS", MsgType.SDMFSTDTLREQ, AckType.NEW, MsgValidity.Medium, MsgPriority.Normal);
                                    showToastMessageFromString(getResources().getString(R.string.PerformManifestRequest) + "\n"
                                            + getResources().getString(R.string.ManifestNumber)
                                            + " = "
                                            + info1.targetView.getTag().toString());
                                    // Toast.makeText(
                                    // TaxiPlexer.this,
                                    // Farsi.Convert(getResources().getString(R.string.PerformManifestRequest)) + "\n"
                                    // + Farsi.Convert(getResources().getString(R.string.ManifestNumber))
                                    // + " = "
                                    // + info1.targetView.getTag().toString(),
                                    // Toast.LENGTH_LONG).show();
                                    isManifestWallTripResponse = "Y";
                                    break;
                            }
                        }
                    });
                    AlertDialog alert3 = builder3.create();
                    alert3.show();

                    dialogFontSize(alert3);

                    break;
            }
            super.onCreateContextMenu(menu, v, menuInfo);
        } catch (Exception e) {
            Toast.makeText(getApplicationContext(), e.getLocalizedMessage(), Toast.LENGTH_LONG).show();
            handleException("[Exception in createpaymentview]" + "[createpaymentview]" + "[" + e.getLocalizedMessage() + "]");
        }
    }
    /*--------------------------------------------------------------hideProgressDialog-----------------------------------------------------------*/
    @Override
    public void hideProgressDialog() {

        TaxiPlexer.this.msgHandler.sendMessageDelayed(msgHandler.obtainMessage(MsgType.hideProgress), 100);

    }

    /*--------------------------------------------------------------receivedMeterStatus-----------------------------------------------------------*/
    @Override
    public void receivedMeterStatus() {
        UpdateMeterState();
    }

    /*--------------------------------------------------------------receivedHeartBeatChange-----------------------------------------------------------*/
    @Override
    public void receivedHeartBeatChange() {
        try {
            // $GPGGA,101207.0,4341.421825,N,00355.725354,E,1,09,0.9,80.1,M,49.0,M,,*66

            if (AVL_Service.pref.getBoolean("VeriFoneDevice", false) && (tvTaxiMeter != null && tvTaxiMeter.getText().toString().equalsIgnoreCase("Connected"))) {
                if (customGPSMessage == null)
                    customGPSMessage = new CustomMessage("", "5");
                if (customGPSMessage != null) {
                    customGPSMessage.SetID("5");
                    if ((System.currentTimeMillis() - AVL_Service.LocationAge) <= 1000 * 300)
                        customGPSMessage.SetText(String.format("$GPGGA,,%1$s,N,%2$s,W,%3$s,%4$s,%5$s,,,,M,,*66", AVL_Service.pref.getString("LastLatitude", "0.0"), AVL_Service.pref.getString(
                                "LastLongitude",
                                "0.0"), String.valueOf(System.currentTimeMillis()), AVL_Service.pref.getString("Speed", "00.0"), Float.toString(AVL_Service.current_Direction)));
                    else
                        customGPSMessage.SetText(String.format("$GPGGA,,%1$s,N,%2$s,W,%3$s,%4$s,%5$s,,,,M,,*66", "0", "0", "0", "0", "0"));
                    Meter.writeCustom(customGPSMessage);
                }

                LogException("[receivedHeartBeatChange]" + "[receivedHeartBeatChange]"
                        + "CMD 5 :GPGGA send "
                        + ((currentTrip != null) ? currentTrip.ConfirmNumber : "Current Trip NULL")
                        + " : TripPaymentDataReceivedFromVeriFone : "
                        + TripPaymentDataReceivedFromVeriFone);
            }

            // long CurrentTime = System.currentTimeMillis();
            if (AVL_Service.pref.getBoolean("VeriFoneDevice", false))
                UpdateMeterState();
        } catch (Exception ex) {
            LogException("[Exception in receivedHeartBeatChange]" + "[receivedHeartBeatChange]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }
	/*--------------------------------------------------------------ProcessCashRequest-----------------------------------------------------------*/

    private void ProcessCashRequest() {
        try {
            cashBtn.setEnabled(false);
            ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
            // scheduler.schedule(new Runnable() {
            //
            // @Override
            // public void run() {
            //
            // runOnUiThread(new Runnable() {
            // public void run() {
            // cashBtn.setEnabled(true);
            // }
            // });
            //
            // }
            // }, 10, TimeUnit.SECONDS);

            currentTrip.paymentMethod = "Cash";

            if (currentTrip != null) {
                if (currentTrip.authCode.trim().length() > 2) {
                    AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this).setIcon(android.R.drawable.ic_dialog_alert).setTitle(
                            Farsi.Convert(getResources().getString(R.string.CreditCard_On_Hold))).setMessage(Farsi.Convert(getResources().getString(R.string.CreditCard_already_Hold))).setPositiveButton(
                            Farsi.Convert(getResources().getString(R.string.Yes)),
                            new DialogInterface.OnClickListener() {

                                @Override
                                public void onClick(DialogInterface dialog, int which) {

                                    showProgressDialog(Farsi.Convert(getResources().getString(R.string.Processing_Payment)));
                                    sendTripResponse(States.DROPPED);
                                    if(!currentTrip.bCopayAllowedOnPaymentScreen){
                                        tempFare = "0";
                                        tempExtras = "0";
                                    } else {
                                        String  temptotal = ttfTotal.getText().toString();
                                        temptotal = String.valueOf(Float.parseFloat(temptotal) - Float.parseFloat(currentTrip.Copay));
                                        ttfTotal.setText(temptotal);
                                    }
                                    serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                            + AVL_Service.pref.getString("LastLongitude", "0")
                                            + Constants.COLSEPARATOR
                                            + currentTrip.tripNumber
                                            + Constants.COLSEPARATOR
                                            + currentTrip.paymentMethod
                                            + Constants.COLSEPARATOR
                                            + String.valueOf(Float.parseFloat(Fare) + Float.parseFloat(tempFare))
                                            + Constants.COLSEPARATOR
                                            + String.valueOf(Float.parseFloat(Extras) + Float.parseFloat(tempExtras))
                                            + Constants.COLSEPARATOR
                                            + Tip
                                            + Constants.COLSEPARATOR
                                            + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                                            + Constants.COLSEPARATOR
                                            + "0"
                                            + Constants.COLSEPARATOR
                                            + "0"
                                            + Constants.COLSEPARATOR
                                            + "0"
                                            + Constants.COLSEPARATOR
                                            + currentTrip.ConfirmNumber
                                            + Constants.COLSEPARATOR
                                            + currentTrip.authCode
                                            + Constants.COLSEPARATOR
                                            + "0"
                                            + Constants.COLSEPARATOR
                                            + "0"
                                            + Constants.COLSEPARATOR
                                            + "0"
                                            + Constants.COLSEPARATOR
                                            + "Driver-"
                                            + AVL_Service.pref.getString("DriverID", "unknown")
                                            + Constants.COLSEPARATOR
                                            + "Success"
                                            + Constants.COLSEPARATOR
                                            + currentTrip.tripNumber
                                            + Constants.COLSEPARATOR
                                            + "1"
                                            + Constants.COLSEPARATOR
                                            + "0"
                                            + Constants.COLSEPARATOR
                                            + "No"
                                            + Constants.COLSEPARATOR
                                            + AVL_Service.pref.getString("DriverID", "Driver")
                                            + Constants.COLSEPARATOR
                                            + "0"
                                            + Constants.COLSEPARATOR
                                            + "0"
                                            + Constants.COLSEPARATOR
                                            + MRMS_DateFormat.format(currentTrip.PUTime)
                                            + Constants.COLSEPARATOR
                                            + ((dFormat.format(Distance).equalsIgnoreCase("0.00")) ? currentTrip.miles : dFormat.format(Distance))
                                            + Constants.COLSEPARATOR
                                            + ActualPaymentAmount
                                            + Constants.COLSEPARATOR
                                            + currentTrip.PromotionalCode
                                            + Constants.COLSEPARATOR
                                            + currentTrip.PromotionalValue, "SDHS", MsgType.Payment, AckType.NEW, MsgValidity.Short, MsgPriority.Highest);

                                    receivedPaymentResp("Cash_Header" + Constants.BODYSEPARATOR + "1^Cash Payment successful");
                                } // onClick

                            }).setNegativeButton(Farsi.Convert(getResources().getString(R.string.No)), new DialogInterface.OnClickListener() {

                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        } // onClick
                    }).setCancelable(false); // updated so, it must enable GPS
                    AlertDialog alert = builder.create();
                    alert.show();

                    dialogFontSize(alert);

                } else {

                    showProgressDialog(Farsi.Convert(getResources().getString(R.string.Processing_Payment)));
                    sendTripResponse(States.DROPPED);
                    if(!currentTrip.bCopayAllowedOnPaymentScreen){
                        tempFare = "0";
                        tempExtras = "0";
                    } else {
                        String  temptotal = ttfTotal.getText().toString();
                        temptotal = String.valueOf(Float.parseFloat(temptotal) - Float.parseFloat(currentTrip.Copay));
                        ttfTotal.setText(temptotal);
                    }
                    serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                            + AVL_Service.pref.getString("LastLongitude", "0")
                            + Constants.COLSEPARATOR
                            + currentTrip.tripNumber
                            + Constants.COLSEPARATOR
                            + currentTrip.paymentMethod
                            + Constants.COLSEPARATOR
                            + String.valueOf(Float.parseFloat(Fare) + Float.parseFloat(tempFare))
                            + Constants.COLSEPARATOR
                            + String.valueOf(Float.parseFloat(Extras) + Float.parseFloat(tempExtras))
                            + Constants.COLSEPARATOR
                            + Tip
                            + Constants.COLSEPARATOR
                            + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                            + Constants.COLSEPARATOR
                            + "0"
                            + Constants.COLSEPARATOR
                            + "0"
                            + Constants.COLSEPARATOR
                            + "0"
                            + Constants.COLSEPARATOR
                            + currentTrip.ConfirmNumber
                            + Constants.COLSEPARATOR
                            + currentTrip.authCode
                            + Constants.COLSEPARATOR
                            + "0"
                            + Constants.COLSEPARATOR
                            + "0"
                            + Constants.COLSEPARATOR
                            + "0"
                            + Constants.COLSEPARATOR
                            + "Driver-"
                            + AVL_Service.pref.getString("DriverID", "unknown")
                            + Constants.COLSEPARATOR
                            + "Success"
                            + Constants.COLSEPARATOR
                            + currentTrip.tripNumber
                            + Constants.COLSEPARATOR
                            + "1"
                            + Constants.COLSEPARATOR
                            + "0"
                            + Constants.COLSEPARATOR
                            + "No"
                            + Constants.COLSEPARATOR
                            + AVL_Service.pref.getString("DriverID", "Driver")
                            + Constants.COLSEPARATOR
                            + "0"
                            + Constants.COLSEPARATOR
                            + "0"
                            + Constants.COLSEPARATOR
                            + MRMS_DateFormat.format(currentTrip.PUTime)
                            + Constants.COLSEPARATOR
                            + ((dFormat.format(Distance).equalsIgnoreCase("0.00")) ? currentTrip.miles : dFormat.format(Distance))
                            + Constants.COLSEPARATOR
                            + ActualPaymentAmount
                            + Constants.COLSEPARATOR
                            + currentTrip.PromotionalCode
                            + Constants.COLSEPARATOR
                            + currentTrip.PromotionalValue, "SDHS", MsgType.Payment, AckType.NEW, MsgValidity.Short, MsgPriority.Highest);
                    receivedPaymentResp("Cash2_Header" + Constants.BODYSEPARATOR + "1^Cash Payment successful");
                }
            } else
                showToastMessage(R.string.No_Trip_Assigned_Yet);
            // Toast.makeText(getApplicationContext(), "No Trip Assigned Yet", Toast.LENGTH_LONG).show();
        } catch (Exception ex) {
            LogException("[Exception in ProcessCashRequest]" + "[ProcessCashRequest]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }
    /*--------------------------------------------------------------handleShowProgress-----------------------------------------------------------*/
    protected void handleHideProgress() {

        if (myProgress != null)
            myProgress.dismiss();
    }

    /*--------------------------------------------------------------showProgressDialog---------------------------------------------------------------*/
    @Override
    public void showProgressDialog(String msg) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.showProgress, msg).sendToTarget();

    }

    /*--------------------------------------------------------------handleShowProgress-----------------------------------------------------------*/
    protected void handleShowProgress(String msg) {
        try {
            SetApplicationLocal();
            if (msg.indexOf("Fetching Apps List") > -1) {

                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur"))
                    msg = getResources().getString(R.string.FetchingAppsList);
                else
                    msg = Farsi.Convert(getResources().getString(R.string.FetchingAppsList));

            }

            else if (msg.indexOf("Fetching Canned Messages List") > -1) {

                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur"))
                    msg = getResources().getString(R.string.FetchingCannedMessagesList);
                else
                    msg = Farsi.Convert(getResources().getString(R.string.FetchingCannedMessagesList));

            }

            else if (msg.indexOf("Fetching General Settings") > -1) {

                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur"))
                    msg = getResources().getString(R.string.FetchingGeneralSettings);
                else
                    msg = Farsi.Convert(getResources().getString(R.string.FetchingGeneralSettings));

            }

            else if (msg.indexOf("Fetching CC Processors") > -1) {

                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur"))
                    msg = getResources().getString(R.string.FetchingCCProcessors);
                else
                    msg = Farsi.Convert(getResources().getString(R.string.FetchingCCProcessors));

            }

            else if (msg.indexOf("Fetching CC Mapings") > -1) {

                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur"))
                    msg = getResources().getString(R.string.FetchingCCMapings);
                else
                    msg = Farsi.Convert(getResources().getString(R.string.FetchingCCMapings));

            }
            SpannableString ss2 = new SpannableString(msg);
            switch (Integer.parseInt(Fonts[AVL_Service.pref.getInt("FontPosition", 4)])) {
                case -8 :
                    ss2.setSpan(new RelativeSizeSpan(.25f), 0, ss2.length(), 0);
                    break;
                case -6 :
                    ss2.setSpan(new RelativeSizeSpan(.50f), 0, ss2.length(), 0);
                    break;
                case -4 :
                    ss2.setSpan(new RelativeSizeSpan(.75f), 0, ss2.length(), 0);
                    break;
                case -2 :
                    ss2.setSpan(new RelativeSizeSpan(1f), 0, ss2.length(), 0);
                    break;
                case 0 :
                    ss2.setSpan(new RelativeSizeSpan(1.25f), 0, ss2.length(), 0);
                    break;
                case 2 :
                    ss2.setSpan(new RelativeSizeSpan(1.50f), 0, ss2.length(), 0);
                    break;
                case 4 :
                    ss2.setSpan(new RelativeSizeSpan(1.75f), 0, ss2.length(), 0);
                    break;
                case 6 :
                    ss2.setSpan(new RelativeSizeSpan(2.0f), 0, ss2.length(), 0);
                    break;
                case 8 :
                    ss2.setSpan(new RelativeSizeSpan(2.25f), 0, ss2.length(), 0);
                    break;
            }
            if (myProgress != null)

                if (myProgress.isShowing())
                    myProgress.setMessage(ss2);
                else
                    myProgress = ProgressDialog.show(TaxiPlexer.this, "", ss2);
            else
                myProgress = ProgressDialog.show(TaxiPlexer.this, "", ss2);

            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                final int idAlertTitle = getApplicationContext().getResources().getIdentifier("message", "id", "android");
                TextView textDialog = (TextView) ((AlertDialog) myProgress).findViewById(idAlertTitle);
                textDialog.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            }

            myProgress.setCancelable(false);
            myProgress.setCanceledOnTouchOutside(false);
        } catch (Exception ex) {
            LogException("[Exception in making progress dialog]" + "[handleShowProgress]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }
    /*--------------------------------------------------------------createTabberView----------------------------------------------------------------*/
    @SuppressWarnings("deprecation")
    @SuppressLint("NewApi")
    private ViewGroup createTabbarView() {
        tabtempIndex = 0;
        SetApplicationLocal();
        LinearLayout tabber = new LinearLayout(this);
        tabber.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        tabber.setOrientation(LinearLayout.VERTICAL);

        final LinearLayout emergencyButtonRow = new LinearLayout(this);
        emergencyButtonRow.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        emergencyButtonRow.setOrientation(LinearLayout.HORIZONTAL);
        emergencyButtonRow.setGravity(Gravity.CENTER_HORIZONTAL);
        // emergencyButtonRow.setPadding(5, 0, 5, 0);

        tabberView_breakBtn = new Button(this);
        drawable = tabberView_breakBtn.getBackground();
        drawable.setColorFilter(Color.parseColor(AVL_Service.SDBreakColor), Mode.SRC_IN);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            tabberView_breakBtn.setBackground(drawable);
        else
            tabberView_breakBtn.setBackgroundDrawable(drawable);
        tabberView_breakBtn.setTextSize(miscFont - 1);
        tabberView_breakBtn.setTextColor(Color.WHITE);
        if (break_status == 1) {
            // tabberView_breakBtn.setTextColor(Color.BLACK);

            drawable = tabberView_breakBtn.getBackground();
            drawable.setColorFilter(Color.parseColor(AVL_Service.SDResumeColor), Mode.SRC_IN);
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                tabberView_breakBtn.setBackground(drawable);
            else
                tabberView_breakBtn.setBackgroundDrawable(drawable);
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                tabberView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                tabberView_breakBtn.setText(resumeButtonLabel);
            } else {
                tabberView_breakBtn.setText(Farsi.Convert(resumeButtonLabel));
                tabberView_breakBtn.setTypeface(null, Typeface.BOLD);
            }
        } else if (break_status == 0) {

            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                tabberView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                tabberView_breakBtn.setText(breakBtnLabel);
            } else {
                tabberView_breakBtn.setText(Farsi.Convert(breakBtnLabel));
                tabberView_breakBtn.setTypeface(null, Typeface.BOLD);
            }

            //
            drawable = tabberView_breakBtn.getBackground();
            drawable.setColorFilter(Color.parseColor(AVL_Service.SDBreakColor), Mode.SRC_IN);
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                tabberView_breakBtn.setBackground(drawable);
            else
                tabberView_breakBtn.setBackgroundDrawable(drawable);

        }
        tabberView_breakBtn.setOnClickListener(breakButtonLintener);

        Button EmgBtn = new Button(this);
        Drawable drawable2 = EmgBtn.getBackground();
        drawable2.setColorFilter(Color.RED, Mode.SRC_IN);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            EmgBtn.setBackground(drawable2);
        else
            EmgBtn.setBackgroundDrawable(drawable2);
        EmgBtn.setTypeface(null, Typeface.BOLD);
        EmgBtn.setTextSize(miscFont);
        EmgBtn.setTextColor(Color.WHITE);
        if (AVL_Service.pref.getString("Company", "Company Name").equalsIgnoreCase("My Taxi")) {
            EmgBtn.setText(Farsi.Convert(getResources().getString(R.string.Mytaxi)) + "\n" + AVL_Service.pref.getString("NTEPNumber", "12-XXP"));
        } else
            EmgBtn.setText(Farsi.Convert(AVL_Service.pref.getString("Company", "Company Name")) + "\n" + AVL_Service.pref.getString("NTEPNumber", "12-XXP"));
        // EmgBtn.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        EmgBtn.setOnClickListener(emergencyButtonLintener);

        Button pttBtn = new Button(this);
        Drawable drawable1 = pttBtn.getBackground();
        drawable1.setColorFilter(Color.BLUE, Mode.SRC_IN);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            pttBtn.setBackground(drawable1);
        else
            pttBtn.setBackgroundDrawable(drawable1);
        pttBtn.setTypeface(null, Typeface.BOLD);
        pttBtn.setTextSize(miscFont - 1);
        pttBtn.setTextColor(Color.WHITE);
        pttBtn.setText(Farsi.Convert(getResources().getString(R.string.PTT)));
        pttBtn.setOnClickListener(pttButtonLintener);
        if (AVL_Service.sdEnableBreak && AVL_Service.sdEnablePPT && AVL_Service.sdEnableEmergency) {
            EmgBtn.setTextSize(miscFont - 1);
            for (int i = 0; i < AVL_Service.SDBreakEmergencyPPTPosition.length(); i++) {
                if (AVL_Service.SDBreakEmergencyPPTPosition.charAt(i) == 'b')
                    emergencyButtonRow.addView(tabberView_breakBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.4f));
                else if (AVL_Service.SDBreakEmergencyPPTPosition.charAt(i) == 'e')
                    emergencyButtonRow.addView(EmgBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.2f));
                else if (AVL_Service.SDBreakEmergencyPPTPosition.charAt(i) == 'p')
                    emergencyButtonRow.addView(pttBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.4f));
            }
        } else {
            for (int i = 0; i < AVL_Service.SDBreakEmergencyPPTPosition.length(); i++) {
                if (AVL_Service.SDBreakEmergencyPPTPosition.charAt(i) == 'b') {
                    if (AVL_Service.sdEnableBreak)
                        emergencyButtonRow.addView(tabberView_breakBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.33f));
                } else if (AVL_Service.SDBreakEmergencyPPTPosition.charAt(i) == 'e') {
                    if (AVL_Service.sdEnableEmergency)
                        emergencyButtonRow.addView(EmgBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.33f));
                } else if (AVL_Service.SDBreakEmergencyPPTPosition.charAt(i) == 'p') {
                    if (AVL_Service.sdEnablePPT)
                        emergencyButtonRow.addView(pttBtn, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 0.33f));
                }
            }
        }

        bookedZone = Farsi.Convert(getResources().getString(R.string.None));
        bookedStand = Farsi.Convert(getResources().getString(R.string.None));

        tabHost = new TabHost(this, null);
        tabHost.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));

        tabWidget = new TabWidget(this);
        tabWidget.setId(android.R.id.tabs);
        tabHost.addView(tabWidget, new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));

        FrameLayout frameLayout = new FrameLayout(this);
        frameLayout.setId(android.R.id.tabcontent);
        frameLayout.setPadding(0, 100, 0, 0);
        tabHost.addView(frameLayout, new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT)); // WRAP_CONTENT
        tabHost.setOnTabChangedListener(new OnTabChangeListener() {

            public void onTabChanged(final String tabId) {

                InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                imm.hideSoftInputFromWindow(tabHost.getApplicationWindowToken(), 0);
                if (tabId.equalsIgnoreCase("TripList")) {
                    isAppActive = true;

                    manifestListView.setSelection(tripAdapter.getFirstUnfinishedPosition());

                } else if (tabId.equalsIgnoreCase("Status")) {
                    isAppActive = true;
                    // if (AVL_Service.PPV_UsePPVModule)
                    // GetBalanceAndBlackListStatus();
                } else if (tabId.equalsIgnoreCase("WallTrips")) {
                    if (AVL_Service.pref.getBoolean("ShowWallTrips", true)) {
                        if (!AVL_Service.showManifestWallOnSD)
                            fetchWallTrips(true, false);
                    } else if (AVL_Service.showManifestWallOnSD)
                        fetchManifestWallTrips(true);
                    isAppActive = true;

                } else if (tabId.equalsIgnoreCase("Msgs")) {
                    notificationManager.cancel(11);
                    msgCount = 0;
                    if (msgsbadge != null)
                        msgsbadge.setVisibility(BadgeView.GONE);
                    isAppActive = true;

                } else if (tabId.equalsIgnoreCase("Zones")) {
                    isAppActive = true;
                    handleZoneFareTaxi(tempZoneFareTaxi);
                }

                else if (tabId.equalsIgnoreCase("Bids"))
                    isAppActive = true;

            }// onTabChanged
        });

        tabHost.setup();

        // test tab
        //
        // TabSpec tabTest = tabHost.newTabSpec("test");
        // tabTest.setIndicator(Farsi.Convert(getResources().getString(R.string.Status)), getResources().getDrawable(R.drawable.status));
        // tabTest.setContent(new TabContentFactory() {
        // @Override
        // public View createTabContent(String arg0) {
        //
        // return createTestTab();
        // }
        // });
        //
        // tabHost.addTab(tabTest);

        // Status Tab
        TabSpec tabSpec = tabHost.newTabSpec("Status");

        tabSpec.setIndicator(Farsi.Convert(getResources().getString(R.string.Status)), getResources().getDrawable(R.drawable.status));
        tabSpec.setContent(new TabContentFactory() {
            @Override
            public View createTabContent(String arg0) {

//				 return SoftmeterView();
                return createStatusView();
            }
        });
        tabHost.addTab(tabSpec);
        TextView tv = (TextView) (((ViewGroup) ((ViewGroup) (tabHost.getChildAt(0))).getChildAt(tabtempIndex)).getChildAt(1));
        tv.setTextSize(miscFont);
        if ((AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur"))) {
            tv.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            tv.setText(getResources().getString(R.string.Status));
        }
        // Zones Tab
        tabSpec = tabHost.newTabSpec("Zones");
        tabSpec.setIndicator(Farsi.Convert(getResources().getString(R.string.Zones)), getResources().getDrawable(R.drawable.zones));
        tabSpec.setContent(new TabContentFactory() {

            @Override
            public View createTabContent(String arg0) {

                return createZoneView();
            }
        });
        tabHost.addTab(tabSpec);
        tabtempIndex++;
        TextView tv2 = (TextView) (((ViewGroup) ((ViewGroup) (tabHost.getChildAt(0))).getChildAt(tabtempIndex)).getChildAt(1));
        tv2.setTextSize(miscFont);
        if ((AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur"))) {
            tv2.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            tv2.setText(getResources().getString(R.string.Zones));
        }
        // test tab

        // tabSpec = tabHost.newTabSpec("Accounts");
        // tabSpec.setIndicator(Farsi.Convert(getResources().getString(R.string.Zones)), getResources().getDrawable(R.drawable.zones));
        // tabSpec.setContent(new TabContentFactory() {
        //
        // @Override
        // public View createTabContent(String arg0) {
        //
        // return createAccountsTab();
        // }
        // });
        // tabHost.addTab(tabSpec);

        // Bids Tab
        if (AVL_Service.sendBidOffers) {
            bidTab = tabHost.newTabSpec("Bids");
            bidTab.setIndicator(Farsi.Convert(getResources().getString(R.string.Bids)), getResources().getDrawable(R.drawable.icon + bidCount));
            bidTab.setContent(new TabContentFactory() {

                @Override
                public View createTabContent(String arg0) {

                    return createBidsView();
                }
            });
            tabHost.addTab(bidTab);
            tabtempIndex++;
            TextView tv3 = (TextView) (((ViewGroup) ((ViewGroup) (tabHost.getChildAt(0))).getChildAt(tabtempIndex)).getChildAt(1));
            tv3.setTextSize(miscFont);
            if ((AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur"))) {
                tv3.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                tv3.setText(getResources().getString(R.string.Bids));
            }
        }

        // WallTrips Tab
        if (AVL_Service.pref.getBoolean("ShowWallTrips", true)) {
            tabSpec = tabHost.newTabSpec("WallTrips");
            tabSpec.setIndicator(Farsi.Convert(getResources().getString(R.string.Wall)), getResources().getDrawable(R.drawable.walltrips));
            tabSpec.setContent(new TabContentFactory() {

                @Override
                public View createTabContent(String arg0) {
                    if (AVL_Service.showManifestWallOnSD)
                        return createWallTabberView();

                    return createWallTripView();
                }
            });
            tabHost.addTab(tabSpec);
            tabtempIndex++;
            TextView tv4 = (TextView) (((ViewGroup) ((ViewGroup) (tabHost.getChildAt(0))).getChildAt(tabtempIndex)).getChildAt(1));
            tv4.setTextSize(miscFont);
            if ((AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur"))) {
                tv4.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                tv4.setText(getResources().getString(R.string.Wall));
            }
        } else if (AVL_Service.showManifestWallOnSD) {
            tabSpec = tabHost.newTabSpec("WallTrips");
            tabSpec.setIndicator(Farsi.Convert(getResources().getString(R.string.Wall)), getResources().getDrawable(R.drawable.routes));
            tabSpec.setContent(new TabContentFactory() {

                @Override
                public View createTabContent(String arg0) {

                    return createManifestWallTripView();
                }
            });
            tabHost.addTab(tabSpec);
            tabtempIndex++;
            TextView tv5 = (TextView) (((ViewGroup) ((ViewGroup) (tabHost.getChildAt(0))).getChildAt(tabtempIndex)).getChildAt(1));
            tv5.setTextSize(miscFont);
            if ((AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur"))) {
                tv5.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                tv5.setText(getResources().getString(R.string.Wall));
            }
        }

        // badge = new BadgeView(this, tabWidget, wallIndex);

        // Messages Tab
        if (AVL_Service.DeviceMessageScreenConfig[1].equalsIgnoreCase("1") || AVL_Service.DeviceMessageScreenConfig[2].equalsIgnoreCase("1")) {
            tabSpec = tabHost.newTabSpec("Msgs");
            tabSpec.setIndicator(Farsi.Convert(getResources().getString(R.string.Msgs)), getResources().getDrawable(R.drawable.msg_icon));
            tabSpec.setContent(new TabContentFactory() {

                @Override
                public View createTabContent(String arg0) {

                    return createCannedMsgsView();
                }
            });

            tabHost.addTab(tabSpec);
            tabtempIndex++;
            TextView tv6 = (TextView) (((ViewGroup) ((ViewGroup) (tabHost.getChildAt(0))).getChildAt(tabtempIndex)).getChildAt(1));
            tv6.setTextSize(miscFont);
            if ((AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur"))) {
                tv6.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                tv6.setText(getResources().getString(R.string.Msgs));
            }
        }
        // msgsbadge = new BadgeView(this, tabWidget, messagesIndex);
        // TripList Tab
        tabSpec = tabHost.newTabSpec("TripList");
        tabSpec.setIndicator(Farsi.Convert(getResources().getString(R.string.TripList)), getResources().getDrawable(R.drawable.triplist));
        tabSpec.setContent(new TabContentFactory() {

            @Override
            public View createTabContent(String arg0) {

                return createManifestView();
            }
        });
        tabHost.addTab(tabSpec);
        tabtempIndex++;
        TextView tv7 = (TextView) (((ViewGroup) ((ViewGroup) (tabHost.getChildAt(0))).getChildAt(tabtempIndex)).getChildAt(1));
        tv7.setTextSize(miscFont);
        if ((AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur"))) {
            tv7.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            tv7.setText(getResources().getString(R.string.TripList));
        }

        if (AVL_Service.pref.getBoolean("ShowWallTrips", true))
            if (!AVL_Service.showManifestWallOnSD)
                wallbadge = new BadgeView(this, tabWidget, wallIndex);

        if (AVL_Service.showManifestWallOnSD)
            if (!AVL_Service.pref.getBoolean("ShowWallTrips", true))
                manifestbadge = new BadgeView(this, tabWidget, wallIndex);

        if (AVL_Service.DeviceMessageScreenConfig[1].equalsIgnoreCase("1") || AVL_Service.DeviceMessageScreenConfig[2].equalsIgnoreCase("1"))
            msgsbadge = new BadgeView(this, tabWidget, messagesIndex);

        tripsbadge = new BadgeView(this, tabWidget, TripIndex);

        tabber.addView(emergencyButtonRow, 0);
        tabber.addView(tabHost, 1);

        tabber.setId(TABBERVIEW);
        return tabber;
    }// Tabber View
    /*--------------------------------------------------------------createWallTripView-----------------------------------------------------------------*/
    @SuppressWarnings("deprecation")
    @SuppressLint("NewApi")
    protected View createWallTripView() {

        wallPanel = new LinearLayout(this);
        wallPanel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        wallPanel.setOrientation(LinearLayout.VERTICAL);

        // change by hamza
        DisplayMetrics metrics = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(metrics);
        int h = metrics.heightPixels; // 1280
        int w = metrics.widthPixels; // 720

        if (h == 1280 && w == 720) {

            wallPanel.setPadding(0, screenHeight / 40, 0, 0);

        } else if ((h == 1776 || h == 1920) && w == 1080) {
            wallPanel.setPadding(0, screenHeight / 20, 0, 0);
        }

        else {
            wallPanel.setPadding(0, 0, 0, 0);

        }

        wallButtonPanel = new LinearLayout(this);
        wallButtonPanel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        wallButtonPanel.setOrientation(LinearLayout.HORIZONTAL);

        sortWallTrips1 = new Button(this);
        sortWallTrips1.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.5f));

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            sortWallTrips1.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            sortWallTrips1.setText(R.string.VehTripDistance);
        } else
            sortWallTrips1.setText(Farsi.Convert(getResources().getString(R.string.VehTripDistance)));

        sortWallTrips1.setSingleLine();
        drawable = getResources().getDrawable(R.drawable.refresh);
        sortWallTrips1.setCompoundDrawablesWithIntrinsicBounds(drawable, null, null, null);
        drawable = sortWallTrips1.getBackground();
        drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            sortWallTrips1.setBackground(drawable);
        else
            sortWallTrips1.setBackgroundDrawable(drawable);
        sortWallTrips1.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {

                drawable = getResources().getDrawable(R.drawable.refresh_pressed);
                sortWallTrips1.setCompoundDrawablesWithIntrinsicBounds(drawable, null, null, null);

                drawable1 = getResources().getDrawable(R.drawable.refresh);
                sortWallTrips2.setCompoundDrawablesWithIntrinsicBounds(drawable1, null, null, null);

                isSortWallTrips1Pressed = true;
                isSortWallTrips2Pressed = false;
                fetchWallTrips(true, true);
                new Thread(new Runnable() {
                    public void run() {
                        sortWallTrips();
                        hideProgressDialog();
                    }
                }).start();// TODO Auto-generated method stub

            }
        });

        sortWallTrips2 = new Button(this);
        sortWallTrips2.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.5f));

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            sortWallTrips2.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            sortWallTrips2.setText(R.string.DefaultView);
        } else
            sortWallTrips2.setText(Farsi.Convert(getResources().getString(R.string.DefaultView)));

        drawable1 = getResources().getDrawable(R.drawable.refresh);
        sortWallTrips2.setCompoundDrawablesWithIntrinsicBounds(drawable1, null, null, null);
        drawable = sortWallTrips1.getBackground();
        drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            sortWallTrips2.setBackground(drawable);
        else
            sortWallTrips2.setBackgroundDrawable(drawable);
        sortWallTrips2.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                drawable1 = getResources().getDrawable(R.drawable.refresh_pressed);
                sortWallTrips2.setCompoundDrawablesWithIntrinsicBounds(drawable1, null, null, null);

                drawable = getResources().getDrawable(R.drawable.refresh);
                sortWallTrips1.setCompoundDrawablesWithIntrinsicBounds(drawable, null, null, null);

                isSortWallTrips1Pressed = false;
                isSortWallTrips2Pressed = true;

                fetchWallTrips(true, false);

            }
        });

        wallButtonPanel.addView(sortWallTrips1);
        wallButtonPanel.addView(sortWallTrips2);
        wallTripListView = new ListView(this);
        wallTripListView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 1));
        registerForContextMenu(wallTripListView);
        wallTripListView.setId(ONDEMANDWALL);

        arrayListOfWallTrips = new ArrayList<WallTrip>();
        wallTripAdapter = new WallTripAdapter(this, R.layout.wall_row, arrayListOfWallTrips);
        wallTripListView.setAdapter(this.wallTripAdapter);
        wallTripAdapter.setNotifyOnChange(false);
        if (AVL_Service.WallTripDistanceByGoogle != 0)
            wallPanel.addView(wallButtonPanel);
        wallPanel.addView(wallTripListView);

        return wallPanel;
    }

    /*--------------------------------------------------------------createManifestWallTripView-----------------------------------------------------------------*/
    protected View createManifestWallTripView() {

        manifestWallPanel = new LinearLayout(this);
        manifestWallPanel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        manifestWallPanel.setOrientation(LinearLayout.VERTICAL);

        manifestWallTripListView = new ListView(this);
        manifestWallTripListView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 1));
        registerForContextMenu(manifestWallTripListView);
        manifestWallTripListView.setId(MANIFESTWALL);

        arrayListOfmanifestWallTrips = new ArrayList<ManifestWallTrip>();
        manifestWallTripAdapter = new ManifestWallTripAdapter(this, R.layout.manifestwall_row, arrayListOfmanifestWallTrips);
        manifestWallTripListView.setAdapter(this.manifestWallTripAdapter);
        manifestWallTripAdapter.setNotifyOnChange(false);
        manifestWallPanel.addView(manifestWallTripListView);

        return manifestWallPanel;
    }
    /*--------------------------------------------------------------createWallTabberView-----------------------------------------------------------------*/
    protected View createWallTabberView() {

        LinearLayout tabber = new LinearLayout(this);
        tabber.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        tabber.setOrientation(LinearLayout.VERTICAL);

        tabHostWall = new TabHost(this, null);
        tabHostWall.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));

        tabWidgetWall = new TabWidget(this);
        tabWidgetWall.setId(android.R.id.tabs);
        tabHostWall.addView(tabWidgetWall, new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));

        FrameLayout frameLayout = new FrameLayout(this);
        frameLayout.setId(android.R.id.tabcontent);
        frameLayout.setPadding(0, 100, 0, 0);
        tabHostWall.addView(frameLayout, new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT)); // WRAP_CONTENT
        tabHostWall.setOnTabChangedListener(new OnTabChangeListener() {

            public void onTabChanged(final String tabId) {

                if (tabId.equalsIgnoreCase("SubWallTrips")) {
                    fetchWallTrips(true, false);
                    isAppActive = true;

                } else if (tabId.equalsIgnoreCase("ManifestWall")) {
                    fetchManifestWallTrips(true);
                    isAppActive = true;

                }

            }// onTabChanged
        });

        tabHostWall.setup();

        TabSpec tabSpec;

        // WallTrips Tab
        if (AVL_Service.pref.getBoolean("ShowWallTrips", true)) {
            tabSpec = tabHostWall.newTabSpec("SubWallTrips");
            tabSpec.setIndicator("OnDemand Wall", getResources().getDrawable(R.drawable.walltrips));
            tabSpec.setContent(new TabContentFactory() {

                @Override
                public View createTabContent(String arg0) {

                    return createWallTripView();
                }
            });
            tabHostWall.addTab(tabSpec);
            tabtempIndex = 0;
            TextView tv6 = (TextView) (((ViewGroup) ((ViewGroup) (tabHostWall.getChildAt(0))).getChildAt(tabtempIndex)).getChildAt(1));
            tv6.setTextSize(miscFont);
        }

        // badge = new BadgeView(this, tabWidget, wallIndex);

        // Messages Tab
        tabSpec = tabHostWall.newTabSpec("ManifestWall");
        tabSpec.setIndicator("Manifest Wall", getResources().getDrawable(R.drawable.routes));
        tabSpec.setContent(new TabContentFactory() {

            @Override
            public View createTabContent(String arg0) {

                return createManifestWallTripView();
            }
        });

        tabHostWall.addTab(tabSpec);
        tabtempIndex++;
        TextView tv6 = (TextView) (((ViewGroup) ((ViewGroup) (tabHostWall.getChildAt(0))).getChildAt(tabtempIndex)).getChildAt(1));
        tv6.setTextSize(miscFont);

        wallbadge = new BadgeView(this, tabWidgetWall, 0);
        manifestbadge = new BadgeView(this, tabWidgetWall, 1);

        tabber.addView(tabHostWall);

        tabber.setId(WALLLIST);

        DisplayMetrics metrics = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(metrics);

        int h = metrics.heightPixels; // 1280
        int w = metrics.widthPixels; // 720

        if ((h == 1776 || h == 1920) && w == 1080) {

            tabber.setPadding(0, screenHeight / 20, 0, 0);

        }
        return tabber;

    }
    /*--------------------------------------------------------------createCannedMsgsView-----------------------------------------------------------------*/
    @SuppressWarnings("deprecation")
    @SuppressLint("NewApi")
    protected View createCannedMsgsView() {

        msgsPannel = new LinearLayout(this);
        msgsPannel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        msgsPannel.setOrientation(LinearLayout.VERTICAL);

        msgsListView = new ListView(this);
        msgsListView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 1));
        // msgsListView.setTranscriptMode(ListView.TRANSCRIPT_MODE_ALWAYS_SCROLL);
        msgsListView.setStackFromBottom(true);
        msgsListView.setId(MSGSLIST);

        // arrayListOfCMsgs = new ArrayList<CannedMessage>();
        cannnedMessagesAdapter = new CannedMessagesAdapter(this, R.layout.message_row, arrayListOfCMsgs);
        msgsListView.setAdapter(this.cannnedMessagesAdapter);
        cannnedMessagesAdapter.setNotifyOnChange(false);

        LinearLayout innerPannel = new LinearLayout(this);
        innerPannel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        innerPannel.setOrientation(LinearLayout.HORIZONTAL);

        composeMsg = new EditText(this);
        composeMsg.setInputType(InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS + InputType.TYPE_CLASS_TEXT);
        composeMsg.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.2f));
        composeMsg.requestFocus();
        composeMsg.setHint(Farsi.Convert(getResources().getString(R.string.LongClickForList)));

        composeMsg.setTextSize(miscFont);

        if (AVL_Service.DeviceMessageScreenConfig[4].equalsIgnoreCase("0")) {
            composeMsg.setInputType(InputType.TYPE_NULL);
            // InputMethodManager mgr = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
            // mgr.showSoftInput(composeMsg, InputMethodManager.RESULT_HIDDEN);
        }
        composeMsg.setOnLongClickListener(new OnLongClickListener() {

            @Override
            public boolean onLongClick(View v) {
                CharSequence[] canneditems = new CharSequence[AVL_Service.cmessages_Array.length];
                for (int i = 0; i < AVL_Service.cmessages_Array.length; i++) {
                    SpannableString ss1 = new SpannableString(AVL_Service.cmessages_Array[i]);

                    switch (Integer.parseInt(Fonts[AVL_Service.pref.getInt("FontPosition", 4)])) {
                        case -8 :
                            ss1.setSpan(new RelativeSizeSpan(.25f), 0, ss1.length(), 0);
                            break;
                        case -6 :
                            ss1.setSpan(new RelativeSizeSpan(.50f), 0, ss1.length(), 0);
                            break;
                        case -4 :
                            ss1.setSpan(new RelativeSizeSpan(.75f), 0, ss1.length(), 0);
                            break;
                        case -2 :
                            ss1.setSpan(new RelativeSizeSpan(1f), 0, ss1.length(), 0);
                            break;
                        case 0 :
                            ss1.setSpan(new RelativeSizeSpan(1.25f), 0, ss1.length(), 0);
                            break;
                        case 2 :
                            ss1.setSpan(new RelativeSizeSpan(1.50f), 0, ss1.length(), 0);
                            break;
                        case 4 :
                            ss1.setSpan(new RelativeSizeSpan(1.75f), 0, ss1.length(), 0);
                            break;
                        case 6 :
                            ss1.setSpan(new RelativeSizeSpan(2.0f), 0, ss1.length(), 0);
                            break;
                        case 8 :
                            ss1.setSpan(new RelativeSizeSpan(2.25f), 0, ss1.length(), 0);
                            break;
                    }
                    canneditems[i] = ss1;
                }
                AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this).setTitle(Farsi.Convert(getResources().getString(R.string.Canned_Messages))).setItems(
                        AVL_Service.cmessages_Array,
                        new DialogInterface.OnClickListener() {

                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                composeMsg.setText(AVL_Service.cmessages_Array[which]);
                            }
                        });
                AlertDialog alert = builder.create();
                alert.show();

                dialogFontSize(alert);
                return true;
            }
        });

        sendBtn = new Button(this);
        sendBtn.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.8f));

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            sendBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            sendBtn.setText(R.string.Send);
        } else
            sendBtn.setText(Farsi.Convert(getResources().getString(R.string.Send)));

        sendBtn.setTextSize(buttonFont);

        drawable = sendBtn.getBackground();
        drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            sendBtn.setBackground(drawable);
        else
            sendBtn.setBackgroundDrawable(drawable);

        mOutStringBuffer = new StringBuffer("");
        sendBtn.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View view) {
                String message = composeMsg.getText().toString();
                sendTextMsg(message);
            }
        });
        if (AVL_Service.DeviceMessageScreenConfig[1].equalsIgnoreCase("1")) {
            innerPannel.addView(composeMsg);
            innerPannel.addView(sendBtn);
        }

        msgsPannel.addView(msgsListView);
        msgsPannel.addView(innerPannel);

        return msgsPannel;
    }
    /*--------------------------------------------------------------sendTextMsg-----------------------------------------------------------------*/
    protected void sendTextMsg(String txt) {
        if (txt.length() > 0) {

            // Reset out string buffer to zero and clear the edit text field
            mOutStringBuffer.setLength(0);
            composeMsg.setText(mOutStringBuffer);

            Date d = new Date();
            String fDate = new SimpleDateFormat("HH:mm dd/MM/yyyy", Locale.US).format(d);
            CannedMessage newCannedMsg = new CannedMessage("INBOUND" + "^" + fDate + "^" + txt);

            synchronized (arrayListOfCMsgs) {
                arrayListOfCMsgs.add(newCannedMsg);
                arrayListOfCMsgs.notifyAll();
            }

            cannnedMessagesAdapter.notifyDataSetChanged();
            msgsListView.setSelection((cannnedMessagesAdapter.getCount() > 0) ? cannnedMessagesAdapter.getCount() - 1 : 0);
            serviceHandle.sendMessageToServer(txt, "XXXX", MsgType.TextMessage, AckType.NEW, MsgValidity.Medium, MsgPriority.Normal);
        }
    }

    /*--------------------------------------------------------------disableTripView-----------------------------------------------------------------*/
    protected void disableTripView() {

        pickupRouteButton.setEnabled(false);
        dropoffRouteButton.setEnabled(false);
        PickedButton.setEnabled(false);
        DroppedButton.setEnabled(false);
        pickupPOI.setTextColor(Color.DKGRAY);
        pickup.setTextColor(Color.DKGRAY);
        pickUnitLabel.setTextColor(Color.DKGRAY);
        pickUnitNumber.setTextColor(Color.DKGRAY);
        pickRemarks.setTextColor(Color.DKGRAY);
        dropoffPOI.setTextColor(Color.DKGRAY);
        dropoff.setTextColor(Color.DKGRAY);
        // FavoriteName.setTextColor(Color.DKGRAY);
        dropoff.setEnabled(false);
        dropUnitLabel.setTextColor(Color.DKGRAY);
        dropUnitNumber.setTextColor(Color.DKGRAY);
        dropRemarks.setTextColor(Color.DKGRAY);
        callOutButton.setEnabled(false);
        NoShowButton.setEnabled(false);
        tripNumber.setTextColor(Color.GRAY);
        passenger.setTextColor(Color.GRAY);
        phone.setTextColor(Color.GRAY);
        puDateTime.setTextColor(Color.GRAY);
        extraInfo.setTextColor(Color.DKGRAY);
        fundingLabel.setTextColor(Color.DKGRAY);
        fundingSource.setTextColor(Color.DKGRAY);
        paytypeLabel.setTextColor(Color.DKGRAY);
        paymentType.setTextColor(Color.DKGRAY);
        copayLbl.setTextColor(Color.DKGRAY);
        copayValue.setTextColor(Color.DKGRAY);
        tfareLabel.setTextColor(Color.DKGRAY);
        tfareValue.setTextColor(Color.DKGRAY);
        ttipLabel.setTextColor(Color.DKGRAY);
        ttipValue.setTextColor(Color.DKGRAY);
        textraLabel.setTextColor(Color.DKGRAY);
        textraValue.setTextColor(Color.DKGRAY);
        tCCLabel.setTextColor(Color.DKGRAY);
        tCCValue.setTextColor(Color.DKGRAY);
        tAuthLabel.setTextColor(Color.DKGRAY);
        tAuthValue.setTextColor(Color.DKGRAY);
        odoStartLabel.setTextColor(Color.DKGRAY);
        odoStartValue.setTextColor(Color.DKGRAY);
        odoEndLabel.setTextColor(Color.DKGRAY);
        odoEndValue.setTextColor(Color.DKGRAY);

        if (currentTrip.state.equalsIgnoreCase(States.DROPPED) && currentTrip.total > 0
                && (AVL_Service.pref.getBoolean("BlueBambooDevice", false) || (AVL_Service.pref.getBoolean("BluetoothMeter", false))))
            PickedButton.setEnabled(true);

        if (AVL_Service.pref.getBoolean("AtLocationButton", true)) {
            if (((ViewGroup) ((ViewGroup) ((ViewGroup) ((ViewGroup) currentView).getChildAt(0)).getChildAt(0)).getChildAt(0)).getChildAt(OverlayIndex) != null)
                (((ViewGroup) ((ViewGroup) ((ViewGroup) ((ViewGroup) currentView).getChildAt(0)).getChildAt(0)).getChildAt(0)))
                        .removeView(((ViewGroup) ((ViewGroup) ((ViewGroup) ((ViewGroup) currentView).getChildAt(0)).getChildAt(0)).getChildAt(0)).getChildAt(OverlayIndex));
        }
    }

    /*--------------------------------------------------------------enableTripView------------------------------------------------------------------*/
    protected void enableTripView() {

        if (currentTrip.nodeType.equalsIgnoreCase("DO")) {
            pickupRouteButton.setEnabled(false);
            dropoffRouteButton.setEnabled(true);
        } else if (currentTrip.nodeType.equalsIgnoreCase("PU")) {
            dropoffRouteButton.setEnabled(false);
            pickupRouteButton.setEnabled(true);
        } else if (currentTrip.nodeType.equalsIgnoreCase("PU\nDO")) {
            dropoffRouteButton.setEnabled(true);
            pickupRouteButton.setEnabled(true);
        }

        ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
        scheduler.schedule(new Runnable() {

            @Override
            public void run() {

                runOnUiThread(new Runnable() {
                    public void run() {
                        PickedButton.setEnabled(true);
                    }
                });

            }
        }, AVL_Service.pref.getInt("BtnDisableTime", 10), TimeUnit.SECONDS);
        // PickedButton.setEnabled(true);
        // DroppedButton.setEnabled(true);
        callOutButton.setEnabled(true);
        NoShowButton.setEnabled(true);
        pickupPOI.setTextColor(Color.rgb(128, 0, 255));
        pickup.setTextColor(Color.LTGRAY);
        pickUnitLabel.setTextColor(Color.WHITE);
        pickUnitNumber.setTextColor(Color.rgb(250, 130, 2));
        pickRemarks.setTextColor(Color.YELLOW);
        dropoffPOI.setTextColor(Color.rgb(128, 0, 255));
        dropoff.setEnabled(true);
        dropoff.setTextColor(Color.LTGRAY);
        // FavoriteName.setTextColor(Color.WHITE);
        dropUnitLabel.setTextColor(Color.WHITE);
        dropUnitNumber.setTextColor(Color.rgb(250, 130, 2));
        dropRemarks.setTextColor(Color.YELLOW);
        tripNumber.setTextColor(Color.MAGENTA);
        passenger.setTextColor(Color.YELLOW);
        phone.setTextColor(Color.CYAN);
        extraInfo.setTextColor(Color.YELLOW);
        fundingLabel.setTextColor(Color.WHITE);
        fundingSource.setTextColor(Color.rgb(250, 130, 2));
        paytypeLabel.setTextColor(Color.WHITE);
        paymentType.setTextColor(Color.CYAN);
        copayLbl.setTextColor(Color.WHITE);
        copayValue.setTextColor(Color.RED);

        if (AVL_Service.pref.getBoolean("AtLocationButton", true)) {
            if (currentTrip.state.equalsIgnoreCase(States.IRTPU))
                ((ViewGroup) ((ViewGroup) ((ViewGroup) ((ViewGroup) currentView).getChildAt(0)).getChildAt(0)).getChildAt(0)).addView(overlay, OverlayIndex);
            else if (((ViewGroup) ((ViewGroup) ((ViewGroup) ((ViewGroup) currentView).getChildAt(0)).getChildAt(0)).getChildAt(0)).getChildAt(OverlayIndex) != null)
                (((ViewGroup) ((ViewGroup) ((ViewGroup) ((ViewGroup) currentView).getChildAt(0)).getChildAt(0)).getChildAt(0)))
                        .removeView(((ViewGroup) ((ViewGroup) ((ViewGroup) ((ViewGroup) currentView).getChildAt(0)).getChildAt(0)).getChildAt(0)).getChildAt(OverlayIndex));
        }
    }
    /*---------------------------------------------------------------selectColor--------------------------------------------------------------------*/
    protected int selectColor(int pIndex) {

        switch (pIndex) {
            case 1 :
                return Color.rgb(0, 204, 51);
            case 2 :
                return Color.rgb(250, 130, 2);
            case 3 :
                return Color.rgb(242, 250, 2);
            case 4 :
                return Color.rgb(179, 52, 237);
            case 5 :
                return Color.rgb(250, 235, 250);
            case 6 :
                return Color.rgb(242, 15, 238);
            case 7 :
                return Color.rgb(230, 190, 117);
            case 8 :
                return Color.rgb(19, 237, 237);
            case 9 :
                return Color.rgb(250, 56, 2);
            case 10 :
                return Color.rgb(222, 146, 131);
            case 11 :
                return Color.rgb(51, 204, 204);
            case 12 :
                return Color.rgb(82, 88, 242);
            case 13 :
                return Color.rgb(201, 150, 242);
            case 14 :
                return Color.rgb(156, 219, 216);
            case 15 :
                return Color.rgb(17, 214, 204);
            case 16 :
                return Color.rgb(255, 204, 0);
            case 17 :
                return Color.rgb(190, 131, 201);
            case 18 :
                return Color.rgb(144, 176, 153);
            case 19 :
                return Color.rgb(212, 217, 156);
            case 20 :
                return Color.rgb(247, 134, 190);
            default :
                return Color.rgb(0, 255, 102);
        }
    }

    // ////////////////////////////////////////////////////////////////////////
    // Inbound Message Processing (Service Thread) //
    // Processed by a Handler for thread exchange. //
    // ////////////////////////////////////////////////////////////////////////

    /*--------------------------------------------------------------receivedHandshakeResponse-------------------------------------------------------*/
    @Override
    public void receivedHandshakeResponse(String[] msg) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.HandShakeResp, msg).sendToTarget();
    }

    /*--------------------------------------------------------------handleHandshakeResponse---------------------------------------------------------*/
    @SuppressLint("NewApi")
    private void handleHandshakeResponse(final String[] serverResp) {

        if (AVL_Service.pref.getString("AppLanguage", "").length() == 0) {
            if (getApplicationContext().getPackageName().contains("infonetmytaxi"))
                AVL_Service.pref.edit().putString("AppLanguage", "ar").commit();
        }
        SetApplicationLocal();

        if ((serverResp.length >= 18)) {
            if (getApplicationContext().getPackageName().contains("ycindy") && !serviceHandle.loggedIn()) {
                if (AVL_Service.pref.getBoolean("BluetoothMeter", true) && !(AVL_Service.pref.getBoolean("BluetoothMeter", false))) {
                    AVL_Service.pref.edit().putBoolean("BluetoothMeter", true).commit();
                    if (AVL_Service.pref.getBoolean("VeriFoneDevice", true) && !(AVL_Service.pref.getBoolean("VeriFoneDevice", false)))
                        AVL_Service.pref.edit().putBoolean("VeriFoneDevice", true).commit();
                }
            }

            // Toast.makeText(this, Farsi.Convert(getResources().getString(R.string.ServerHandshakesuccessful)), Toast.LENGTH_LONG).show();
            showToastMessage(R.string.ServerHandshakesuccessful);
            if (mainView.getId() == LOGINSCREEN) {

                if (serverResp.length > 22 && !serverResp[22].equalsIgnoreCase("")) {

                    AlertDialog.Builder builder = new AlertDialog.Builder(this);
                    builder.setMessage(Farsi.Convert(getDataFromResourse(serverResp[22]))).setIcon(android.R.drawable.ic_dialog_alert).setTitle(
                            Farsi.Convert(getResources().getString(R.string.ServerResponse))).setCancelable(false).setPositiveButton(
                            Farsi.Convert(getResources().getString(R.string.ok)),
                            new DialogInterface.OnClickListener() {
                                public void onClick(DialogInterface dialog, int id) {
                                    try {
                                        if (!serverResp[24].trim().equalsIgnoreCase(AVL_Service.appVersion)) {
                                            if (serverResp[23].contains(".apk"))
                                                new DownloadFilesTask().execute(serverResp[23].trim());
                                            else {
                                                Intent intent = new Intent(Intent.ACTION_VIEW);
                                                intent.setData(Uri.parse(serverResp[22]));
                                                startActivity(intent);
                                                logoff_Quit(Farsi.Convert(getResources().getString(R.string.ShuttingDown)));
                                            }

                                        }
                                    } catch (Exception e) {
                                        handleException("[Exception in downloading new version of application]" + "[handleHandshakeResponse]" + "[" + e.getLocalizedMessage() + "]");
                                    }

                                }
                            }).setNegativeButton(Farsi.Convert(getResources().getString(R.string.Cancel)), new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int id) {
                            dialog.dismiss();
                            if (AVL_Service.pref.getBoolean("IDTech", false)) {
                                profileDatabase = new ProfileDatabase(TaxiPlexer.this);
                                profileDatabase.initializeDB();
                                isUseAutoConfigProfileChecked = profileDatabase.getIsUseAutoConfigProfile();
                                initializeReader();
                            } else {
                                if (myUniMagReader != null)
                                    myUniMagReader.release();
                                if (profileDatabase != null)
                                    profileDatabase.closeDB();
                            }
                            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                                btnLogin.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                                btnLogin.setText(R.string.StartShift);
                            } else {
                                btnLogin.setText(Farsi.Convert(getResources().getString(R.string.StartShift)));
                                btnLogin.setTypeface(Typeface.DEFAULT_BOLD);
                            }

                            // btnLogin.setEnabled(true);

                            if (serverResp[4].equalsIgnoreCase("0") || serverResp[4].equalsIgnoreCase(""))
                                ttfVehicleID.setEnabled(true);
                            else {
                                ttfVehicleID.setEnabled(false);
                                ttfVehicleID.setText(serverResp[4]);
                            }

                            if (AVL_Service.SDShowLanguageChangeOption)
                                LanguageRow.setVisibility(View.VISIBLE);
                            else
                                LanguageRow.setVisibility(View.GONE);

                            if (AVL_Service.SDShowFontChangeOption)
                                FontRow.setVisibility(View.VISIBLE);
                            else
                                FontRow.setVisibility(View.GONE);
                            if (AVL_Service.SDShowPhoneandIMEI)
                                contain.setVisibility(View.VISIBLE);
                            else
                                contain.setVisibility(View.GONE);
                            if ((!AVL_Service.pref.getString("EULADate", "0").equals(ddMMyyyy.format(new Date()))) || !(AVL_Service.pref.getString("LastLoginDriver", "0").equals(AVL_Service.pref
                                    .getString("DriverID", "0")))) {

                                if (warningDialog != null)
                                    if (warningDialog.isShowing()) {
                                        warningDialog.dismiss();
                                    }

                                LayoutInflater li = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                                View w = li.inflate(R.layout.warning, null);

                                final TextView warningTitle = (TextView) w.findViewById(R.id.dialogTitle);
                                final TextView warningText = (TextView) w.findViewById(R.id.dialogText);
                                final Button warningBtn = (Button) w.findViewById(R.id.dialogBtn1);

                                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                                    warningTitle.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                                    warningTitle.setText(Farsi.Convert(getResources().getString(R.string.WARNING)));
                                } else {
                                    warningTitle.setText(Farsi.Convert(getResources().getString(R.string.WARNING)));
                                }
                                warningTitle.setTextSize(miscFont);

                                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                                    warningText.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                                    warningText.setText(Farsi.Convert(getResources().getString(R.string.warning)));
                                } else {
                                    warningText.setText(Farsi.Convert(getResources().getString(R.string.warning)));
                                }

                                warningText.setTextSize(miscFont);

                                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                                    warningBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                                    warningBtn.setText(Farsi.Convert(getResources().getString(R.string.ok)));
                                } else {
                                    warningBtn.setText(Farsi.Convert(getResources().getString(R.string.ok)));
                                }

                                warningBtn.setTextSize(miscFont);

                                if (android.os.Build.VERSION.SDK_INT <= android.os.Build.VERSION_CODES.HONEYCOMB_MR2)
                                    warningDialog = new AlertDialog.Builder(TaxiPlexer.this).setView(w).setCancelable(false).create();
                                else
                                    warningDialog = new AlertDialog.Builder(TaxiPlexer.this, R.style.DialogSlideAnim1).setView(w).setCancelable(false).create();

                                warningDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
                                warningDialog.show();

                                AVL_Service.pref.edit().putString("EULADate", ddMMyyyy.format(new Date())).commit();

                                warningBtn.setOnClickListener(new View.OnClickListener() {

                                    @Override
                                    public void onClick(View v) {
                                        AVL_Service.pref.edit().putString("EULADate", ddMMyyyy.format(new Date())).commit();
                                        warningDialog.dismiss();

                                    }
                                });

                            }

                            if(AVL_Service.SDEnableOdometerInput == 1){
                                dbh = new DBHelper(TaxiPlexer.this);
                            }

                            if (getApplicationContext().getPackageName().contains("infonetmytaxi")) {
                                if (serverResp[4].equalsIgnoreCase("0") || serverResp[4].equalsIgnoreCase("")) {
                                    if (AVL_Service.pref.contains("LDriverID") && AVL_Service.pref.contains("LPin") && AVL_Service.pref.contains("LVehicleID")) {
                                        ttfVehicleID.setText(AVL_Service.pref.getString("LVehicleID", ""));
                                        ttfUserid.setText(AVL_Service.pref.getString("LDriverID", ""));
                                        ttfPassword.setText(AVL_Service.pref.getString("LPin", ""));
                                        btnLogin.performClick();
                                    }
                                } else {
                                    if (AVL_Service.pref.contains("LDriverID") && AVL_Service.pref.contains("LPin")) {

                                        ttfUserid.setText(AVL_Service.pref.getString("LDriverID", ""));
                                        ttfPassword.setText(AVL_Service.pref.getString("LPin", ""));
                                        btnLogin.performClick();
                                    }
                                }
                            }
                        }


                    });
                    AlertDialog alert = builder.create();
                    alert.show();

                    dialogFontSize(alert);

                } else {
                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                        btnLogin.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                        btnLogin.setText(R.string.StartShift);
                    } else {
                        btnLogin.setText(Farsi.Convert(getResources().getString(R.string.StartShift)));
                        btnLogin.setTypeface(Typeface.DEFAULT_BOLD);
                    }


                    if (AVL_Service.pref.getBoolean("IDTech", false)) {
                        profileDatabase = new ProfileDatabase(TaxiPlexer.this);
                        profileDatabase.initializeDB();
                        isUseAutoConfigProfileChecked = profileDatabase.getIsUseAutoConfigProfile();
                        initializeReader();
                    } else {
                        if (myUniMagReader != null)
                            myUniMagReader.release();
                        if (profileDatabase != null)
                            profileDatabase.closeDB();
                    }

                    // btnLogin.setEnabled(true);

                    if (serverResp[4].equalsIgnoreCase("0") || serverResp[4].equalsIgnoreCase(""))
                        ttfVehicleID.setEnabled(true);
                    else {
                        ttfVehicleID.setEnabled(false);
                        ttfVehicleID.setText(serverResp[4]);
                    }

                    if (AVL_Service.SDShowLanguageChangeOption)
                        LanguageRow.setVisibility(View.VISIBLE);
                    else
                        LanguageRow.setVisibility(View.GONE);

                    if (AVL_Service.SDShowFontChangeOption)
                        FontRow.setVisibility(View.VISIBLE);
                    else
                        FontRow.setVisibility(View.GONE);

                    if ((!AVL_Service.pref.getString("EULADate", "0").equals(ddMMyyyy.format(new Date()))) || !(AVL_Service.pref.getString("LastLoginDriver", "0").equals(AVL_Service.pref.getString(
                            "DriverID",
                            "0")))) {

                        if (warningDialog != null)
                            if (warningDialog.isShowing()) {
                                warningDialog.dismiss();
                            }

                        LayoutInflater li = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                        View w = li.inflate(R.layout.warning, null);

                        final TextView warningTitle = (TextView) w.findViewById(R.id.dialogTitle);
                        final TextView warningText = (TextView) w.findViewById(R.id.dialogText);
                        final Button warningBtn = (Button) w.findViewById(R.id.dialogBtn1);

                        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                            warningTitle.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                            warningTitle.setText(Farsi.Convert(getResources().getString(R.string.WARNING)));
                        } else {
                            warningTitle.setText(Farsi.Convert(getResources().getString(R.string.WARNING)));
                        }

                        warningTitle.setTextSize(miscFont);
                        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                            warningText.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                            warningText.setText(Farsi.Convert(getResources().getString(R.string.warning)));
                        } else {
                            warningText.setText(Farsi.Convert(getResources().getString(R.string.warning)));
                        }
                        warningTitle.setTextSize(miscFont);
                        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                            warningBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                            warningBtn.setText(Farsi.Convert(getResources().getString(R.string.ok)));
                        } else {
                            warningBtn.setText(Farsi.Convert(getResources().getString(R.string.ok)));
                        }
                        warningBtn.setTextSize(buttonFont);
                        if (android.os.Build.VERSION.SDK_INT <= android.os.Build.VERSION_CODES.HONEYCOMB_MR2)
                            warningDialog = new AlertDialog.Builder(TaxiPlexer.this).setView(w).setCancelable(false).create();
                        else
                            warningDialog = new AlertDialog.Builder(TaxiPlexer.this, R.style.DialogSlideAnim1).setView(w).setCancelable(false).create();

                        warningDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));

                        warningDialog.show();

                        AVL_Service.pref.edit().putString("EULADate", ddMMyyyy.format(new Date())).commit();

                        warningBtn.setOnClickListener(new View.OnClickListener() {

                            @Override
                            public void onClick(View v) {
                                AVL_Service.pref.edit().putString("EULADate", ddMMyyyy.format(new Date())).commit();
                                warningDialog.dismiss();

                            }
                        });

                    }

                    if(AVL_Service.SDEnableOdometerInput == 1){
                        dbh = new DBHelper(TaxiPlexer.this);
                    }
                    if (getApplicationContext().getPackageName().contains("infonetmytaxi")) {
                        if (serverResp[4].equalsIgnoreCase("0") || serverResp[4].equalsIgnoreCase("")) {
                            if (AVL_Service.pref.contains("LDriverID") && AVL_Service.pref.contains("LPin") && AVL_Service.pref.contains("LVehicleID")) {
                                ttfVehicleID.setText(AVL_Service.pref.getString("LVehicleID", ""));
                                ttfUserid.setText(AVL_Service.pref.getString("LDriverID", ""));
                                ttfPassword.setText(AVL_Service.pref.getString("LPin", ""));
                                btnLogin.performClick();
                            }
                        } else {
                            if (AVL_Service.pref.contains("LDriverID") && AVL_Service.pref.contains("LPin")) {

                                ttfUserid.setText(AVL_Service.pref.getString("LDriverID", ""));
                                ttfPassword.setText(AVL_Service.pref.getString("LPin", ""));
                                btnLogin.performClick();
                            }
                        }
                    }
                }

            }

            if (AVL_Service.enableDialiePackageOnDevice)
                btnEnableHotSpot.setVisibility(View.VISIBLE);

            if (AVL_Service.pref.getBoolean("AllowCreditCard", true) && AVL_Service.CCProcessorList.containsKey("CAW")) {
                forceUnregister();
            }
            if (AVL_Service.pref.getString("IsProperLoggedOff", "1").equalsIgnoreCase("0") && !serviceHandle.loggedIn()) {
                serviceHandle.sendMessageToServer(
                        AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR + AVL_Service.pref.getString("LastLongitude", "0"),
                        "SDHS",
                        MsgType.LogoffReq,
                        AckType.NEW,
                        MsgValidity.Medium,
                        MsgPriority.AboveNormal);

                exitApp = false;
            }

        } else if (serverResp.length == 3 || serverResp.length == 2 || serverResp.length == 1) {

            AlertDialog.Builder builder = new AlertDialog.Builder(this);
            builder
                    .setMessage(Farsi.Convert(getDataFromResourse(serverResp[0])))
                    .setIcon(android.R.drawable.ic_dialog_alert)
                    .setTitle(Farsi.Convert(getResources().getString(R.string.ServerResponse)))
                    .setCancelable(false)
                    .setPositiveButton(Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int id) {
                            if (serverResp.length == 3) {
                                try {
                                    if (!serverResp[2].trim().equalsIgnoreCase(AVL_Service.appVersion)) {
                                        if (serverResp[1].contains(".apk"))
                                            new DownloadFilesTask().execute(serverResp[1].trim());
                                        else {
                                            Intent intent = new Intent(Intent.ACTION_VIEW);
                                            intent.setData(Uri.parse(serverResp[1]));
                                            startActivity(intent);
                                            logoff_Quit(Farsi.Convert(getResources().getString(R.string.ShuttingDown)));
                                        }

                                    }
                                } catch (Exception e) {
                                    handleException(e.getStackTrace()[0].getFileName() + "| "
                                            + e.getLocalizedMessage()
                                            + " in "
                                            + e.getStackTrace()[0].getMethodName()
                                            + " Line "
                                            + e.getStackTrace()[0].getLineNumber());
                                }
                            } else if (serverResp.length == 1) { // Activation Required OR Device is locked by admin

                                notificationManager.cancelAll();
                                ((CabDispatch) getApplicationContext()).stopService();

                                if (Meter != null) {
                                    Meter.cancel();
                                    Meter = null;
                                }
                                if (taxiMeterPrinter != null) {
                                    taxiMeterPrinter.cancel();
                                    taxiMeterPrinter = null;
                                }
                                if (bluebambooPrinter != null) {
                                    bluebambooPrinter.flush();
                                    bluebambooPrinter = null;
                                }
                                if (Vivotech != null) {
                                    Vivotech = null;
                                    VivotechDevice = null;
                                }

                                System.runFinalization();
                                System.exit(2);

                            } else if (serverResp.length == 2) { // registration required
                                currentView = createRegisterView();
                                setContentView(currentView);
                            }
                        }
                    })
                    .setNegativeButton(Farsi.Convert(getResources().getString(R.string.Cancel)), new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int id) {
                            dialog.dismiss();
                        }
                    });
            builder.show();
            if (mainView.getId() == LOGINSCREEN) {

                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                    btnLogin.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                    btnLogin.setText(R.string.handshake);
                } else {
                    btnLogin.setText(Farsi.Convert(getResources().getString(R.string.handshake)));
                    btnLogin.setTypeface(Typeface.DEFAULT_BOLD);
                }

            }
            // btnLogin.setEnabled(false);
            if (AVL_Service.enableDialiePackageOnDevice)
                checkIPPIM();

        } else
            Toast.makeText(getApplicationContext(), "Invalid Handshake message recieved\nLength = " + serverResp.length + "\nExpected = 18", Toast.LENGTH_LONG).show();
    }
    /*--------------------------------------------------------------receivedLoginResponse-----------------------------------------------------------*/
    @Override
    public void receivedLoginResponse(String[] msg) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.Login_Resp, msg).sendToTarget();

    }

    /*--------------------------------------------------------------handleLoginResponse-------------------------------------------------------------*/
    @SuppressWarnings("deprecation")
    @SuppressLint("NewApi")
    private void handleLoginResponse(String[] serverResp) {
        lockHandler.removeCallbacksAndMessages(null);
        msgHandlerForLoginWait.removeCallbacksAndMessages(null);
        SetApplicationLocal();
        hideProgressDialog();
        if (getApplicationContext().getPackageName().contains("infonetmytaxi")) {
            breakBtnLabel = getResources().getString(R.string.Busy);
            resumeButtonLabel = getResources().getString(R.string.Free);
        } else {
            breakBtnLabel = getResources().getString(R.string.Break);
            resumeButtonLabel = getResources().getString(R.string.Resume);
        }
        try {
            if (serverResp[0].equalsIgnoreCase("1")) {
                IsVerifoneConnectionMSGSend = false; // to send CMD1 to VeriFone one time
                IsVerifoneCMD8Received = false;
                VerifoneCMD8LastTime = 0;
                lastVerifoneCMD1MessageTime = 0;
                checkforloginresp = true;
                AVL_Service.pref.edit().putString("IsProperLoggedOff", "1").commit();
                WALL_ACTIONS[0] = Farsi.Convert(getResources().getString(R.string.PerformTrip));
                if (AVL_Service.enableDialiePackageOnDevice) {
                    this.registerReceiver(mReceiverFromPIM, new IntentFilter(INTENT_PIM_RECEIVER));
                }
                if (AVL_Service.DeviceMessageScreenConfig[1].equalsIgnoreCase("0") && AVL_Service.DeviceMessageScreenConfig[2].equalsIgnoreCase("0")) {
                    if (AVL_Service.sendBidOffers) {
                        if (!(AVL_Service.pref.getBoolean("ShowWallTrips", true)) && !AVL_Service.showManifestWallOnSD) {
                            wallIndex = -1;
                            messagesIndex = -2;
                            TripIndex = 3;
                        } else {
                            wallIndex = 3;
                            messagesIndex = -2;
                            TripIndex = 4;

                        }
                    } else {
                        if (!(AVL_Service.pref.getBoolean("ShowWallTrips", true)) && !AVL_Service.showManifestWallOnSD) {
                            wallIndex = -1;
                            messagesIndex = -2;
                            TripIndex = 2;
                        } else {
                            wallIndex = 2;
                            messagesIndex = -2;
                            TripIndex = 3;
                        }
                    }
                } else {
                    if (AVL_Service.sendBidOffers) {
                        if (!(AVL_Service.pref.getBoolean("ShowWallTrips", true)) && !AVL_Service.showManifestWallOnSD) {
                            wallIndex = -1;
                            messagesIndex = 3;
                            TripIndex = 4;
                        } else {
                            wallIndex = 3;
                            messagesIndex = 4;
                            TripIndex = 5;

                        }
                    } else {
                        if (!(AVL_Service.pref.getBoolean("ShowWallTrips", true)) && !AVL_Service.showManifestWallOnSD) {
                            wallIndex = -1;
                            messagesIndex = 2;
                            TripIndex = 3;
                        } else {
                            wallIndex = 2;
                            messagesIndex = 3;
                            TripIndex = 4;

                        }
                    }
                    fetchMessageHistory();
                }


                tabView = createTabbarView();

                mainView = tabView;
                mainView.setKeepScreenOn(true);
                setContentView(mainView);
                currentView = mainView;

                bookedZone = serverResp[2];
                bookedStand = serverResp[4];
                avlZone = serverResp[6];
                AVL_Service.pref.edit().putString("MeterAddress", serverResp[7]).putString("PrinterAddress", serverResp[7]).commit();

                cabValue.setText(AVL_Service.pref.getString("VehicleID", "Unknown"));
                driverValue.setText(AVL_Service.pref.getString("DriverID", "Unknown"));
                if (serverResp[2].equalsIgnoreCase("Unknown") || serverResp[2].equalsIgnoreCase("None") || serverResp[2].equalsIgnoreCase("0") || serverResp[2].equalsIgnoreCase("UNKWN")) {
                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                        bookedZoneValue.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                        bookedZoneValue.setText(getResources().getString(R.string.Unknown));
                    } else
                        bookedZoneValue.setText(getResources().getString(R.string.Unknown));

                } else
                    bookedZoneValue.setText(serverResp[2]);
                CurrentBookedZone = serverResp[2];
                zoneRankValue.setText(serverResp[3]);
                if (serverResp[4].equalsIgnoreCase("Unknown") || serverResp[4].equalsIgnoreCase("None") || serverResp[4].equalsIgnoreCase("0") || serverResp[4].equalsIgnoreCase("UNKWN")) {
                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                        bookedStandValue.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                        bookedStandValue.setText(getResources().getString(R.string.Unknown));
                    } else
                        bookedStandValue.setText(getResources().getString(R.string.Unknown));
                } else
                    bookedStandValue.setText(serverResp[4]);
                standRankValue.setText(serverResp[5]);
                avlZoneValue.setText(serverResp[6]);
                AVL_Service.pref.edit().putString("VehicleMilage", serverResp[8]).commit();
                milageTxt.setText(serverResp[8]);
                if (serverResp.length > 9)
                    CapacityOfVehicles = Integer.parseInt(serverResp[9]);

                if (serverResp.length > 10)
                    Driver_name = serverResp[10];
                else
                    Driver_name = " ";
                driverNameValue.setText(Driver_name);
                // totalBreaksTaken = Integer.valueOf(serverResp[9]);

                if (serverResp.length > 11)
                    autoZoneSetting = Integer.parseInt(serverResp[11]);
                else
                    autoZoneSetting = 1;

                if (serverResp.length > 12)
                    HandleGetDriverSnap(serverResp[12]);

                else
                    HandleGetDriverSnap("");

                if (serverResp.length > 13)
                    tftimer.setText(serverResp[13]);

                else
                    tftimer.setText("0.0");

                if (serverResp.length > 14)
                    edtimer.setText(serverResp[14]);

                else
                    edtimer.setText("0.0");

                String WelcomeTo = "";
                if (AVL_Service.pref.getString("AppLanguage", "en").equalsIgnoreCase("en"))
                    WelcomeTo = getResources().getString(R.string.WelcomeTo) + AVL_Service.pref.getString("Company", null);
                else
                    WelcomeTo = AVL_Service.pref.getString("Company", null) + getResources().getString(R.string.WelcomeTo);
                onRadioClick(WelcomeTo);

                if (AVL_Service.pref.getBoolean("AllowCreditCard", true) && AVL_Service.CCProcessorList.containsKey("Vantiv")) {

                    m_roamPayApiHandler = new RoamPayApiHandlerImpl();
                    m_roamPayApi = RoamPayApi.getInstance(getApplicationContext());
                    if (ACTIVATION_URL != null) {
                        m_roamPayApi.setActivationUrl(ACTIVATION_URL);
                    }
                    m_roamPayApi.initiateSession(generateInitiateSessionInputParameters(AVL_Service.CCProcessorList.get("Vantiv").get_UserName(), AVL_Service.CCProcessorList
                            .get("Vantiv")
                            .get_AccountPassword()), m_roamPayApiHandler);
                }
                // Toast.makeText(this, Farsi.Convert(Farsi.Convert(getDataFromResourseForSplitStrings(serverResp[1]))), Toast.LENGTH_LONG).show();
                // Toast.makeText(this, Farsi.Convert(Farsi.Convert(getDataFromResourseForSplitStrings(serverResp[1]))), Toast.LENGTH_LONG).show();
                showToastMessageFromString(getDataFromResourseForSplitStrings(serverResp[1]));
                showToastMessageFromString(getDataFromResourseForSplitStrings(serverResp[1]));
                if (AVL_Service.pref.getBoolean("TaxiMileagePrompt", true))
                    if ((!AVL_Service.pref.getString("VehicleMilageDate", "0").equals(ddMMyyyy.format(new Date()))) || !(AVL_Service.pref.getString("LastLoginDriver", "0").equals(AVL_Service.pref
                            .getString("DriverID", "0")))) {

                        if (android.os.Build.VERSION.SDK_INT <= android.os.Build.VERSION_CODES.HONEYCOMB_MR2)
                            tripRejectDialog = new AlertDialog.Builder(this).setView(createVehicleMilageView()).setCancelable(false).create();
                        else
                            tripRejectDialog = new AlertDialog.Builder(this, R.style.DialogSlideAnim2).setView(createVehicleMilageView()).setCancelable(false).create();

                        tripRejectDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
                        tripRejectDialog.show();

                    }

                // fetchMessageHistory();
                serviceHandle.setloggedIn(true);
                _isLoggedInOnce = true;
                IsMeterLockedOnAppQuit = false;
                // if (((System.currentTimeMillis() / 1000) - (lastUpdated / 1000)) > MsgValidity.Long) {
                // // serviceHandle.sendMessageToServer("ZFT", "SDHS", MsgType.ZFTReq, AckType.NEW, MsgValidity.Medium, MsgPriority.Normal);
                // if (AVL_Service.pref.getBoolean("ShowWallTrips", true))
                // fetchWallTrips(false);
                // }
                //
                // if (((System.currentTimeMillis() / 1000) - (lastUpdated_MWall / 1000)) > MsgValidity.Long) {
                // // serviceHandle.sendMessageToServer("ZFT", "SDHS", MsgType.ZFTReq, AckType.NEW, MsgValidity.Medium, MsgPriority.Normal);
                // if (AVL_Service.showManifestWallOnSD)
                // fetchManifestWallTrips(false);
                // }
                break_status = 0;
                if (break_status == 0) {
                    if (tabberView_breakBtn != null) {
                        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                            tabberView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                            tabberView_breakBtn.setText(breakBtnLabel);
                        } else
                            tabberView_breakBtn.setText(Farsi.Convert(breakBtnLabel));
                        // tabberView_breakBtn.setTextColor(Color.WHITE);
                        drawable = tabberView_breakBtn.getBackground();
                        drawable.setColorFilter(Color.parseColor(AVL_Service.SDBreakColor), Mode.SRC_IN);
                        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                            tabberView_breakBtn.setBackground(drawable);
                        else
                            tabberView_breakBtn.setBackgroundDrawable(drawable);
                    }
                    if (tripView_breakBtn != null) {
                        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                            tripView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                            tripView_breakBtn.setText(breakBtnLabel);
                        } else
                            tripView_breakBtn.setText(Farsi.Convert(breakBtnLabel));
                        // tripView_breakBtn.setTextColor(Color.WHITE);
                        drawable = tripView_breakBtn.getBackground();
                        drawable.setColorFilter(Color.parseColor(AVL_Service.SDBreakColor), Mode.SRC_IN);
                        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                            tripView_breakBtn.setBackground(drawable);
                        else
                            tripView_breakBtn.setBackgroundDrawable(drawable);
                    }
                    if (estimateView_breakBtn != null) {
                        // estimateView_breakBtn.setTextColor(Color.WHITE);
                        drawable = estimateView_breakBtn.getBackground();
                        drawable.setColorFilter(Color.parseColor(AVL_Service.SDBreakColor), Mode.SRC_IN);
                        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                            estimateView_breakBtn.setBackground(drawable);
                        else
                            estimateView_breakBtn.setBackgroundDrawable(drawable);
                    }
                    if (paymentView_breakBtn != null) {
                        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                            paymentView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                            paymentView_breakBtn.setText(breakBtnLabel);
                        } else
                            paymentView_breakBtn.setText(Farsi.Convert(breakBtnLabel));
                        // paymentView_breakBtn.setTextColor(Color.WHITE);
                        drawable = paymentView_breakBtn.getBackground();
                        drawable.setColorFilter(Color.parseColor(AVL_Service.SDBreakColor), Mode.SRC_IN);
                        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                            paymentView_breakBtn.setBackground(drawable);
                        else
                            paymentView_breakBtn.setBackgroundDrawable(drawable);
                    }
                }
                // if (mainView.isShown())TripIndex
                // ScheduledExecutorService schedulerTrip = Executors.newSingleThreadScheduledExecutor();
                // schedulerTrip.schedule(new Runnable() {
                //
                // @Override
                // public void run() {
                //
                // runOnUiThread(new Runnable() {
                // public void run() {
                // tabHost.getTabWidget().getChildAt(TripIndex).performClick();
                // }
                // });
                // }
                // }, 2, TimeUnit.SECONDS);

                ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
                scheduler.schedule(new Runnable() {

                    @Override
                    public void run() {

                        runOnUiThread(new Runnable() {
                            public void run() {
                                serviceHandle.sendMessageToServer("ZFT", "SDHS", MsgType.ZFTReq, AckType.NEW, MsgValidity.Medium, MsgPriority.Normal);
                            }
                        });
                    }
                }, 3, TimeUnit.SECONDS);

                if (autoZoneSetting == 1) {
                    ScheduledExecutorService schedulerAuto = Executors.newSingleThreadScheduledExecutor();
                    schedulerAuto.schedule(new Runnable() {

                        @Override
                        public void run() {

                            runOnUiThread(new Runnable() {
                                public void run() {
                                    zoneBookIn("998", "0");
                                }
                            });
                        }
                    }, 4, TimeUnit.SECONDS);

                }

				/*
				 * ScheduledExecutorService schedulerTripList = Executors.newSingleThreadScheduledExecutor();
				 * schedulerTripList.schedule(new Runnable() {
				 * 
				 * @Override
				 * public void run() {
				 * 
				 * runOnUiThread(new Runnable() {
				 * public void run() {
				 * 
				 * fetchTripList();
				 * }
				 * });
				 * }
				 * }, 5, TimeUnit.SECONDS);
				 */

                if (AVL_Service.enableDialiePackageOnDevice)
                    this.registerReceiver(mReceiverFromPIM, new IntentFilter(INTENT_PIM_RECEIVER));
                // if (AVL_Service.enableDialiePackageOnDevice) {
                // PingFrame();
                // }
                if (AVL_Service.PPV_UsePPVModule)
                    GetBalanceAndBlackListStatus(3);

                if (AVL_Service.CCProcessorList != null && AVL_Service.CCProcessorList.get("CAW") != null && AVL_Service.CCProcessorList.get("CAW").get_isTestCAWKey())
                    Transaction.useTestHost(mTestHost);
                if (AVL_Service.enableDialiePackageOnDevice) {
                    if (!AVL_Service.pref.getString("VehicleMilageDate", "0").equals(ddMMyyyy.format(new Date()))) {
                        checkIPPIM();
                        sendIPPIM(DialiePIMIP);

                        ScheduledExecutorService scheduler1 = Executors.newSingleThreadScheduledExecutor();
                        scheduler1.schedule(new Runnable() {

                            @Override
                            public void run() {

                                runOnUiThread(new Runnable() {
                                    public void run() {
                                        DeviceInformationFrame(
                                                "3012082222",
                                                "ITC-wi-fi-" + AVL_Service.pref.getString("VehicleID", "").trim(),
                                                AVL_Service.pref.getString("VehicleID", "").trim(),
                                                DialiePIMIP,
                                                getLocalIpAddress(),
                                                "N7100",
                                                AVL_Service.appVersion,
                                                AVL_Service.appVersion,
                                                "false");
                                    }
                                });
                            }
                        }, 1, TimeUnit.SECONDS);

                        if (!AVL_Service.pref.getBoolean("TaxiMileagePrompt", true))
                            AVL_Service.pref.edit().putString("VehicleMilageDate", ddMMyyyy.format(new Date())).commit();
                    } else {

                        checkIPPIM();
                        sendIPPIM(DialiePIMIP);
                        AuthenticationFrame("0000000", "0000");
                    }
                }
                if (AVL_Service.enableDialiePackageOnDevice) {

                    // AuthenticationFrame("0000000", "0000");

                    PIMLastCommandName = "";
                }

                if(AVL_Service.SDEnableAsteriskExtension) {
                    SDAsteriskExt = fixedLengthString(AVL_Service.TSPID, Integer.valueOf(AVL_Service.SIPExtPattern.substring(0, 1))) + fixedLengthString(AVL_Service.pref.getString("DriverID", "Unknown"), Integer.valueOf(AVL_Service.SIPExtPattern.substring(1, 2)));
                    int indexOfN = AVL_Service.SIPPwdPattern.indexOf("n");
                    SDAsteriskPwd = "";
                    for(int i=0; i<(Integer.valueOf(AVL_Service.SIPExtPattern.substring(0, 1)) + Integer.valueOf(AVL_Service.SIPExtPattern.substring(1, 2))); i++){
//                        if(i==indexOfN)
//                            SDAsteriskPwd += Driver_name.substring(0, 1);
//                        else {
                        char c = AVL_Service.SIPPwdPattern.charAt(i);
                        if(Character.isLetter(c)){
                            SDAsteriskPwd += c;
                        } else {
                            if (i <= SDAsteriskExt.length())
                                SDAsteriskPwd += SDAsteriskExt.substring(Integer.valueOf(AVL_Service.SIPPwdPattern.substring(i, i + 1)) - 1, Integer.valueOf(AVL_Service.SIPPwdPattern.substring(i, i + 1)));
                            else
                                SDAsteriskPwd += "0";
//                        }
                        }
                    }
                    if (abtoPhone == null)
                        setUpSipExtension();
                }
                tabHost.setCurrentTab(StatusIndex);
                if (AVL_Service.pref.getBoolean("softMeter", false)){
                    AVL_Service.softmeterthreadstart();
                    AVL_Service.fetchClassofServiceRates();
                }

            } else {

                AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                builder.setIcon(android.R.drawable.ic_dialog_alert).setTitle(Farsi.Convert(getResources().getString(R.string.LoginFailure))).setMessage(
                        Farsi.Convert(getDataFromResourseForSplitStrings(serverResp[1]))).setPositiveButton(Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    } // onClick

                });
                AlertDialog alert = builder.create();
                alert.show();

                dialogFontSize(alert);
                // Toast.makeText(this, serverResp[1], Toast.LENGTH_LONG).show();
            }
        } catch (Exception e) {
            handleException("[Exception in handleLoginResponse]" + "[handleLoginResponse]" + "[" + e.getLocalizedMessage() + "]" + "TaxiPlexer: invalid Login response\n" + Arrays.toString(serverResp));
        }
    }
    /*--------------------------------------------------------------receivedRegisterResponse--------------------------------------------------------*/
    @Override
    public void receivedRegisterResponse(String[] msg) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.registerResp, msg).sendToTarget();

    }

    /*--------------------------------------------------------------handleRegisterResponse----------------------------------------------------------*/
    private void handleRegisterResponse(String[] serverResp) {
        SetApplicationLocal();
        hideProgressDialog();
        try {
            if (serverResp[0].equalsIgnoreCase("1")) {
                // Toast.makeText(this, Farsi.Convert(getDataFromResourseForSplitStrings(serverResp[1])), Toast.LENGTH_LONG).show();

                showToastMessageFromString(getDataFromResourseForSplitStrings(serverResp[1]));
                AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                builder.setIcon(android.R.drawable.ic_dialog_alert).setTitle(Farsi.Convert(getResources().getString(R.string.Registrationsuccessful))).setMessage(
                        Farsi.Convert(getDataFromResourse(serverResp[1]))).setPositiveButton(Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {

                        setContentView(mainView);
                        currentView = mainView;
                        finish();

                    } // onClick

                });
                AlertDialog alert = builder.create();
                alert.show();

                dialogFontSize(alert);

            } else {
                // Toast.makeText(this, Farsi.Convert(getDataFromResourseForSplitStrings(serverResp[1])), Toast.LENGTH_LONG).show();

                showToastMessageFromString(getDataFromResourseForSplitStrings(serverResp[1]));
            }
        } catch (Exception e) {
            handleException("[Exception in handleRegisterResponse]" + "[handleRegisterResponse]"
                    + "["
                    + e.getLocalizedMessage()
                    + "]"
                    + "TaxiPlexer: invalid Register Response\n"
                    + Arrays.toString(serverResp));
        }
    }
    /*--------------------------------------------------------------receivedLogoffResponse----------------------------------------------------------*/
    @Override
    public void receivedLogoffResponse(String[] msg) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.LogoffResp, msg).sendToTarget();

    }

    /*--------------------------------------------------------------handleLogoffResponse------------------------------------------------------------*/
    protected void handleLogoffResponse(String[] serverResp) {
        if (abtoPhone != null)
            if (abtoPhone.isActive()) {
                try {
                    abtoPhone.unregister();
                } catch (Exception e) {
                    exceptionToast(e.toString());
                }
            }
        abtoPhone = null;
        registered = false;
        isCaling = false;

        if (serverResp[0].equalsIgnoreCase("1") && serviceHandle.loggedIn()) {
            serviceHandle.setloggedIn(false);
            if (AVL_Service.SDEnableMeterLocking && AVL_Service.pref.getBoolean("PulsarMeter", false)) {
                if (Meter == null) {
                    EndShiftThenLock();
                } else if (Meter != null) {
                    if (!Meter.isConnectionAlive())
                        EndShiftThenLock();
                    else
                        _isLoggedInOnce = false;
                }
            }
        }

        if (!serviceHandle.loggedIn()) {

            if (AVL_Service.enableDialiePackageOnDevice)
                LogoutFrame();
            if (IsActiveRespDialog != null) {
                if (IsActiveRespDialog.isShowing())
                    IsActiveRespDialog.dismiss();
            }

            if (aDialog != null) {
                if (aDialog.isShowing())
                    aDialog.dismiss();
            }

            if (tripAdapter != null)
                tripAdapter.clear();
			/*
			 * if (TTS)
			 * mTTS.speak(Farsi.Convert(getResources().getString(R.string.bye)), TextToSpeech.QUEUE_FLUSH, null);
			 */
            if (Meter != null) {
                if (AVL_Service.pref.getBoolean("VeriFoneDevice", false) && (tvTaxiMeter != null && tvTaxiMeter.getText().toString().equalsIgnoreCase("Connected"))) {
                    customMessage = new CustomMessage("Logg Off", "11");
                    Meter.writeCustom(customMessage);
                }

                if (bluebambooPrinter != null) {
                    bluebambooPrinter.flush();
                    bluebambooPrinter = null;
                }

                if (AVL_Service.SDEnableMeterLocking && AVL_Service.pref.getBoolean("PulsarMeter", false) && Meter != null) {
                    if (Meter.isConnectionAlive()) {
                        Meter.lockMeter();

                        Meter.cancel();
                        Meter = null;

                        if (taxiMeterPrinter != null) {
                            taxiMeterPrinter.lockMeter();
                            taxiMeterPrinter.cancel();
                            taxiMeterPrinter = null;
                        }

                        if (mBluetoothAdapter != null) {
                            mBluetoothAdapter.disable();
                        }
                        mBluetoothAdapter = null;
                        IsMeterLockedOnAppQuit = true;
                    }
                } else {
                    Meter.cancel();
                    Meter = null;

                }
            }

            if (Vivotech != null) {
                Vivotech = null;
                VivotechDevice = null;
            }

            tabView = null;
            tabtempIndex = 0;
            tabberView_breakBtn = null;

            onRadioClick(getResources().getString(R.string.bye));
            currentTrip = null;
            if (exitApp == false) {
                if (loginView == null)
                    // Updated
                    loginView = createLoginView();
                mainView = loginView;
                mainView.setKeepScreenOn(true);
                setContentView(mainView);
                currentView = mainView;
            }
            // Toast.makeText(this, Farsi.Convert(getDataFromResourse(serverResp[1])), Toast.LENGTH_SHORT).show();

            showToastMessageFromString(getDataFromResourse(serverResp[1]));
        } else {
            // Toast.makeText(this, Farsi.Convert(getDataFromResourse(serverResp[1])), Toast.LENGTH_LONG).show();

            showToastMessageFromString(getDataFromResourse(serverResp[1]));
        }
        htimer.removeCallbacks(r1);
        hideProgressDialog();
        // if (exitApp == true)
        // this.finish();

    }
    /*--------------------------------------------------------------receivedAVLResp-----------------------------------------------------------------*/
    @Override
    public void receivedAVLResp(String msg) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.AVLResp, msg).sendToTarget();

    }

    /*--------------------------------------------------------------handleAVLResp-------------------------------------------------------------------*/
    public void handleAVLResp(String msg) {
        try {
            String[] columns = msg.split(Character.toString(Constants.BODYSEPARATOR));
            columns = columns[1].split("\\" + Character.toString(Constants.COLSEPARATOR));
            if (columns.length == MsgType.AVLRespFields) {
                if (columns[0].equalsIgnoreCase("Unknown") || columns[0].equalsIgnoreCase("None") || columns[0].equalsIgnoreCase("0") || columns[0].equalsIgnoreCase("UNKWN"))
                    bookedZone = "Unknown";
                else
                    bookedZone = columns[0];
                CurrentBookedZone = columns[0];
                avlZone = columns[4];
                if (columns[2].equalsIgnoreCase("Unknown") || columns[2].equalsIgnoreCase("None") || columns[2].equalsIgnoreCase("0") || columns[2].equalsIgnoreCase("UNKWN"))
                    bookedStand = "Unknown";
                else
                    bookedStand = columns[2];
                zoneRankValue.setText(columns[1]);
                standRankValue.setText(columns[3]);
                avlZoneValue.setText(avlZone);

                if (AVL_Service.pref.getBoolean("ShowWallTrips", true))
                    if ((((System.currentTimeMillis() / 1000) - (lastUpdated / 1000)) > AVL_Service.WallRefreshTimer) && mainView.isShown())
                        fetchWallTrips(false, false);

                if (AVL_Service.showManifestWallOnSD)
                    if ((((System.currentTimeMillis() / 1000) - (lastUpdated_MWall / 1000)) > AVL_Service.WallRefreshTimer) && mainView.isShown())
                        fetchManifestWallTrips(false);

                if (!bookedZoneValue.getText().toString().equalsIgnoreCase(bookedZone) || !bookedStandValue.getText().toString().equalsIgnoreCase(bookedStand)) {
                    if (TTS && (AVL_Service.pref.getBoolean("AudioCommands", false)))
                        mTTS.speak(columns[5], TextToSpeech.QUEUE_FLUSH, null);
                    if (mainView.isShown())
                        if (!bookedZone.equalsIgnoreCase("Unknown") || !bookedStand.equalsIgnoreCase("Unknown"))
                            serviceHandle.sendMessageToServer("ZFT", "SDHS", MsgType.ZFTReq, AckType.NEW, MsgValidity.Medium, MsgPriority.Normal);
                }// if
                // Toast.makeText(getApplicationContext(), Farsi.Convert(getDataFromResourseForSplitStrings(columns[5])), Toast.LENGTH_LONG).show();
                showToastMessageFromString(getDataFromResourseForSplitStrings(columns[5]));

                bookedZoneValue.setText(bookedZone);
                bookedStandValue.setText(bookedStand);

                // if Bluetooth connection required
                if (AVL_Service.loggedIn) {
                    if (AVL_Service.enableDialiePackageOnDevice) {

                        if (diale_Acknowledge) {
                            if (!diale_Authorize)
                                AuthenticationFrame(AVL_Service.pref.getString("VehicleID", "0"), DriverPin);
                        } else
                            DeviceInformationFrame(
                                    "3012082222",
                                    "Android_AP",
                                    AVL_Service.tm.getDeviceId(),
                                    getClientList(false, 300).get(0).toString(),
                                    getLocalIpAddress(),
                                    "N7100",
                                    AVL_Service.appVersion,
                                    AVL_Service.appVersion,
                                    "false");

                        PingFrame();
                    }
                    // else
                    // {
                    // if ((AVL_Service.pref.getBoolean("BluetoothMeter", false) || AVL_Service.pref.getBoolean("VivotechDevice", false) ||
                    // AVL_Service.pref.getBoolean("BlueBambooDevice", false))) {
                    // if (mBluetoothAdapter == null)
                    // mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
                    // final Context tempContext = getBaseContext();
                    // if (mBluetoothAdapter == null) {
                    // // Device does not support Bluetooth
                    // Log.w(getClass().getSimpleName(), "Bluetooth not supported.");
                    // Toast.makeText(tempContext, "Bluetooth not supported!", Toast.LENGTH_LONG).show();
                    // } else {
                    // if (!mBluetoothAdapter.isEnabled()) {
                    // Log.w(getClass().getSimpleName(), "Bluetooth not enabled.");
                    // curr_MeterState = getResources().getString(R.string.NotConnected);
                    // setMeterStatus(true, "0", mBluetoothAdapter.isEnabled());
                    // Toast.makeText(tempContext, "Bluetooth not enabled, trying to enable", Toast.LENGTH_LONG).show();
                    // Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
                    // startActivityForResult(enableBtIntent, Constants.REQUEST_ENABLE_BT);
                    // // tabHost.getTabWidget().getChildAt(ZoneIndex).requestFocusFromTouch();
                    // } else {
                    //
                    // Message lmsg = new Message();
                    // lmsg.obj = null;
                    // lmsg.what = MsgType.TabberClick;
                    // msgHandler.sendMessageDelayed(lmsg, 1000);
                    //
                    // }// if bluetooth enabled
                    // }// if bluetooth not supported
                    // }
                    // }
                }
            } else
                Toast.makeText(getApplicationContext(), "Invalid AVLResponse message recieved\nLength = " + columns.length + "\nExpected = 6", Toast.LENGTH_LONG).show();
        } catch (Exception e) {

            handleException("[Exception in handleAVLResp]" + "[handleAVLResp]" + "[" + e.getLocalizedMessage() + "]" + "TaxiPlexer: invalid Register Response\n" + msg);

        }
    }
    public void UpdateMeterState() {
        SetApplicationLocal();
        if (bluetoothExecption) {
            showToastMessage(R.string.Use_Connect_Meter_Button_to_Establish_Connection);
            // Toast.makeText(TaxiPlexer.this, "Use Connect Meter Button to Establish Connection", Toast.LENGTH_LONG).show();
        } else {
            try {
                if ((AVL_Service.pref.getBoolean("BluetoothMeter", false) || AVL_Service.pref.getBoolean("VivotechDevice", false) || AVL_Service.pref.getBoolean("BlueBambooDevice", false))) {
                    if (mBluetoothAdapter == null)
                        mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
                    if (mBluetoothAdapter == null) {
                        // Device does not support Bluetooth
                        Log.w(getClass().getSimpleName(), "Bluetooth not supported.");
                        showToastMessage(R.string.Bluetoothnotsupported);
                        // Toast.makeText(tempContext, Farsi.Convert(getResources().getString(R.string.Bluetoothnotsupported)), Toast.LENGTH_LONG).show();

                    } else {
                        if (!mBluetoothAdapter.isEnabled()) {
                            Log.w(getClass().getSimpleName(), "Bluetooth not enabled.");
                            curr_MeterState = getResources().getString(R.string.NotConnected);
                            setMeterStatus(true, "0", mBluetoothAdapter.isEnabled());
                            showToastMessage(R.string.Bluetoothnotenabled);
                            Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
                            startActivityForResult(enableBtIntent, Constants.REQUEST_ENABLE_BT);
                            // tabHost.getTabWidget().getChildAt(ZoneIndex).requestFocusFromTouch();
                        } else {

                            Message lmsg = new Message();
                            lmsg.obj = null;
                            lmsg.what = MsgType.TabberClick;
                            msgHandler.sendMessageDelayed(lmsg, 1000);

                        }// if bluetooth enabled
                    }// if bluetooth not supported
                }
            } catch (Exception e) {
                handleException("[Exception in UpdateMeterState]" + "[UpdateMeterState]" + "[" + e.getLocalizedMessage() + "]");
            }

        }
    }

    public void receivedSetNetworkStatus(boolean status) {

        SetApplicationLocal();

        // Toast.makeText(getApplicationContext(), "i am in recievedSetNetworkStatus", Toast.LENGTH_LONG).show();
        if (AVL_Service.loggedIn) {
            if (status == false) {
                imgwifi.setBackgroundResource(R.drawable.internet_icon);
            } else {
                imgwifi.setBackgroundResource(R.drawable.internet_icon_green);
            }

        }
    }

    public void receivedSetGPSstatus(boolean status) {

        SetApplicationLocal();
        if (AVL_Service.loggedIn) {
            if (!status) {
                imgGPS.setBackgroundResource(R.drawable.gps_2);
            } else {
                imgGPS.setBackgroundResource(R.drawable.gps_1);
            }
        }

    }

    /*--------------------------------------------------------------receivedBidUpdate---------------------------------------------------------------*/
    @Override
    public void receivedBidUpdate(String msg) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.BID_Offer, msg).sendToTarget();
    }

    /*--------------------------------------------------------------handleBidUpdate-----------------------------------------------------------------*/
    public void handleBidUpdate(String msg) {

        try {
            String[] columns = msg.split(Character.toString(Constants.BODYSEPARATOR));
            bidResponse = columns[1].split("\\" + Character.toString(Constants.COLSEPARATOR));

            if (currentView.getId() != TRIPDETAILVIEW || currentView.getId() != PAYMENTVIEW)
                tabHost.setCurrentTab(BidIndex);

            if (bidPanel != null) {
                int i = 0;
                View bid;
                while (i < bidPanel.getChildCount()) {
                    bid = bidPanel.getChildAt(i);
                    if (bid.getTag().toString().equalsIgnoreCase(bidResponse[1]))
                        bidPanel.removeViewAt(i);
                    else
                        i++;
                }// while
                bidPanel.addView(insertBid(bidResponse[0], bidResponse[1], bidResponse[3]));
                bidCount = bidPanel.getChildCount() + 1;
                ImageView iv = (ImageView) tabHost.getTabWidget().getChildAt(BidIndex).findViewById(android.R.id.icon);
                iv.setImageDrawable(getResources().getDrawable(R.drawable.icon + (bidCount > 10 ? 10 : bidCount)));

                int notificationID = 10;
                // Create the notification
                Notification notification = new Notification(R.drawable.icon, "Dispatch - New Bid Received", System.currentTimeMillis());
                // Create the notification expanded message
                // When the user clicks on it, it opens your activity
                Intent intent = new Intent(getApplicationContext(), TaxiPlexer.class);
                intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
                PendingIntent pendingIntent = PendingIntent.getActivity(getApplicationContext(), 0, intent, 0);
                notification.setLatestEventInfo(this, "New Bid Received", "New Bid Received for " + bidResponse[1] + " Zone.", pendingIntent);
                notification.flags = Notification.FLAG_AUTO_CANCEL;
                notificationManager.notify(notificationID, notification);

                if (recognizer && TTS) {
                    onRadioClick(getResources().getString(R.string.BidPlease));
                    if (AVL_Service.pref.getBoolean("AudioCommands", false)) {
                        String BidAvailable = "";
                        if (AVL_Service.pref.getString("AppLanguage", "en").equalsIgnoreCase("en"))
                            BidAvailable = getResources().getString(R.string.BidAvailableinZone) + bidResponse[1] + getResources().getString(R.string.PleasesayyestoAccept);
                        else
                            BidAvailable = getResources().getString(R.string.PleasesayyestoAccept) + bidResponse[1] + getResources().getString(R.string.BidAvailableinZone);
                        onRadioClick(BidAvailable);
                        startVoiceRecognitionActivity(Constants.BID_CODE);
                    }
                } else {
                    bidOfferSound.start();
                    Toast.makeText(getApplicationContext(), "Speech Engine not present", Toast.LENGTH_SHORT).show();
                }
            }

        } catch (Exception e) {
            exception("[Exception in handleBidUpdate]" + "[handleBidUpdate]" + "[" + e.getLocalizedMessage() + "]" + msg);
        }
    }

    /*--------------------------------------------------------------receivedEstimatedFareResp-------------------------------------------------------------*/
    @Override
    public void receivedEstimatedFareResp(String msg) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.EstimatedFareResp, msg).sendToTarget();
    }

	/*--------------------------------------------------------------handleEstimatedFareResp-------------------------------------------------------------*/

    protected void handleEstimatedFareResp(String msg) {
        try {
            AVL_Service.pref.edit().putString("EstimateFare", msg).commit();
            if (currentTrip != null) {
                if (ttfFare != null && (Float.parseFloat(Fare.trim().equalsIgnoreCase("") ? "0.0" : Fare) == 0))
                    if (AVL_Service.showEstdCostOnSDByFundingSource.contains(currentTrip.fundingSource))
                        ttfFare.setText(dFormat.format(Float.parseFloat(EstCostforFundingSource)));
                    else
                        ttfFare.setText(dFormat.format(Float.parseFloat(msg)));
                currentTrip.estimatedCost = msg;
            } else {
                if (IsEstimationFromFlaggerEstimation) {
                    IsEstimationFromFlaggerEstimation = false;
                    EstimatedFareRespDialog();
                }

            }
        } catch (Exception ex) {
            LogException("[Exception in handleEstimatedFareResp]" + "[handleEstimatedFareResp]" + "[" + ex.getLocalizedMessage() + "]" + msg);
        }
    }

    /*--------------------------------------------------------------createVehicleMilageView-------------------------------------------------------------*/
    @SuppressWarnings("deprecation")
    @SuppressLint("NewApi")
    private ViewGroup createVehicleMilageView() {

        LinearLayout panel = new LinearLayout(this);
        panel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        panel.setOrientation(LinearLayout.VERTICAL);
        panel.setGravity(Gravity.CENTER);

        TextView titleVehicleMilage = new TextView(this);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            titleVehicleMilage.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            titleVehicleMilage.setText(Farsi.Convert(getResources().getString(R.string.MeterMilage)));
        } else
            titleVehicleMilage.setText(Farsi.Convert(getResources().getString(R.string.MeterMilage)));
        titleVehicleMilage.setTypeface(Typeface.DEFAULT_BOLD);
        titleVehicleMilage.setTextSize(labelFont);
        titleVehicleMilage.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));

        View line = new View(this);
        line.setBackgroundColor(Color.DKGRAY);
        line.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, 1));

        // VehicleID : label and text field
        TextView lblVehicleMilage = new TextView(this);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            lblVehicleMilage.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            lblVehicleMilage.setText(Farsi.Convert(getResources().getString(R.string.UpdateMeterMilage)));
        } else
            lblVehicleMilage.setText(Farsi.Convert(getResources().getString(R.string.UpdateMeterMilage)));
        lblVehicleMilage.setTextColor(Color.YELLOW);
        lblVehicleMilage.setTypeface(Typeface.DEFAULT_BOLD);
        lblVehicleMilage.setTextSize(miscFont + 1);
        lblVehicleMilage.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));

        LinearLayout PreviousMilageLayout = new LinearLayout(this);
        PreviousMilageLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        PreviousMilageLayout.setOrientation(LinearLayout.HORIZONTAL);
        PreviousMilageLayout.setPadding(5, 20, 5, 0);

        final TextView ttfPreviousVehicleMilageLbl = new TextView(this);
        ttfPreviousVehicleMilageLbl.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.5f));
        ttfPreviousVehicleMilageLbl.setSingleLine();
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            ttfPreviousVehicleMilageLbl.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            ttfPreviousVehicleMilageLbl.setText(Farsi.Convert(getResources().getString(R.string.Previous)));
        } else
            ttfPreviousVehicleMilageLbl.setText(Farsi.Convert(getResources().getString(R.string.Previous)));
        ttfPreviousVehicleMilageLbl.setId(1231);
        ttfPreviousVehicleMilageLbl.setTypeface(Typeface.DEFAULT_BOLD);
        ttfPreviousVehicleMilageLbl.setTextSize(labelFont);
        ttfPreviousVehicleMilageLbl.setPadding(0, 0, 15, 0);

        final TextView ttfPreviousVehicleMilageVal = new TextView(this);
        ttfPreviousVehicleMilageVal.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.5f));
        ttfPreviousVehicleMilageVal.setSingleLine();
        ttfPreviousVehicleMilageVal.setText(AVL_Service.pref.getString("VehicleMilage", "0"));
        ttfPreviousVehicleMilageVal.setId(1232);
        ttfPreviousVehicleMilageVal.setTypeface(Typeface.DEFAULT_BOLD);
        ttfPreviousVehicleMilageVal.setTextSize(labelFont);

        PreviousMilageLayout.addView(ttfPreviousVehicleMilageLbl, 0);
        PreviousMilageLayout.addView(ttfPreviousVehicleMilageVal, 1);

        LinearLayout currentMilageLayout = new LinearLayout(this);
        currentMilageLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        currentMilageLayout.setOrientation(LinearLayout.HORIZONTAL);
        currentMilageLayout.setPadding(5, 20, 5, 0);

        final TextView ttfCurentVehicleMilageLbl = new TextView(this);
        ttfCurentVehicleMilageLbl.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.5f));
        ttfCurentVehicleMilageLbl.setSingleLine();
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            ttfCurentVehicleMilageLbl.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            ttfCurentVehicleMilageLbl.setText(Farsi.Convert(getResources().getString(R.string.Current)));
        } else
            ttfCurentVehicleMilageLbl.setText(Farsi.Convert(getResources().getString(R.string.Current)));
        ttfCurentVehicleMilageLbl.setId(1233);
        ttfCurentVehicleMilageLbl.setTypeface(Typeface.DEFAULT_BOLD);
        ttfCurentVehicleMilageLbl.setTextSize(labelFont);
        ttfCurentVehicleMilageLbl.setPadding(0, 0, 15, 0);

        final EditText ttfCurentVehicleMilageText = new EditText(this);
        ttfCurentVehicleMilageText.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.5f));
        ttfCurentVehicleMilageText.setInputType(InputType.TYPE_CLASS_NUMBER);
        ttfCurentVehicleMilageText.setSingleLine();
        ttfCurentVehicleMilageText.setId(1234);
        ttfCurentVehicleMilageText.setTypeface(Typeface.DEFAULT_BOLD);
        ttfCurentVehicleMilageText.setTextSize(labelFont);

        currentMilageLayout.addView(ttfCurentVehicleMilageLbl, 0);
        currentMilageLayout.addView(ttfCurentVehicleMilageText, 1);

        LinearLayout buttonLayout = new LinearLayout(this);
        buttonLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        buttonLayout.setOrientation(LinearLayout.VERTICAL);
        // buttonLayout.setGravity(Gravity.CENTER_HORIZONTAL);
        buttonLayout.setBackgroundColor(Color.parseColor("#7F7F7F"));

        // login button
        final Button btnOK = new Button(this);
        LayoutParams params = new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
        params.setMargins(20, 5, 20, 5);
        btnOK.setLayoutParams(params);
        btnOK.setGravity(Gravity.CENTER);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            btnOK.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            btnOK.setText(Farsi.Convert(getResources().getString(R.string.ok)));
        } else
            btnOK.setText(Farsi.Convert(getResources().getString(R.string.ok)));
        btnOK.setTextSize(buttonFont + 3);
        btnOK.setTypeface(Typeface.DEFAULT_BOLD);
        btnOK.setPadding(10, 25, 25, 10);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            btnOK.setBackground(getResources().getDrawable(R.drawable.button_shape));
        else
            btnOK.setBackgroundDrawable(getResources().getDrawable(R.drawable.button_shape));
        btnOK.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                btnOK.setEnabled(false);
                ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
                scheduler.schedule(new Runnable() {

                    @Override
                    public void run() {

                        runOnUiThread(new Runnable() {
                            public void run() {
                                btnOK.setEnabled(true);
                            }
                        });

                    }
                }, 2, TimeUnit.SECONDS);

                if (!ttfCurentVehicleMilageText.getText().toString().trim().equalsIgnoreCase("")) {
                    String MSG = Farsi.Convert(getResources().getString(R.string.Processing));
                    myProgress = ProgressDialog.show(TaxiPlexer.this, "", MSG);
                    new Thread(new Runnable() {

                        @Override
                        public void run() {

                            double sVehicleMilage = Double.parseDouble(AVL_Service.pref.getString("VehicleMilage", "0"));
                            double uVehicleMilage = Double.parseDouble(ttfCurentVehicleMilageText.getText().toString());
                            if (uVehicleMilage >= sVehicleMilage) {

                                String envelope = "<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><UpdateVehicleMileage xmlns=\"http://Itcurves.net/\"><vVehicleNo>" + AVL_Service.pref
                                        .getString("VehicleID", "Unknown")
                                        + "</vVehicleNo><vEndMilage>"
                                        + ttfCurentVehicleMilageText.getText().toString()
                                        + "</vEndMilage></UpdateVehicleMileage></soap:Body></soap:Envelope>";

                                // Calling Web Service and Parsing Response
                                final WS_Response tempResponse = CallingWS.submit(AVL_Service.webServiceURL, AVL_Service.soapAction_UpdateVehicleMileage, envelope);
                                if (tempResponse != null && tempResponse.responseType != null && tempResponse.responseType.equalsIgnoreCase("VehicleMileageResponse")) {

                                    AVL_Service.pref.edit().putString("VehicleMilageDate", ddMMyyyy.format(new Date())).commit();

                                    AVL_Service.pref.edit().putString("LastLoginDriver", AVL_Service.pref.getString("DriverID", "0")).commit();
                                    AVL_Service.pref.edit().putString("VehicleMilage", tempResponse.updateVehicleMilage.get_FileMilage()).commit();

                                    runOnUiThread(new Runnable() {
                                        public void run() {
                                            milageTxt.setText(AVL_Service.pref.getString("VehicleMilage", "0"));
                                            if (!Boolean.parseBoolean(tempResponse.updateVehicleMilage.get_bMileageUpdated())) {
                                                LayoutInflater li = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                                                View w = li.inflate(R.layout.warning, null);

                                                final TextView milageAckTitle = (TextView) w.findViewById(R.id.dialogTitle);
                                                final TextView milageText = (TextView) w.findViewById(R.id.dialogText);
                                                final Button milageBtn = (Button) w.findViewById(R.id.dialogBtn1);

                                                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                                                    milageAckTitle.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                                                    milageAckTitle.setText(Farsi.Convert(getResources().getString(R.string.Mileage)));
                                                } else {
                                                    milageAckTitle.setText(Farsi.Convert(getResources().getString(R.string.Mileage)));
                                                }

                                                milageText.setText(tempResponse.updateVehicleMilage.get_FailureMsg());

                                                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                                                    milageBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                                                    milageBtn.setText(Farsi.Convert(getResources().getString(R.string.ok)));
                                                } else {
                                                    milageBtn.setText(Farsi.Convert(getResources().getString(R.string.ok)));
                                                }

                                                if (android.os.Build.VERSION.SDK_INT <= android.os.Build.VERSION_CODES.HONEYCOMB_MR2)
                                                    milageAckDialog = new AlertDialog.Builder(TaxiPlexer.this).setView(w).setCancelable(false).create();
                                                else
                                                    milageAckDialog = new AlertDialog.Builder(TaxiPlexer.this, R.style.DialogSlideAnim1).setView(w).setCancelable(false).create();
                                                milageAckDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));

                                                hideProgressDialog();

                                                // hideProgressDialog();
                                                milageAckDialog.show();

                                                AVL_Service.pref.edit().putString("EULADate", ddMMyyyy.format(new Date())).commit();

                                                milageBtn.setOnClickListener(new View.OnClickListener() {

                                                    @Override
                                                    public void onClick(View v) {
                                                        milageAckDialog.dismiss();

                                                    }
                                                });
                                            } else {
                                                if (tripRejectDialog != null)
                                                    if (tripRejectDialog.isShowing()) {
                                                        hideProgressDialog();

                                                        tripRejectDialog.dismiss();
                                                    }
                                            }

                                        }
                                    });

                                } else {
                                    hideProgressDialog();

                                    exception("[Exception in updating vehicle mileage]" + "[createVehicleMilageView]");
                                }

                            } else {
                                hideProgressDialog();
                                runOnUiThread(new Runnable() {
                                    public void run() {
                                        showToastMessage(R.string.PLeaseEntercorrectMeterReading);

                                    }
                                });
                            }

                        }
                    }).start();

                } else
                    // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.PLeaseEntercorrectMeterReading)), Toast.LENGTH_LONG).show();
                    showToastMessage(R.string.PLeaseEntercorrectMeterReading);
            }
        });

        buttonLayout.addView(btnOK);

        panel.addView(titleVehicleMilage);
        panel.addView(line);
        panel.addView(lblVehicleMilage);
        panel.addView(PreviousMilageLayout);
        panel.addView(currentMilageLayout);
        panel.addView(buttonLayout);

        return panel;
    }

    private ViewGroup createOdoCountDialogView(final int i) {
        final Date dateodo = new Date();

        LinearLayout panel = new LinearLayout(this);
        panel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        panel.setOrientation(LinearLayout.VERTICAL);
        panel.setGravity(Gravity.CENTER_VERTICAL);

        // VehicleID : label and text field
        TextView lblPassengerCount = new TextView(this);
        lblPassengerCount.setText(Farsi.Convert(getResources().getString(R.string.Enter_odometer_Start)));
        lblPassengerCount.setTextColor(Color.YELLOW);
        lblPassengerCount.setTypeface(Typeface.DEFAULT_BOLD);
        lblPassengerCount.setTextSize(miscFont + 1);
        lblPassengerCount.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        lblPassengerCount.setGravity(Gravity.CENTER);

        LinearLayout passengerCountLayout = new LinearLayout(this);
        passengerCountLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        passengerCountLayout.setOrientation(LinearLayout.VERTICAL);
        passengerCountLayout.setGravity(Gravity.CENTER_VERTICAL);
        passengerCountLayout.setPadding(0, 20, 0, 0);

        currentTrip.odoMeterStartValue = dbh.getStart(currentTrip.tripNumber);
        currentTrip.odoMeterEndValue = dbh.getEnd(currentTrip.tripNumber);
        final EditText ttfPassengerCount = new EditText(this);
        ttfPassengerCount.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        ttfPassengerCount.setInputType(InputType.TYPE_CLASS_NUMBER);
        ttfPassengerCount.setSingleLine();
        ttfPassengerCount.setText(currentTrip.odoMeterStartValue);
        ttfPassengerCount.setId(1234);
        ttfPassengerCount.setTypeface(Typeface.DEFAULT_BOLD);
        ttfPassengerCount.setTextSize(labelFont);
        // ttfVehicleMilage.setSelectAllOnFocus(true);


        TextView lblPassengerCount1 = new TextView(this);
        lblPassengerCount1.setText(Farsi.Convert(getResources().getString(R.string.Enter_odometer_End)));
        lblPassengerCount1.setTextColor(Color.YELLOW);
        lblPassengerCount1.setTypeface(Typeface.DEFAULT_BOLD);
        lblPassengerCount1.setTextSize(miscFont + 1);
        lblPassengerCount1.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        lblPassengerCount1.setGravity(Gravity.CENTER);

        LinearLayout passengerCountLayout1 = new LinearLayout(this);
        passengerCountLayout1.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        passengerCountLayout1.setOrientation(LinearLayout.VERTICAL);
        passengerCountLayout1.setGravity(Gravity.CENTER_VERTICAL);
        passengerCountLayout1.setPadding(0, 20, 0, 0);

        final EditText ttfPassengerCount1 = new EditText(this);
        ttfPassengerCount1.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        ttfPassengerCount1.setInputType(InputType.TYPE_CLASS_NUMBER);
        ttfPassengerCount1.setSingleLine();
        ttfPassengerCount1.setText(currentTrip.odoMeterEndValue);
        ttfPassengerCount1.setId(1234);
        ttfPassengerCount1.setTypeface(Typeface.DEFAULT_BOLD);
        ttfPassengerCount1.setTextSize(labelFont);

        LinearLayout buttonLayout = new LinearLayout(this);
        buttonLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        buttonLayout.setOrientation(LinearLayout.VERTICAL);
        buttonLayout.setGravity(Gravity.TOP | Gravity.CENTER_HORIZONTAL);
        buttonLayout.setPadding(0, 20, 0, 0);

        // login button
        Button btnOK = new Button(this);
        btnOK.setText("        " + Farsi.Convert(getResources().getString(R.string.ok)) + "        ");
        btnOK.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
        btnOK.setGravity(Gravity.CENTER);
        btnOK.setTextSize(20);
        btnOK.setTypeface(Typeface.DEFAULT_BOLD);
        btnOK.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {

                if (!ttfPassengerCount.getText().toString().trim().equalsIgnoreCase("")) {

                    if (i == 1) {
                        currentTrip.odoMeterStartValue = ttfPassengerCount.getText().toString().trim();
                        dbh.insertvalue(currentTrip.tripNumber,displayDateFormat.format(dateodo),currentTrip.odoMeterStartValue,currentTrip.odoMeterEndValue);
                        odoMeterDialog.dismiss();
                    }
                    else {
                        if (!ttfPassengerCount.getText().toString().trim().equalsIgnoreCase("")) {
                            currentTrip.odoMeterStartValue = ttfPassengerCount.getText().toString().trim();
                            currentTrip.odoMeterEndValue = ttfPassengerCount1.getText().toString().trim();
                            dbh.insertvalue(currentTrip.tripNumber,displayDateFormat.format(dateodo),currentTrip.odoMeterStartValue,currentTrip.odoMeterEndValue);
                            odoMeterDialog.dismiss();
                        } else
                    // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.EnterValidPassengers)), Toast.LENGTH_LONG).show();
                    showToastMessageFromString(Farsi.Convert(getResources().getString(R.string.Enter_Some_End_Amount)));
                    }



                } else
                    // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.EnterValidPassengers)), Toast.LENGTH_LONG).show();
                    showToastMessageFromString(Farsi.Convert(getResources().getString(R.string.Enter_Some_Amount)));
            }
        });

        passengerCountLayout.addView(ttfPassengerCount);
        passengerCountLayout1.addView(ttfPassengerCount1);
        buttonLayout.addView(btnOK);

        panel.addView(lblPassengerCount);
        panel.addView(passengerCountLayout);
        if (i!=1) {
            panel.addView(lblPassengerCount1);
            panel.addView(passengerCountLayout1);
        }
        panel.addView(buttonLayout);

        return panel;
    }

    /*--------------------------------------------------------------createPassengerCountDialogView-------------------------------------------------------------*/
    private ViewGroup createPassengerCountDialogView() {

        LinearLayout panel = new LinearLayout(this);
        panel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        panel.setOrientation(LinearLayout.VERTICAL);
        panel.setGravity(Gravity.CENTER_VERTICAL);

        // VehicleID : label and text field
        TextView lblPassengerCount = new TextView(this);
        lblPassengerCount.setText(Farsi.Convert(getResources().getString(R.string.HowManyPassengers)));
        lblPassengerCount.setTextColor(Color.YELLOW);
        lblPassengerCount.setTypeface(Typeface.DEFAULT_BOLD);
        lblPassengerCount.setTextSize(miscFont + 1);
        lblPassengerCount.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        lblPassengerCount.setGravity(Gravity.CENTER);

        LinearLayout passengerCountLayout = new LinearLayout(this);
        passengerCountLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        passengerCountLayout.setOrientation(LinearLayout.VERTICAL);
        passengerCountLayout.setGravity(Gravity.CENTER_VERTICAL);
        passengerCountLayout.setPadding(0, 20, 0, 0);

        final EditText ttfPassengerCount = new EditText(this);
        ttfPassengerCount.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        ttfPassengerCount.setInputType(InputType.TYPE_CLASS_NUMBER);
        ttfPassengerCount.setSingleLine();
        ttfPassengerCount.setFilters(new InputFilter[]{new InputFilter.LengthFilter(2)});
        ttfPassengerCount.setText("1");
        ttfPassengerCount.setId(1234);
        ttfPassengerCount.setTypeface(Typeface.DEFAULT_BOLD);
        ttfPassengerCount.setTextSize(labelFont);
        // ttfVehicleMilage.setSelectAllOnFocus(true);

        LinearLayout buttonLayout = new LinearLayout(this);
        buttonLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        buttonLayout.setOrientation(LinearLayout.VERTICAL);
        buttonLayout.setGravity(Gravity.TOP | Gravity.CENTER_HORIZONTAL);
        buttonLayout.setPadding(0, 20, 0, 0);

        // login button
        Button btnOK = new Button(this);
        btnOK.setText("        " + Farsi.Convert(getResources().getString(R.string.ok)) + "        ");
        btnOK.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
        btnOK.setGravity(Gravity.CENTER);
        btnOK.setTextSize(20);
        btnOK.setTypeface(Typeface.DEFAULT_BOLD);
        btnOK.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {

                if (!ttfPassengerCount.getText().toString().trim().equalsIgnoreCase("") && !ttfPassengerCount.getText().toString().trim().equalsIgnoreCase("0")
                        && !ttfPassengerCount.getText().toString().trim().equalsIgnoreCase("00")) {
                    AVL_Service.pref.edit().putString("PassengerCount", ttfPassengerCount.getText().toString()).commit();
                    tripRejectDialog.dismiss();
                    AVL_Service.pref.edit().putString("FlaggerDrop", "Unknown").commit();// to clear flagger drop before any use
                    LogException("[flagger : Auto Flagger 4]" + "[createPassengerCountDialogView]");
                    // currentTrip = null;
                    pickedUp();
                    softFlaggerPickUp = false;
                } else
                    // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.EnterValidPassengers)), Toast.LENGTH_LONG).show();
                    showToastMessage(R.string.EnterValidPassengers);
            }
        });

        passengerCountLayout.addView(ttfPassengerCount);
        buttonLayout.addView(btnOK);

        panel.addView(lblPassengerCount);
        panel.addView(passengerCountLayout);
        panel.addView(buttonLayout);

        return panel;
    }

    /*--------------------------------------------------------------createPassengerCountDialogView-------------------------------------------------------------*/
    private ViewGroup createWifiHotspotDialogView() {

        LinearLayout panel = new LinearLayout(this);
        panel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        panel.setOrientation(LinearLayout.VERTICAL);
        panel.setGravity(Gravity.CENTER_VERTICAL);

        LinearLayout activeHotspotNameLayout = new LinearLayout(this);
        activeHotspotNameLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        activeHotspotNameLayout.setOrientation(LinearLayout.HORIZONTAL);
        activeHotspotNameLayout.setGravity(Gravity.CENTER_HORIZONTAL);
        activeHotspotNameLayout.setPadding(0, 20, 0, 0);

        final TextView activeHotspotName = new TextView(this);
        activeHotspotName.setText(wifiApManager.getWifiApConfiguration().SSID);
        activeHotspotName.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
        // activeHotspotName.setGravity(Gravity.CENTER);

        ttfHotspotName = new EditText(this);
        ttfHotspotPassword = new EditText(this);

        hotspotStateCB = new CheckBox(this);
        hotspotStateCB.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
        if (wifiApManager.getWifiApState() == WIFI_AP_STATE.ENABLED) {
            hotspotStateCB.setChecked(true);
            activeHotspotName.setTextColor(Color.GREEN);
            ttfHotspotName.setText(activeHotspotName.getText().toString().split("-")[3]);
            ttfHotspotPassword.setText(activeHotspotName.getText().toString().split("-")[3]);
        } else {
            hotspotStateCB.setChecked(false);
            activeHotspotName.setTextColor(Color.RED);
            ttfHotspotName.setText("");
            ttfHotspotPassword.setText("");
        }
        hotspotStateCB.setOnCheckedChangeListener(new OnCheckedChangeListener() {

            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if (isChecked) {
                    ttfHotspotName.setEnabled(false);
                    ttfHotspotName.setText(activeHotspotName.getText().toString().split("-")[3]);
                } else {
                    ttfHotspotName.setEnabled(true);
                    ttfHotspotName.setText("");
                }

            }
        });
        activeHotspotNameLayout.addView(activeHotspotName);
        activeHotspotNameLayout.addView(hotspotStateCB);

        TextView lblHotspotName = new TextView(this);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            lblHotspotName.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            lblHotspotName.setText(Farsi.Convert(getResources().getString(R.string.Hotspot_Name)));
        } else {
            lblHotspotName.setText(Farsi.Convert(getResources().getString(R.string.Hotspot_Name)));
        }
        lblHotspotName.setTextColor(Color.CYAN);
        lblHotspotName.setTypeface(Typeface.DEFAULT_BOLD);
        lblHotspotName.setTextSize(miscFont + 1);
        lblHotspotName.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        lblHotspotName.setGravity(Gravity.CENTER);

        LinearLayout HotspotNameLayout = new LinearLayout(this);
        HotspotNameLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        HotspotNameLayout.setOrientation(LinearLayout.VERTICAL);
        HotspotNameLayout.setGravity(Gravity.CENTER_VERTICAL);
        HotspotNameLayout.setPadding(20, 20, 20, 0);

        ttfHotspotName.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        ttfHotspotName.setSingleLine();
        ttfHotspotName.setInputType(InputType.TYPE_CLASS_NUMBER);
        ttfHotspotName.setFilters(new InputFilter[]{new InputFilter.LengthFilter(2)});
        if (hotspotStateCB.isChecked())
            ttfHotspotName.setEnabled(false);
        else
            ttfHotspotName.setEnabled(true);
        ttfHotspotName.addTextChangedListener(new TextWatcher() {

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                ttfHotspotPassword.setText(ttfHotspotName.getText());

            }

            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                // TODO Auto-generated method stub

            }

            @Override
            public void afterTextChanged(Editable s) {
                // TODO Auto-generated method stub

            }
        });

        TextView lblHotspotPassword = new TextView(this);
        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            lblHotspotPassword.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            lblHotspotPassword.setText(Farsi.Convert(getResources().getString(R.string.Password)));
        } else {
            lblHotspotPassword.setText(Farsi.Convert(getResources().getString(R.string.Password)));
        }
        lblHotspotPassword.setTextColor(Color.CYAN);
        lblHotspotPassword.setTypeface(Typeface.DEFAULT_BOLD);
        lblHotspotPassword.setTextSize(miscFont + 1);
        lblHotspotPassword.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        lblHotspotPassword.setGravity(Gravity.CENTER);

        LinearLayout HotspotPasswordLayout = new LinearLayout(this);
        HotspotPasswordLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        HotspotPasswordLayout.setOrientation(LinearLayout.VERTICAL);
        HotspotPasswordLayout.setGravity(Gravity.CENTER_VERTICAL);
        HotspotPasswordLayout.setPadding(20, 20, 20, 0);

        ttfHotspotPassword.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
        ttfHotspotPassword.setSingleLine();
        ttfHotspotPassword.setEnabled(false);

        LinearLayout buttonLayout = new LinearLayout(this);
        buttonLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        buttonLayout.setOrientation(LinearLayout.HORIZONTAL);
        buttonLayout.setGravity(Gravity.CENTER_HORIZONTAL);
        buttonLayout.setPadding(20, 20, 20, 0);

        // ok button
        Button btnOK = new Button(this);
        btnOK.setText(Farsi.Convert(getResources().getString(R.string.ok)));
        btnOK.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
        btnOK.setGravity(Gravity.CENTER);
        btnOK.setTextSize(20);
        btnOK.setTypeface(Typeface.DEFAULT_BOLD);
        btnOK.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                if (!ttfHotspotName.getText().toString().trim().equalsIgnoreCase("") || !ttfHotspotName.isEnabled()) {
                    WifiConfiguration netConfig = new WifiConfiguration();
                    if (hotspotStateCB.isChecked())
                        netConfig.SSID = activeHotspotName.getText().toString();
                    else
                        netConfig.SSID = "ITC-Wi-Fi-" + ttfHotspotName.getText().toString();

                    // netConfig.allowedKeyManagement. = ttfHotspotName.getText().toString().toCharArray();
                    netConfig.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.SHARED);
                    netConfig.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_PSK);
                    netConfig.preSharedKey = netConfig.SSID;
                    ConnectivityManager connManager = (ConnectivityManager) getSystemService(CONNECTIVITY_SERVICE);
                    NetworkInfo mWifi = connManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
                    wifiApManager.setWifiApEnabled(null, false);
                    if (mWifi.isAvailable()) {
                        if (mWifi.isConnected())
                            wifiApManager.setWifiApEnabled(netConfig, true);
                        else
                            wifiApManager.setWifiApEnabled(netConfig, false);
                    } else
                        wifiApManager.setWifiApEnabled(netConfig, true);

                    if (tripRejectDialog.isShowing())
                        tripRejectDialog.dismiss();
                } else
                    Toast.makeText(TaxiPlexer.this, "Please Enter Valid SSID", Toast.LENGTH_LONG).show();
            }
        });

        // ok button
        Button btnCancel = new Button(this);
        btnCancel.setText(Farsi.Convert(getResources().getString(R.string.Cancel)));
        btnCancel.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
        btnCancel.setGravity(Gravity.CENTER);
        btnCancel.setTextSize(20);
        btnCancel.setTypeface(Typeface.DEFAULT_BOLD);
        btnCancel.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                tripRejectDialog.dismiss();
            }

        });

        HotspotNameLayout.addView(ttfHotspotName);
        HotspotPasswordLayout.addView(ttfHotspotPassword);
        buttonLayout.addView(btnOK);
        buttonLayout.addView(btnCancel);

        panel.addView(activeHotspotNameLayout);
        panel.addView(lblHotspotName);
        panel.addView(HotspotNameLayout);
        panel.addView(lblHotspotPassword);
        panel.addView(HotspotPasswordLayout);
        panel.addView(buttonLayout);

        return panel;
    }
	/*--------------------------------------------------------------EstimatedFareRespDialog-------------------------------------------------------------*/

    protected void EstimatedFareRespDialog() {

        AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
        builder.setTitle(Farsi.Convert(getResources().getString(R.string.FlaggerTripCostEstimation))).setMessage(
                Farsi.Convert(getResources().getString(R.string.COST)) + "    "
                        + AVL_Service.SDUnitOfCurrency
                        + dFormat.format(Float.parseFloat(AVL_Service.pref.getString("EstimateFare", "0")))
                        + Farsi.Convert(getResources().getString(R.string.DoyouwanttoStartTrip))).setPositiveButton(
                Farsi.Convert(getResources().getString(R.string.Yes)),
                new DialogInterface.OnClickListener() {

                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        if (Meter != null && Meter.isConnectionAlive()) {
                            if (isMeterON || AVL_Service.SDEnableManualFlagger) {
                                tripRejectDialog = new AlertDialog.Builder(TaxiPlexer.this).setIcon(android.R.drawable.ic_dialog_alert).setTitle(
                                        Farsi.Convert(getResources().getString(R.string.PassengerCount))).setView(createPassengerCountDialogView()).create();
                                tripRejectDialog.show();
                            } else {
                                AlertDialog.Builder builder1 = new AlertDialog.Builder(TaxiPlexer.this);
                                builder1.setIcon(android.R.drawable.ic_dialog_alert).setTitle(Farsi.Convert(getResources().getString(R.string.FlaggerRequest))).setMessage(
                                        Farsi.Convert(getResources().getString(R.string.TaxiMetertoStartFlagger))).setPositiveButton(
                                        Farsi.Convert(getResources().getString(R.string.ok)),
                                        new DialogInterface.OnClickListener() {
                                            @Override
                                            public void onClick(DialogInterface dialog, int which) {
                                                dialog.dismiss();
                                            } // onClick

                                        });
                                AlertDialog alert = builder1.create();
                                alert.show();

                                dialogFontSize(alert);
                            }
                        } else {
                            if (Double.valueOf(AVL_Service.pref.getString("LastLatitude", "0")) == 0 || Double.valueOf(AVL_Service.pref.getString("LastLongitude", "0")) == 0
                                    || AVL_Service.pref.getString("Address", "Unknown Address").equalsIgnoreCase("")) {
                                new AlertDialog.Builder(TaxiPlexer.this)
                                        .setIcon(android.R.drawable.ic_dialog_alert)
                                        .setTitle(Farsi.Convert(getResources().getString(R.string.FlaggerRequestFailed)))
                                        .setMessage(Farsi.Convert(getResources().getString(R.string.Unknown_GPS_Location)))
                                        .setPositiveButton(Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {
                                            @Override
                                            public void onClick(DialogInterface dialog, int which) {
                                                dialog.dismiss();
                                            } // onClick

                                        })
                                        .show();
                            } else {
                                AVL_Service.pref.edit().putString("FlaggerDrop", "Unknown").commit();// to clear flagger drop before any use
                                pickedUp();
                            }
                        }// Taxi meter else
                    }// OnClick
                }).setNegativeButton(Farsi.Convert(getResources().getString(R.string.No)), new DialogInterface.OnClickListener() {

            @Override
            public void onClick(DialogInterface dialog, int which) {
                TempDropOff = " ";
                dialog.dismiss();
            }
        }).setNeutralButton(Farsi.Convert(getResources().getString(R.string.Print)), new DialogInterface.OnClickListener() {

            @Override
            public void onClick(DialogInterface dialog, int which) {
                Date date = new Date();
                reciept = "";
                String CompanyName = null;
                if (AVL_Service.CompanyName_Receipt.length() > 0) {
                    CompanyName = AVL_Service.pref.getString("Company", "Payment Receipt");
                    AVL_Service.pref.edit().putString("Company", AVL_Service.CompanyName_Receipt).commit();
                }

                reciept = AVL_Service.pref.getString("Company", "Payment Receipt") + "\nCAB # "
                        + AVL_Service.pref.getString("VehicleID", " ")
                        + "\nDRIVER # "
                        + AVL_Service.pref.getString("DriverID", " ")
                        + "\n"
                        + displayDateFormat.format(date)
                        + "   "
                        + displayTimeFormat.format(date)
                        + "\nPickUp Address:"
                        + "\n"
                        + AVL_Service.pref.getString("FlaggerPick", "Unknown")
                        + "\n\nDropOff Address: \n"
                        + AVL_Service.pref.getString("FlaggerDrop", "Unknown")
                        + "\n\nEstimated Fare:   $"
                        + AVL_Service.pref.getString("EstimateFare", "0")
                        + "\n\nSignature:   _ _ _ _ _ \n\nPlease Sign for Approval\n\n\n";

                if (AVL_Service.CompanyName_Receipt.length() > 0) {
                    AVL_Service.pref.edit().putString("Company", CompanyName).commit();
                }
                EstimatedFareRespDialog();
                showPrinterDialog();

            }
        });
        AlertDialog alert = builder.create();
        alert.show();

        dialogFontSize(alert);
    }

    /*--------------------------------------------------------------createServerPasswordDialogView-------------------------------------------------------------*/
    private ViewGroup createServerPasswordDialogView() {

        LinearLayout panel = new LinearLayout(this);
        panel.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        panel.setOrientation(LinearLayout.VERTICAL);
        panel.setGravity(Gravity.CENTER_VERTICAL);
        panel.setPadding(20, 10, 20, 10);

        // VehicleID : label and text field
        TextView lblPassword = new TextView(this);
        lblPassword.setText(Farsi.Convert(getResources().getString(R.string.enterpassword)));
        lblPassword.setTextColor(Color.YELLOW);
        lblPassword.setTypeface(Typeface.DEFAULT_BOLD);
        lblPassword.setTextSize(miscFont + 1);
        lblPassword.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        lblPassword.setGravity(Gravity.CENTER);

        LinearLayout passwordLayout = new LinearLayout(this);
        passwordLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        passwordLayout.setOrientation(LinearLayout.VERTICAL);
        passwordLayout.setGravity(Gravity.CENTER_VERTICAL);
        passwordLayout.setPadding(0, 20, 0, 0);

        LayoutParams params = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);

        final EditText ttfPassword = new EditText(this);
        ttfPassword.setLayoutParams(params);
        ttfPassword.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD);
        // ttfPassword.setTransformationMethod(HideReturnsTransformationMethod.getInstance());
        ttfPassword.setSingleLine();
        // ttfPassword.setFilters(new InputFilter[]{new InputFilter.LengthFilter(2)});
        // ttfPassword.setText("1");
        ttfPassword.setId(1234);
        ttfPassword.setTypeface(Typeface.DEFAULT_BOLD);
        ttfPassword.setTextSize(labelFont);
        // ttfVehicleMilage.setSelectAllOnFocus(true);

        LinearLayout buttonLayout = new LinearLayout(this);
        buttonLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
        // buttonLayout.setOrientation(LinearLayout.VERTICAL);
        buttonLayout.setGravity(Gravity.TOP | Gravity.CENTER_HORIZONTAL);
        buttonLayout.setPadding(0, 20, 0, 0);

        // ok button
        Button btnOK = new Button(this);
        btnOK.setText("   " + Farsi.Convert(getResources().getString(R.string.ok)) + "   ");
        btnOK.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
        btnOK.setGravity(Gravity.CENTER_HORIZONTAL);
        btnOK.setTextSize(20);
        btnOK.setTypeface(Typeface.DEFAULT_BOLD);
        btnOK.setTextSize(buttonFont);

        btnOK.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {

                if (!ttfPassword.getText().toString().trim().equalsIgnoreCase("")) {

                    if (ttfPassword.getText().toString().trim().equalsIgnoreCase("123456")) {

                        ip.setEnabled(true);
                        ip.setSelection(ip.getText().length());
                        port.setEnabled(true);
                        passwordDialog.dismiss();

                    } else
                        showToastMessage(R.string.wrongpassword);

                } else
                    // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.EnterValidPassengers)), Toast.LENGTH_LONG).show();
                    showToastMessage(R.string.fieldempty);
            }
        });

        Button btnCancel = new Button(this);
        btnCancel.setText(Farsi.Convert(getResources().getString(R.string.Cancel)));
        btnCancel.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
        btnCancel.setGravity(Gravity.CENTER_HORIZONTAL);
        btnCancel.setTextSize(20);
        btnCancel.setTypeface(Typeface.DEFAULT_BOLD);
        btnCancel.setTextSize(buttonFont);
        btnCancel.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                passwordDialog.dismiss();
                ip.setEnabled(false);
                port.setEnabled(false);

            }

        });

        passwordLayout.addView(ttfPassword);
        buttonLayout.addView(btnOK);
        buttonLayout.addView(btnCancel);
        panel.addView(lblPassword);
        panel.addView(passwordLayout);
        panel.addView(buttonLayout);

        return panel;
    }
    /*--------------------------------------------------------------receivedTripDetails-------------------------------------------------------------*/
    @Override
    public void receivedTripOffer(String msg) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.SDTRIPOFFER, msg).sendToTarget();
    }
    /*--------------------------------------------------------------handleTripOffer---------------------------------------------------------------*/
    protected void handleTripOffer(String tripOffer) {
        try {
            final long rcvdTime = System.currentTimeMillis() / 1000;
            String[] tempTrip = tripOffer.split(Character.toString(Constants.BODYSEPARATOR));
            String[] header = tempTrip[0].split("\\" + Character.toString(Constants.COLSEPARATOR));
            final String destID = header[2];
            tempTrip = tempTrip[1].split("\\^");

            final long Validity = Long.parseLong(tempTrip[7]);
            final long WaitProgressDialogTimeOutSecond = Long.parseLong(tempTrip[0]);
            final String WaitProgressDialogTimeOutMessage = LocalizedResources.getDesc(tempTrip[1]);

            AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
            LayoutInflater inflator = getLayoutInflater();
            View myView = inflator.inflate(R.layout.trip_alert, null);
            builder.setIcon(android.R.drawable.ic_dialog_alert).setTitle(Farsi.Convert(getResources().getString(R.string.TripAssignment))).setView(myView);
            final AlertDialog thisDialog;
            tripAcceptDialog = thisDialog = builder.create();
            tripAcceptDialog.setCancelable(false);
            tripAcceptDialog.setCanceledOnTouchOutside(false);
            final String TripNumber = tempTrip[6];
            txtAccept = (TextView) myView.findViewById(R.id.tv);
            txtAccept.setTextSize(labelFont + 5);

            btnAccept = (Button) myView.findViewById(R.id.button1);
            btnReject = (Button) myView.findViewById(R.id.button2);
            RingerCount = AVL_Service.SDRingerCountForTripOffer;
            if (RingerCount > 0) {
                if (getApplicationContext().getPackageName().contains("infonetmytaxi"))
                    soundPool.play(tripSoundMyTaxi, 1, 1, 0, 0, 1);
                else
                    soundPool.play(tripSound, 1, 1, 0, 0, 1);
                RingerCount--;
            }

            tripDetailSound = new Runnable() {

                @Override
                public void run() {
                    if (getApplicationContext().getPackageName().contains("infonetmytaxi"))
                        soundPool.play(tripSoundMyTaxi, 1, 1, 0, 0, 1);
                    else
                        soundPool.play(tripSound, 1, 1, 0, 0, 1);
                    if (RingerCount > 0) {
                        handlerForTripDetail.postDelayed(tripDetailSound, 2000);
                        RingerCount--;
                    }
                }
            };

            handlerForTripDetail = new Handler();
            if (RingerCount > 0) {
                handlerForTripDetail.postDelayed(tripDetailSound, 2000);
                RingerCount--;
            }

            ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
            scheduler.schedule(new Runnable() {

                @Override
                public void run() {
                    if (thisDialog.isShowing()) {
                        handlerForTripDetail.removeCallbacksAndMessages(null);
                        serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                + AVL_Service.pref.getString("LastLongitude", "0")
                                + Constants.COLSEPARATOR
                                + TripNumber
                                + Constants.COLSEPARATOR
                                + States.REJECTED
                                + Constants.COLSEPARATOR
                                + NextServZone
                                + Constants.COLSEPARATOR
                                + nextServLat
                                + Constants.COLSEPARATOR
                                + nextServLong
                                + Constants.COLSEPARATOR
                                + MRMS_DateFormat.format(new Date())
                                + Constants.COLSEPARATOR
                                + Integer.toString(tripsPending)
                                + Constants.COLSEPARATOR
                                + Integer.toString(tripsIRTPU)
                                + Constants.COLSEPARATOR
                                + Integer.toString(tripsIRTDO)
                                + AVL_Service.pref.getString("Address", "Unknown Address") + Constants.COLSEPARATOR
                                + -1 + Constants.COLSEPARATOR
                                + "" + Constants.COLSEPARATOR
                                + 0 + Constants.COLSEPARATOR
                                + 0
                                , destID, MsgType.TripResponse, AckType.NEW, MsgValidity.Short, MsgPriority.Normal);

                        thisDialog.dismiss();
                        ++TotalTripRejections;
                        runOnUiThread(new Runnable() {
                            public void run() {
                                // ShowBlackLIstNotify();
                                if (AVL_Service.PPV_UsePPVModule) {

                                    ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
                                    scheduler.schedule(new Runnable() {

                                        @Override
                                        public void run() {
                                            runOnUiThread(new Runnable() {
                                                public void run() {
                                                    GetBalanceAndBlackListStatus(1);
                                                }
                                            });

                                        }
                                    }, 5, TimeUnit.SECONDS);
                                }
                            }
                        });

                    }
                }
            }, Validity, TimeUnit.SECONDS);

            if (AVL_Service.pref.getBoolean("AudioCommands", false) && recognizer && TTS) {
                // mTTS.speak("Trip Details Recieved, Please say yes, to Accept or no, to reject", TextToSpeech.QUEUE_FLUSH, null);
                onRadioClick(getResources().getString(R.string.TripDetailsRecieved));
                startVoiceRecognitionActivity(Constants.TripAccept_CODE);
            } else if (AVL_Service.pref.getBoolean("AudioCommands", false))
                showToastMessage(R.string.Recognizer_not_present);
            btnAccept.setText(Farsi.Convert(getResources().getString(R.string.Accept)));
            btnAccept.setTypeface(null, Typeface.BOLD);
            btnAccept.setTextSize(miscFont + 1);
            btnAccept.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View v) {
                    if (mTTS.isSpeaking())
                        mTTS.stop();
                    handlerForTripDetail.removeCallbacksAndMessages(null);
                    long TimeNow = System.currentTimeMillis() / 1000 - rcvdTime;
                    if (TimeNow < Validity) {

                        serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                + AVL_Service.pref.getString("LastLongitude", "0")
                                + Constants.COLSEPARATOR
                                + TripNumber
                                + Constants.COLSEPARATOR
                                + States.ACCEPTED, destID, MsgType.SDTRIPRSP, AckType.NEW, MsgValidity.Short, MsgPriority.Normal);
                        TripOfferTripNo = TripNumber;

                        String MSG = Farsi.Convert(getResources().getString(R.string.Processing));
                        if (TripProgress != null)
                            if (TripProgress.isShowing())
                                TripProgress.setMessage(MSG);
                            else
                                TripProgress = ProgressDialog.show(TaxiPlexer.this, "", MSG);
                        else
                            TripProgress = ProgressDialog.show(TaxiPlexer.this, "", MSG);

                        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                            final int idAlertTitle = getApplicationContext().getResources().getIdentifier("message", "id", "android");
                            TextView textDialog = (TextView) ((AlertDialog) myProgress).findViewById(idAlertTitle);
                            textDialog.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                        }

                        TripProgress.setCancelable(false);
                        TripProgress.setCanceledOnTouchOutside(false);
                        onProceedToPickUpClick(TripNumber, WaitProgressDialogTimeOutMessage, WaitProgressDialogTimeOutSecond);
                    } else {
                        showToastMessage(R.string.TripAcceptancetimeExpired);

                        serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                + AVL_Service.pref.getString("LastLongitude", "0")
                                + Constants.COLSEPARATOR
                                + TripNumber
                                + Constants.COLSEPARATOR
                                + States.REJECTED
                                + Constants.COLSEPARATOR
                                + NextServZone
                                + Constants.COLSEPARATOR
                                + nextServLat
                                + Constants.COLSEPARATOR
                                + nextServLong
                                + Constants.COLSEPARATOR
                                + MRMS_DateFormat.format(new Date())
                                + Constants.COLSEPARATOR
                                + Integer.toString(tripsPending)
                                + Constants.COLSEPARATOR
                                + Integer.toString(tripsIRTPU)
                                + Constants.COLSEPARATOR
                                + Integer.toString(tripsIRTDO)
                                + Constants.COLSEPARATOR
                                + AVL_Service.pref.getString("Address", "Unknown Address") + Constants.COLSEPARATOR
                                + -1 + Constants.COLSEPARATOR
                                + "" + Constants.COLSEPARATOR
                                + 0 + Constants.COLSEPARATOR
                                + 0
                                , destID, MsgType.TripResponse, AckType.NEW, MsgValidity.Short, MsgPriority.Normal);
                        ++TotalTripRejections;
                        // ShowBlackLIstNotify();
                        if (AVL_Service.PPV_UsePPVModule) {

                            ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
                            scheduler.schedule(new Runnable() {

                                @Override
                                public void run() {
                                    runOnUiThread(new Runnable() {
                                        public void run() {
                                            GetBalanceAndBlackListStatus(1);
                                        }
                                    });

                                }
                            }, 5, TimeUnit.SECONDS);
                        }
                    }

                    thisDialog.dismiss();
                }
            });
            if (AVL_Service.SDShowProceedToPickupOnTripOffer) {
                btnAccept.setText(Farsi.Convert(getResources().getString(R.string.ProceedToPickup)));
                btnReject.setVisibility(Button.GONE);
            }
            btnReject.setText(Farsi.Convert(getResources().getString(R.string.Decline)));
            btnReject.setTypeface(null, Typeface.BOLD);
            btnReject.setTextSize(miscFont + 1);

            btnReject.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View v) {
                    if (mTTS.isSpeaking())
                        mTTS.stop();
                    handlerForTripDetail.removeCallbacksAndMessages(null);
                    AlertDialog.Builder builder1 = new AlertDialog.Builder(TaxiPlexer.this);
                    LayoutInflater inflator = getLayoutInflater();
                    View myView1 = inflator.inflate(R.layout.trip_alert, null);
                    builder1.setIcon(android.R.drawable.ic_dialog_alert).setTitle(Farsi.Convert(getResources().getString(R.string.RejectionConfirmation))).setView(myView1);
                    final AlertDialog thisRejDialog;
                    tripRejectDialog = thisRejDialog = builder1.create();
                    tripRejectDialog.setCancelable(false);
                    tripRejectDialog.setCanceledOnTouchOutside(false);

                    txtReject = (TextView) myView1.findViewById(R.id.tv);
                    txtReject.setTextSize(miscFont + 1);
                    txtReject.setText(Farsi.Convert(getResources().getString(R.string.RejectingTripassignment)));

                    btnReject2 = (Button) myView1.findViewById(R.id.button1);
                    btnAccept2 = (Button) myView1.findViewById(R.id.button2);

                    btnReject2.setText(Farsi.Convert(getResources().getString(R.string.RejectTrip)));
                    btnReject2.setTypeface(null, Typeface.BOLD);
                    btnReject2.setTextSize(miscFont + 1);

                    btnReject2.setOnClickListener(new View.OnClickListener() {

                        @Override
                        public void onClick(View v) {

                            serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                    + AVL_Service.pref.getString("LastLongitude", "0")
                                    + Constants.COLSEPARATOR
                                    + TripNumber
                                    + Constants.COLSEPARATOR
                                    + States.REJECTED
                                    + Constants.COLSEPARATOR
                                    + NextServZone
                                    + Constants.COLSEPARATOR
                                    + nextServLat
                                    + Constants.COLSEPARATOR
                                    + nextServLong
                                    + Constants.COLSEPARATOR
                                    + MRMS_DateFormat.format(new Date())
                                    + Constants.COLSEPARATOR
                                    + Integer.toString(tripsPending)
                                    + Constants.COLSEPARATOR
                                    + Integer.toString(tripsIRTPU)
                                    + Constants.COLSEPARATOR
                                    + Integer.toString(tripsIRTDO)
                                    + AVL_Service.pref.getString("Address", "Unknown Address") + Constants.COLSEPARATOR
                                    + -1 + Constants.COLSEPARATOR
                                    + "" + Constants.COLSEPARATOR
                                    + 0 + Constants.COLSEPARATOR
                                    + 0
                                    , destID, MsgType.TripResponse, AckType.NEW, MsgValidity.Short, MsgPriority.Normal);
                            ++TotalTripRejections;
                            thisDialog.dismiss();
                            thisRejDialog.dismiss();
                            // ShowBlackLIstNotify();
                            if (AVL_Service.PPV_UsePPVModule) {

                                ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
                                scheduler.schedule(new Runnable() {

                                    @Override
                                    public void run() {
                                        runOnUiThread(new Runnable() {
                                            public void run() {
                                                GetBalanceAndBlackListStatus(1);
                                            }
                                        });

                                    }
                                }, 5, TimeUnit.SECONDS);
                            }
                        }
                    });

                    btnAccept2.setText(Farsi.Convert(getResources().getString(R.string.AcceptTrip)));
                    btnAccept2.setTypeface(null, Typeface.BOLD);
                    btnAccept2.setTextSize(miscFont + 1);
                    btnAccept2.setOnClickListener(new View.OnClickListener() {

                        @Override
                        public void onClick(View v) {
                            if ((System.currentTimeMillis() / 1000 - rcvdTime) < Validity) {

                                serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                        + AVL_Service.pref.getString("LastLongitude", "0")
                                        + Constants.COLSEPARATOR
                                        + TripNumber
                                        + Constants.COLSEPARATOR
                                        + States.ACCEPTED, destID, MsgType.SDTRIPRSP, AckType.NEW, MsgValidity.Short, MsgPriority.Normal);
                            } else {
                                // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.TripAcceptancetimeExpired)),
                                // Toast.LENGTH_LONG).show();
                                showToastMessage(R.string.TripAcceptancetimeExpired);

                                serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                        + AVL_Service.pref.getString("LastLongitude", "0")
                                        + Constants.COLSEPARATOR
                                        + TripNumber
                                        + Constants.COLSEPARATOR
                                        + States.REJECTED
                                        + Constants.COLSEPARATOR
                                        + NextServZone
                                        + Constants.COLSEPARATOR
                                        + nextServLat
                                        + Constants.COLSEPARATOR
                                        + nextServLong
                                        + Constants.COLSEPARATOR
                                        + MRMS_DateFormat.format(new Date())
                                        + Constants.COLSEPARATOR
                                        + Integer.toString(tripsPending)
                                        + Constants.COLSEPARATOR
                                        + Integer.toString(tripsIRTPU)
                                        + Constants.COLSEPARATOR
                                        + Integer.toString(tripsIRTDO)
                                        + Constants.COLSEPARATOR
                                        + AVL_Service.pref.getString("Address", "Unknown Address") + Constants.COLSEPARATOR
                                        + -1 + Constants.COLSEPARATOR
                                        + "" + Constants.COLSEPARATOR
                                        + 0 + Constants.COLSEPARATOR
                                        + 0
                                        , destID, MsgType.TripResponse, AckType.NEW, MsgValidity.Short, MsgPriority.Normal);
                                ++TotalTripRejections;
                                // ShowBlackLIstNotify();
                                if (AVL_Service.PPV_UsePPVModule) {

                                    ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
                                    scheduler.schedule(new Runnable() {

                                        @Override
                                        public void run() {
                                            runOnUiThread(new Runnable() {
                                                public void run() {
                                                    GetBalanceAndBlackListStatus(1);
                                                }
                                            });

                                        }
                                    }, 5, TimeUnit.SECONDS);
                                }
                            }

                            thisDialog.dismiss();
                            thisRejDialog.dismiss();
                        }
                    });
                    tripRejectDialog.show();
                    dialogFontSize(tripRejectDialog);
                }
            });

            // WaitProgressDialogTimeOutSecond^WaitProgressDialogTimeOutMessage^PUAddress^PUZone^DOZone^FS^TripNumber^TripOfferTimeOutSeconds
            if (AVL_Service.pref.getBoolean("ShowDropZone", true)) {
                if (AVL_Service.pref.getBoolean("ShowAddressOnOffer", true))
                    txtAccept.setText(Farsi.Convert(getResources().getString(R.string.Pickuptrip)) + "\n"
                            + formatAddressOnOffer(tempTrip[4])
                            + " - "
                            + tempTrip[2]
                            + "\n"
                            + Farsi.Convert(getResources().getString(R.string.Dropofftrip))
                            + "   "
                            + tempTrip[3]
                            + "\n"
                            + Farsi.Convert(getResources().getString(R.string.Funding))
                            + " "
                            + tempTrip[5]);
                else
                    txtAccept.setText(Farsi.Convert(getResources().getString(R.string.Pickuptrip)) + "   "
                            + tempTrip[2]
                            + "\n"
                            + Farsi.Convert(getResources().getString(R.string.Dropofftrip))
                            + "   "
                            + tempTrip[3]);

            } else {
                if (AVL_Service.pref.getBoolean("ShowAddressOnOffer", true))
                    txtAccept.setText(Farsi.Convert(getResources().getString(R.string.Pickuptrip)) + "\n"
                            + formatAddressOnOffer(tempTrip[4])
                            + " - "
                            + tempTrip[2]
                            + "\n"
                            + Farsi.Convert(getResources().getString(R.string.Funding))
                            + " "
                            + tempTrip[5]);
                else
                    txtAccept.setText(Farsi.Convert(getResources().getString(R.string.Pickuptrip)) + "   " + tempTrip[2]);
            }

            tripAcceptDialog.show();

            dialogFontSize(tripAcceptDialog);
        } catch (Exception ex) {
            handleException("[Exception in handleTripOffer]" + "[handleTripOffer]" + "[" + ex.getLocalizedMessage() + "]" + tripOffer);
        }
    }

	/*--------------------------------------------------------------onProceedToPickUpClick-------------------------------------------------------------*/

    public void onProceedToPickUpClick(final String tNUMBER, final String lWaitProgressDialogTimeOutMessage, final long lWaitProgressDialogTimeOutSecond) {

        ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
        scheduler.schedule(new Runnable() {

            @Override
            public void run() {

                if (arrayListOftrips.indexOfTripfromTripNumber(tNUMBER) < 0) {

                    if (TripProgress != null)
                        TripProgress.dismiss();
                    runOnUiThread(new Runnable() {
                        public void run() {
                            Toast.makeText(TaxiPlexer.this, tNUMBER, Toast.LENGTH_LONG).show();
                            AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                            builder.setIcon(android.R.drawable.ic_dialog_alert).setTitle(Farsi.Convert("")).setMessage(
                                    Farsi.Convert(getResources().getString(getResources().getIdentifier(lWaitProgressDialogTimeOutMessage, "string", getPackageName())))).setPositiveButton(
                                    Farsi.Convert(getResources().getString(R.string.ok)),
                                    new DialogInterface.OnClickListener() {

                                        @Override
                                        public void onClick(DialogInterface dialog, int which) {
                                            dialog.dismiss();
                                        } // onClick

                                    });
                            AlertDialog alert = builder.create();
                            alert.show();

                            dialogFontSize(alert);

                        }
                    });

                }

            }
        }, lWaitProgressDialogTimeOutSecond, TimeUnit.SECONDS);

    }
    /*--------------------------------------------------------------receivedTripDetails-------------------------------------------------------------*/
    @Override
    public void receivedTripDetails(String msg) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.TripDetails, msg).sendToTarget();
    }

    /*--------------------------------------------------------------handleTripDetails---------------------------------------------------------------*/
    @SuppressWarnings("deprecation")
    @SuppressLint("NewApi")
    protected void handleTripDetails(final String tripDetail) {
        LogException("[SYNC: Start of handleTripDetails" + System.currentTimeMillis() + " " + tripDetail + "][handleTripDetails]");
        SetApplicationLocal();
        // New Code for Customized Dialog Box by salman
        try {
            String[] tempTrip = tripDetail.split(Character.toString(Constants.BODYSEPARATOR));

            final String[] header = tempTrip[0].split("\\" + Character.toString(Constants.COLSEPARATOR));

            AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
            LayoutInflater inflator = getLayoutInflater();
            View myView = inflator.inflate(R.layout.trip_alert, null);
            builder.setIcon(android.R.drawable.ic_dialog_alert).setTitle(Farsi.Convert(getResources().getString(R.string.TripAssignment))).setView(myView);
            final AlertDialog thisDialog;
            tripAcceptDialog = thisDialog = builder.create();
            tripAcceptDialog.setCancelable(false);
            tripAcceptDialog.setCanceledOnTouchOutside(false);

            tripAcceptDialog.getWindow().getAttributes().gravity = Gravity.BOTTOM;

            txtAccept = (TextView) myView.findViewById(R.id.tv);
            txtAccept.setTextSize(labelFont + 5);

            btnAccept = (Button) myView.findViewById(R.id.button1);
            btnReject = (Button) myView.findViewById(R.id.button2);

            tabHost.setCurrentTab(TripIndex);
            final Trip newTrip = new Trip(tripDetail);

            nextColorIndex++;
			/*
			 * if (AVL_Service.pref.getBoolean("VeriFoneDevice", true) && IsMeterOnCreatedTrip) {
			 * IsMeterOnCreatedTrip = false;
			 * customMessage = new CustomMessage(newTrip.ConfirmNumber, "2");
			 * Meter.writeCustom(customMessage);
			 * }
			 */
            newTrip.nodeColor = selectColor(nextColorIndex);
            if (newTrip.manifestNum.trim().length() > 2) {
                newTrip.SharedKey = "1";
            }

            if (newTrip.SharedKey.equalsIgnoreCase("1")) {
                newTrip.nodeType = "PU";
                newTrip.DropNode = new Trip(tripDetail, "DO");
                newTrip.DropNode.SharedKey = "1";
                newTrip.DropNode.nodeColor = selectColor(nextColorIndex);
            }


            if (TripOfferTripNo.trim().equalsIgnoreCase(newTrip.tripNumber.trim())) {
                TripOfferTripNo = "0";
                if (TripProgress != null)
                    TripProgress.dismiss();
            }
            // if this Trip is a new Trip
            // if (!(newTrip.manifestNum.length() > 2) && (newTrip.state.equalsIgnoreCase(States.DISPATCHED))) {
            if ((newTrip.state.equalsIgnoreCase(States.DISPATCHED))) {
                RingerCount = AVL_Service.SDRingerCountForTripOffer;
                if (RingerCount > 0) {
                    if (getApplicationContext().getPackageName().contains("infonetmytaxi"))
                        soundPool.play(tripSoundMyTaxi, 1, 1, 0, 0, 1);
                    else
                        soundPool.play(tripSound, 1, 1, 0, 0, 1);
                    RingerCount--;
                }

                tripDetailSound = new Runnable() {

                    @Override
                    public void run() {
                        if (getApplicationContext().getPackageName().contains("infonetmytaxi"))
                            soundPool.play(tripSoundMyTaxi, 1, 1, 0, 0, 1);
                        else
                            soundPool.play(tripSound, 1, 1, 0, 0, 1);
                        if (RingerCount > 0) {
                            handlerForTripDetail.postDelayed(tripDetailSound, 2000);
                            RingerCount--;
                        }

                    }
                };

                handlerForTripDetail = new Handler();
                if (RingerCount > 0) {
                    handlerForTripDetail.postDelayed(tripDetailSound, 2000);
                    RingerCount--;
                }

                // New Code for Canceling Trip Accept Dialog
                ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
                scheduler.schedule(new Runnable() {

                    @Override
                    public void run() {
                        if (thisDialog.isShowing()) {
                            newTrip.state = States.REJECTED;
                            if (newTrip.DropNode != null)
                                newTrip.DropNode.state = States.REJECTED;

                            runOnUiThread(new Runnable() {
                                public void run() {
                                    try {
                                        setAppState();
                                    } catch (Exception e) {
                                        handleException("[Exception in handleTripDetails]" + "[handleTripDetails]" + "[" + e.getLocalizedMessage() + "]" + tripDetail);
                                    }

                                }
                            });

                            handlerForTripDetail.removeCallbacksAndMessages(null);
                            serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                    + AVL_Service.pref.getString("LastLongitude", "0")
                                    + Constants.COLSEPARATOR
                                    + newTrip.tripNumber
                                    + Constants.COLSEPARATOR
                                    + newTrip.state
                                    + Constants.COLSEPARATOR
                                    + NextServZone
                                    + Constants.COLSEPARATOR
                                    + nextServLat
                                    + Constants.COLSEPARATOR
                                    + nextServLong
                                    + Constants.COLSEPARATOR
                                    + MRMS_DateFormat.format(nextServTime)
                                    + Constants.COLSEPARATOR
                                    + Integer.toString(tripsPending)
                                    + Constants.COLSEPARATOR
                                    + Integer.toString(tripsIRTPU)
                                    + Constants.COLSEPARATOR
                                    + Integer.toString(tripsIRTDO)+ AVL_Service.pref.getString("Address", "Unknown Address") + Constants.COLSEPARATOR
                                    + -1 + Constants.COLSEPARATOR
                                    + "" + Constants.COLSEPARATOR
                                    + 0 + Constants.COLSEPARATOR
                                    + 0
                                    , newTrip.destID, MsgType.TripResponse, AckType.NEW, MsgValidity.Short, MsgPriority.Normal);
                            ++TotalTripRejections;
                            thisDialog.dismiss();
                            // ShowBlackLIstNotify();
                            if (AVL_Service.PPV_UsePPVModule) {

                                ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
                                scheduler.schedule(new Runnable() {

                                    @Override
                                    public void run() {
                                        runOnUiThread(new Runnable() {
                                            public void run() {
                                                GetBalanceAndBlackListStatus(1);
                                            }
                                        });

                                    }
                                }, 5, TimeUnit.SECONDS);
                            }

                        }
                    }
                }, newTrip.Validity, TimeUnit.SECONDS);

                // New Code for Canceling Trip Accept Dialog

                newTrip.state = States.ACCEPTED;

                if (AVL_Service.pref.getBoolean("AudioCommands", false) && recognizer && TTS) {
                    // mTTS.speak("Trip Details Recieved, Please say yes, to Accept or no, to reject", TextToSpeech.QUEUE_FLUSH, null);
                    onRadioClick(getResources().getString(R.string.TripDetailsRecieved));
                    startVoiceRecognitionActivity(Constants.TripAccept_CODE);
                } else if (AVL_Service.pref.getBoolean("AudioCommands", false))
                    showToastMessage(R.string.Recognizer_not_present);
                // Toast.makeText(getApplicationContext(), "Recognizer not present", Toast.LENGTH_SHORT).show();
                btnAccept.setText(Farsi.Convert(getResources().getString(R.string.Accept)));
                btnAccept.setTypeface(null, Typeface.BOLD);
                btnAccept.setTextSize(miscFont + 1);
                btnAccept.setOnClickListener(new OnClickListener() {

                    @Override
                    public void onClick(View v) {
                        if (mTTS.isSpeaking())
                            mTTS.stop();
                        handlerForTripDetail.removeCallbacksAndMessages(null);
                        if ((System.currentTimeMillis() / 1000 - newTrip.rcvdTime) < newTrip.Validity) {

                            // Toast.makeText(getApplicationContext(), "Get Trip Details Request sent to server", Toast.LENGTH_LONG).show();
                            // serviceHandle.sendMessageToServer(newTrip.tripNumber, "SDHS", MsgType.SDTRIPDTLREQ, AckType.NEW, MsgValidity.Medium, MsgPriority.Normal);

                            if (tripAdapter == null)
                                tabHost.setCurrentTab(TripIndex);
                            // if (newTrip.state.equalsIgnoreCase(States.DROPPED) || newTrip.state.equalsIgnoreCase(States.NOSHOW) ||
                            // newTrip.state.equalsIgnoreCase(States.CANCELLED)) {
                            if (arrayListOftrips.indexOf(newTrip) < 0)
                                arrayListOftrips.add(newTrip);
                            else {
                                arrayListOftrips.remove(arrayListOftrips.get(arrayListOftrips.indexOf(newTrip)));
                                arrayListOftrips.add(newTrip);
                            }
                            // } else {
                            // if (arrayListOfOtherTrips.indexOf(newTrip) < 0) {
                            // if (arrayListOfTreatedTrips.indexOf(newTrip) >= 0 &&
                            // arrayListOfTreatedTrips.get(arrayListOfTreatedTrips.indexOf(newTrip)).state.equalsIgnoreCase(States.CANCELLED))
                            // arrayListOfTreatedTrips.remove(arrayListOfTreatedTrips.get(arrayListOfTreatedTrips.indexOf(newTrip)));
                            //
                            // arrayListOfOtherTrips.add(newTrip);
                            // } else {
                            // arrayListOfOtherTrips.remove(arrayListOfOtherTrips.get(arrayListOfOtherTrips.indexOf(newTrip)));
                            // arrayListOfOtherTrips.add(newTrip);
                            // }
                            // }
                            if (tripAdapter.getPosition(newTrip) < 0)
                                tripAdapter.add(newTrip);
                            else {
                                tripAdapter.remove(tripAdapter.getItem(tripAdapter.getPosition(newTrip)));
                                tripAdapter.add(newTrip);
                            }

                            // if (newTrip.DropNode != null) {
                            // newTrip.DropNode.state = States.ACCEPTED;
                            // if (arrayListOfOtherTrips.indexOf(newTrip.DropNode) < 0)
                            // arrayListOfOtherTrips.add(newTrip.DropNode);
                            // else {
                            // arrayListOfOtherTrips.remove(arrayListOfOtherTrips.get(arrayListOfOtherTrips.indexOf(newTrip.DropNode)));
                            // arrayListOfOtherTrips.add(newTrip.DropNode);
                            // }
                            // }

                            if (newTrip.DropNode != null) {
                                newTrip.DropNode.state = States.ACCEPTED;
                                if (arrayListOftrips.indexOf(newTrip.DropNode) < 0)
                                    arrayListOftrips.add(newTrip.DropNode);
                                else {
                                    arrayListOftrips.remove(arrayListOftrips.get(arrayListOftrips.indexOf(newTrip.DropNode)));
                                    arrayListOftrips.add(newTrip.DropNode);
                                }
                            }

                            // if (newTrip.DropNode != null) {
                            // newTrip.DropNode.state = States.ACCEPTED;
                            // if (tripAdapter.getPosition(newTrip.DropNode) < 0)
                            // tripAdapter.add(newTrip.DropNode);
                            // else {
                            // tripAdapter.remove(tripAdapter.getItem(tripAdapter.getPosition(newTrip.DropNode)));
                            // tripAdapter.add(newTrip.DropNode);
                            // }
                            // }
                            if (header[0].equalsIgnoreCase("0")) {
                                if (header[1].equalsIgnoreCase("1"))
                                    try {
                                        sortTripList();
                                    } catch (Exception e) {
                                        // TODO Auto-generated catch block
                                        e.printStackTrace();
                                    }
                            } else
                                try {
                                    sortTripList();
                                } catch (Exception e1) {
                                    // TODO Auto-generated catch block
                                    e1.printStackTrace();
                                }

                            try {
                                setAppState();
                            } catch (Exception e) {
                                handleException("[Exception in handleTripDetails]" + "[handleTripDetails]" + "[" + e.getLocalizedMessage() + "]" + tripDetail);
                            }

                            serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                    + AVL_Service.pref.getString("LastLongitude", "0")
                                    + Constants.COLSEPARATOR
                                    + newTrip.tripNumber
                                    + Constants.COLSEPARATOR
                                    + newTrip.state
                                    + Constants.COLSEPARATOR
                                    + NextServZone
                                    + Constants.COLSEPARATOR
                                    + nextServLat
                                    + Constants.COLSEPARATOR
                                    + nextServLong
                                    + Constants.COLSEPARATOR
                                    + MRMS_DateFormat.format(nextServTime)
                                    + Constants.COLSEPARATOR
                                    + Integer.toString(tripsPending)
                                    + Constants.COLSEPARATOR
                                    + Integer.toString(tripsIRTPU)
                                    + Constants.COLSEPARATOR
                                    + Integer.toString(tripsIRTDO)
                                    + Constants.COLSEPARATOR
                                    + AVL_Service.pref.getString("Address", "Unknown Address") + Constants.COLSEPARATOR
                                    + -1 + Constants.COLSEPARATOR
                                    + "" + Constants.COLSEPARATOR
                                    + 0 + Constants.COLSEPARATOR
                                    + 0
                                    , newTrip.destID, MsgType.TripResponse, AckType.NEW, MsgValidity.Short, MsgPriority.Normal);

                        } else {
                            // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.TripAcceptancetimeExpired)),
                            // Toast.LENGTH_LONG).show();
                            showToastMessage(R.string.TripAcceptancetimeExpired);
                            newTrip.state = States.REJECTED;

                            try {
                                setAppState();
                            } catch (Exception e) {
                                handleException("[Exception in handleTripDetails]" + "[handleTripDetails]" + "[" + e.getLocalizedMessage() + "]" + tripDetail);
                            }

                            serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                    + AVL_Service.pref.getString("LastLongitude", "0")
                                    + Constants.COLSEPARATOR
                                    + newTrip.tripNumber
                                    + Constants.COLSEPARATOR
                                    + newTrip.state
                                    + Constants.COLSEPARATOR
                                    + NextServZone
                                    + Constants.COLSEPARATOR
                                    + nextServLat
                                    + Constants.COLSEPARATOR
                                    + nextServLong
                                    + Constants.COLSEPARATOR
                                    + MRMS_DateFormat.format(nextServTime)
                                    + Constants.COLSEPARATOR
                                    + Integer.toString(tripsPending)
                                    + Constants.COLSEPARATOR
                                    + Integer.toString(tripsIRTPU)
                                    + Constants.COLSEPARATOR
                                    + Integer.toString(tripsIRTDO)
                                    + Constants.COLSEPARATOR
                                    + AVL_Service.pref.getString("Address", "Unknown Address") + Constants.COLSEPARATOR
                                    + -1 + Constants.COLSEPARATOR
                                    + "" + Constants.COLSEPARATOR
                                    + 0 + Constants.COLSEPARATOR
                                    + 0
                                    , newTrip.destID, MsgType.TripResponse, AckType.NEW, MsgValidity.Short, MsgPriority.Normal);
                            ++TotalTripRejections;
                            // ShowBlackLIstNotify();
                            if (AVL_Service.PPV_UsePPVModule) {

                                ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
                                scheduler.schedule(new Runnable() {

                                    @Override
                                    public void run() {
                                        runOnUiThread(new Runnable() {
                                            public void run() {
                                                GetBalanceAndBlackListStatus(1);
                                            }
                                        });

                                    }
                                }, 5, TimeUnit.SECONDS);
                            }

                            // newTrip = null;
                        }

                        thisDialog.dismiss();
                    }
                });
                if (AVL_Service.SDShowProceedToPickupOnTripOffer) {
                    btnAccept.setText(Farsi.Convert(getResources().getString(R.string.ProceedToPickup)));
                    btnReject.setVisibility(Button.GONE);
                }
                btnReject.setText(Farsi.Convert(getResources().getString(R.string.Decline)));
                btnReject.setTypeface(null, Typeface.BOLD);
                btnReject.setTextSize(miscFont + 1);

                btnReject.setOnClickListener(new OnClickListener() {

                    @Override
                    public void onClick(View v) {
                        if (mTTS.isSpeaking())
                            mTTS.stop();
                        handlerForTripDetail.removeCallbacksAndMessages(null);
                        AlertDialog.Builder builder1 = new AlertDialog.Builder(TaxiPlexer.this);
                        LayoutInflater inflator = getLayoutInflater();
                        View myView1 = inflator.inflate(R.layout.trip_alert, null);
                        builder1.setIcon(android.R.drawable.ic_dialog_alert).setTitle(Farsi.Convert(getResources().getString(R.string.RejectionConfirmation))).setView(myView1);
                        final AlertDialog thisRejDialog;
                        tripRejectDialog = thisRejDialog = builder1.create();
                        tripRejectDialog.setCancelable(false);
                        tripRejectDialog.setCanceledOnTouchOutside(false);

                        txtReject = (TextView) myView1.findViewById(R.id.tv);
                        txtReject.setTextSize(miscFont + 1);
                        txtReject.setText(Farsi.Convert(getResources().getString(R.string.RejectingTripassignment)));

                        btnReject2 = (Button) myView1.findViewById(R.id.button1);
                        btnAccept2 = (Button) myView1.findViewById(R.id.button2);

                        btnReject2.setText(Farsi.Convert(getResources().getString(R.string.RejectTrip)));
                        btnReject2.setTypeface(null, Typeface.BOLD);
                        btnReject2.setTextSize(miscFont + 1);

                        btnReject2.setOnClickListener(new View.OnClickListener() {

                            @Override
                            public void onClick(View v) {

                                newTrip.state = States.REJECTED;
                                if (newTrip.DropNode != null)
                                    newTrip.DropNode.state = States.REJECTED;

                                try {
                                    setAppState();
                                } catch (Exception e) {
                                    handleException("[Exception in handleTripDetails]" + "[handleTripDetails]" + "[" + e.getLocalizedMessage() + "]" + tripDetail);
                                }

                                serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                        + AVL_Service.pref.getString("LastLongitude", "0")
                                        + Constants.COLSEPARATOR
                                        + newTrip.tripNumber
                                        + Constants.COLSEPARATOR
                                        + newTrip.state
                                        + Constants.COLSEPARATOR
                                        + NextServZone
                                        + Constants.COLSEPARATOR
                                        + nextServLat
                                        + Constants.COLSEPARATOR
                                        + nextServLong
                                        + Constants.COLSEPARATOR
                                        + MRMS_DateFormat.format(nextServTime)
                                        + Constants.COLSEPARATOR
                                        + Integer.toString(tripsPending)
                                        + Constants.COLSEPARATOR
                                        + Integer.toString(tripsIRTPU)
                                        + Constants.COLSEPARATOR
                                        + Integer.toString(tripsIRTDO)+ AVL_Service.pref.getString("Address", "Unknown Address") + Constants.COLSEPARATOR
                                        + -1 + Constants.COLSEPARATOR
                                        + "" + Constants.COLSEPARATOR
                                        + 0 + Constants.COLSEPARATOR
                                        + 0
                                        , newTrip.destID, MsgType.TripResponse, AckType.NEW, MsgValidity.Short, MsgPriority.Normal);
                                ++TotalTripRejections;
                                thisDialog.dismiss();
                                thisRejDialog.dismiss();
                                // ShowBlackLIstNotify();
                                if (AVL_Service.PPV_UsePPVModule) {

                                    ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
                                    scheduler.schedule(new Runnable() {

                                        @Override
                                        public void run() {
                                            runOnUiThread(new Runnable() {
                                                public void run() {
                                                    GetBalanceAndBlackListStatus(1);
                                                }
                                            });

                                        }
                                    }, 5, TimeUnit.SECONDS);
                                }
                            }
                        });

                        btnAccept2.setText(Farsi.Convert(getResources().getString(R.string.AcceptTrip)));
                        btnAccept2.setTypeface(null, Typeface.BOLD);
                        btnAccept2.setTextSize(miscFont + 1);
                        btnAccept2.setOnClickListener(new View.OnClickListener() {

                            @Override
                            public void onClick(View v) {
                                if ((System.currentTimeMillis() / 1000 - newTrip.rcvdTime) < newTrip.Validity) {

                                    if (tripAdapter == null)
                                        tabHost.setCurrentTab(TripIndex);

                                    // if (arrayListOfOtherTrips.indexOf(newTrip) < 0)
                                    // arrayListOfOtherTrips.add(newTrip);
                                    // else
                                    // arrayListOfOtherTrips.set(arrayListOfOtherTrips.indexOf(newTrip), newTrip);

                                    if (arrayListOftrips.indexOf(newTrip) < 0)
                                        arrayListOftrips.add(newTrip);
                                    else
                                        arrayListOftrips.set(arrayListOftrips.indexOf(newTrip), newTrip);

                                    // if (newTrip.DropNode != null) {
                                    // newTrip.DropNode.state = States.ACCEPTED;
                                    // if (arrayListOfOtherTrips.indexOf(newTrip.DropNode) < 0)
                                    // arrayListOfOtherTrips.add(newTrip.DropNode);
                                    // else
                                    // arrayListOfOtherTrips.set(arrayListOfOtherTrips.indexOf(newTrip.DropNode), newTrip.DropNode);
                                    // }

                                    if (newTrip.DropNode != null) {
                                        newTrip.DropNode.state = States.ACCEPTED;
                                        if (arrayListOftrips.indexOf(newTrip.DropNode) < 0)
                                            arrayListOftrips.add(newTrip.DropNode);
                                        else
                                            arrayListOftrips.set(arrayListOftrips.indexOf(newTrip.DropNode), newTrip.DropNode);
                                    }

                                    if (header[0].equalsIgnoreCase("0")) {
                                        if (header[1].equalsIgnoreCase("1"))
                                            try {
                                                sortTripList();
                                            } catch (Exception e) {
                                                // TODO Auto-generated catch block
                                                e.printStackTrace();
                                            }
                                    } else
                                        try {
                                            sortTripList();
                                        } catch (Exception e1) {
                                            // TODO Auto-generated catch block
                                            e1.printStackTrace();
                                        }

                                    try {
                                        setAppState();
                                    } catch (Exception e) {
                                        handleException("[Exception in handleTripDetails]" + "[handleTripDetails]" + "[" + e.getLocalizedMessage() + "]" + tripDetail);
                                    }

                                    serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                            + AVL_Service.pref.getString("LastLongitude", "0")
                                            + Constants.COLSEPARATOR
                                            + newTrip.tripNumber
                                            + Constants.COLSEPARATOR
                                            + newTrip.state
                                            + Constants.COLSEPARATOR
                                            + NextServZone
                                            + Constants.COLSEPARATOR
                                            + nextServLat
                                            + Constants.COLSEPARATOR
                                            + nextServLong
                                            + Constants.COLSEPARATOR
                                            + MRMS_DateFormat.format(nextServTime)
                                            + Constants.COLSEPARATOR
                                            + Integer.toString(tripsPending)
                                            + Constants.COLSEPARATOR
                                            + Integer.toString(tripsIRTPU)
                                            + Constants.COLSEPARATOR
                                            + Integer.toString(tripsIRTDO)
                                            + Constants.COLSEPARATOR
                                            + AVL_Service.pref.getString("Address", "Unknown Address") + Constants.COLSEPARATOR
                                            + -1 + Constants.COLSEPARATOR
                                            + "" + Constants.COLSEPARATOR
                                            + 0 + Constants.COLSEPARATOR
                                            + 0
                                            , newTrip.destID, MsgType.TripResponse, AckType.NEW, MsgValidity.Short, MsgPriority.Normal);
                                } else {
                                    // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.TripAcceptancetimeExpired)),
                                    // Toast.LENGTH_LONG).show();
                                    showToastMessage(R.string.TripAcceptancetimeExpired);
                                    newTrip.state = States.REJECTED;

                                    try {
                                        setAppState();
                                    } catch (Exception e) {
                                        handleException("[Exception in handleTripDetails]" + "[handleTripDetails]" + "[" + e.getLocalizedMessage() + "]" + tripDetail);
                                    }

                                    serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                            + AVL_Service.pref.getString("LastLongitude", "0")
                                            + Constants.COLSEPARATOR
                                            + newTrip.tripNumber
                                            + Constants.COLSEPARATOR
                                            + newTrip.state
                                            + Constants.COLSEPARATOR
                                            + NextServZone
                                            + Constants.COLSEPARATOR
                                            + nextServLat
                                            + Constants.COLSEPARATOR
                                            + nextServLong
                                            + Constants.COLSEPARATOR
                                            + MRMS_DateFormat.format(nextServTime)
                                            + Constants.COLSEPARATOR
                                            + Integer.toString(tripsPending)
                                            + Constants.COLSEPARATOR
                                            + Integer.toString(tripsIRTPU)
                                            + Constants.COLSEPARATOR
                                            + Integer.toString(tripsIRTDO)
                                            + Constants.COLSEPARATOR
                                            + AVL_Service.pref.getString("Address", "Unknown Address") + Constants.COLSEPARATOR
                                            + -1 + Constants.COLSEPARATOR
                                            + "" + Constants.COLSEPARATOR
                                            + 0 + Constants.COLSEPARATOR
                                            + 0
                                            , newTrip.destID, MsgType.TripResponse, AckType.NEW, MsgValidity.Short, MsgPriority.Normal);
                                    ++TotalTripRejections;
                                    // ShowBlackLIstNotify();
                                    if (AVL_Service.PPV_UsePPVModule) {

                                        ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
                                        scheduler.schedule(new Runnable() {

                                            @Override
                                            public void run() {
                                                runOnUiThread(new Runnable() {
                                                    public void run() {
                                                        GetBalanceAndBlackListStatus(1);
                                                    }
                                                });

                                            }
                                        }, 5, TimeUnit.SECONDS);
                                    }
                                }

                                thisDialog.dismiss();
                                thisRejDialog.dismiss();
                            }
                        });
                        tripRejectDialog.show();

                        dialogFontSize(tripRejectDialog);
                    }
                });

                if (AVL_Service.pref.getBoolean("ShowDropZone", true)) {
                    if (AVL_Service.pref.getBoolean("ShowAddressOnOffer", true))
                        txtAccept.setText(Farsi.Convert(getResources().getString(R.string.Pickuptrip)) + "\n"
                                + formatAddressOnOffer(newTrip.PUaddress)
                                + " - "
                                + newTrip.PUzone
                                + "\n"
                                + Farsi.Convert(getResources().getString(R.string.Dropofftrip))
                                + "   "
                                + newTrip.DOzone
                                + "\n"
                                + Farsi.Convert(getResources().getString(R.string.Funding))
                                + " "
                                + newTrip.fundingSource);
                    else
                        txtAccept.setText(Farsi.Convert(getResources().getString(R.string.Pickuptrip)) + "   "
                                + newTrip.PUzone
                                + "\n"
                                + Farsi.Convert(getResources().getString(R.string.Dropofftrip))
                                + "   "
                                + newTrip.DOzone);

                } else {
                    if (AVL_Service.pref.getBoolean("ShowAddressOnOffer", true))
                        txtAccept.setText(Farsi.Convert(getResources().getString(R.string.Pickuptrip)) + "\n"
                                + formatAddressOnOffer(newTrip.PUaddress)
                                + " - "
                                + newTrip.PUzone
                                + "\n"
                                + Farsi.Convert(getResources().getString(R.string.Funding))
                                + " "
                                + newTrip.fundingSource);
                    else
                        txtAccept.setText(Farsi.Convert(getResources().getString(R.string.Pickuptrip)) + "   " + newTrip.PUzone);
                }

                tripAcceptDialog.show();

                dialogFontSize(tripAcceptDialog);

            }// if
            // else if (arrayListOfTreatedTrips.indexOf(newTrip) < 0) { // if this Trip is already accepted Trip or Flagger
            else {
                tabHost.setCurrentTab(TripIndex);

                // if (tripAdapter.getPosition(newTrip) < 0)
                // tripAdapter.add(newTrip);
                // else
                // tripAdapter.set(tripAdapter.getPosition(newTrip), newTrip);

                // if (newTrip.state.equalsIgnoreCase(States.DROPPED) || newTrip.state.equalsIgnoreCase(States.NOSHOW) ||
                // newTrip.state.equalsIgnoreCase(States.CANCELLED)) {
                // if (arrayListOfTreatedTrips.indexOf(newTrip) < 0)
                // arrayListOfTreatedTrips.add(newTrip);
                // else
                // arrayListOfTreatedTrips.set(arrayListOfTreatedTrips.indexOf(newTrip), newTrip);
                //
                // } else {
                // if (arrayListOfOtherTrips.indexOf(newTrip) < 0) {
                // arrayListOfOtherTrips.add(newTrip);
                //
                // if (newTrip.state.equalsIgnoreCase(States.ACCEPTED)) {
                // // onRadioClick(getResources().getString(R.string.Newtriphasbeenadded)); This was being used by infonet
                // if (currentTrip == null)
                // if (currentView.getId() != TRIPDETAILVIEW)
                // tabHost.setCurrentTab(TripIndex);
                // }
                //
                // } else
                // arrayListOfOtherTrips.set(arrayListOfOtherTrips.indexOf(newTrip), newTrip);
                // }

                if (arrayListOftrips.indexOf(newTrip) < 0)
                    arrayListOftrips.add(newTrip);
                else
                    arrayListOftrips.set(arrayListOftrips.indexOf(newTrip), newTrip);

                if (newTrip.state.equalsIgnoreCase(States.ACCEPTED)) {
                    // onRadioClick(getResources().getString(R.string.Newtriphasbeenadded)); This was being used by infonet
                    if (currentTrip == null)
                        if (currentView.getId() != TRIPDETAILVIEW)
                            tabHost.setCurrentTab(TripIndex);
                }

                // if (newTrip.DropNode != null) {
                // if (tripAdapter.getPosition(newTrip.DropNode) < 0)
                // tripAdapter.add(newTrip.DropNode);
                // else
                // tripAdapter.set(tripAdapter.getPosition(newTrip.DropNode), newTrip.DropNode);
                // }
                //
                // if (newTrip.DropNode != null) {
                // if (newTrip.state.equalsIgnoreCase(States.DROPPED) || newTrip.state.equalsIgnoreCase(States.NOSHOW) ||
                // newTrip.state.equalsIgnoreCase(States.CANCELLED)) {
                // if (arrayListOfTreatedTrips.indexOf(newTrip.DropNode) < 0)
                // arrayListOfTreatedTrips.add(newTrip.DropNode);
                // else
                // arrayListOfTreatedTrips.set(arrayListOfTreatedTrips.indexOf(newTrip.DropNode), newTrip.DropNode);
                //
                // } else {
                // if (arrayListOfOtherTrips.indexOf(newTrip.DropNode) < 0)
                // arrayListOfOtherTrips.add(newTrip.DropNode);
                // else
                // arrayListOfOtherTrips.set(arrayListOfOtherTrips.indexOf(newTrip.DropNode), newTrip.DropNode);
                // }
                //
                // }

                if (newTrip.DropNode != null) {
                    // if (newTrip.state.equalsIgnoreCase(States.DROPPED) || newTrip.state.equalsIgnoreCase(States.NOSHOW) ||
                    // newTrip.state.equalsIgnoreCase(States.CANCELLED)) {
                    if (arrayListOftrips.indexOf(newTrip.DropNode) < 0)
                        arrayListOftrips.add(newTrip.DropNode);
                    else
                        arrayListOftrips.set(arrayListOftrips.indexOf(newTrip.DropNode), newTrip.DropNode);

                    // } else {
                    // if (arrayListOfOtherTrips.indexOf(newTrip.DropNode) < 0)
                    // arrayListOfOtherTrips.add(newTrip.DropNode);
                    // else
                    // arrayListOfOtherTrips.set(arrayListOfOtherTrips.indexOf(newTrip.DropNode), newTrip.DropNode);
                    // }

                }

                if (header[0].equalsIgnoreCase("0")) {
                    if (header[1].equalsIgnoreCase("1"))
                        sortTripList();
                } else
                    sortTripList();

                try {
                    setAppState();
                } catch (Exception e) {
                    handleException("[Exception in handleTripDetails]" + "[handleTripDetails]" + "[" + e.getLocalizedMessage() + "]" + tripDetail);
                }

                if (newTrip.clientName.contains("Flagger") && newTrip.state.equalsIgnoreCase(States.PICKEDUP)) {
                    currentTrip = null;
                    currentTrip = newTrip;
                    Date date = new Date();
                    currentTrip.PUTime = date;
                    currentTrip.nodeTime = currentTrip.PUTime;

                    if (AVL_Service.pref.getBoolean("VeriFoneDevice", true) && IsMeterOnCreatedTrip) {
                        IsMeterOnCreatedTrip = false;
                        LogException("[Meter ON handleTripDetails ping: " + currentTrip.ConfirmNumber + "][handleTripDetails]");
                        AVL_Service.pref.edit().putString("TripConfirmationNo", currentTrip.ConfirmNumber).commit();
                        VerifoneCMD2AckCount = 0;
                        SendVeriFoneCMD2Stream();
                    }

                    if (tripView != null)
                        tripView.invalidate();
                    tripView = createTripView();
                    tripView.setKeepScreenOn(true);
					/*
					 * if (tripView == null) {
					 * tripView = createTripView();
					 * tripView.setKeepScreenOn(true);
					 * } else {
					 * tripView.invalidate();
					 * tripView = createTripView();
					 * tripView.setKeepScreenOn(true);
					 * }
					 */

                    currentView = tripView;
                    setContentView(currentView);

                    enableTripView();

                    drawable = PickedButton.getBackground();
                    drawable.setColorFilter(Color.GREEN, Mode.SRC_IN);
                    // drawable.setColorFilter(0xFFFF0000, android.graphics.PorterDuff.Mode.MULTIPLY); // Azhar
                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                        PickedButton.setBackground(drawable);
                    else
                        PickedButton.setBackgroundDrawable(drawable);

                    drawable = DroppedButton.getBackground();
                    drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                        DroppedButton.setBackground(drawable);
                    else
                        DroppedButton.setBackgroundDrawable(drawable);

                    drawable = callOutButton.getBackground();
                    drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                        callOutButton.setBackground(drawable);
                    else
                        callOutButton.setBackgroundDrawable(drawable);

                    drawable = NoShowButton.getBackground();
                    drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                        NoShowButton.setBackground(drawable);
                    else
                        NoShowButton.setBackgroundDrawable(drawable);

                    updateTripDetailView(currentTrip);
                    if (AVL_Service.SDEnableOdometerInput == 1) {
                        Date dateodo = new Date();
                        if(dbh.checkExist(currentTrip.tripNumber) == 0)
                        dbh.insertvalue(currentTrip.tripNumber,displayDateFormat.format(dateodo),currentTrip.odoMeterStartValue, currentTrip.odoMeterEndValue);
                        odoMeterDialog = new AlertDialog.Builder(this).setView(createOdoCountDialogView(1)).setCancelable(false).create();
                        if(!odoMeterDialog.isShowing())
                            odoMeterDialog.show();
                    }
                }// if Flagger

            }// else
            if (MeterTimeOffTripCreated) {// check if Trip is created in response of Time off meter message
                droppedOff("TaxiMeter");
                MeterTimeOffTripCreated = false;
            }
            LogException("[SYNC: END of handleTripDetails" + System.currentTimeMillis()
                    + "{"
                    + newTrip.ConfirmNumber
                    + "{"
                    + newTrip.nodeType
                    + "{"
                    + newTrip.SharedKey
                    + "{"
                    + newTrip.state
                    + "{"
                    + newTrip.DropNode
                    + "][handleTripDetails]");

            if (header[0].equalsIgnoreCase("0"))
                if (header[1].equalsIgnoreCase("1")) {
                    ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
                    scheduler.schedule(new Runnable() {

                        @Override
                        public void run() {
                            runOnUiThread(new Runnable() {
                                public void run() {
                                    tripSyncCancelUnAssigned();
                                }
                            });

                        }
                    }, 5, TimeUnit.SECONDS);
                }

        } catch (Exception e) {
            String ExceptionText = "[Exception in handleTripDetails]" + "[handleTripDetails]" + "[" + e.getLocalizedMessage() + "]" + tripDetail;
            handleException(ExceptionText);
            generateNoteOnSD("TaxiPlexer_error.txt", "TripDetail - >" + tripDetail + "\n" + ExceptionText + "\n\n");
        }
    }
    /*--------------------------------------------------------------HandleGetDriverSnap----------------------------------------------------------------*/
    private void HandleGetDriverSnap(final String snapPath) {

        Thread imgThread = new Thread(new Runnable() {

            @Override
            public void run() {
                try {
                    // String fileName = AVL_Service.pref.getString("DriverID", "Unknown") + ".png";
                    // URL url = new URL(getHost(AVL_Service.webServiceURL) + "/drivers/" + AVL_Service.pref.getString("DriverID", "Unknown") + ".png"); // you can write
                    driverSnapException = false;
                    URL url = new URL(snapPath);// here any link
                    File file = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/" + snapPath.split("/")[2]);

                    // long startTime = System.currentTimeMillis();
                    Log.d("ImageManager", "downloaded file name:" + snapPath.split("/")[2]);
					/* Open a connection to that URL. */
                    URLConnection ucon = url.openConnection();
					/*
					 * Define InputStreams to read from the URLConnection.
					 */
                    InputStream is = ucon.getInputStream();
                    BufferedInputStream bis = new BufferedInputStream(is);

					/*
					 * Read bytes to the Buffer until there is nothing more to read(-1).
					 */
                    ByteArrayBuffer baf = new ByteArrayBuffer(50);
                    int current = 0;
                    while ((current = bis.read()) != -1) {
                        baf.append((byte) current);
                    }

                    FileOutputStream fos = new FileOutputStream(file);
                    fos.write(baf.toByteArray());
                    fos.close();
                    // Log.d("ImageManager", "download ready in" + ((System.currentTimeMillis() - startTime) / 1000) + " sec");

                } catch (Exception e) {
                    e.printStackTrace();
                    driverSnapException = true;
                } finally {
                    mHandler.post(new Runnable() {

                        @Override
                        public void run() {
                            if (!driverSnapException) {
                                File file = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/" + snapPath.split("/")[2]);
                                String imageInSD = "";
                                if (file.exists()) {
                                    imageInSD = Environment.getExternalStorageDirectory().getAbsolutePath() + "/" + snapPath.split("/")[2];
                                    Bitmap bitmap = BitmapFactory.decodeFile(imageInSD);
                                    DriverSnap.setImageBitmap(bitmap);
                                } else {
                                    DriverSnap.setImageDrawable(getResources().getDrawable(R.drawable.picnotfound));
                                }
                            } else
                                DriverSnap.setImageDrawable(getResources().getDrawable(R.drawable.picnotfound));

                        }
                    });
                }
            }
        });
        imgThread.start();
    }

    /*--------------------------------------------------------------getHost----------------------------------------------------------------*/
    public String getHost(String url) {
        if (url == null || url.length() == 0)
            return "";

        int doubleslash = url.indexOf("//");
        if (doubleslash == -1)
            doubleslash = 0;
        else
            doubleslash += 2;

        int end = url.indexOf('/', doubleslash);
        end = end >= 0 ? end : url.length();

        // return url.substring(doubleslash, end);
        return url.substring(0, end);
    }

    /*--------------------------------------------------------------formatAddressOnOffer----------------------------------------------------------------*/
    private String formatAddressOnOffer(String pUaddress) {
        try {
            StringBuilder formatedAddress = new StringBuilder();
            if (pUaddress != null) {
                String[] AddressInParts = pUaddress.split(",", 3);
                AddressInParts = AddressInParts[0].split(" ", 2);
                int addrLength = AddressInParts[0].length();

                if (StringUtil.isDouble(AddressInParts[0]))
                    switch (addrLength) {
                        case 6 :
                            formatedAddress.append(StringUtil.truncate(AddressInParts[0], 4)).append("xx");
                            break;
                        case 5 :
                            formatedAddress.append(StringUtil.truncate(AddressInParts[0], 3)).append("xx");
                            break;
                        case 4 :
                            formatedAddress.append(StringUtil.truncate(AddressInParts[0], 2)).append("xx");
                            break;
                        case 3 :
                            formatedAddress.append(StringUtil.truncate(AddressInParts[0], 1)).append("xx");
                            break;
                        case 2 :
                            formatedAddress.append("xx");
                            break;
                        case 1 :
                            formatedAddress.append("x");
                            break;
                    }
                else
                    formatedAddress.append(AddressInParts[0]);
                if (formatedAddress.length() > 2)
                    return formatedAddress.append(" ").append(AddressInParts[1]).toString();
                else
                    return formatedAddress.toString();
            }
            return pUaddress;
        } catch (Exception e) {
            handleException("[Exception in formatAddressOnOffer]" + "[formatAddressOnOffer]" + "[" + e.getLocalizedMessage() + "]");
            return pUaddress;
        }
    }
    /*--------------------------------------------------------------onActivityResult----------------------------------------------------------------*/
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        try {

            // if (requestCode == 35) {
            //
            //
            //
            // }

            if (resultCode == RESULT_OK) {
                switch (requestCode) {

                    case Constants.BID_CODE :
                        matches = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);
                        if (matches.contains("no") || matches.contains("yes"))
                            if (matches.contains("yes")) {
                                if (bidCount > 1) {
                                    serviceHandle.sendMessageToServer(bidResponse[0] + Constants.COLSEPARATOR + "B", bidResponse[3], MsgType.BID, AckType.NEW, MsgValidity.Medium, MsgPriority.Normal);
                                    removeBid(bidResponse[1]);
                                }
                            } else {
                                serviceHandle.sendMessageToServer(bidResponse[0] + Constants.COLSEPARATOR + "N", bidResponse[3], MsgType.BID, AckType.NEW, MsgValidity.Medium, MsgPriority.Normal);
                                removeBid(bidResponse[1]);
                            }
                        else {
                            if (TTS)
                                onRadioClick(getResources().getString(R.string.PleaseSayYesOrNo));
                            startVoiceRecognitionActivity(requestCode);
                        }
                        break;

                    case Constants.TripAccept_CODE :
                        matches = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);
                        if (matches.contains("no") || matches.contains("yes")) {
                            if (matches.contains("yes")) {
                                if (tripAcceptDialog.isShowing())
                                    btnAccept.performClick();
                            } else {
                                if (tripAcceptDialog.isShowing())
                                    btnReject.performClick();
                                if (recognizer) {
                                    onRadioClick(getResources().getString(R.string.RejectingAtrip));
                                    startVoiceRecognitionActivity(Constants.TripReject_CODE);
                                } else
                                    showToastMessage(R.string.Recognizer_not_present);
                                // Toast.makeText(getApplicationContext(), "Recognizer not present", Toast.LENGTH_SHORT).show();
                            }
                        } else {
                            if (TTS)
                                onRadioClick(getResources().getString(R.string.PleaseSayYesOrNo));
                            startVoiceRecognitionActivity(requestCode);
                        }
                        break;

                    case Constants.TripReject_CODE :
                        matches = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);
                        if (matches.contains("no") || matches.contains("yes")) {
                            if (matches.contains("yes")) {
                                if (tripRejectDialog.isShowing())
                                    btnReject2.performClick();
                            } else {
                                if (tripRejectDialog.isShowing())
                                    btnAccept2.performClick();
                            }
                        } else {
                            if (TTS)
                                onRadioClick(getResources().getString(R.string.PleaseSayYesOrNo));
                            startVoiceRecognitionActivity(requestCode);
                        }
                        break;
                    case Constants.REQUEST_ENABLE_BT :
                        if (!serviceHandle.loggedIn())
                            btnLogin.performClick();
                        // tabHost.setCurrentTab(ZoneIndex);
                        break;
                    case Constants.REQUEST_CONNECT_DEVICE_INSECURE :
                        // When DeviceListActivity returns with a device to connect
                        if (resultCode == Activity.RESULT_OK) {
                            connectDevice(data, false);
                        }
                        break;

                    case Constants.SIGNATURE_CAPTURE :

                        Bundle bundle = data.getExtras();
                        String url = bundle.getString("url");
                        if (url.length() > 3) {
                            currentTrip.signatureURL = url;
                            Toast.makeText(this, "Signature capture successful!", Toast.LENGTH_SHORT).show();
                            try {
                                File f = new File(url, "signature.jpg");
                                Bitmap b = BitmapFactory.decodeStream(new FileInputStream(f));

                                signature.setImageBitmap(b);
                            } catch (FileNotFoundException e) {
                                exception("[Exception in signaturecapture]" + "[onActivityResult]" + "[" + e.getLocalizedMessage() + "]");

                            }
                            // signature.setImageURI(Uri.parse(url));
                            // uploadSignatureFile();
                        }
                        break;

                    case REQ_SYSTEM_SETTINGS :
                        setSwiperControllerValues();

                }// switch
            }
            // } else if (requestCode == Constants.REQUEST_ENABLE_BT)
            // tabHost.setCurrentTab(ZoneIndex);
            // super.onActivityResult(requestCode, resultCode, data);
        } catch (Exception e) {
            handleException("[Exception in onActivityResult]" + "[onActivityResult]" + "[" + e.getLocalizedMessage() + "]");
        }
    }

    /*--------------------------------------------------------------SendVeriFoneLoginStream----------------------------------------------------------------*/
    private void SendVeriFoneLoginStream() {
        // Driver#^Driver-Name^Vehicle#^bPrintTestReceipt^DriverSnapStream
        VerifoneCMD1AckCount = VerifoneCMD1AckCount + 1;
        // AVL_Service.SendDriverPicToVeriFone
        if (VerifoneCMD1AckCount <= 3 && Meter != null) {
            String LoginMessagetoMeter = "";
            if (IsVerifoneConnectionMSGSend)
                LoginMessagetoMeter = AVL_Service.pref.getString("DriverID", "Unknown") + "^" + Driver_name + "^" + AVL_Service.pref.getString("VehicleID", "Unknown") + "^" + "0" + "^" + "-1";
            else
                LoginMessagetoMeter = AVL_Service.pref.getString("DriverID", "Unknown") + "^" + Driver_name + "^" + AVL_Service.pref.getString("VehicleID", "Unknown") + "^" + "1" + "^" + "-1";

            customMessage = new CustomMessage(LoginMessagetoMeter, "1");
            Meter.writeCustom(customMessage);

            ScheduledExecutorService schedulerAuto = Executors.newSingleThreadScheduledExecutor();
            schedulerAuto.schedule(new Runnable() {

                @Override
                public void run() {

                    runOnUiThread(new Runnable() {
                        public void run() {
                            SendVeriFoneLoginStream();
                        }
                    });
                }
            }, 4, TimeUnit.SECONDS);
        }
    }
    /*--------------------------------------------------------------SendVeriFoneCMD2Stream----------------------------------------------------------------*/
    private void SendVeriFoneCMD2Stream() {
        VerifoneCMD2AckCount = VerifoneCMD2AckCount + 1;
        if (VerifoneCMD2AckCount <= 2 && Meter != null) {
            customMessage = new CustomMessage(AVL_Service.pref.getString("TripConfirmationNo", "000000"), "2");
            Meter.writeCustom(customMessage);
            LogException("[sendverifonrcmd2stream]" + "[sendverifonecmd2stream]"
                    + "Ping from ping Method: "
                    + AVL_Service.pref.getString("TripConfirmationNo", "000000")
                    + " currentTrip : "
                    + ((currentTrip != null) ? currentTrip.ConfirmNumber : "Current Trip NULL" + " : TripPaymentDataReceivedFromVeriFone : " + TripPaymentDataReceivedFromVeriFone));
            ScheduledExecutorService schedulerAuto = Executors.newSingleThreadScheduledExecutor();
            schedulerAuto.schedule(new Runnable() {

                @Override
                public void run() {

                    runOnUiThread(new Runnable() {
                        public void run() {
                            SendVeriFoneCMD2Stream();
                        }
                    });
                }
            }, 4, TimeUnit.SECONDS);
        }
    }
    /*--------------------------------------------------------------connectDevice----------------------------------------------------------------*/
    private void connectDevice(final Intent data, boolean secure) {

        // new Thread(new Runnable() {
        //
        // @Override
        // public void run() {
        // runOnUiThread(new Runnable() {
        // public void run() {
        // connectionMeterProgress = ProgressDialog.show(TaxiPlexer.this, "", "Connecting to Meter. . .");
        // connectionMeterProgress.setCancelable(false);
        // connectionMeterProgress.setCanceledOnTouchOutside(false);
        // }
        // });

        // Get the device MAC address
        macAddress1 = data.getExtras().getString(DeviceListActivity.EXTRA_DEVICE_ADDRESS);
        // Attempt to connect to the device
        if (AVL_Service.pref.getString("MeterAddress", "").equalsIgnoreCase("0") || AVL_Service.pref.getString("MeterAddress", "").equalsIgnoreCase(macAddress1)
                || AVL_Service.pref.getString("MeterAddress", "").equalsIgnoreCase("")) {

            if (connectToMeter(macAddress1)) {
                // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.ConnectedtoMeter)), Toast.LENGTH_SHORT).show();
                if (!pairingrequest) {
                    runOnUiThread(new Runnable() {

                        @Override
                        public void run() {

                            showToastMessage(R.string.ConnectedtoMeter);
                            AVL_Service.pref.edit().putString("MeterAddress", macAddress1).commit();

                            serviceHandle.sendMessageToServer(
                                    AVL_Service.pref.getString("VehicleID", "") + Constants.COLSEPARATOR + macAddress1,
                                    "SDHS",
                                    MsgType.updateMeterBTAddress,
                                    AckType.NEW,
                                    MsgValidity.Medium,
                                    MsgPriority.Normal);

                            tvTaxiMeter.setText(Farsi.Convert(getResources().getString(R.string.Connected)));
                            // ConnectToMeter.setEnabled(false);
                            ConnectToMeter.setVisibility(Button.GONE);
                            AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                            builder.setIcon(android.R.drawable.ic_dialog_alert).setTitle(Farsi.Convert(getResources().getString(R.string.MeterasPrintingTerminal))).setMessage(
                                    Farsi.Convert(getResources().getString(R.string.youwanttouseMeterasPrinting))).setPositiveButton(
                                    Farsi.Convert(getResources().getString(R.string.Yes)),
                                    new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int which) {
                                            taxiMeterPrinter = Meter;
                                            taxiPrinter = taxiMeter;
                                            AVL_Service.pref.edit().putString("PrinterAddress", AVL_Service.pref.getString("MeterAddress", "")).commit();
                                        } // onClick

                                    }).setNegativeButton(Farsi.Convert(getResources().getString(R.string.No)), null);

                            AlertDialog alert = builder.create();
                            alert.show();

                            dialogFontSize(alert);

                        }
                    });
                }

            } else {
                // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.FailedConnectMeter)), Toast.LENGTH_LONG).show();

                if (!pairingrequest)
                    runOnUiThread(new Runnable() {

                        @Override
                        public void run() {

                            showToastMessage(R.string.FailedConnectMeter);

                        }
                    });
            }
        } else {
            // Toast.makeText(TaxiPlexer.this, "Available Meter is not registered with Back Office.", Toast.LENGTH_LONG).show();
            runOnUiThread(new Runnable() {

                @Override
                public void run() {

                    showToastMessage(R.string.Available_Meter_is_not_registered_with_Back_Office);

                }
            });
        }

        // runOnUiThread(new Runnable() {
        //
        // @Override
        // public void run() {
        // connectionMeterProgress.dismiss();
        // }
        // });
        //
        // }
        // });

    }

    /*--------------------------------------------------------------SendTripResponse----------------------------------------------------------------*/
    protected void sendTripResponse(String tripState) {
        final String stateTrip = tripState;
        String Milage = "0.00";
        boolean inTreatedTripsArray = false;
        if (stateTrip == States.DROPPED) {
            Milage = ((dFormat.format(Distance).equalsIgnoreCase("0.00")) ? currentTrip.miles : dFormat.format(Distance));
            // if (currentTrip != null) {
            // synchronized (tripArraysInSync) {
            //
            // synchronized (arrayListOfOtherTrips) {
            // arrayListOfOtherTrips.remove(currentTrip);
            // // arrayListOfOtherTrips.notifyAll();
            // }
            //
            // synchronized (arrayListOfTreatedTrips) {
            // arrayListOfTreatedTrips.add(currentTrip);
            // // arrayListOfTreatedTrips.notifyAll();
            //
            // }
            // }
            //
            // }
        }

        if (currentTrip != null) {
            currentTrip.state = stateTrip;
            if (currentTrip.clientName.contains("Flagger"))
                currentTrip.DOaddress = AVL_Service.pref.getString("Address", "Unknown Address");

            // if (currentTrip.SharedKey.equalsIgnoreCase("1"))
            // for (Trip thisTrip : arrayListOfTreatedTrips)
            // if (thisTrip.tripNumber.equalsIgnoreCase(currentTrip.tripNumber)) {
            // thisTrip.state = stateTrip;
            // inTreatedTripsArray = true;
            // }
            //
            // if (currentTrip.SharedKey.equalsIgnoreCase("1"))
            // if (!inTreatedTripsArray)
            // for (Trip thisTrip : arrayListOfOtherTrips)
            // if (thisTrip.tripNumber.equalsIgnoreCase(currentTrip.tripNumber))
            // thisTrip.state = stateTrip;

            if (currentTrip.SharedKey.equalsIgnoreCase("1"))
                for (Trip thisTrip : arrayListOftrips)
                    if (thisTrip.tripNumber.equalsIgnoreCase(currentTrip.tripNumber)) {
                        thisTrip.state = stateTrip;
                        // inTreatedTripsArray = true;
                    }

            try {
                setAppState();
            } catch (Exception e) {
                handleException("[Exception in sendTripResponse]" + "[sendTripResponse]" + "[" + e.getLocalizedMessage() + "]" + tripState);
            }

            //@formatter:off

            if(stateTrip.equalsIgnoreCase(States.DROPPED)){
                checkSoftMeterTON = false;
                checkSoftMeterTOF = false;
                checkSoftMeterMON = false;
                final String tripnumber = currentTrip.tripNumber;
                final String Mileage = Milage;
                final String odoMeterStartValue = currentTrip.odoMeterStartValue;
                final String odoMeterEndValue = currentTrip.odoMeterEndValue;
                final String puzone = currentTrip.PUzone;
                ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
                scheduler.schedule(new Runnable() {

                    @Override
                    public void run() {

                        serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                + AVL_Service.pref.getString("LastLongitude", "0") + Constants.COLSEPARATOR
                                + tripnumber + Constants.COLSEPARATOR
                                + stateTrip + Constants.COLSEPARATOR
                                + NextServZone + Constants.COLSEPARATOR
                                + nextServLat + Constants.COLSEPARATOR
                                + nextServLong + Constants.COLSEPARATOR
                                + MRMS_DateFormat.format(nextServTime) + Constants.COLSEPARATOR
                                + Integer.toString(tripsPending) + Constants.COLSEPARATOR
                                + Integer.toString(tripsIRTPU) + Constants.COLSEPARATOR
                                + Integer.toString(tripsIRTDO) + Constants.COLSEPARATOR
                                + AVL_Service.pref.getString("Address", "Unknown Address") + Constants.COLSEPARATOR
                                + Mileage + Constants.COLSEPARATOR
                                + puzone + Constants.COLSEPARATOR
                                + odoMeterStartValue + Constants.COLSEPARATOR
                                + odoMeterEndValue
                                , "SDHS", MsgType.TripResponse, AckType.NEW, MsgValidity.Short, MsgPriority.Highest);

                    }
                }, 2, TimeUnit.SECONDS);

            } else{
                serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                        + AVL_Service.pref.getString("LastLongitude", "0") + Constants.COLSEPARATOR
                        + currentTrip.tripNumber + Constants.COLSEPARATOR
                        + stateTrip + Constants.COLSEPARATOR
                        + NextServZone + Constants.COLSEPARATOR
                        + nextServLat + Constants.COLSEPARATOR
                        + nextServLong + Constants.COLSEPARATOR
                        + MRMS_DateFormat.format(nextServTime) + Constants.COLSEPARATOR
                        + Integer.toString(tripsPending) + Constants.COLSEPARATOR
                        + Integer.toString(tripsIRTPU) + Constants.COLSEPARATOR
                        + Integer.toString(tripsIRTDO) + Constants.COLSEPARATOR
                        + AVL_Service.pref.getString("Address", "Unknown Address") + Constants.COLSEPARATOR
                        + Milage + Constants.COLSEPARATOR
                        + currentTrip.PUzone + Constants.COLSEPARATOR
                        + 0 + Constants.COLSEPARATOR
                        + 0
                        , "SDHS", MsgType.TripResponse, AckType.NEW, MsgValidity.Short, MsgPriority.Highest);
            }

            //@formatter:on

            // tripAdapter.notifyDataSetChanged();
            try {
                sortTripList();
            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            // if CurrentTrip is null and State == Pickedup then Flagger is started
        } else if (stateTrip.equalsIgnoreCase(States.PICKEDUP)) {
            try {
                setAppState();
            } catch (Exception e) {
                handleException("[Exception in sendTripResponse]" + "[sendTripResponse]" + "[" + e.getLocalizedMessage() + "]" + tripState);
            }
            final String Milage1 = Milage;
            new Thread(new Runnable() {

                @Override
                public void run() {
                    String currentAddress = AVL_Service.pref.getString("Address", "Unknown Address");

                    if (currentAddress.contains("Unknown")){

                        StringBuffer envelope = new StringBuffer(
                                "<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><ReverseGeoCodeBylatlng xmlns=\"http://Itcurves.net/\"><lat>")
                                .append(AVL_Service.pref.getString("LastLatitude", "0"))
                                .append("</lat><lng>")
                                .append(AVL_Service.pref.getString("LastLongitude", "0"))
                                .append("</lng></ReverseGeoCodeBylatlng></soap:Body></soap:Envelope>");

                        // Calling Web Service and Parsing Response
                        WS_Response wsResponse = CallingWS.submit(AVL_Service.webServiceURL, AVL_Service.soapAction_ReverseGeoCodeBylatlng, envelope.toString());

                        if (wsResponse != null)
                            if (!wsResponse.error && wsResponse.responseType != null && wsResponse.responseType.equalsIgnoreCase("ReverseGeoCodeBylatlngResult")) {

                                currentAddress = wsResponse.addressString;
                                AVL_Service.pref.edit().putString("Address", currentAddress).commit();
                            }
                    }
                    final String  currentAddress1 = currentAddress;
                    runOnUiThread(new Runnable() {
                        public void run() {

                            handleLocationChange(currentAddress1);
                            //@formatter:off
                            serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                    + AVL_Service.pref.getString("LastLongitude", "0") + Constants.COLSEPARATOR
                                    + "9999" + Constants.COLSEPARATOR
                                    + stateTrip + Constants.COLSEPARATOR
                                    + NextServZone + Constants.COLSEPARATOR
                                    + nextServLat + Constants.COLSEPARATOR
                                    + nextServLong + Constants.COLSEPARATOR
                                    + MRMS_DateFormat.format(nextServTime) + Constants.COLSEPARATOR
                                    + Integer.toString(tripsPending) + Constants.COLSEPARATOR
                                    + Integer.toString(tripsIRTPU) + Constants.COLSEPARATOR
                                    + Integer.toString(tripsIRTDO) + Constants.COLSEPARATOR
                                    + currentAddress1 + Constants.COLSEPARATOR
                                    + Milage1  + Constants.COLSEPARATOR
                                    + AVL_Service.pref.getString("PassengerCount", "0")
                                    ,"SDHS", MsgType.TripResponse, AckType.NEW, MsgValidity.Short, MsgPriority.Highest);
                        }
                    });

                }
            }).start();
            //@formatter:on
        }

    }

    /*--------------------------------------------------------------receivedTripUpdate--------------------------------------------------------------*/
    @Override
    public void receivedTripUpdate(String TripUpdate) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.TripDetailUpdate, TripUpdate).sendToTarget();

    }

    /*--------------------------------------------------------------handleTripUpdate----------------------------------------------------------------*/
    protected void handleTripUpdate(String tripDetail) {
        boolean isTripInAdvancedState = false;
        boolean newAcceptedTrip = false;
        try {
            synchronized (tripArraysInSync) {

                final Trip newTrip = new Trip(tripDetail);

                // if (arrayListOfTreatedTrips == null)
                // arrayListOfTreatedTrips = new TripArrayList();

                // if (arrayListOfTreatedTrips.indexOf(newTrip) < 0) {
                nextColorIndex++;
                newTrip.nodeColor = selectColor(nextColorIndex);

                if (newTrip.SharedKey.equalsIgnoreCase("1")) {
                    newTrip.nodeType = "PU";
                    newTrip.DropNode = new Trip(tripDetail, "DO");
                    newTrip.DropNode.nodeColor = selectColor(nextColorIndex);
                }

                // if (newTrip.state.equalsIgnoreCase(States.DROPPED) || newTrip.state.equalsIgnoreCase(States.NOSHOW) ||
                // newTrip.state.equalsIgnoreCase(States.CANCELLED)) {
                // if (arrayListOfTreatedTrips.indexOf(newTrip) < 0 && arrayListOfOtherTrips.indexOf(newTrip) < 0) {
                // arrayListOfTreatedTrips.add(newTrip);
                // isTripInAdvancedState = true;
                // } else if (arrayListOfOtherTrips.indexOf(newTrip) >= 0) {
                //
                // synchronized (arrayListOfOtherTrips) {
                // arrayListOfOtherTrips.remove(arrayListOfOtherTrips.indexOf(newTrip));
                // arrayListOfOtherTrips.notifyAll();
                // }
                //
                // synchronized (arrayListOfTreatedTrips) {
                // arrayListOfTreatedTrips.add(newTrip);
                // arrayListOfTreatedTrips.notifyAll();
                // isTripInAdvancedState = true;
                // }
                //
                // } else
                // arrayListOfTreatedTrips.set(arrayListOfTreatedTrips.indexOf(newTrip), newTrip);
                //
                // } else {
                // if (arrayListOfOtherTrips.indexOf(newTrip) < 0) {
                // arrayListOfOtherTrips.add(newTrip);
                // if (newTrip.state.equalsIgnoreCase(States.ACCEPTED))
                // newAcceptedTrip = true;
                // } else {
                // if ((arrayListOfOtherTrips.get(arrayListOfOtherTrips.indexOf(newTrip)).state.equalsIgnoreCase(States.ACCEPTED)) &&
                // (newTrip.state.equalsIgnoreCase(States.ATLOCATION))
                // || (newTrip.state.equalsIgnoreCase(States.IRTPU))
                // || (newTrip.state.equalsIgnoreCase(States.PICKEDUP))) {
                // arrayListOfOtherTrips.set(arrayListOfOtherTrips.indexOf(newTrip), newTrip);
                // isTripInAdvancedState = true;
                // } else if ((arrayListOfOtherTrips.get(arrayListOfOtherTrips.indexOf(newTrip)).state.equalsIgnoreCase(States.ATLOCATION)) &&
                // ((newTrip.state.equalsIgnoreCase(States.IRTPU)) || (newTrip.state
                // .equalsIgnoreCase(States.PICKEDUP)))) {
                // arrayListOfOtherTrips.set(arrayListOfOtherTrips.indexOf(newTrip), newTrip);
                // isTripInAdvancedState = true;
                // } else if ((arrayListOfOtherTrips.get(arrayListOfOtherTrips.indexOf(newTrip)).state.equalsIgnoreCase(States.IRTPU)) &&
                // ((newTrip.state.equalsIgnoreCase(States.PICKEDUP)))) {
                // arrayListOfOtherTrips.set(arrayListOfOtherTrips.indexOf(newTrip), newTrip);
                // isTripInAdvancedState = true;
                // } else {
                // newTrip.state = arrayListOfOtherTrips.get(arrayListOfOtherTrips.indexOf(newTrip)).state;
                // arrayListOfOtherTrips.set(arrayListOfOtherTrips.indexOf(newTrip), newTrip);
                // }
                // }
                // }

                if (arrayListOftrips.indexOf(newTrip) < 0) {
                    arrayListOftrips.add(newTrip);
                    if (newTrip.state.equalsIgnoreCase(States.ACCEPTED))
                        newAcceptedTrip = true;
                } else {
                    if (newTrip.state.equalsIgnoreCase(States.DROPPED) || newTrip.state.equalsIgnoreCase(States.NOSHOW) || newTrip.state.equalsIgnoreCase(States.CANCELLED)) {
                        arrayListOftrips.set(arrayListOftrips.indexOf(newTrip), newTrip);
                    }
                    if ((arrayListOftrips.get(arrayListOftrips.indexOf(newTrip)).state.equalsIgnoreCase(States.ACCEPTED)) && (newTrip.state.equalsIgnoreCase(States.ATLOCATION))
                            || (newTrip.state.equalsIgnoreCase(States.IRTPU))
                            || (newTrip.state.equalsIgnoreCase(States.PICKEDUP))) {
                        arrayListOftrips.set(arrayListOftrips.indexOf(newTrip), newTrip);
                        isTripInAdvancedState = true;
                    } else if ((arrayListOftrips.get(arrayListOftrips.indexOf(newTrip)).state.equalsIgnoreCase(States.ATLOCATION)) && ((newTrip.state.equalsIgnoreCase(States.IRTPU)) || (newTrip.state
                            .equalsIgnoreCase(States.PICKEDUP)))) {
                        arrayListOftrips.set(arrayListOftrips.indexOf(newTrip), newTrip);
                        isTripInAdvancedState = true;
                    } else if ((arrayListOftrips.get(arrayListOftrips.indexOf(newTrip)).state.equalsIgnoreCase(States.IRTPU)) && ((newTrip.state.equalsIgnoreCase(States.PICKEDUP)))) {
                        arrayListOftrips.set(arrayListOftrips.indexOf(newTrip), newTrip);
                        isTripInAdvancedState = true;
                    } else {
                        newTrip.state = arrayListOftrips.get(arrayListOftrips.indexOf(newTrip)).state;
                        arrayListOftrips.set(arrayListOftrips.indexOf(newTrip), newTrip);
                    }
                }

                // if (tripAdapter.getPosition(newTrip) < 0)
                // tripAdapter.add(newTrip);
                // else {
                // tripAdapter.set(tripAdapter.getPosition(newTrip), newTrip);
                // }

                if (newTrip.DropNode != null) {
                    // if (newTrip.DropNode.state.equalsIgnoreCase(States.DROPPED) || newTrip.DropNode.state.equalsIgnoreCase(States.NOSHOW)
                    // || newTrip.DropNode.state.equalsIgnoreCase(States.CANCELLED)) {
                    // if (arrayListOfTreatedTrips.indexOf(newTrip.DropNode) < 0 && arrayListOfOtherTrips.indexOf(newTrip.DropNode) < 0) {
                    // arrayListOfTreatedTrips.add(newTrip.DropNode);
                    // isTripInAdvancedState = true;
                    // } else if (arrayListOfOtherTrips.indexOf(newTrip.DropNode) >= 0) {
                    // synchronized (arrayListOfOtherTrips) {
                    // arrayListOfOtherTrips.remove(arrayListOfOtherTrips.indexOf(newTrip.DropNode));
                    // arrayListOfOtherTrips.notifyAll();
                    // }
                    // synchronized (arrayListOfTreatedTrips) {
                    // arrayListOfTreatedTrips.add(newTrip.DropNode);
                    // arrayListOfTreatedTrips.notifyAll();
                    // isTripInAdvancedState = true;
                    // }
                    // } else
                    // arrayListOfTreatedTrips.set(arrayListOfTreatedTrips.indexOf(newTrip.DropNode), newTrip.DropNode);
                    //
                    // } else {
                    // if (arrayListOfOtherTrips.indexOf(newTrip.DropNode) < 0) {
                    // arrayListOfOtherTrips.add(newTrip.DropNode);
                    // if (newTrip.DropNode.state.equalsIgnoreCase(States.ACCEPTED))
                    // newAcceptedTrip = true;
                    // } else {
                    // if ((arrayListOfOtherTrips.get(arrayListOfOtherTrips.indexOf(newTrip.DropNode)).state.equalsIgnoreCase(States.ACCEPTED)) &&
                    // (newTrip.DropNode.state
                    // .equalsIgnoreCase(States.ATLOCATION))
                    // || (newTrip.DropNode.state.equalsIgnoreCase(States.IRTPU))
                    // || (newTrip.DropNode.state.equalsIgnoreCase(States.PICKEDUP))) {
                    // arrayListOfOtherTrips.set(arrayListOfOtherTrips.indexOf(newTrip.DropNode), newTrip.DropNode);
                    // isTripInAdvancedState = true;
                    // } else if ((arrayListOfOtherTrips.get(arrayListOfOtherTrips.indexOf(newTrip.DropNode)).state.equalsIgnoreCase(States.ATLOCATION)) &&
                    // ((newTrip.DropNode.state
                    // .equalsIgnoreCase(States.IRTPU)) || (newTrip.DropNode.state.equalsIgnoreCase(States.PICKEDUP)))) {
                    // arrayListOfOtherTrips.set(arrayListOfOtherTrips.indexOf(newTrip.DropNode), newTrip.DropNode);
                    // isTripInAdvancedState = true;
                    // } else if ((arrayListOfOtherTrips.get(arrayListOfOtherTrips.indexOf(newTrip.DropNode)).state.equalsIgnoreCase(States.IRTPU)) &&
                    // ((newTrip.DropNode.state
                    // .equalsIgnoreCase(States.PICKEDUP)))) {
                    // arrayListOfOtherTrips.set(arrayListOfOtherTrips.indexOf(newTrip.DropNode), newTrip.DropNode);
                    // isTripInAdvancedState = true;
                    // } else {
                    // newTrip.DropNode.state = arrayListOfOtherTrips.get(arrayListOfOtherTrips.indexOf(newTrip.DropNode)).state;
                    // arrayListOfOtherTrips.set(arrayListOfOtherTrips.indexOf(newTrip.DropNode), newTrip.DropNode);
                    // }
                    // }
                    // }

                    if (arrayListOftrips.indexOf(newTrip.DropNode) < 0) {
                        arrayListOftrips.add(newTrip.DropNode);
                        if (newTrip.DropNode.state.equalsIgnoreCase(States.ACCEPTED))
                            newAcceptedTrip = true;
                    } else {

                        if (newTrip.DropNode.state.equalsIgnoreCase(States.DROPPED) || newTrip.DropNode.state.equalsIgnoreCase(States.NOSHOW)
                                || newTrip.DropNode.state.equalsIgnoreCase(States.CANCELLED)) {
                            arrayListOftrips.set(arrayListOftrips.indexOf(newTrip.DropNode), newTrip.DropNode);
                        }
                        if ((arrayListOftrips.get(arrayListOftrips.indexOf(newTrip.DropNode)).state.equalsIgnoreCase(States.ACCEPTED)) && (newTrip.DropNode.state.equalsIgnoreCase(States.ATLOCATION))
                                || (newTrip.DropNode.state.equalsIgnoreCase(States.IRTPU))
                                || (newTrip.DropNode.state.equalsIgnoreCase(States.PICKEDUP))) {
                            arrayListOftrips.set(arrayListOftrips.indexOf(newTrip.DropNode), newTrip.DropNode);
                            isTripInAdvancedState = true;
                        } else if ((arrayListOftrips.get(arrayListOftrips.indexOf(newTrip.DropNode)).state.equalsIgnoreCase(States.ATLOCATION)) && ((newTrip.DropNode.state
                                .equalsIgnoreCase(States.IRTPU)) || (newTrip.DropNode.state.equalsIgnoreCase(States.PICKEDUP)))) {
                            arrayListOftrips.set(arrayListOftrips.indexOf(newTrip.DropNode), newTrip.DropNode);
                            isTripInAdvancedState = true;
                        } else if ((arrayListOftrips.get(arrayListOftrips.indexOf(newTrip.DropNode)).state.equalsIgnoreCase(States.IRTPU)) && ((newTrip.DropNode.state
                                .equalsIgnoreCase(States.PICKEDUP)))) {
                            arrayListOftrips.set(arrayListOftrips.indexOf(newTrip.DropNode), newTrip.DropNode);
                            isTripInAdvancedState = true;
                        } else {
                            newTrip.DropNode.state = arrayListOftrips.get(arrayListOftrips.indexOf(newTrip.DropNode)).state;
                            arrayListOftrips.set(arrayListOftrips.indexOf(newTrip.DropNode), newTrip.DropNode);
                        }
                    }

                    // if (newTrip.state.equalsIgnoreCase(States.DROPPED) || newTrip.state.equalsIgnoreCase(States.NOSHOW) ||
                    // newTrip.state.equalsIgnoreCase(States.CANCELLED)) {
                    // if (arrayListOfTreatedTrips.indexOf(newTrip.DropNode) < 0)
                    // arrayListOfTreatedTrips.add(newTrip.DropNode);
                    // else
                    // arrayListOfTreatedTrips.set(arrayListOfTreatedTrips.indexOf(newTrip.DropNode), newTrip.DropNode);
                    //
                    // } else {
                    // if (arrayListOfOtherTrips.indexOf(newTrip.DropNode) < 0)
                    // arrayListOfOtherTrips.add(newTrip.DropNode);
                    // else
                    // arrayListOfOtherTrips.set(arrayListOfOtherTrips.indexOf(newTrip.DropNode), newTrip.DropNode);
                    // }

                }

                if (currentView.equals(tripView)) {
                    if (newTrip.tripNumber.equalsIgnoreCase(currentTrip.tripNumber)) {
                        updateTripDetailView(newTrip);
                        // if (newTrip.state.equalsIgnoreCase(States.DROPPED) || newTrip.state.equalsIgnoreCase(States.NOSHOW) ||
                        // newTrip.state.equalsIgnoreCase(States.CANCELLED))
                        // currentTrip = arrayListOfTreatedTrips.get(arrayListOfTreatedTrips.indexOf(newTrip));
                        // else
                        // currentTrip = arrayListOfOtherTrips.get(arrayListOfOtherTrips.indexOf(newTrip));
                        currentTrip = arrayListOftrips.get(arrayListOftrips.indexOf(newTrip));
                    } else if (newTrip.DropNode != null)
                        if (newTrip.DropNode.tripNumber.equalsIgnoreCase(currentTrip.tripNumber)) {
                            updateTripDetailView(newTrip.DropNode);
                            // if (newTrip.state.equalsIgnoreCase(States.DROPPED) || newTrip.state.equalsIgnoreCase(States.NOSHOW) ||
                            // newTrip.state.equalsIgnoreCase(States.CANCELLED))
                            // currentTrip = arrayListOfTreatedTrips.get(arrayListOfTreatedTrips.indexOf(newTrip.DropNode));
                            // else
                            // currentTrip = arrayListOfOtherTrips.get(arrayListOfOtherTrips.indexOf(newTrip.DropNode));
                            currentTrip = arrayListOftrips.get(arrayListOftrips.indexOf(newTrip.DropNode));
                            // currentTrip = tripAdapter.getItem(tripAdapter.getPosition(newTrip.DropNode));
                        }
                }

                if (getApplicationContext().getPackageName().contains("infonetmytaxi"))
                    soundPool.play(tripSoundMyTaxi, 1, 1, 0, 0, 1);
                else
                    soundPool.play(tripSound, 1, 1, 0, 0, 1);

                if (tripAdapter == null)
                    tabHost.setCurrentTab(TripIndex);

                if (TTS) {
                    if (newAcceptedTrip) {
                        onRadioClick(getResources().getString(R.string.Newtriphasbeenadded));
                        if (currentTrip == null)
                            if (currentView.getId() != TRIPDETAILVIEW)
                                tabHost.setCurrentTab(TripIndex);
                    } else {
                        String TripString = "";
                        if (AVL_Service.pref.getString("AppLanguage", "en").equalsIgnoreCase("en"))
                            TripString = Farsi.Convert(getResources().getString(R.string.TripDetailsUpdatedforTripNumber)) + newTrip.ConfirmNumber;
                        else
                            TripString = newTrip.ConfirmNumber + Farsi.Convert(getResources().getString(R.string.TripDetailsUpdatedforTripNumber));
                        onRadioClick(TripString);
                    }
                } else {
                    manifestSound.start();
                    Toast.makeText(getBaseContext(), "Trip Details Updated for Trip number " + newTrip.ConfirmNumber, Toast.LENGTH_LONG).show();
                }

                sortTripList();

                try {
                    setAppState();
                } catch (Exception e) {
                    handleException("[Exception in handleTripUpdate]" + "[handleTripUpdate]" + "[" + e.getLocalizedMessage() + "]" + tripDetail);
                }

                //@formatter:off
                if(isTripInAdvancedState)
                    serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                            + AVL_Service.pref.getString("LastLongitude", "0") + Constants.COLSEPARATOR
                            + newTrip.tripNumber + Constants.COLSEPARATOR
                            + newTrip.state + Constants.COLSEPARATOR
                            + NextServZone + Constants.COLSEPARATOR
                            + nextServLat + Constants.COLSEPARATOR
                            + nextServLong + Constants.COLSEPARATOR
                            + MRMS_DateFormat.format(nextServTime) + Constants.COLSEPARATOR
                            + Integer.toString(tripsPending) + Constants.COLSEPARATOR
                            + Integer.toString(tripsIRTPU) + Constants.COLSEPARATOR
                            + Integer.toString(tripsIRTDO) + Constants.COLSEPARATOR
                            + AVL_Service.pref.getString("Address", "Unknown Address") + Constants.COLSEPARATOR
                            + -1 + Constants.COLSEPARATOR
                            + currentTrip.PUzone + Constants.COLSEPARATOR
                            + 0 + Constants.COLSEPARATOR
                            + 0
                            , "SDHS", MsgType.TripResponse, AckType.NEW, MsgValidity.Short, MsgPriority.Highest);

                //@formatter:on

                // }

                tripArraysInSync.notifyAll();
            }
        } catch (ParseException e) {
            // handleException("TaxiPlexer: Bad Date Format Recieved\n" + (tripDetail.indexOf(Constants.BODYSEPARATOR) > -1 ?
            // tripDetail.substring(tripDetail.indexOf(Constants.BODYSEPARATOR)) : tripDetail));
            handleException("[Exception in handleTripUpdate]" + "[handleTripUpdate]" + "[" + e.getLocalizedMessage() + "]" + tripDetail);
            // } catch (Exception e) {
            // handleException("TaxiPlexer: Bad Trip Update Recieved\n" + (tripDetail.indexOf(Constants.BODYSEPARATOR) > -1 ?
            // tripDetail.substring(tripDetail.indexOf(Constants.BODYSEPARATOR)) : tripDetail));
        } catch (Exception e) {
            handleException("[Exception in handleTripUpdate]" + "[handleTripUpdate]" + "[" + e.getLocalizedMessage() + "]" + tripDetail);
        }

    }
    /*--------------------------------------------------------------updateTripDetailView-------------------------------------------------------------------*/
    private void updateTripDetailView(Trip t) {

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            tripNumber.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            tripNumber.setText(getResources().getString(R.string.ConfirmationNo) + t.ConfirmNumber);
        } else
            tripNumber.setText(Farsi.Convert(getResources().getString(R.string.ConfirmationNo)) + t.ConfirmNumber);

        if (!(TempDropOff == " ")) {
            if (!hm.containsKey(t.ConfirmNumber)) {
                hm.put(currentTrip.ConfirmNumber, TempDropOff);

                currentTrip.DOaddress = TempDropOff;
                currentTrip.DOlat = AVL_Service.pref.getString("LastDropOffLat", "0");
                currentTrip.DOlong = AVL_Service.pref.getString("LastDropOffLong", "0");

                TempDropOff = " ";
            }
        }

        passenger.setText(Farsi.Convert(t.clientName));
        phone.setText(Farsi.Convert(t.clientPhoneNumber));
        puDateTime.setText(displayTimeFormat.format(t.nodeTime) + "    " + displayDateFormat.format(t.PUTime));
        pickupPOI.setText(Farsi.Convert(t.pickupPOI));
        pickup.setText(Farsi.Convert(t.PUaddress));
        pickUnitNumber.setText(Farsi.Convert(t.pickApartmentNo));
        pickRemarks.setText(Farsi.Convert(t.pickRemarks));
        dropoffPOI.setText(Farsi.Convert(t.dropPOI));
        if (!t.DOaddress.contains("Unknown"))
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                dropoff.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                dropoff.setText(t.DOaddress);
            } else
                dropoff.setText(Farsi.Convert(t.DOaddress));

        else
            dropoff.setText("");

        if (hm.containsKey(t.ConfirmNumber)) {
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                dropoff.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                dropoff.setText(hm.get(t.ConfirmNumber));
            } else
                dropoff.setText(Farsi.Convert(hm.get(t.ConfirmNumber)));

        }

        dropUnitNumber.setText(Farsi.Convert(t.dropApartmentNo));
        // FavoriteName.setText(Farsi.Convert(t.FavoriteName));
        // FavoriteName.setText(Farsi.Convert(""));
        dropRemarks.setText(Farsi.Convert(t.dropRemarks));
        String EstimatedMiles = "";

        if (!t.Others.equalsIgnoreCase(""))
            EstimatedMiles = t.Others;

        if (AVL_Service.showEstMiles) {
            String Unit = "";
            if (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("Mile"))
                Unit = getResources().getString(R.string.miles);
            else
                Unit = getResources().getString(R.string.km);

            if (!t.Others.equalsIgnoreCase(""))
                EstimatedMiles = EstimatedMiles + ", " + t.miles + Unit;
            else
                EstimatedMiles = t.miles + Unit;
        }

        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
            extraInfo.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            extraInfo.setText(EstimatedMiles);
        } else
            extraInfo.setText(Farsi.Convert(EstimatedMiles));

        fundingSource.setText(Farsi.Convert(t.fundingSource));
        paymentType.setText(Farsi.Convert(t.paymentMethod));
        if (AVL_Service.ShowSDCoPayOnTripDetail) {
            copayValue.setText(Farsi.Convert(t.Copay));

        } else
            copayValue.setText("");

        tfareValue.setText(Double.toString(Math.round((Double.parseDouble(currentTrip.Fare)) * 100.0) / 100.0));
        textraValue.setText(Double.toString(Math.round((Double.parseDouble(currentTrip.Extras)) * 100.0) / 100.0));
        ttipValue.setText(Double.toString(Math.round((Double.parseDouble(currentTrip.Tip)) * 100.0) / 100.0));
        tAuthValue.setText(currentTrip.authCode);
        if(AVL_Service.SDEnableOdometerInput ==1) {
            currentTrip.odoMeterStartValue = dbh.getStart(currentTrip.tripNumber);
            currentTrip.odoMeterEndValue = dbh.getEnd(currentTrip.tripNumber);
        }
        odoStartValue.setText(currentTrip.odoMeterStartValue);
        odoEndValue.setText(currentTrip.odoMeterEndValue);
        if (currentTrip.creditCardNum.length() == 16) {
            tCCValue.setText("***" + currentTrip.creditCardNum.substring(12, 16));
        }

    }

    /*--------------------------------------------------------------receivedFlush-------------------------------------------------------------------*/
    @Override
    public void receivedFlushBid(String msg) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.FLUSH_BID, msg).sendToTarget();

    }

    /*--------------------------------------------------------------handleFlush---------------------------------------------------------------------*/
    protected void handleFlushBid(String msg) {
        try {
            String[] columns = msg.split(Character.toString(Constants.BODYSEPARATOR));
            columns = columns[1].split("\\" + Character.toString(Constants.COLSEPARATOR));

            removeBid(columns[0]);
        } catch (Exception e) {
            handleException("[Exception in handleFlushBid]" + "[handleFlushBid]" + "[" + e.getLocalizedMessage() + "]" + msg);
        }
    }

    /*--------------------------------------------------------------receivedPopupMsg-------------------------------------------------------------------*/
    @Override
    public void receivedPopupMsg(String msg, String showAsToast) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.PopUpMessage, msg + "^" + showAsToast).sendToTarget();

    }

    /*--------------------------------------------------------------handlePopupMsg---------------------------------------------------------------------*/
    protected void handlePopupMsg(String msg) {
        try {
            String showAsToast = "";
            // ((String) msg.obj).split("\\^")[0], ((String) msg.obj).split("\\^")[1]
            String[] sBody = msg.split("\\^");
            String MessageID = "0";
            String num = "";
            showAsToast = sBody[1];
            MessageID = showAsToast;
            // if (sBody.length >= 3)
            // showAsToast = sBody[2];
            // if (sBody.length > 1) {
            // MessageID = sBody[1].trim();
            // }

            if (sBody.length >= 1) {
                if (showAsToast.contains("T")) {
                    handleShowCustomToast(getDataFromResourse(sBody[0]), -1);
                    // Toast.makeText(getApplicationContext(), msg, Toast.LENGTH_LONG).show();
                } else {
                    msg = sBody[0];
                    if (sBody[0].trim().contains("dispatched because driver is already occupied with")) {

                        num = sBody[0].trim().substring(sBody[0].trim().indexOf("No(s)(") + 6, sBody[0].trim().indexOf(") and multi-trip"));
                        if (AVL_Service.pref.getString("AppLanguage", "en").equalsIgnoreCase("en"))
                            msg = getResources().getString(R.string.couldnotBeAssignedAndDispatchedTripNo1) + num + getResources().getString(R.string.couldnotBeAssignedAndDispatchedTripNo2);
                        else
                            msg = Farsi.Convert(getResources().getString(R.string.couldnotBeAssignedAndDispatchedTripNo2)) + num
                                    + Farsi.Convert(getResources().getString(R.string.couldnotBeAssignedAndDispatchedTripNo1));
                    } else if(sBody[0].trim().contains("Time Call May Not Attended on Time")) {
                        RingerCountForPopUp = 3;
                        if (RingerCountForPopUp > 0) {
                            if (getApplicationContext().getPackageName().contains("infonetmytaxi"))
                                soundPool.play(tripSoundMyTaxi, 1, 1, 0, 0, 1);
                            else
                                soundPool.play(tripSound, 1, 1, 0, 0, 1);
                            RingerCountForPopUp--;
                        }

                        PopUPSound = new Runnable() {

                            @Override
                            public void run() {
                                if (getApplicationContext().getPackageName().contains("infonetmytaxi"))
                                    soundPool.play(tripSoundMyTaxi, 1, 1, 0, 0, 1);
                                else
                                    soundPool.play(tripSound, 1, 1, 0, 0, 1);
                                if (RingerCountForPopUp > 0) {
                                    handlerForPopUPSound.postDelayed(PopUPSound, 2000);
                                    RingerCountForPopUp--;
                                }

                            }
                        };

                        handlerForPopUPSound = new Handler();
                        if (RingerCountForPopUp > 0) {
                            handlerForPopUPSound.postDelayed(PopUPSound, 2000);
                            RingerCountForPopUp--;
                        }
                    }

                    AlertDialog.Builder builder = new AlertDialog.Builder(this);
                    builder.setMessage(getDataFromResourse(Farsi.Convert(msg))).setTitle(Farsi.Convert(getResources().getString(R.string.Notification))).setPositiveButton(
                            Farsi.Convert(getResources().getString(R.string.ok)),
                            new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    dialog.dismiss();
                                }
                            });
                    AlertDialog alert = builder.create();
                    alert.show();

                    dialogFontSize(alert);
                }
                if (msg.trim().contains("Trip couldn't be assigned and dispatched because")) {

                    boolean isMessageIdForRemoval = false;
                    for (int x = 0; x < AVL_Service.ResponseIDToRemoveTripFromWall.length; x++) {
                        if (AVL_Service.ResponseIDToRemoveTripFromWall[x].equalsIgnoreCase(MessageID))
                            isMessageIdForRemoval = true;
                    }
                    // if (isWallTripResponse.equalsIgnoreCase("Y")) {
                    if (AVL_Service.pref.getString("LastWallTrip", "").length() > 1) {
                        if (isMessageIdForRemoval) {
                            Removeable_WallTripsList.add(AVL_Service.pref.getString("LastWallTrip", ""));
                        } else {
                            WallTripsList.add(AVL_Service.pref.getString("LastWallTrip", ""));
                            Date dt = new Date();
                            WallTripsPickTime.add((DateFormat.format("yyyy-MM-dd hh:mm:ss", dt.getTime())).toString());

                            ScheduledExecutorService schedulerTripList = Executors.newSingleThreadScheduledExecutor();
                            schedulerTripList.schedule(new Runnable() {

                                @Override
                                public void run() {

                                    runOnUiThread(new Runnable() {
                                        public void run() {
                                            // fetchWallTrips(true, false);
                                            msgHandler.obtainMessage(MsgType.wallTripsArray, WALLTrips).sendToTarget();
                                        }
                                    });
                                }
                            }, (5 + AVL_Service.pref.getInt("BtnDisableTime", 10)), TimeUnit.SECONDS);
                        }

                        // WallTripsPickTime.add(dt.toString());
                    }
                    AVL_Service.pref.edit().putString("LastWallTrip", "").commit();
                    // isWallTripResponse = "N";
                    // fetchWallTrips(true, false);
                    msgHandler.obtainMessage(MsgType.wallTripsArray, WALLTrips).sendToTarget();
                }
                // }
            }

        } catch (Exception ex) {
            LogException("[Exception in handlePopupMsg]" + "[handlePopupMsg]" + "[" + ex.getLocalizedMessage() + "]" + msg);
        }
    }
    /*--------------------------------------------------------------receivedTextMsg-------------------------------------------------------------------*/
    @Override
    public void receivedTextMsg(String msg, String title) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.TextMessage, msg + "^" + title).sendToTarget();

    }

    /*--------------------------------------------------------------handleTextMsg---------------------------------------------------------------------*/
    protected void handleTextMsg(String msg, String title) {
        try {
            if (AVL_Service.DeviceMessageScreenConfig[2].equalsIgnoreCase("1")) {
                int notificationID = 11;
                // Create the notification
                Notification notification = new Notification(R.drawable.icon, "Dispatch - New Message Received", System.currentTimeMillis());
                // Create the notification expanded message
                // When the user clicks on it, it opens your activity
                Intent intent = new Intent(getApplicationContext(), TaxiPlexer.class);
                intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
                PendingIntent pendingIntent = PendingIntent.getActivity(getApplicationContext(), 0, intent, 0);
                notification.setLatestEventInfo(this, "New Message", "New Text Message Received", pendingIntent);
                notification.flags = Notification.FLAG_AUTO_CANCEL;
                notification.defaults = Notification.DEFAULT_SOUND;
                notificationManager.notify(notificationID, notification);

                // if (currentView.getId() == TABBERVIEW)
                // tabHost.setCurrentTab(messagesIndex);

                Date d = new Date();
                String fDate = new SimpleDateFormat("HH:mm dd/MM/yyyy", Locale.US).format(d);
                CannedMessage newCannedMsg = new CannedMessage("OUTBOUND" + "^" + fDate + "^" + msg.substring(msg.indexOf(":") + 1) + "^" + msg.substring(0, msg.indexOf(":") - 5));
                synchronized (arrayListOfCMsgs) {
                    arrayListOfCMsgs.add(newCannedMsg);
                    arrayListOfCMsgs.notifyAll();
                }

                if (!tabHost.getCurrentTabTag().equalsIgnoreCase("Msgs"))
                    msgCount++;
                if (msgCount > 0) {
                    msgsbadge.setText(String.valueOf(msgCount));
                    msgsbadge.show();
                }
                if (cannnedMessagesAdapter != null) {
                    cannnedMessagesAdapter.notifyDataSetChanged();
                    msgsListView.setSelection(cannnedMessagesAdapter.getCount() - 1);
                }
                if (TTS)
                    if (AVL_Service.EnableAudioForMessageUtility)
                        mTTS.speak(newCannedMsg.message, TextToSpeech.QUEUE_FLUSH, null);
            }
        } catch (Exception ex) {
            LogException("[Exception in handleTextMsg]" + "[handleTextMsg]" + "[" + ex.getLocalizedMessage() + "]" + msg);
        }
    }

    /*--------------------------------------------------------------receivedClearTrip---------------------------------------------------------------*/
    @Override
    public void receivedClearTrip(String msg) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.ClearTrip, msg).sendToTarget();

    }

    /*--------------------------------------------------------------handleClearTrip-----------------------------------------------------------------*/
    protected void handleClearTrip(String msg) {
        try {
            String[] columns = msg.split(Character.toString(Constants.BODYSEPARATOR));
            columns = columns[1].split("\\" + Character.toString(Constants.COLSEPARATOR));

            // if (newTrip.tripNumber.equals(columns[0]))
            if (tripAcceptDialog != null && tripAcceptDialog.isShowing())
                tripAcceptDialog.dismiss();

            if (PickupUPDistanceDialog != null && PickupUPDistanceDialog.isShowing())
                PickupUPDistanceDialog.dismiss();

            if (PaymentConfirmationDialog != null && PaymentConfirmationDialog.isShowing())
                PaymentConfirmationDialog.dismiss();

            clearTrip(columns[0], columns[1], columns[2]);
            setAppState();
        } catch (Exception e) {
            // handleException("Invalid ClearTrip Message Recieved" + (msg.indexOf(Constants.BODYSEPARATOR) > -1 ? msg.substring(msg.indexOf(Constants.BODYSEPARATOR)) :
            // msg));
            handleException("[Exception in handleClearTrip]" + "[handleClearTrip]" + "[" + e.getLocalizedMessage() + "]" + msg);
        }
    }

    /*--------------------------------------------------------------getLocalityName----------------------------------------------------------*/
    public String getLocalityName(String address) {
        if (address.contains(",")) {
            String[] AddressInParts = address.split(",", 3);
            return AddressInParts[0] + AddressInParts[1];
        } else
            return address;
    }

    /*--------------------------------------------------------------receivedSDTripFare--------------------------------------------------------------*/
    @Override
    public void receivedSDTripFare(String TripFare) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.SDTRIPFARE, TripFare).sendToTarget();

    }

    /*--------------------------------------------------------------handleSDTripFare----------------------------------------------------------------*/
    protected void handleSDTripFare(String tripFare) {
        try {
            String[] columns = tripFare.split(Character.toString(Constants.BODYSEPARATOR));
            columns = columns[1].split("\\" + Character.toString(Constants.COLSEPARATOR));
            if (AVL_Service.enableDialiePackageOnDevice) {
                if (columns.length > 0) {
                    FlatRateFrame(columns[0], "0", "0", "1");
                    Fare = columns[0];
                    Extras = "0";
                }
                if (AVL_Service.bShuttle)
                    TimeOffFrame(); // will put this line in BShuttle = true flag
            }
        } catch (Exception ex) {
            FlatRateFrame("0", "0", "0", "1");
            Fare = "0";
            Extras = "0";
            handleException("[Exception in handleSDTripFare]" + "[handleSDTripFare]" + "[" + ex.getLocalizedMessage() + "]" + tripFare);
        }
    }
    /*--------------------------------------------------------------receivedLocationChange----------------------------------------------------------*/
    @Override
    public void receivedLocationChange(String address) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.AVL, address).sendToTarget();
    }

    /*--------------------------------------------------------------handleLocationChange------------------------------------------------------------*/
    protected void handleLocationChange(String address) {
        try {
            if (currentView.getId() != LOGINSCREEN) {
                if (address.contains(",")) {
                    String[] AddressInParts = address.split(",");
                    address = AddressInParts[0] + AddressInParts[1];
                }
                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                    avlAddress.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                    avlAddress.setText(getLocalityName(address));
                } else
                    avlAddress.setText(Farsi.Convert(getLocalityName(address)));

                if (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("Mile")) {
                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                        speedValue.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                        speedValue.setText(dFormat.format(Double.parseDouble(AVL_Service.pref.getString("Speed", "00.0"))) + " " + getResources().getString(R.string.nMiles1));
                    } else
                        speedValue.setText(dFormat.format(Double.parseDouble(AVL_Service.pref.getString("Speed", "00.0"))) + " " + Farsi.Convert(getResources().getString(R.string.nMiles1)));

                } else {
                    double ans_KM = Double.parseDouble(AVL_Service.pref.getString("Speed", "00.0")) * 1.60934;
                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                        speedValue.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                        speedValue.setText(dFormat.format(ans_KM) + " " + getResources().getString(R.string.nMiles));
                    } else
                        speedValue.setText(dFormat.format(ans_KM) + " " + Farsi.Convert(getResources().getString(R.string.nMiles)));
                }

                // speedValue.setText(AVL_Service.pref.getString("Speed", "00.0") + " Mi");
                directionValue.setText(AVL_Service.pref.getString("Direction", "XX"));
                LatValue.setText(AVL_Service.pref.getString("LastLatitude", "0.000000"));
                LongValue.setText(AVL_Service.pref.getString("LastLongitude", "0.000000"));
                if (composeMsg != null) {
                    if (Float.parseFloat(AVL_Service.pref.getString("Speed", "00.0")) > Float.valueOf(AVL_Service.allowedSpeedForMessaging)) {
                        composeMsg.setEnabled(false);
                        sendBtn.setEnabled(false);
                    } else {
                        composeMsg.setEnabled(true);
                        sendBtn.setEnabled(true);
                        cannnedMessagesAdapter.notifyDataSetChanged();
                    }
                }


                // if (serviceHandle.loggedIn() && currentView.getId() == TABBERVIEW)
                // setMeterStatus(false, "0");
                // if (Meter != null && Meter.isConnectionAlive() && currentView.getId() == TRIPDETAILVIEW)
                // Meter.queryMeterTripData();
            }

//            if(m!=null && Map != null){
//                m.remove();
////                    m.setPosition(new LatLng(Double.parseDouble(AVL_Service.pref.getString("LastLatitude", "0")), Double.parseDouble(AVL_Service.pref.getString("LastLongitude", "0"))));
//                CameraUpdate center=
//                        CameraUpdateFactory.newLatLng(new LatLng(Double.parseDouble(AVL_Service.pref.getString("LastLatitude", "0")), Double.parseDouble(AVL_Service.pref.getString("LastLongitude", "0"))));
////                    CameraUpdate zoom=CameraUpdateFactory.zoomTo(15);
//
//                Map.moveCamera(center);
//                m = Map.addMarker(new MarkerOptions()
//                        .position(new LatLng(Double.parseDouble(AVL_Service.pref.getString("LastLatitude", "0")), Double.parseDouble(AVL_Service.pref.getString("LastLongitude", "0"))))
//                        .title("Marker"));
////                    Map.animateCamera(zoom);
//
//            }
//            setToastMessage(AVL_Service.pref.getString("LastLatitude", "0") + "," + AVL_Service.pref.getString("LastLongitude", "0"));
        } catch (Exception e) {
            handleException("[Exception in handleLocationChange]" + "[handleLocationChange]" + "[" + e.getLocalizedMessage() + "]" + address);
        }
    }
    /*--------------------------------------------------------------receivedVivotechMessage------------------------------------------------------------*/
    @Override
    public void receivedVivotechMessage(String msg) {

        TaxiPlexer.this.msgHandler.obtainMessage(2000, msg).sendToTarget();
    }

    /*--------------------------------------------------------------handleVivotechMessage--------------------------------------------------------------*/
    protected void handleVivotechMessage(String msg) {
        try {
            switch (VivotechScreen.currentScreen) {
                case PAYMENT_START : {
                    if (msg.contains("okButton")) {
                        Toast.makeText(getApplicationContext(), "OK Button Pressed", Toast.LENGTH_LONG).show();
                        VivotechScreen.showScreen(Screen.TIP);
                    } else if (msg.contains("TIMEOUT")) {
                        VivotechScreen.showScreen(Screen.PAYMENT_START);
                        Toast.makeText(getApplicationContext(), "TIMEOUT for Charge", Toast.LENGTH_LONG).show();
                    }
                    break;
                }// PAYMENT_START
                case TIP : {
                    int buttonPressed = -1;
                    for (itcurves.ncs.vivotech.VivotechScreen.Button btn : screenButtons)
                        if (msg.contains(btn.getID()))
                            buttonPressed = screenButtons.indexOf(btn);
                    switch (buttonPressed) {
                        case 4 : // Tip A
                            ttfTip.setText(dFormat.format(Float.parseFloat(TipA)));
                            VivotechScreen.showScreen(Screen.PRE_SWIPE);
                            break;
                        case 5 : // Tip B
                            ttfTip.setText(dFormat.format(Float.parseFloat(TipB)));
                            VivotechScreen.showScreen(Screen.PRE_SWIPE);
                            break;
                        case 6 : // Tip C
                            ttfTip.setText(dFormat.format(Float.parseFloat(TipC)));
                            VivotechScreen.showScreen(Screen.PRE_SWIPE);
                            break;
                        case 14 : // Skip Tip
                            ttfTip.setText(dFormat.format(Float.parseFloat("0")));
                            VivotechScreen.showScreen(Screen.PRE_SWIPE);
                            break;
                        default : {
                            Toast.makeText(getApplicationContext(), "UNKNOWN BUTTON PRESSED\n INDEX = " + buttonPressed, Toast.LENGTH_LONG).show();
                        }
                    }// switch
                    if (msg.contains("TIMEOUT")) {
                        VivotechScreen.showScreen(Screen.TIP);
                        Toast.makeText(getApplicationContext(), "TIMEOUT for TIP", Toast.LENGTH_LONG).show();
                    }
                    break;
                }// TIP
                case PRE_SWIPE : {
                    int buttonPressed = -1;
                    for (itcurves.ncs.vivotech.VivotechScreen.Button btn : screenButtons)
                        if (msg.contains(btn.getID()))
                            buttonPressed = screenButtons.indexOf(btn);
                    switch (buttonPressed) {
                        case 4 : // ACCEPT
                            VivotechScreen.showScreen(Screen.SWIPE);
                            break;
                        case 5 : // CANCEL
                            VivotechScreen.showScreen(Screen.TIP);
                            break;
                        default : {
                            Toast.makeText(getApplicationContext(), "UNKNOWN BUTTON PRESSED\n INDEX = " + buttonPressed, Toast.LENGTH_LONG).show();
                        }
                    }
                    if (msg.contains("TIMEOUT")) {
                        VivotechScreen.showScreen(Screen.PRE_SWIPE);
                        Toast.makeText(getApplicationContext(), "TIMEOUT for PRE_SWIPE", Toast.LENGTH_LONG).show();
                    }
                    break;
                }// PRE_SWIPE
                default : {
                    Toast.makeText(getApplicationContext(), msg, Toast.LENGTH_LONG).show();
                }
            }

        } catch (Exception ex) {
            LogException("[Exception in handleVivotechMessage]" + "[handleVivotechMessage]" + "[" + ex.getLocalizedMessage() + "]" + msg);
        }
    }

    /*--------------------------------------------------------------receivedVivotechError------------------------------------------------------------*/
    @Override
    public void receivedVivotechError(String msg) {

        TaxiPlexer.this.msgHandler.obtainMessage(2001, msg).sendToTarget();
    }

    /*--------------------------------------------------------------handleVivotechError--------------------------------------------------------------*/
    protected void handleVivotechError(String msg) {

        Toast.makeText(getApplicationContext(), "Vivotech Error: " + msg, Toast.LENGTH_LONG).show();
    }

    /*--------------------------------------------------------------receivedMeterMessage------------------------------------------------------------*/
    @Override
    public void receivedMeterMessage(MeterMessage msg) {

        TaxiPlexer.this.msgHandler.obtainMessage(1000, msg).sendToTarget();
    }

    /*--------------------------------------------------------------handleMeterMessage--------------------------------------------------------------*/
    protected void handleMeterMessage(MeterMessage msg) {
        try {
            Log.w("TaxiMeterMessage", msg.toString());
            switch (msg.getMessageId().getValue()) {
                case MessageId.METER_ON_OFF_STATE_CHANGE_VALUE :
                    if (Character.toString(((MeterStateChangeMessage) msg).getState()).equalsIgnoreCase("1")) {
                        LogException("[METER_ON_OFF_STATE_CHANGE_VALUE]" + "[handlemeterMessage]" + "Meter ON : " + ((currentTrip != null) ? currentTrip.ConfirmNumber : "New"));
                        isMeterON = true;
                        IsVerifoneMeterStarted = true;
                        // LogException("flagger exception : 11689 " + (currentTrip != null ? (currentTrip.ConfirmNumber + currentTrip.state) : ", currentTrip is null"));
                        // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.MeterON)), Toast.LENGTH_SHORT).show();
                        showToastMessage(R.string.MeterON);
                        if (!AVL_Service.SDShowFlaggerConfirmation && currentTrip == null) {
                            AVL_Service.pref.edit().putString("FlaggerDrop", "Unknown").commit();// to clear flagger drop before any use
                            LogException("[METER_ON_OFF_STATE_CHANGE_VALUE]" + "[handlemeterMessage]" + "flagger : Auto Flagger 1");
                            pickedUp();
                            softFlaggerPickUp = false;
                            IsMeterOnCreatedTrip = true;
                        } else if (currentTrip == null) {
                            // LogException("flagger exception : 11685" + (TripNumbers != null ? "TripNumbersnot" : "TripNumbersnull"));
                            TripNumbers.clear();
                            // if (arrayListOfOtherTrips == null)
                            // arrayListOfOtherTrips = new TripArrayList();
                            // for (int i = 0; i < arrayListOfOtherTrips.size(); i++)
                            // TripNumbers.add(arrayListOfOtherTrips.get(i).ConfirmNumber);

                            if (arrayListOftrips == null)
                                arrayListOftrips = new TripArrayList();
                            for (int i = 0; i < arrayListOftrips.size(); i++) {
                                if (!arrayListOftrips.get(i).state.equalsIgnoreCase(States.CANCELLED) && !arrayListOftrips.get(i).state.equalsIgnoreCase(States.DROPPED)
                                        && !arrayListOftrips.get(i).state.equalsIgnoreCase(States.NOSHOW))
                                    TripNumbers.add(arrayListOftrips.get(i).ConfirmNumber);
                            }

                            if (TripNumbers.size() > 0) {
                                TripNoListDialog = new AlertDialog.Builder(TaxiPlexer.this).setView(CreateListViewControls()).setCancelable(false).create();
                                TripNoListDialog.show();

                                dialogFontSize(TripNoListDialog);
                            } else {
                                softFlaggerPickUp = true;
                                flaggerBtn.performClick();
                            }
                            IsMeterOnCreatedTrip = true;
                        } else if (currentTrip.state.equalsIgnoreCase(States.ACCEPTED) || currentTrip.state.equalsIgnoreCase(States.DISPATCHED)
                                || currentTrip.state.equalsIgnoreCase(States.ATLOCATION)
                                || currentTrip.state.equalsIgnoreCase(States.IRTPU)
                                || currentTrip.state.equalsIgnoreCase(States.NOSHOWREQ)
                                || currentTrip.state.equalsIgnoreCase(States.CALLOUT)) {
                            TripSelectedFromMeterPickUp = true;
                            LogException("[METER_ON_OFF_STATE_CHANGE_VALUE]" + "[handlemeterMessage]" + "Meter ON HMM ping: " + currentTrip.ConfirmNumber);
                            AVL_Service.pref.edit().putString("TripConfirmationNo", currentTrip.ConfirmNumber).commit();
                            VerifoneCMD2AckCount = 0;
                            SendVeriFoneCMD2Stream();
                            // LogException("flagger exception : 11713 ");
                            pickedUp();
                            LogException("[METER_ON_OFF_STATE_CHANGE_VALUE]" + "[handlemeterMessage]" + "flagger : Auto Flagger 3");
                        }

                        if (paymentView != null)
                            if (paymentView.isShown()) {
                                if (bMerchantCopyPrinted == false) {
                                    if (!checkforpromotioncode) {

                                        currentTrip.PromotionalCode = "";
                                    } else
                                        checkforpromotioncode = false;
                                    setContentView(tripView);
                                    Fare = "0";
                                    Extras = "0";
                                    Tip = "0";
                                    reciept = "";
                                    currentTrip.Extras = ttfExtras.getText().toString();
                                    // currentTrip.Tip = ttfTip.getText().toString();
                                    paymentView = null;
                                }
                            }

                    } else if (Character.toString(((MeterStateChangeMessage) msg).getState()).equalsIgnoreCase("0")) { // Meter Off
                        // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.MeterOFF)), Toast.LENGTH_SHORT).show();
                        showToastMessage(R.string.MeterOFF);
                        LogException("[METER_ON_OFF_STATE_CHANGE_VALUE]" + "[handlemeterMessage]" + "Meter OFF : " + ((currentTrip != null) ? currentTrip.ConfirmNumber : "Current Trip NULL"));
                        if (currentTrip == null) {
                            TripNumberForVerifone = "0";
                            OpenPickedUpTripfromList(true, null);
                        }
                        if (((System.currentTimeMillis() - lastVerifoneTripMeterOffTime) > 30000))
                            if (AVL_Service.pref.getBoolean("VeriFoneDevice", true)) {
                                if (currentTrip != null) {
                                    lastVerifoneTripMeterOffTime = System.currentTimeMillis();
                                    MeterOfTripConfirmationNo = currentTrip.ConfirmNumber;
                                    LogException("[METER_ON_OFF_STATE_CHANGE_VALUE]" + "[handlemeterMessage]"
                                            + "Meter OFF inside: "
                                            + ((currentTrip != null) ? currentTrip.ConfirmNumber : "Current Trip NULL"));
                                    AVL_Service.pref.edit().putString("TripConfirmationNo", currentTrip.ConfirmNumber).commit();
                                    VerifoneCMD2AckCount = 0;
                                    SendVeriFoneCMD2Stream();

                                    ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
                                    scheduler.schedule(new Runnable() {

                                        @Override
                                        public void run() {

                                            runOnUiThread(new Runnable() {
                                                public void run() {
                                                    LogException("[METER_ON_OFF_STATE_CHANGE_VALUE]" + "[handlemeterMessage]"
                                                            + "Cash Auto start- "
                                                            + TripPaymentDataReceivedFromVeriFone
                                                            + " : "
                                                            + ((currentTrip != null) ? currentTrip.ConfirmNumber : "Current Trip NULL")
                                                            + " : "
                                                            + currentView.getId());
                                                    if (TripPaymentDataReceivedFromVeriFone.length() == 0 && currentTrip != null
                                                            && (currentView.getId() == PAYMENTVIEW || currentView.getId() == TRIPDETAILVIEW)) {
                                                        long CurrentTime = System.currentTimeMillis();
                                                        LogException("[METER_ON_OFF_STATE_CHANGE_VALUE]" + "[handlemeterMessage]"
                                                                + "Cash Auto timer : "
                                                                + currentTrip.ConfirmNumber
                                                                + "  :  "
                                                                + MeterOfTripConfirmationNo
                                                                + " last: "
                                                                + lastVerifoneTripMeterOffTime
                                                                + " cur: "
                                                                + CurrentTime
                                                                + " diff: "
                                                                + (CurrentTime - lastVerifoneTripMeterOffTime));
                                                        if (((CurrentTime - lastVerifoneTripMeterOffTime) > 50000) && currentTrip.ConfirmNumber.equalsIgnoreCase(MeterOfTripConfirmationNo)) {
                                                            TripPaymentDataReceivedFromVeriFone = currentTrip.ConfirmNumber;
                                                            currentTrip.paymentMethod = "Cash";
                                                            LogException("[METER_ON_OFF_STATE_CHANGE_VALUE]" + "[handlemeterMessage]" + "Cash Auto Done- " + TripPaymentDataReceivedFromVeriFone);
                                                            ProcessCashRequest();
                                                        }
                                                    }
                                                }
                                            });

                                        }
                                    }, 58, TimeUnit.SECONDS);
                                }
                            }

                        // droppedOff("TaxiMeter");
                    } else if (Character.toString(((MeterStateChangeMessage) msg).getState()).equalsIgnoreCase("2")) { // Meter Time off
                        IsVerifoneMeterStarted = false;
                        // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.TimeOFF)), Toast.LENGTH_SHORT).show();
                        showToastMessage(R.string.TimeOFF);
                        LogException("[METER_ON_OFF_STATE_CHANGE_VALUE]" + "[handlemeterMessage]" + "Time OFF : " + ((currentTrip != null) ? currentTrip.ConfirmNumber : "Current Trip NULL"));
                        if (AVL_Service.pref.getBoolean("VeriFoneDevice", true)) {
                            if (currentTrip != null) {
                                LogException("[METER_ON_OFF_STATE_CHANGE_VALUE]" + "[handlemeterMessage]" + "Time OFF ping: " + currentTrip.ConfirmNumber);
                                AVL_Service.pref.edit().putString("TripConfirmationNo", currentTrip.ConfirmNumber).commit();
                                VerifoneCMD2AckCount = 0;
                                SendVeriFoneCMD2Stream();
                            }
                        }

                        droppedOff("TaxiMeter");
                    }
                    break;

                case MessageId.CREDIT_CARD_DATA_VALUE :
                    LogException("[CREDIT_CARD_DATA_VALUE]" + "[handlemeterMessage]");
                    itcurves.ncs.CreditCard cc = new itcurves.ncs.CreditCard();
                    cc.setCardNumber(((CreditCardDataMessage) msg).getAccountNumber());
                    cc.setExpirationDate(((CreditCardDataMessage) msg).getExpiry());
                    cc.setTrack2Data(((CreditCardDataMessage) msg).getTrackII());

                    if (currentTrip != null) {

                        handleCreditCardData(cc);
                        setMeterData = false;
                        // if ((currentTrip.state.equalsIgnoreCase(States.IRTPU) || currentTrip.state.equalsIgnoreCase(States.ATLOCATION))
                        // && currentTrip.authCode.length() < 2) {
                        // showPreAuthDialog(cc);
                        //
                        // } else if (currentTrip.state.equalsIgnoreCase(States.PICKEDUP) && currentView.getId() == TRIPDETAILVIEW)
                        // droppedOff("TaxiMeter");
                    }
                    break;

                case MessageId.REPORT_METER_TRIP_DATA_VALUE :
                    LogException("[REPORT_METER_TRIP_DATA_VALUE]" + "[handlemeterMessage]");
                    if (setMeterData) {
                        Fare = ((MeterTripData) msg).getFare();
                        Extras = ((MeterTripData) msg).getExtras();
                        total = Float.valueOf(((MeterTripData) msg).getNetTotal()) / 100;
                        Distance = Double.parseDouble(((MeterTripData) msg).getPayDistance()) / 10;
                        TipA = Double.toString(total * 0.10);
                        TipB = Double.toString(total * 0.15);
                        TipC = Double.toString(total * 0.20);
                        if (currentTrip != null)
                            if (ttfFare != null) {
                                if (AVL_Service.showEstdCostOnSDByFundingSource.contains(currentTrip.fundingSource))
                                    ttfFare.setText(dFormat.format(Float.parseFloat(EstCostforFundingSource)));
                                else
                                    ttfFare.setText(dFormat.format(Float.parseFloat(Fare)));
                                ttfExtras.setText(dFormat.format(Float.parseFloat(Extras)));
                            }
                    }
                    setMeterData = true;

                    // Commented for Sacramento
                    // Toast.makeText(
                    // TaxiPlexer.this,
                    // ("Fare: $" + dFormat.format(Float.parseFloat(((MeterTripData) msg).getFare()))) + "\nExtras: $"
                    // + dFormat.format(Float.parseFloat(((MeterTripData) msg).getExtras()))
                    // + "\nDistance: "
                    // + dFormat.format(Distance)
                    // + " mi",
                    // Toast.LENGTH_SHORT).show();

                    break;

                case MessageId.METER_BUSY_NOT_BUSY_VALUE :
                    LogException("[METER_BUSY_NOT_BUSY_VALUE]" + "[handlemeterMessage]");
                    if (Character.toString(((MeterBusyNotBusy) msg).getState()).equalsIgnoreCase("1")) {
                        // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.MeterNotBusy)), Toast.LENGTH_SHORT).show();
                        showToastMessage(R.string.MeterNotBusy);

                        if (taxiMeterReciept2 != null && PrinterTurn == 0) {
                            // Handler h = new Handler();

							/*
							 * Runnable r1 = new Runnable() {
							 * public void run() {
							 */

                            Date dt = new Date(System.currentTimeMillis());
                            boolean ischeck = true;
                            while (ischeck) {
                                Date dt2 = new Date(System.currentTimeMillis());
                                long difference = dt2.getTime() - dt.getTime();
                                if (difference > 100)
                                    break;
                            }
                            taxiMeterPrinter.FlushPrinterDataFromBuffer();

							/*
							 * }
							 * 
							 * };
							 * h.postDelayed(r1, 100);
							 */
							/*
							 * Date dt1 = new Date(System.currentTimeMillis());
							 * boolean ischeck1 = true;
							 * while (ischeck1) {
							 * Date dt2 = new Date(System.currentTimeMillis());
							 * long difference = dt2.getTime() - dt1.getTime();
							 * if (difference > 200)
							 * break;
							 * }
							 */
							/*
							 * Runnable r = new Runnable() {
							 * public void run() {
							 */
                            boolean is2nd = taxiMeterPrinter.write(taxiMeterReciept2);
                            if (is2nd) {
                                taxiMeterReciept2 = null;
                                PrinterTurn = 1;
                            }
							/*
							 * }
							 * };
							 * h.postDelayed(r, 300);
							 */

                        } else if (taxiMeterReciept3 != null && taxiMeterReciept2 == null && PrinterTurn == 1) {
                            // Handler h = new Handler();
                            //
                            // Runnable r1 = new Runnable() {
                            // public void run() {
                            Date dt1 = new Date(System.currentTimeMillis());
                            boolean ischeck1 = true;
                            while (ischeck1) {
                                Date dt2 = new Date(System.currentTimeMillis());
                                long difference = dt2.getTime() - dt1.getTime();
                                if (difference > 100)
                                    break;
                            }
                            taxiMeterPrinter.FlushPrinterDataFromBuffer();

							/*
							 * Date dt = new Date(System.currentTimeMillis());
							 * boolean ischeck = true;
							 * while (ischeck) {
							 * Date dt2 = new Date(System.currentTimeMillis());
							 * long difference = dt2.getTime() - dt.getTime();
							 * if (difference > 200)
							 * break;
							 * }
							 */

                            // }
                            //
                            // };
                            // h.postDelayed(r1, 100);
                            // Runnable r = new Runnable() {
                            // public void run() {
                            boolean is3rd = taxiMeterPrinter.write(taxiMeterReciept3);
                            if (is3rd) {
                                taxiMeterReciept3 = null;
                                PrinterTurn = 0;
                            }
                            // }
                            // };
                            // h.postDelayed(r, 300);

                        }

                    } else if (Character.toString(((MeterBusyNotBusy) msg).getState()).equalsIgnoreCase("0")) {
                        // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.MeterBusy)), Toast.LENGTH_SHORT).show();
                        showToastMessage(R.string.MeterBusy);
                    }
                    break;
                case MessageId.VERIFONE_CASH :
                    boolean inprocess = false;
                    if (currentView.getId() == PAYMENTVIEW) {
                        if (currentTrip != null) {
                            if (currentTrip.binprocess) {
                                inprocess = true;
                            }
                        }
                    }
                    if (!inprocess) {
                        LogException("[VERIFONE_CASH]" + "[handlemeterMessage]"
                                + "1 - Verifone Cash"
                                + ((currentTrip != null) ? currentTrip.ConfirmNumber : "Current Trip NULL" + " : TripPaymentDataReceivedFromVeriFone : " + TripPaymentDataReceivedFromVeriFone));
                        IsVerifoneCMD8Received = true;
                        verifonecredittype = "cash";
                        VerifoneCMD8LastTime = System.currentTimeMillis();
                        String CashData = ((VeriFonePaymentData) msg).getData();
                        LogException("[VERIFONE_CASH]" + "[handlemeterMessage]" + "2- Cash " + CashData.substring(0, CashData.length() - 5).replace("^", "}"));
                        String[] CashDataArray = CashData.split("\\^");
                        TripNumberForVerifone = Long.toString(Long.parseLong(CashDataArray[0], 16));
                        if (Integer.parseInt(OldTripNumberForVerifone) != Integer.parseInt(TripNumberForVerifone)) {
                            OldTripNumberForVerifone = TripNumberForVerifone;
                            if (currentTrip == null) {
                                customMessage = new CustomMessage("", "6");
                                Meter.writeCustom(customMessage);
                                LogException("[VERIFONE_CREDIT_CARD]" + "[handlemeterMessage]" + "3. CMD 6 Credit Card : ack of payment to verifone");
                                OpenPickedUpTripfromList(true, CashDataArray);
                                break;
                            }
                            if (currentTrip != null && !IsVerifoneMeterStarted) {
                                verifonecashcomplete(CashDataArray);
                            }
                        }
                    } else {
                        showToastMessageFromString(Farsi.Convert(getResources().getString(R.string.Verifone_Cash_Ignored)));
                        customMessage = new CustomMessage("", "6");
                        Meter.writeCustom(customMessage);
                        LogException("[VERIFONE_CREDIT_CARD]" + "[handlemeterMessage]" + "3. CMD 6 Credit Card : ack of payment to verifone");
                    }
                    break;
                case MessageId.VERIFONE_CREDIT_CARD :
                    boolean inprocess1 = false;
                    if (currentView.getId() == PAYMENTVIEW) {
                        if (currentTrip != null) {
                            if (currentTrip.binprocess) {
                                inprocess1 = true;
                            }
                        }
                    }
                    if (!inprocess1) {
                        LogException("[VERIFONE_CREDIT_CARD]" + "[handlemeterMessage]"
                                + "1 - Verifone Credit card"
                                + ((currentTrip != null) ? currentTrip.ConfirmNumber : "Current Trip NULL" + " : TripPaymentDataReceivedFromVeriFone : " + TripPaymentDataReceivedFromVeriFone));
                        IsVerifoneCMD8Received = true;
                        verifonecredittype = "credit";
                        VerifoneCMD8LastTime = System.currentTimeMillis();
                        String CreditCardData = ((VeriFonePaymentData) msg).getData();
                        LogException("[VERIFONE_CREDIT_CARD]" + "[handlemeterMessage]" + "2 - Credit - " + CreditCardData.substring(0, CreditCardData.length() - 5).replace("^", "}"));
                        String[] CreditDataArray = CreditCardData.split("\\^");
                        TripNumberForVerifone = Long.toString(Long.parseLong(CreditDataArray[0], 16));
                        if (Integer.parseInt(OldTripNumberForVerifone) != Integer.parseInt(TripNumberForVerifone)) {
                            OldTripNumberForVerifone = TripNumberForVerifone;
                            if (currentTrip == null) {

                                customMessage = new CustomMessage("", "6");
                                Meter.writeCustom(customMessage);
                                LogException("[VERIFONE_CREDIT_CARD]" + "[handlemeterMessage]" + "3. CMD 6 Credit Card : ack of payment to verifone");
                                OpenPickedUpTripfromList(true, CreditDataArray);
                                break;
                            }
                            if (currentTrip != null && !IsVerifoneMeterStarted) {
                                if (TripPaymentDataReceivedFromVeriFone.length() == 0) {
                                    verifonecreditcomplete(CreditDataArray);
                                }
                            }
                        }
                    } else {
                        showToastMessageFromString(Farsi.Convert(getResources().getString(R.string.Verifone_Credit_Ignored)));
                        customMessage = new CustomMessage("", "6");
                        Meter.writeCustom(customMessage);
                        LogException("[VERIFONE_CREDIT_CARD]" + "[handlemeterMessage]" + "3. CMD 6 Credit Card : ack of payment to verifone");
                    }
                    break;
                case MessageId.VERIFONE_CMD1_ACK :
                    LogException("[VERIFONE_CMD1_ACK]" + "[handlemeterMessage]"
                            + "CMD 7 : Ack of CMD1"
                            + ((currentTrip != null) ? currentTrip.ConfirmNumber : "Current Trip NULL" + " : TripPaymentDataReceivedFromVeriFone : " + TripPaymentDataReceivedFromVeriFone));
                    VerifoneCMD1AckCount = 10; // on ack received it increase count to stop it resending data
                    IsVerifoneCMD8Received = true;
                    VerifoneCMD8LastTime = System.currentTimeMillis();
                    break;
                case MessageId.VERIFONE_CMD8_NACK :
                    LogException("[VERIFONE_CMD1_ACK]" + "[handlemeterMessage]"
                            + "CMD 8 : ACK of GPS msg (CMD : 5)"
                            + ((currentTrip != null) ? currentTrip.ConfirmNumber : "Current Trip NULL" + " : TripPaymentDataReceivedFromVeriFone : " + TripPaymentDataReceivedFromVeriFone));
                    IsVerifoneCMD8Received = true;
                    VerifoneCMD8LastTime = System.currentTimeMillis();
                    break;
                case MessageId.VERIFONE_CMD2_ACK :
                    LogException("[VERIFONE_CMD8_NACK]" + "[handlemeterMessage]"
                            + "CMD 9 : ACK of PING MSG (CMD:2)"
                            + ((currentTrip != null) ? currentTrip.ConfirmNumber : "Current Trip NULL" + " : TripPaymentDataReceivedFromVeriFone : " + TripPaymentDataReceivedFromVeriFone));
                    VerifoneCMD2AckCount = 10; // on ack received it increase count to stop it resending data
                    IsVerifoneCMD8Received = true;
                    VerifoneCMD8LastTime = System.currentTimeMillis();
                    break;
                case MessageId.VERIFONE_CMD10 :
                    String LoginMessagetoMeter = "";
                    if (IsVerifoneConnectionMSGSend)
                        LoginMessagetoMeter = AVL_Service.pref.getString("DriverID", "Unknown") + "^" + Driver_name + "^" + AVL_Service.pref.getString("VehicleID", "Unknown") + "^" + "0" + "^" + "-1";
                    else
                        LoginMessagetoMeter = AVL_Service.pref.getString("DriverID", "Unknown") + "^" + Driver_name + "^" + AVL_Service.pref.getString("VehicleID", "Unknown") + "^" + "1" + "^" + "-1";

                    customMessage = new CustomMessage(LoginMessagetoMeter, "1");
                    Meter.writeCustom(customMessage);
                    break;
                default :
                    Log.w(getClass().getSimpleName(), "Handling unsupported MeterMessage: " + msg.toString());
                    LogException("[HandleMeterMessage : NO switch qualified] [HandleMeterMessage]");
            }

        } catch (Exception ex) {
            LogException("HandleMeterMessage Exception :" + ex.toString());
        }
    }


    @Override
    public void receivedSoftMeterMessage(String msg) {

        TaxiPlexer.this.msgHandler.obtainMessage(3000, msg).sendToTarget();
    }


    public void handleSoftMeterMessage(String msg) {
        try {
            String[] incomingmessage = msg.split(Character.toString(Constants.BODYSEPARATOR));
            String incomingHeader = incomingmessage[0];
            String incomingBody = incomingmessage[1];
//checking for commit
            String[] incomingHeaderSplit = incomingHeader.split("\\" + Character.toString(Constants.COLSEPARATOR));
            String[] incomingBodySplit = incomingBody.split("\\" + Character.toString(Constants.EOT));

            switch (Integer.valueOf(incomingHeaderSplit[0])){
                case MsgType.MSG_RCF:
                    String Body = "" + Constants.ROWSEPARATOR;
                    for (int i = 0; i < AVL_Service.softMeterRates.size(); i++) {
                        Body = Body + AVL_Service.softMeterRates.get(i).toString();

                        if (i != AVL_Service.softMeterRates.size() - 1) {
                            Body += Constants.ROWSEPARATOR;
                        }
                    }
                    AVL_Service.sendMessageToSoftMeter(Body, MsgType.MSG_CF_RCV, AVL_Service.pref.getString("VehicleID", "Unknown"), AVL_Service.getDeviceID());
                    break;
                case MsgType.MSG_MON_RCV:

                    if(incomingBodySplit[0].equalsIgnoreCase("1")){

                        if(!checkSoftMeterMON) {
                            tabHost.setCurrentTab(TripIndex);
                            checkSoftMeterMON = true;
                            LogException("[METER_ON_OFF_STATE_CHANGE_VALUE]" + "[handleSoftMeterMessage]" + "Meter ON : " + ((currentTrip != null) ? currentTrip.ConfirmNumber : "New"));
                            // LogException("flagger exception : 11689 " + (currentTrip != null ? (currentTrip.ConfirmNumber + currentTrip.state) : ", currentTrip is null"));
                            // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.MeterON)), Toast.LENGTH_SHORT).show();
                            showToastMessage(R.string.MeterON);
                            if (!AVL_Service.SDShowFlaggerConfirmation && currentTrip == null) {
                                tripStartedfromSoftMeter = true;
                                AVL_Service.pref.edit().putString("FlaggerDrop", "Unknown").commit();// to clear flagger drop before any use
                                LogException("[METER_ON_OFF_STATE_CHANGE_VALUE]" + "[handlemeterMessage]" + "flagger : Auto Flagger 1");

                                pickedUp();
                                softFlaggerPickUp = false;
                                IsMeterOnCreatedTrip = true;
                            } else if (currentTrip == null) {
                                // LogException("flagger exception : 11685" + (TripNumbers != null ? "TripNumbersnot" : "TripNumbersnull"));
                                TripNumbers.clear();
                                // if (arrayListOfOtherTrips == null)
                                // arrayListOfOtherTrips = new TripArrayList();
                                // for (int i = 0; i < arrayListOfOtherTrips.size(); i++)
                                // TripNumbers.add(arrayListOfOtherTrips.get(i).ConfirmNumber);
                                tripStartedfromSoftMeter = true;
                                if (arrayListOftrips == null)
                                    arrayListOftrips = new TripArrayList();
                                for (int i = 0; i < arrayListOftrips.size(); i++) {
                                    if (!arrayListOftrips.get(i).state.equalsIgnoreCase(States.CANCELLED) && !arrayListOftrips.get(i).state.equalsIgnoreCase(States.DROPPED)
                                            && !arrayListOftrips.get(i).state.equalsIgnoreCase(States.NOSHOW))
                                        TripNumbers.add(arrayListOftrips.get(i).ConfirmNumber);
                                }

                                if (TripNumbers.size() > 0) {
                                    TripNoListDialog = new AlertDialog.Builder(TaxiPlexer.this).setView(CreateListViewControls()).setCancelable(false).create();
                                    TripNoListDialog.show();

                                    dialogFontSize(TripNoListDialog);
                                } else {
                                    softFlaggerPickUp = true;
                                    flaggerBtn.performClick();
                                }
                                IsMeterOnCreatedTrip = true;
                            } else if (currentTrip.state.equalsIgnoreCase(States.ACCEPTED) || currentTrip.state.equalsIgnoreCase(States.DISPATCHED)
                                    || currentTrip.state.equalsIgnoreCase(States.ATLOCATION)
                                    || currentTrip.state.equalsIgnoreCase(States.IRTPU)) {
                                tripStartedfromSoftMeter = true;
                                TripSelectedFromMeterPickUp = true;
                                LogException("[METER_ON_OFF_STATE_CHANGE_VALUE]" + "[handlemeterMessage]" + "Meter ON HMM ping: " + currentTrip.ConfirmNumber);
                                AVL_Service.pref.edit().putString("TripConfirmationNo", currentTrip.ConfirmNumber).commit();
                                VerifoneCMD2AckCount = 0;
                                SendVeriFoneCMD2Stream();
                                // LogException("flagger exception : 11713 ");
                                pickedUp();
                                LogException("[METER_ON_OFF_STATE_CHANGE_VALUE]" + "[handlemeterMessage]" + "flagger : Auto Flagger 3");
                            }
                        }
                    }
                    break;
                case MsgType.MSG_RTD_RCV:
                    String[] BodyData = incomingBodySplit[0].split("\\" + Character.toString(Constants.COLSEPARATOR));
                    Fare = BodyData[0];
                    Extras = BodyData[1];
                    Distance = Double.parseDouble(BodyData[2]);
                    String Time = BodyData[3];
                    break;

                case MsgType.MSG_TOFF_RCV:
                    if(!checkSoftMeterTOF) {
                        checkSoftMeterTOF = true;
                        checkSoftMeterTON = false;
                        IsVerifoneMeterStarted = false;
                        // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.TimeOFF)), Toast.LENGTH_SHORT).show();
                        showToastMessage(R.string.TimeOFF);
                        LogException("[METER_ON_OFF_STATE_CHANGE_VALUE]" + "[handlemeterMessage]" + "Time OFF : " + ((currentTrip != null) ? currentTrip.ConfirmNumber : "Current Trip NULL"));
                        BodyData = incomingBodySplit[0].split("\\" + Character.toString(Constants.COLSEPARATOR));
                        Fare = BodyData[0];
                        Extras = BodyData[1];
                        Distance = Double.parseDouble(BodyData[2]);
                        Time = BodyData[3];

                        droppedOff("SoftMeter");
                    }
                    break;

                case MsgType.MSG_MOFF_RCV:
                    checkSoftMeterTON = false;
                    checkSoftMeterTOF = false;
                    checkSoftMeterMON = false;
                    showToastMessage(R.string.MeterOFF);
                    LogException("[METER_ON_OFF_STATE_CHANGE_VALUE]" + "[handlemeterMessage]" + "Meter OFF : " + ((currentTrip != null) ? currentTrip.ConfirmNumber : "Current Trip NULL"));
//                    if (currentTrip == null) {
//                        TripNumberForVerifone = "0";
//                        OpenPickedUpTripfromList(true, null);
//                    }

                    BodyData = incomingBodySplit[0].split("\\" + Character.toString(Constants.COLSEPARATOR));
                    Fare = BodyData[0];
                    Extras = BodyData[1];
                    Distance = Double.parseDouble(BodyData[2]);
                    Time = BodyData[3];
                    break;

                case MsgType.MSG_TON_RCV:
                    if(!checkSoftMeterTON) {
                        checkSoftMeterTON = true;
                        checkSoftMeterTOF = false;
                        if (paymentView != null)
                            if (paymentView.isShown()) {
                                if (bMerchantCopyPrinted == false) {
                                    if (!checkforpromotioncode) {

                                        currentTrip.PromotionalCode = "";
                                    } else
                                        checkforpromotioncode = false;
                                    setContentView(tripView);
                                    Fare = "0";
                                    Extras = "0";
                                    Tip = "0";
                                    reciept = "";
                                    currentTrip.Extras = ttfExtras.getText().toString();
                                    // currentTrip.Tip = ttfTip.getText().toString();
                                    paymentView = null;
                                }
                            }
                        BodyData = incomingBodySplit[0].split("\\" + Character.toString(Constants.COLSEPARATOR));
                        Fare = BodyData[0];
                        Extras = BodyData[1];
                        Distance = Double.parseDouble(BodyData[2]);
                        Time = BodyData[3];
                    }

                    break;



            }
        } catch (Exception e) {
            e.getStackTrace();
        }
    }


    public void verifonecashcomplete(String[] CashDataArray) {
        if (TripPaymentDataReceivedFromVeriFone.length() == 0) {

            LogException("[VERIFONE_CASH]" + "[handlemeterMessage]" + "Meter ON handleTripDetails ping: " + currentTrip.ConfirmNumber);
            AVL_Service.pref.edit().putString("TripConfirmationNo", currentTrip.ConfirmNumber).commit();
            VerifoneCMD2AckCount = 0;
            SendVeriFoneCMD2Stream();

            if (CashDataArray.length > 10) {
                TripPaymentDataReceivedFromVeriFone = Long.toString(Long.parseLong(CashDataArray[0], 16));

                customMessage = new CustomMessage("", "6");
                Meter.writeCustom(customMessage);
                LogException("[VERIFONE_CASH]" + "[handlemeterMessage]" + "3 - CMD 6 : ack of payment to verifone");
                setMeterData = true;

                // if (Integer.parseInt(currentTrip.ConfirmNumber) == Integer.parseInt(TripPaymentDataReceivedFromVeriFone.length() == 0 ? "0" :
                // TripPaymentDataReceivedFromVeriFone))
                {
                    if (setMeterData) {
                        try {
                            Fare = Double.toString(Long.parseLong(CashDataArray[5], 16) / 100.0);
                            Extras = Double.toString(Long.parseLong(CashDataArray[6], 16) / 100.0);
                            Tip = Double.toString(Long.parseLong(CashDataArray[8], 16) / 100.0);
                            total = Float.valueOf(Double.toString(Long.parseLong(CashDataArray[9], 16) / 100.0));
                            ActualPaymentAmount = Double.toString(Long.parseLong(CashDataArray[9], 16) / 100.0);
                            Distance = Double.parseDouble(Long.toString(Long.parseLong(CashDataArray[10], 16))) / 10;
                        } catch (Exception ex) {
                        }
                        if (currentTrip != null)
                            if (ttfFare != null) {
                                // if (AVL_Service.showEstdCostOnSDByFundingSource.contains(currentTrip.fundingSource))
                                // ttfFare.setText(dFormat.format(Float.parseFloat(EstCostforFundingSource)));
                                // else
                                ttfFare.setText(dFormat.format(Float.parseFloat(Fare)));
                                ttfExtras.setText(dFormat.format(Float.parseFloat(Extras)));
                                ttfTip.setText(dFormat.format(Float.parseFloat(Tip)));
                            }
                    }
                    if (currentTrip.clientName.equalsIgnoreCase("Flagger")) {

                        showProgressDialog(Farsi.Convert(getResources().getString(R.string.Processing_Payment)));
                        currentTrip.paymentMethod = "Cash";
                        sendTripResponse(States.DROPPED);
                        if(!currentTrip.bCopayAllowedOnPaymentScreen){
                            tempFare = "0";
                            tempExtras = "0";
                        } else {
                            String  temptotal = ttfTotal.getText().toString();
                            temptotal = String.valueOf(Float.parseFloat(temptotal) - Float.parseFloat(currentTrip.Copay));
                            ttfTotal.setText(temptotal);
                        }
                        serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                + AVL_Service.pref.getString("LastLongitude", "0")
                                + Constants.COLSEPARATOR
                                + currentTrip.tripNumber
                                + Constants.COLSEPARATOR
                                + currentTrip.paymentMethod
                                + Constants.COLSEPARATOR
                                + String.valueOf(Float.parseFloat(Fare) + Float.parseFloat(tempFare))
                                + Constants.COLSEPARATOR
                                + String.valueOf(Float.parseFloat(Extras) + Float.parseFloat(tempExtras))
                                + Constants.COLSEPARATOR
                                + Tip
                                + Constants.COLSEPARATOR
                                + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                                + Constants.COLSEPARATOR
                                + "0"
                                + Constants.COLSEPARATOR
                                + "0"
                                + Constants.COLSEPARATOR
                                + "0"
                                + Constants.COLSEPARATOR
                                + currentTrip.ConfirmNumber
                                + Constants.COLSEPARATOR
                                + currentTrip.authCode
                                + Constants.COLSEPARATOR
                                + "0"
                                + Constants.COLSEPARATOR
                                + "0"
                                + Constants.COLSEPARATOR
                                + "0"
                                + Constants.COLSEPARATOR
                                + "Driver-"
                                + AVL_Service.pref.getString("DriverID", "unknown")
                                + Constants.COLSEPARATOR
                                + "Success"
                                + Constants.COLSEPARATOR
                                + currentTrip.tripNumber
                                + Constants.COLSEPARATOR
                                + "1"
                                + Constants.COLSEPARATOR
                                + "0"
                                + Constants.COLSEPARATOR
                                + "No"
                                + Constants.COLSEPARATOR
                                + AVL_Service.pref.getString("DriverID", "Driver")
                                + Constants.COLSEPARATOR
                                + "0"
                                + Constants.COLSEPARATOR
                                + "0"
                                + Constants.COLSEPARATOR
                                + MRMS_DateFormat.format(currentTrip.PUTime)
                                + Constants.COLSEPARATOR
                                + ((dFormat.format(Distance).equalsIgnoreCase("0.00")) ? currentTrip.miles : dFormat.format(Distance))
                                + Constants.COLSEPARATOR
                                + ActualPaymentAmount
                                + Constants.COLSEPARATOR
                                + currentTrip.PromotionalCode
                                + Constants.COLSEPARATOR
                                + ActualPaymentAmount
                                + Constants.COLSEPARATOR
                                + currentTrip.PromotionalCode
                                + Constants.COLSEPARATOR
                                + currentTrip.PromotionalValue, "SDHS", MsgType.Payment, AckType.NEW, MsgValidity.Short, MsgPriority.Highest);

                        bMerchantCopyPrinted = true;
                        receivedPaymentResp("VerifoneCash_Header" + Constants.BODYSEPARATOR + "1^Cash Payment successful");

                    } else {

                        SpannableString ss1 = new SpannableString(vfPaymentOptions[0]);

                        SpannableString ss2 = new SpannableString(vfPaymentOptions[1]);

                        SpannableString ss3 = new SpannableString(vfPaymentOptions[2]);

                        switch (Integer.parseInt(Fonts[AVL_Service.pref.getInt("FontPosition", 4)])) {
                            case -8 :
                                ss1.setSpan(new RelativeSizeSpan(.25f), 0, ss1.length(), 0);
                                ss2.setSpan(new RelativeSizeSpan(.25f), 0, ss2.length(), 0);
                                ss3.setSpan(new RelativeSizeSpan(.25f), 0, ss3.length(), 0);
                                break;
                            case -6 :
                                ss1.setSpan(new RelativeSizeSpan(.50f), 0, ss1.length(), 0);
                                ss2.setSpan(new RelativeSizeSpan(.50f), 0, ss2.length(), 0);
                                ss3.setSpan(new RelativeSizeSpan(.50f), 0, ss3.length(), 0);

                                break;
                            case -4 :
                                ss1.setSpan(new RelativeSizeSpan(.75f), 0, ss1.length(), 0);
                                ss2.setSpan(new RelativeSizeSpan(.75f), 0, ss2.length(), 0);
                                ss3.setSpan(new RelativeSizeSpan(.75f), 0, ss3.length(), 0);

                                break;
                            case -2 :
                                ss1.setSpan(new RelativeSizeSpan(1f), 0, ss1.length(), 0);
                                ss2.setSpan(new RelativeSizeSpan(1f), 0, ss2.length(), 0);
                                ss3.setSpan(new RelativeSizeSpan(1f), 0, ss3.length(), 0);

                                break;
                            case 0 :
                                ss1.setSpan(new RelativeSizeSpan(1.25f), 0, ss1.length(), 0);
                                ss2.setSpan(new RelativeSizeSpan(1.25f), 0, ss2.length(), 0);
                                ss3.setSpan(new RelativeSizeSpan(1.25f), 0, ss3.length(), 0);

                                break;
                            case 2 :
                                ss1.setSpan(new RelativeSizeSpan(1.50f), 0, ss1.length(), 0);
                                ss2.setSpan(new RelativeSizeSpan(1.50f), 0, ss2.length(), 0);
                                ss3.setSpan(new RelativeSizeSpan(1.50f), 0, ss3.length(), 0);

                                break;
                            case 4 :
                                ss1.setSpan(new RelativeSizeSpan(1.75f), 0, ss1.length(), 0);
                                ss2.setSpan(new RelativeSizeSpan(1.75f), 0, ss2.length(), 0);
                                ss3.setSpan(new RelativeSizeSpan(1.75f), 0, ss3.length(), 0);

                                break;
                            case 6 :
                                ss1.setSpan(new RelativeSizeSpan(2.0f), 0, ss1.length(), 0);
                                ss2.setSpan(new RelativeSizeSpan(2.0f), 0, ss2.length(), 0);
                                ss3.setSpan(new RelativeSizeSpan(2.0f), 0, ss3.length(), 0);

                                break;
                            case 8 :
                                ss1.setSpan(new RelativeSizeSpan(2.25f), 0, ss1.length(), 0);
                                ss2.setSpan(new RelativeSizeSpan(2.25f), 0, ss2.length(), 0);
                                ss3.setSpan(new RelativeSizeSpan(2.25f), 0, ss3.length(), 0);

                                break;
                        }
                        CharSequence[] Paymentoptionitems = null;
                        if (currentTrip.authCode.trim().length() > 2) {
                            Paymentoptionitems = new CharSequence[3];
                            Paymentoptionitems[0] = ss1;
                            Paymentoptionitems[1] = ss2;
                            Paymentoptionitems[2] = ss3;
                        } else {
                            Paymentoptionitems = new CharSequence[2];
                            Paymentoptionitems[0] = ss1;
                            Paymentoptionitems[1] = ss2;
                        }
                        cashOptionsDialog = new AlertDialog.Builder(TaxiPlexer.this).setTitle(Farsi.Convert(getResources().getString(R.string.Select_the_Payment_Type))).setItems(
                                Paymentoptionitems,
                                new DialogInterface.OnClickListener() {

                                    @Override
                                    public void onClick(DialogInterface dialog, int which) {
                                        switch (which) {
                                            case 0 :
                                                showProgressDialog(Farsi.Convert(getResources().getString(R.string.Processing_Payment)));
                                                currentTrip.paymentMethod = "Cash";
                                                sendTripResponse(States.DROPPED);
                                                if(!currentTrip.bCopayAllowedOnPaymentScreen){
                                                    tempFare = "0";
                                                    tempExtras = "0";
                                                } else {
                                                    String  temptotal = ttfTotal.getText().toString();
                                                    temptotal = String.valueOf(Float.parseFloat(temptotal) - Float.parseFloat(currentTrip.Copay));
                                                    ttfTotal.setText(temptotal);
                                                }
                                                serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                                        + AVL_Service.pref.getString("LastLongitude", "0")
                                                        + Constants.COLSEPARATOR
                                                        + currentTrip.tripNumber
                                                        + Constants.COLSEPARATOR
                                                        + currentTrip.paymentMethod
                                                        + Constants.COLSEPARATOR
                                                        + String.valueOf(Float.parseFloat(Fare) + Float.parseFloat(tempFare))
                                                        + Constants.COLSEPARATOR
                                                        + String.valueOf(Float.parseFloat(Extras) + Float.parseFloat(tempExtras))
                                                        + Constants.COLSEPARATOR
                                                        + Tip
                                                        + Constants.COLSEPARATOR
                                                        + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                                                        + Constants.COLSEPARATOR
                                                        + "0"
                                                        + Constants.COLSEPARATOR
                                                        + "0"
                                                        + Constants.COLSEPARATOR
                                                        + "0"
                                                        + Constants.COLSEPARATOR
                                                        + currentTrip.ConfirmNumber
                                                        + Constants.COLSEPARATOR
                                                        + currentTrip.authCode
                                                        + Constants.COLSEPARATOR
                                                        + "0"
                                                        + Constants.COLSEPARATOR
                                                        + "0"
                                                        + Constants.COLSEPARATOR
                                                        + "0"
                                                        + Constants.COLSEPARATOR
                                                        + "Driver-"
                                                        + AVL_Service.pref.getString("DriverID", "unknown")
                                                        + Constants.COLSEPARATOR
                                                        + "Success"
                                                        + Constants.COLSEPARATOR
                                                        + currentTrip.tripNumber
                                                        + Constants.COLSEPARATOR
                                                        + "1"
                                                        + Constants.COLSEPARATOR
                                                        + "0"
                                                        + Constants.COLSEPARATOR
                                                        + "No"
                                                        + Constants.COLSEPARATOR
                                                        + AVL_Service.pref.getString("DriverID", "Driver")
                                                        + Constants.COLSEPARATOR
                                                        + "0"
                                                        + Constants.COLSEPARATOR
                                                        + "0"
                                                        + Constants.COLSEPARATOR
                                                        + MRMS_DateFormat.format(currentTrip.PUTime)
                                                        + Constants.COLSEPARATOR
                                                        + ((dFormat.format(Distance).equalsIgnoreCase("0.00")) ? currentTrip.miles : dFormat.format(Distance))
                                                        + Constants.COLSEPARATOR
                                                        + ActualPaymentAmount
                                                        + Constants.COLSEPARATOR
                                                        + currentTrip.PromotionalCode
                                                        + Constants.COLSEPARATOR
                                                        + ActualPaymentAmount
                                                        + Constants.COLSEPARATOR
                                                        + currentTrip.PromotionalCode
                                                        + Constants.COLSEPARATOR
                                                        + currentTrip.PromotionalValue, "SDHS", MsgType.Payment, AckType.NEW, MsgValidity.Short, MsgPriority.Highest);
                                                bMerchantCopyPrinted = true;
                                                receivedPaymentResp("VerifoneCash_Header" + Constants.BODYSEPARATOR + "1^Cash Payment successful");

                                                break;
                                            case 1 :
                                                showProgressDialog(Farsi.Convert(getResources().getString(R.string.Processing_Payment)));
                                                currentTrip.paymentMethod = "Voucher";
                                                sendTripResponse(States.DROPPED);
                                                if(!currentTrip.bCopayAllowedOnPaymentScreen){
                                                    tempFare = "0";
                                                    tempExtras = "0";
                                                } else {
                                                    String  temptotal = ttfTotal.getText().toString();
                                                    temptotal = String.valueOf(Float.parseFloat(temptotal) - Float.parseFloat(currentTrip.Copay));
                                                    ttfTotal.setText(temptotal);
                                                }
                                                serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                                        + AVL_Service.pref.getString("LastLongitude", "0")
                                                        + Constants.COLSEPARATOR
                                                        + currentTrip.tripNumber
                                                        + Constants.COLSEPARATOR
                                                        + currentTrip.paymentMethod
                                                        + Constants.COLSEPARATOR
                                                        + String.valueOf(Float.parseFloat(Fare) + Float.parseFloat(tempFare))
                                                        + Constants.COLSEPARATOR
                                                        + String.valueOf(Float.parseFloat(Extras) + Float.parseFloat(tempExtras))
                                                        + Constants.COLSEPARATOR
                                                        + Tip
                                                        + Constants.COLSEPARATOR
                                                        + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                                                        + Constants.COLSEPARATOR
                                                        + "0"
                                                        + Constants.COLSEPARATOR
                                                        + "0"
                                                        + Constants.COLSEPARATOR
                                                        + "0"
                                                        + Constants.COLSEPARATOR
                                                        + currentTrip.ConfirmNumber
                                                        + Constants.COLSEPARATOR
                                                        + currentTrip.authCode
                                                        + Constants.COLSEPARATOR
                                                        + "0"
                                                        + Constants.COLSEPARATOR
                                                        + "0"
                                                        + Constants.COLSEPARATOR
                                                        + "0"
                                                        + Constants.COLSEPARATOR
                                                        + "Driver-"
                                                        + AVL_Service.pref.getString("DriverID", "unknown")
                                                        + Constants.COLSEPARATOR
                                                        + "Success"
                                                        + Constants.COLSEPARATOR
                                                        + currentTrip.tripNumber
                                                        + Constants.COLSEPARATOR
                                                        + "1"
                                                        + Constants.COLSEPARATOR
                                                        + "0"
                                                        + Constants.COLSEPARATOR
                                                        + "No"
                                                        + Constants.COLSEPARATOR
                                                        + AVL_Service.pref.getString("DriverID", "Driver")
                                                        + Constants.COLSEPARATOR
                                                        + "0"
                                                        + Constants.COLSEPARATOR
                                                        + "0"
                                                        + Constants.COLSEPARATOR
                                                        + MRMS_DateFormat.format(currentTrip.PUTime)
                                                        + Constants.COLSEPARATOR
                                                        + ((dFormat.format(Distance).equalsIgnoreCase("0.00")) ? currentTrip.miles : dFormat.format(Distance))
                                                        + Constants.COLSEPARATOR
                                                        + ActualPaymentAmount
                                                        + Constants.COLSEPARATOR
                                                        + currentTrip.PromotionalCode
                                                        + Constants.COLSEPARATOR
                                                        + ActualPaymentAmount
                                                        + Constants.COLSEPARATOR
                                                        + currentTrip.PromotionalCode
                                                        + Constants.COLSEPARATOR
                                                        + currentTrip.PromotionalValue, "SDHS", MsgType.Payment, AckType.NEW, MsgValidity.Short, MsgPriority.Highest);
                                                bMerchantCopyPrinted = true;
                                                receivedPaymentResp("VerifoneCash_Header" + Constants.BODYSEPARATOR + "1^Voucher Payment successful");

                                                break;
                                            case 2 :
                                                creditBtn.performClick();

                                                break;

                                            default :
                                                break;
                                        }

                                    }
                                }).setCancelable(true).create();
                        cashOptionsDialog.show();
                    }

                    // ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
                    // scheduler.schedule(new Runnable() {
                    //
                    // @Override
                    // public void run() {
                    // runOnUiThread(new Runnable() {
                    // public void run() {
                    // if (cashOptionsDialog.isShowing()) {
                    // ((Button) (cashOptionsDialog.getListView().getItemAtPosition(0))).performClick();
                    // }
                    // }
                    // });
                    //
                    // }
                    // }, AVL_Service.SDVFCashVoucherDialogTimeOutSec, TimeUnit.SECONDS);

                }
				/*
				 * else {
				 * Toast.makeText(getApplicationContext(), "Trip does not match ..", Toast.LENGTH_LONG).show();
				 * LogException("Cash Trip- " + TripPaymentDataReceivedFromVeriFone + " does not match " + currentTrip.ConfirmNumber);
				 * LogException("Cash-- " + CashData.substring(0, CashData.length() - 5));
				 * }
				 */
            } else {// invalid CashData
                LogException("[VERIFONE_CASH]" + "[handlemeterMessage]" + CashDataArray);
            }
        }
    }

    public void verifonecreditcomplete(String[] CreditDataArray) {
        LogException("[VERIFONE_CREDIT_CARD]" + "[handlemeterMessage]" + "Meter ON handleTripDetails ping: " + currentTrip.ConfirmNumber);
        AVL_Service.pref.edit().putString("TripConfirmationNo", currentTrip.ConfirmNumber).commit();
        VerifoneCMD2AckCount = 0;
        SendVeriFoneCMD2Stream();

        if (CreditDataArray.length > 16) {
            TripPaymentDataReceivedFromVeriFone = Long.toString(Long.parseLong(CreditDataArray[0], 16));
            customMessage = new CustomMessage("", "6");
            Meter.writeCustom(customMessage);
            LogException("[VERIFONE_CREDIT_CARD]" + "[handlemeterMessage]" + "3. CMD 6 Credit Card : ack of payment to verifone");
            // if ((convertHexToString(CreditDataArray[14])).trim().toLowerCase().substring(0, 3).equalsIgnoreCase("dup")) {
            // final AlertDialog dialog = new AlertDialog.Builder(TaxiPlexer.this).setTitle("Transaction Results").setMessage(
            // "Credit card transaction is duplicate marked").create();
            // dialog.setButton("Ok", new DialogInterface.OnClickListener() {
            // public void onClick(DialogInterface dialog, int whichButton) {
            // System.gc();
            // dialog.dismiss();
            // }
            // });
            // dialog.show();
            // }else
            {

                setMeterData = true;
                // if (Integer.parseInt(currentTrip.ConfirmNumber) == Integer.parseInt(TripPaymentDataReceivedFromVeriFone.length() == 0 ? "0"
                // :
                // TripPaymentDataReceivedFromVeriFone))
                {

                    if (setMeterData) {
                        Fare = Double.toString(Long.parseLong(CreditDataArray[5], 16) / 100.0);
                        Extras = Double.toString(Long.parseLong(CreditDataArray[6], 16) / 100.0);
                        Tip = Double.toString(Long.parseLong(CreditDataArray[8], 16) / 100.0);
                        total = Float.valueOf(Double.toString(Long.parseLong(CreditDataArray[9], 16) / 100.0));
                        ActualPaymentAmount = Double.toString(Long.parseLong(CreditDataArray[9], 16) / 100.0);
                        Distance = Double.parseDouble(Long.toString(Long.parseLong(CreditDataArray[10], 16))) / 10;
                        if (currentTrip != null) {
                            if (ttfFare != null) {
                                // if (AVL_Service.showEstdCostOnSDByFundingSource.contains(currentTrip.fundingSource))
                                // ttfFare.setText(dFormat.format(Float.parseFloat(EstCostforFundingSource)));
                                // else
                                ttfFare.setText(dFormat.format(Float.parseFloat(Fare)));
                                ttfExtras.setText(dFormat.format(Float.parseFloat(Extras)));
                                ttfTip.setText(dFormat.format(Float.parseFloat(Tip)));
                                ttfCCNumber.setText(CreditDataArray[12].replaceAll("^0*", ""));
                                ttfCCExpiry.setText(Long.toString(Long.parseLong(CreditDataArray[13], 16)));
                                // For making the fields Uneditable
                                ttfFare.setFocusable(false);
                                ttfExtras.setFocusable(false);
                                ttfTip.setFocusable(false);
                                ttfTotal.setFocusable(false);
                            }
                            currentTrip.creditCardNum = CreditDataArray[12].replaceAll("^0*", "");// Long.toString(Long.parseLong(CreditDataArray[12],
                            // 16));
                            currentTrip.creditCardNum.replace("^0*", "");
                            currentTrip.creditCardExpiry = Long.toString(Long.parseLong(CreditDataArray[13], 16));
                            currentTrip.creditCardExpiry.replace("^0*", "");
                            currentTrip.authCode = convertHexToString(CreditDataArray[14]);
                            currentTrip.transactionID = convertHexToString(CreditDataArray[15]);
                        }
                    }

                    if (currentTrip.creditCardNum.trim().length() > 10)
                        currentTrip.cardType = CreditCardType.determineCreditCardType(currentTrip.creditCardNum.trim()).getFullName();
                    currentTrip.paymentMethod = "Credit Card";

                    sendTripResponse(States.DROPPED);
                    if(!currentTrip.bCopayAllowedOnPaymentScreen){
                        tempFare = "0";
                        tempExtras = "0";
                    } else {
                        String  temptotal = ttfTotal.getText().toString();
                        temptotal = String.valueOf(Float.parseFloat(temptotal) - Float.parseFloat(currentTrip.Copay));
                        ttfTotal.setText(temptotal);
                    }
                    serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                            + AVL_Service.pref.getString("LastLongitude", "0")
                            + Constants.COLSEPARATOR
                            + currentTrip.tripNumber
                            + Constants.COLSEPARATOR
                            + "Credit Card"
                            + Constants.COLSEPARATOR
                            + String.valueOf(Float.parseFloat(Fare) + Float.parseFloat(tempFare))
                            + Constants.COLSEPARATOR
                            + String.valueOf(Float.parseFloat(Extras) + Float.parseFloat(tempExtras))
                            + Constants.COLSEPARATOR
                            + Tip
                            + Constants.COLSEPARATOR
                            + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                            + Constants.COLSEPARATOR
                            + "xxxxxxxxxxxx"
                            + (currentTrip.creditCardNum.length() > 11 ? currentTrip.creditCardNum.substring(currentTrip.creditCardNum.length() - 4) : "")
                            + Constants.COLSEPARATOR
                            + currentTrip.cardType
                            + Constants.COLSEPARATOR
                            + "Verifone"
                            + Constants.COLSEPARATOR
                            + currentTrip.ConfirmNumber
                            + Constants.COLSEPARATOR
                            + currentTrip.authCode
                            + Constants.COLSEPARATOR
                            + AVL_Service.pref.getString("VehicleID", "0")
                            + Constants.COLSEPARATOR
                            + "0"
                            + Constants.COLSEPARATOR
                            + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                            + Constants.COLSEPARATOR
                            + "Driver-"
                            + AVL_Service.pref.getString("DriverID", "unknown")
                            + Constants.COLSEPARATOR
                            + currentTrip.authCode
                            + Constants.COLSEPARATOR
                            + currentTrip.tripNumber
                            + Constants.COLSEPARATOR
                            + (currentTrip.authCode.equalsIgnoreCase("") ? "0" : "1")
                            + Constants.COLSEPARATOR
                            + currentTrip.transactionID
                            + Constants.COLSEPARATOR
                            + "Sale"
                            + Constants.COLSEPARATOR
                            + AVL_Service.pref.getString("DriverID", "Driver")
                            + Constants.COLSEPARATOR
                            + "0"
                            + Constants.COLSEPARATOR
                            + "0"
                            + Constants.COLSEPARATOR
                            + MRMS_DateFormat.format(currentTrip.PUTime)
                            + Constants.COLSEPARATOR
                            + ((dFormat.format(Distance).equalsIgnoreCase("0.00")) ? currentTrip.miles : dFormat.format(Distance))
                            + Constants.COLSEPARATOR
                            + ActualPaymentAmount
                            + Constants.COLSEPARATOR
                            + currentTrip.PromotionalCode
                            + Constants.COLSEPARATOR
                            + ActualPaymentAmount
                            + Constants.COLSEPARATOR
                            + currentTrip.PromotionalCode
                            + Constants.COLSEPARATOR
                            + currentTrip.PromotionalValue, "SDHS", MsgType.Payment, AckType.NEW, MsgValidity.Short, MsgPriority.Highest);
                    bMerchantCopyPrinted = true;
                    receivedPaymentResp("VerifoneCard_Header" + Constants.BODYSEPARATOR + "1^CreditCard Payment successful");
                }
				/*
				 * else {
				 * Toast.makeText(getApplicationContext(), "Trip does not match..", Toast.LENGTH_LONG).show();
				 * LogException("Credit Trip " + TripPaymentDataReceivedFromVeriFone + " does not match " + currentTrip.ConfirmNumber);
				 * LogException("Credit-- " + CreditCardData.substring(0, CreditCardData.length() - 5));
				 * }
				 */
            }
        } else {// invalid CreditData
            LogException("[VERIFONE_CREDIT_CARD]" + "[handlemeterMessage]" + CreditDataArray);
        }
    }
    /*--------------------------------------------------------------convertHexToString---------------------------------------------------------------*/
    @SuppressWarnings("deprecation")
    @SuppressLint("NewApi")
    public void OpenPickedUpTripfromList(final boolean VeriFoneEstimationNotRequired, final String[] CashDataArray) {
        boolean checkforperformedtrip = false;

        for (Trip temporaryTrip : arrayListOftrips) {

            if (Integer.parseInt(temporaryTrip.ConfirmNumber) == Integer.parseInt(TripNumberForVerifone)) {
                if (temporaryTrip.state.equalsIgnoreCase(States.PICKEDUP)) {
                    currentTrip = temporaryTrip;
                    break;
                } else if (temporaryTrip.state.equalsIgnoreCase(States.DROPPED)) {
                    checkforperformedtrip = true;
                    currentTrip = temporaryTrip;

                    break;
                }
            }
        }
        if (!checkforperformedtrip) {
            if (currentTrip == null) {
                for (Trip temporaryTrip : arrayListOftrips) {
                    if (temporaryTrip.state.equalsIgnoreCase(States.PICKEDUP)) {
                        currentTrip = temporaryTrip;
                        break;
                    }

                }
            }
            // if (tripView != null)
            // tripView.invalidate();
            // tripView = createTripView();
            // tripView.setKeepScreenOn(true);
            // /*
            // * if (tripView == null) {
            // * tripView = createTripView();
            // * tripView.setKeepScreenOn(true);
            // * } else {
            // * tripView.invalidate();
            // * tripView = createTripView();
            // * tripView.setKeepScreenOn(true);
            // * }
            // */
            //
            // currentView = tripView;
            // setContentView(currentView);
            //
            // enableTripView();
            //
            // drawable = PickedButton.getBackground();
            // drawable.setColorFilter(Color.GREEN, Mode.SRC_IN);
            // // drawable.setColorFilter(0xFFFF0000, android.graphics.PorterDuff.Mode.MULTIPLY); // Azhar
            // if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            // PickedButton.setBackground(drawable);
            // else
            // PickedButton.setBackgroundDrawable(drawable);
            //
            // drawable = DroppedButton.getBackground();
            // drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
            // if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            // DroppedButton.setBackground(drawable);
            // else
            // DroppedButton.setBackgroundDrawable(drawable);
            //
            // drawable = callOutButton.getBackground();
            // drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
            // if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            // callOutButton.setBackground(drawable);
            // else
            // callOutButton.setBackgroundDrawable(drawable);
            //
            // drawable = NoShowButton.getBackground();
            // drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
            // if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
            // NoShowButton.setBackground(drawable);
            // else
            // NoShowButton.setBackgroundDrawable(drawable);
            //
            // // updateTripDetailView(currentTrip);
            //
            // android.os.SystemClock.sleep(500);
            //
            // veriFoneEstimationNotRequired = VeriFoneEstimationNotRequired;
            // DroppedButton.performClick();
            //
            // android.os.SystemClock.sleep(1000);
            if (verifonecredittype.equalsIgnoreCase("cash")) {
                verifonecashcomplete(CashDataArray);
            } else {
                verifonecreditcomplete(CashDataArray);
            }
        } else {
            if (!currentTrip.paymentMethod.contains("Credit")) {
                if (!verifonecredittype.equalsIgnoreCase("cash")) {

                    currentTrip.state = States.PICKEDUP;
                    // if (tripView != null)
                    // tripView.invalidate();
                    // tripView = createTripView();
                    // tripView.setKeepScreenOn(true);
                    // /*
                    // * if (tripView == null) {
                    // * tripView = createTripView();
                    // * tripView.setKeepScreenOn(true);
                    // * } else {
                    // * tripView.invalidate();
                    // * tripView = createTripView();
                    // * tripView.setKeepScreenOn(true);
                    // * }
                    // */
                    //
                    // currentView = tripView;
                    // setContentView(currentView);
                    //
                    // enableTripView();
                    //
                    // drawable = PickedButton.getBackground();
                    // drawable.setColorFilter(Color.GREEN, Mode.SRC_IN);
                    // // drawable.setColorFilter(0xFFFF0000, android.graphics.PorterDuff.Mode.MULTIPLY); // Azhar
                    // if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                    // PickedButton.setBackground(drawable);
                    // else
                    // PickedButton.setBackgroundDrawable(drawable);
                    //
                    // drawable = DroppedButton.getBackground();
                    // drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
                    // if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                    // DroppedButton.setBackground(drawable);
                    // else
                    // DroppedButton.setBackgroundDrawable(drawable);
                    //
                    // drawable = callOutButton.getBackground();
                    // drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
                    // if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                    // callOutButton.setBackground(drawable);
                    // else
                    // callOutButton.setBackgroundDrawable(drawable);
                    //
                    // drawable = NoShowButton.getBackground();
                    // drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), android.graphics.PorterDuff.Mode.MULTIPLY);
                    // if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                    // NoShowButton.setBackground(drawable);
                    // else
                    // NoShowButton.setBackgroundDrawable(drawable);
                    //
                    // // updateTripDetailView(currentTrip);
                    //
                    // android.os.SystemClock.sleep(500);
                    //
                    // veriFoneEstimationNotRequired = VeriFoneEstimationNotRequired;
                    // DroppedButton.performClick();
                    //
                    // android.os.SystemClock.sleep(1000);
                    if (verifonecredittype.equalsIgnoreCase("cash")) {
                        verifonecashcomplete(CashDataArray);
                    } else {
                        verifonecreditcomplete(CashDataArray);
                    }

                } else {
                    showToastMessageFromString(Farsi.Convert(getResources().getString(R.string.Verifone_Cash_Ignored)));
                    currentTrip = null;
                }
            } else {
                showToastMessageFromString(Farsi.Convert(getResources().getString(R.string.Verifone_Cash_Credit_Ignored)));
                currentTrip = null;
            }
        }
    }
    /*--------------------------------------------------------------convertHexToString---------------------------------------------------------------*/
    public String convertHexToString(String hex) {
        try {
            StringBuilder sb = new StringBuilder();
            StringBuilder temp = new StringBuilder();

            // 49204c6f7665204a617661 split into two characters 49, 20, 4c...
            for (int i = 0; i < hex.length() - 1; i += 2) {

                // grab the hex in pairs
                String output = hex.substring(i, (i + 2));
                // convert hex to decimal
                int decimal = Integer.parseInt(output, 16);
                // convert the decimal to character
                sb.append((char) decimal);

                temp.append(decimal);
            }

            return sb.toString();
        } catch (Exception e) {
        }
        return "";
    }
    /*--------------------------------------------------------------showPreAuthDialog---------------------------------------------------------------*/
    private void showPreAuthDialog(final itcurves.ncs.CreditCard cc) {
        try {
            LayoutInflater creditcard = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            View cardView = creditcard.inflate(R.layout.server_select, null);

            final Button ipbtn = (Button) cardView.findViewById(R.id.serverip_btn);
            ipbtn.setVisibility(View.INVISIBLE);
            final CheckBox BT_Meter1 = (CheckBox) cardView.findViewById(R.id.bluetoothMeter);
            BT_Meter1.setVisibility(View.INVISIBLE);
            final CheckBox Pulsar_Meter = (CheckBox) cardView.findViewById(R.id.pulsarMeter);
            Pulsar_Meter.setVisibility(View.INVISIBLE);
            final CheckBox CentrodyneDevice = (CheckBox) cardView.findViewById(R.id.centrodyneMeter);
            CentrodyneDevice.setVisibility(View.INVISIBLE);
            final CheckBox VivotechDevice = (CheckBox) cardView.findViewById(R.id.vivotechDevice);
            VivotechDevice.setVisibility(View.INVISIBLE);
            final CheckBox BlueBambooDevice = (CheckBox) cardView.findViewById(R.id.blueBambooDevice);
            BlueBambooDevice.setVisibility(View.INVISIBLE);
            final CheckBox audioCommands = (CheckBox) cardView.findViewById(R.id.audioCommands);
            audioCommands.setVisibility(View.INVISIBLE);
            final CheckBox VeriFoneDevice = (CheckBox) cardView.findViewById(R.id.verifoneDevice);
            VeriFoneDevice.setVisibility(View.INVISIBLE);
            final CheckBox audiojackperipheral = (CheckBox) cardView.findViewById(R.id.audiojackperipheral);
            audiojackperipheral.setVisibility(View.INVISIBLE);
            final CheckBox ventiveAJR = (CheckBox) cardView.findViewById(R.id.ventiveAJR);
            ventiveAJR.setVisibility(View.INVISIBLE);

            final TextView ipLabel = (TextView) cardView.findViewById(R.id.serverip_label);
            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                ipLabel.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                ipLabel.setText(Farsi.Convert(getResources().getString(R.string.Amount_to_Hold)));
            } else {
                ipLabel.setText(Farsi.Convert(getResources().getString(R.string.Amount_to_Hold)));
            }

            final EditText preAuthAmount = (EditText) cardView.findViewById(R.id.serverip_edit);
            preAuthAmount.setText(currentTrip.estimatedCost);
            preAuthAmount.setInputType(InputType.TYPE_NUMBER_FLAG_DECIMAL + InputType.TYPE_CLASS_NUMBER);
            preAuthAmount.setSelectAllOnFocus(true);

            if (AVL_Service.CCProcessorList.containsKey("CAW"))
                register();

            AlertDialog.Builder builder = new AlertDialog.Builder(this).setView(cardView).setTitle(Farsi.Convert(getResources().getString(R.string.Credit_Card_Authorize))).setPositiveButton(
                    "Hold",
                    new DialogInterface.OnClickListener() {

                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            final String holdAmount = preAuthAmount.getText().toString();
                            if (cnnxManager.getActiveNetworkInfo() != null ? cnnxManager.getActiveNetworkInfo().isConnected() : false) {
                                try {
                                    if (Float.parseFloat(holdAmount) > 0)
                                        if (Float.parseFloat(holdAmount) < AVL_Service.pref.getFloat("MaxCCAmount", 0.0f)) {
                                            currentTrip.paymentMethod = "Credit Card";
                                            ActualPaymentAmount = holdAmount;
                                            if (AVL_Service.CardMappings.containsKey(CreditCard_ITC.getCardType().getFullName().toUpperCase())) {
                                                if (getcreditcardprocessorfromcreditITC().equalsIgnoreCase("MJM")) {
                                                    currentTrip.cardProcessor = "MJM";
                                                    MJM_PreAuth(holdAmount);
                                                } else if (getcreditcardprocessorfromcreditITC().equalsIgnoreCase("CMT")) {
                                                    currentTrip.cardProcessor = "CMT";
                                                    Thread processCreditCard = new Thread(new Runnable() {
                                                        @Override
                                                        public void run() {
                                                            Thread.currentThread().setName("Credit Card");
                                                            CMT_Verify(holdAmount, "0", "0", "0", cc);
                                                        }
                                                    });
                                                    processCreditCard.start();

                                                } else if (getcreditcardprocessorfromcreditITC().equalsIgnoreCase("CAW")) {
                                                    currentTrip.cardProcessor = "CAW";
                                                    sendCAWTransaction(TransactionType.AUTH_ONLY, holdAmount, "");
                                                } else if (getcreditcardprocessorfromcreditITC().equalsIgnoreCase("Authorize")) {
                                                    currentTrip.cardProcessor = "Authorize";
                                                    SendAuthorizeTransaction("PreAuth", holdAmount);
                                                } else if (getcreditcardprocessorfromcreditITC().equalsIgnoreCase("SlimCD")) {
                                                    currentTrip.cardProcessor = "SlimCD";
                                                    SendSlimCDTransaction("AUTH", holdAmount);
                                                }
                                            } else
                                                Toast.makeText(getApplicationContext(), "Cannot Process " + CreditCard_ITC.getCardType().getFullName() + " Card", Toast.LENGTH_LONG).show();

                                        } // if TOTAL > MaxCCAmount
                                        else
                                            Toast.makeText(
                                                    getApplicationContext(),
                                                    "Cannot hold more than $" + AVL_Service.pref.getFloat("MaxCCAmount", 0.0f) + " on Credit Card\nContact back office to charge this amount",
                                                    Toast.LENGTH_LONG).show();
                                    else
                                        Toast.makeText(getApplicationContext(), "Please Enter a valid amount", Toast.LENGTH_LONG).show();
                                } catch (Exception e) {
                                    handleException("[Exception in pre Auth confirmation dialog]" + "[showPreAuthDialog]" + "[" + e.getLocalizedMessage() + "]");
                                }

                                dialog.dismiss();
                            } else
                                exception("Credit Card Pre-Authorize : Network Not Available");
                        }
                    })
                    .setNegativeButton(Farsi.Convert(getResources().getString(R.string.Cancel)), new DialogInterface.OnClickListener() {

                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    });
            AlertDialog alert = builder.create();
            alert.show();

            dialogFontSize(alert);

        } catch (Exception e) {
            Toast.makeText(getApplicationContext(), e.getLocalizedMessage(), Toast.LENGTH_LONG).show();
            // handleException(e.getStackTrace()[0].getFileName() + "| " + e.getLocalizedMessage() + " in " + e.getStackTrace()[0].getMethodName() + " Line " +
            // e.getStackTrace()[0].getLineNumber());
        }
    }

    /*--------------------------------------------------------------showInquiryDialog---------------------------------------------------------------*/
    private void showInquiryDialog(final itcurves.ncs.CreditCard cc) {
        try {
            if (preInquiryDialog != null)
                if (preInquiryDialog.isShowing())
                    preInquiryDialog.dismiss();

            handleShowProgress(Farsi.Convert(getResources().getString(R.string.Checking_Card_Balance)));

            new Thread(new Runnable() {

                @Override
                public void run() {
                    WS_Response tempResponse = null;
                    if (AVL_Service.CardMappings.containsKey(CreditCard_ITC.getCardType().getFullName().toUpperCase()))
                        if (AVL_Service.CardMappings.get(CreditCard_ITC.getCardType().getFullName().toUpperCase()).getCardProcessingCompany().equalsIgnoreCase("MJM")) {

                        }
                    try {
                        StringBuffer envelope = new StringBuffer(
                                "<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><Process_Inquiry xmlns=\"http://Itcurves.net/\"><request><ServiceID>")
                                .append(currentTrip.tripNumber)
                                .append("</ServiceID><TripType>Calln R-V</TripType><RequestID>")
                                .append(currentTrip.tripNumber)
                                .append("</RequestID><UserID>")
                                .append(AVL_Service.pref.getString("DriverID", "0"))
                                .append("</UserID><ReadyToSettle>false</ReadyToSettle><PickUpDate>")
                                .append(MJM_GiftCard1.format(currentTrip.PUTime) + "T" + MJM_GiftCard2.format(currentTrip.PUTime))
                                .append("</PickUpDate><PickUpLatitude>")
                                .append(currentTrip.PUlat)
                                .append("</PickUpLatitude><PickUpLongitude>")
                                .append(currentTrip.PUlong)
                                .append("</PickUpLongitude>")
                                .append("<CardNumber>")
                                .append(currentTrip.creditCardNum)
                                .append("</CardNumber><ExpirationDate>")
                                .append(currentTrip.creditCardExpiry.substring(2, 4) + currentTrip.creditCardExpiry.substring(0, 2))
                                .append("</ExpirationDate>")
                                .append("<DeviceID>")
                                .append(AVL_Service.pref.getString("VehicleID", "0"))
                                .append("</DeviceID><JobID>")
                                .append(currentTrip.ConfirmNumber)
                                .append("</JobID><ReadMethodType>")
                                .append(currentTrip.creditCardTrackII.equalsIgnoreCase("") ? "Keyed" : "Swiped")
                                .append("</ReadMethodType><Track2>")
                                .append(currentTrip.creditCardTrackII.equalsIgnoreCase("") ? currentTrip.creditCardTrackII : ";" + currentTrip.creditCardTrackII + "?")
                                .append("</Track2></request></Process_Inquiry></soap:Body></soap:Envelope>");

                        // Calling Web Service and Parsing Response
                        tempResponse = CallingWS.submit(AVL_Service.webServiceURL, AVL_Service.soapAction_Process_Inquiry, envelope.toString());

                        if (tempResponse != null && tempResponse.responseType.equalsIgnoreCase("Process_InquiryResult")) {

                            final StringBuffer strBuf = new StringBuffer();
                            currentTrip.promptInquiryDialog = true;
                            strBuf.append("Transaction Id: ");
                            strBuf.append(tempResponse.cc_AuthorizeDotNet_MJM.get_TransactionId());
                            strBuf.append("\nResponse: ");
                            strBuf.append(tempResponse.cc_AuthorizeDotNet_MJM.get_ResultCode());
                            strBuf.append("\nApproval Code: ");
                            strBuf.append(tempResponse.cc_AuthorizeDotNet_MJM.get_AuthCode());
                            strBuf.append("\nBalance: ");
                            strBuf.append("$" + tempResponse.cc_AuthorizeDotNet_MJM.get_BalanceAmt());
                            strBuf.append("\nMax Card Charge: ");
                            strBuf.append("$" + tempResponse.cc_AuthorizeDotNet_MJM.get_MaxCardCharge());
                            strBuf.append("\nEst Trip Cost: ");
                            strBuf.append("$" + currentTrip.estimatedCost);

                            // if ((tempResponse.responseType.equalsIgnoreCase("Process_InquiryResult") &&
                            // tempResponse.cc_AuthorizeDotNet_MJM.get_ResultCode().equalsIgnoreCase("success")) || (tempResponse.responseType
                            // .equalsIgnoreCase("Process_PostAuthResult") && tempResponse.cc_AuthorizeDotNet_MJM.get_ResultCode().equalsIgnoreCase("1"))) {

                            // receivedPaymentResp("Header" + Constants.BODYSEPARATOR + "1^CreditCard Payment successful");

                            // } else if (tempResponse.cc_AuthorizeDotNet_MJM.get_ResultCode().equalsIgnoreCase("failure") && (currentView.getId() == PAYMENTVIEW)) {

                            // runOnUiThread(new Runnable() {
                            // public void run() {
                            // ttfCCNumber.setText("");
                            // ttfCCExpiry.setText("");
                            // }
                            // });

                            // }

                            strBuf.append("\nDetails: ");
                            strBuf.append(tempResponse.cc_AuthorizeDotNet_MJM.get_Message());

                            runOnUiThread(new Runnable() {
                                public void run() {
                                    final AlertDialog dialog = new AlertDialog.Builder(TaxiPlexer.this).setTitle(Farsi.Convert(getResources().getString(R.string.Balance_Inquiry))).setMessage(
                                            strBuf.toString()).create();
                                    dialog.setButton(Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {
                                        public void onClick(DialogInterface dialog, int whichButton) {
                                            System.gc();
                                            dialog.dismiss();
                                        }
                                    });
                                    dialog.show();

                                    dialogFontSize(dialog);
                                }
                            });
                        } else if (tempResponse == null)
                            exception("Show Inquiry Dialog Failed");

                    } catch (Exception e) {
                        exception("[Exception in pre Auth confirmation dialog]" + "[showPreAuthDialog]" + "[" + e.getLocalizedMessage() + "]");
                    }
                    hideProgressDialog();

                }// run
            }).start();
        } catch (Exception ex) {
            LogException("[Exception in showPreAuthDialog]" + "[showPreAuthDialog]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }
    /*--------------------------------------------------------------showMeterDialog-----------------------------------------------------------------*/
    void showMeterDialog() {
        try {
            // List<String> meterDevices = new ArrayList<String>();
            if (mBluetoothAdapter == null)
                mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
            if (mBluetoothAdapter == null) {
                // Device does not support Bluetooth
                Log.w(getClass().getSimpleName(), Farsi.Convert(getResources().getString(R.string.Bluetoothnotsupported)));
                // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.Bluetoothnotsupported)), Toast.LENGTH_LONG).show();
                showToastMessage(R.string.Bluetoothnotsupported);
            } else {
                if (SHOW_PAIRED_DEVICES_DIALOG) {

                    Intent serverIntent = new Intent(this, DeviceListActivity.class);
                    Bundle title = new Bundle();
                    title.putString("Title", "Select Bluetooth Meter");
                    serverIntent.putExtras(title);
                    startActivityForResult(serverIntent, Constants.REQUEST_CONNECT_DEVICE_INSECURE);
                    SHOW_PAIRED_DEVICES_DIALOG = false;
                }

            }
        } catch (Exception ex) {
            LogException("[Exception in showMeterDialog]" + "[showMeterDialog]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }


    private void sendEmail(final String tripnumber, final String body) {
        try {
            handleShowProgress(Farsi.Convert(getResources().getString(R.string.Sending_Email)));

            new Thread(new Runnable() {

                @Override
                public void run() {
                    WS_Response tempResponse = null;

                    try {
                        StringBuffer envelope = new StringBuffer(
                                "<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><SendPaymentReceiptToCustomer xmlns=\"http://Itcurves.net/\"><iServiceID>")
                                .append(tripnumber)
                                .append("</iServiceID><MessageBody>")
                                .append(body)
                                .append("</MessageBody></SendPaymentReceiptToCustomer></soap:Body></soap:Envelope>");

                        // Calling Web Service and Parsing Response
                        tempResponse = CallingWS.submit(AVL_Service.webServiceURL, AVL_Service.soapAction_SendEmail, envelope.toString());

                        if (tempResponse != null && tempResponse.responseType.equalsIgnoreCase("SendPaymentReceiptToCustomer")) {

                            if(tempResponse.re.isResponse()) {
                                runOnUiThread(new Runnable() {
                                    public void run() {
                                        showToastMessageFromString(Farsi.Convert(getResources().getString(R.string.Email_Sent)));
                                    }
                                });
                            } else {
                                runOnUiThread(new Runnable() {
                                    public void run() {
                                        showToastMessageFromString(Farsi.Convert(getResources().getString(R.string.Error_Sending_Email)));
                                    }
                                });
                            }
                        } else if (tempResponse == null)
                            exception("Send Email Failed");

                    } catch (Exception e) {
                        exception("[Exception in pre Sending Email]" + "[sendEmail]" + "[" + e.getLocalizedMessage() + "]");
                    }
                    hideProgressDialog();

                }// run
            }).start();
        } catch (Exception ex) {
            LogException("[Exception in pre Sending Email]" + "[sendEmail]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }
    /*--------------------------------------------------------------showPrinterDialog---------------------------------------------------------------*/
    void showPrinterDialog() {
        try {
            if (AVL_Service.pref.getBoolean("BlueBambooDevice", false) || AVL_Service.pref.getBoolean("BluetoothMeter", false)) {
                if (mBluetoothAdapter == null)
                    mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
                if (mBluetoothAdapter == null) {
                    // Device does not support Bluetooth
                    Log.w(getClass().getSimpleName(), "Bluetooth not supported.");
                    // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.Bluetoothnotsupported)), Toast.LENGTH_LONG).show();
                    showToastMessage(R.string.Bluetoothnotsupported);
                } else {
                    Set<BluetoothDevice> pairedPrinters = mBluetoothAdapter.getBondedDevices();
                    // If there are paired devices
                    btDevices = null;
                    btDeviceName = null;
                    btDevices = new String[pairedPrinters.size()];
                    btDeviceName = new String[pairedPrinters.size()];
                    if (pairedPrinters.size() > 0) {
                        // Loop through paired devices
                        int i = 0;
                        for (BluetoothDevice device : pairedPrinters) {
                            // Add the name and address to an array
                            Log.w(getClass().getSimpleName(), "Paired Device - Name: " + device.getName() + " Address: " + device.getAddress());
                            btDevices[i] = getDeviceName(device.getName()) + "\n" + device.getAddress();
                            btDeviceName[i] = device.getName();
                            i++;

                        }// for
                    }// if
                }
                CharSequence[] btitems = new CharSequence[btDevices.length];
                for (int i = 0; i < btDevices.length; i++) {
                    SpannableString ss1 = new SpannableString(btDevices[i]);

                    switch (Integer.parseInt(Fonts[AVL_Service.pref.getInt("FontPosition", 4)])) {
                        case -8 :
                            ss1.setSpan(new RelativeSizeSpan(.25f), 0, ss1.length(), 0);
                            break;
                        case -6 :
                            ss1.setSpan(new RelativeSizeSpan(.50f), 0, ss1.length(), 0);
                            break;
                        case -4 :
                            ss1.setSpan(new RelativeSizeSpan(.75f), 0, ss1.length(), 0);
                            break;
                        case -2 :
                            ss1.setSpan(new RelativeSizeSpan(1f), 0, ss1.length(), 0);
                            break;
                        case 0 :
                            ss1.setSpan(new RelativeSizeSpan(1.25f), 0, ss1.length(), 0);
                            break;
                        case 2 :
                            ss1.setSpan(new RelativeSizeSpan(1.50f), 0, ss1.length(), 0);
                            break;
                        case 4 :
                            ss1.setSpan(new RelativeSizeSpan(1.75f), 0, ss1.length(), 0);
                            break;
                        case 6 :
                            ss1.setSpan(new RelativeSizeSpan(2.0f), 0, ss1.length(), 0);
                            break;
                        case 8 :
                            ss1.setSpan(new RelativeSizeSpan(2.25f), 0, ss1.length(), 0);
                            break;
                    }
                    btitems[i] = ss1;
                }

                AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                builder.setTitle(Farsi.Convert(getResources().getString(R.string.SelectPrinter))).setItems(btitems, new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {

                        String macAddress = "";
                        String deviceName = btDeviceName[which];

                        StringTokenizer st = new StringTokenizer(btDevices[which], "\n");
                        while (st.hasMoreTokens()) {
                            String token = st.nextToken();
                            if (BluetoothAdapter.checkBluetoothAddress(token)) {
                                macAddress = token;
                                break;
                            }
                        }// while

                        if (AVL_Service.pref.getBoolean("BlueBambooDevice", false) && deviceName.contains("P25_")) {
                            if (AVL_Service.pref.getString("BlueBambooAddress", "").equalsIgnoreCase(macAddress) && bluebambooPrinter != null && bluebambooPrinter.isConnectionAlive()) {

                            } else if (connectToPrinter(macAddress)) {
                                showToastMessage(R.string.Connected_to_Bluetooth_Printer);
                                // Toast.makeText(TaxiPlexer.this, "Connected to Bluetooth Printer!", Toast.LENGTH_SHORT).show();
                                AVL_Service.pref.edit().putString("BlueBambooAddress", macAddress).commit();
                                AVL_Service.pref.edit().putString("PrinterAddress", macAddress).commit();
                            } else {
                                // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.FailedtoConnectBluetoothPrinter)),
                                // Toast.LENGTH_LONG).show();
                                showToastMessage(R.string.FailedtoConnectBluetoothPrinter);
                                showPrinterDialog();
                                return;
                            }
                            if (reciept.length() > 0) {
                                isPrinted = bluebambooPrinter.print(reciept);
                                handlePrinterResp();
                            } else if (swipeCommand != null) {
                                bluebambooPrinter.sendSocketMsg(swipeCommand);
                                swipeCommand = null;
                                return;
                            } else
                                return;
                        } else if (AVL_Service.pref.getBoolean("BlueBambooDevice", false) && !deviceName.contains("P25_")) {
                            // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.SelectProperDeviceFromSettingsMenu)),
                            // Toast.LENGTH_SHORT).show();
                            showToastMessage(R.string.SelectProperDeviceFromSettingsMenu);
                            showPrinterDialog();
                            return;
                        } else if (AVL_Service.pref.getBoolean("BluetoothMeter", false) && getDeviceName(deviceName).contains("Taxi Meter")) {
                            if (AVL_Service.pref.getString("MeterAddress", "").equalsIgnoreCase(macAddress) && Meter != null) {
                                taxiMeterPrinter = Meter;
                                taxiPrinter = taxiMeter;
                                AVL_Service.pref.edit().putString("PrinterAddress", AVL_Service.pref.getString("MeterAddress", "")).commit();
                            } else if (connectToPrinter(macAddress)) {
                                // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.ConnectedtoBluetoothPrinter)),
                                // Toast.LENGTH_SHORT).show();
                                showToastMessage(R.string.ConnectedtoBluetoothPrinter);
                                AVL_Service.pref.edit().putString("PrinterAddress", macAddress).commit();
                                AVL_Service.pref.edit().putString("MeterAddress", macAddress).commit();
                            } else {
                                // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.FailedtoConnectBluetoothPrinter)),
                                // Toast.LENGTH_LONG).show();
                                showToastMessage(R.string.FailedtoConnectBluetoothPrinter);
                                showPrinterDialog();
                                return;
                            }

                            if (reciept.length() > 0)
                                if (taxiMeterPrinter.isConnectionAlive()) {
                                    isPrinted = taxiMeterPrinter.write(taxiMeterReciept);
                                    handlePrinterResp();
                                } else {
                                    taxiMeterPrinter = null;
                                    connectToPrinter(AVL_Service.pref.getString("PrinterAddress", ""));
                                    if (reciept.contains("THANK YOU"))
                                        showPrinterDialog();

                                }
                            else
                                return;
                        } else if (AVL_Service.pref.getBoolean("BluetoothMeter", false) && !deviceName.contains("Taxi Meter")) {
                            // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.SelectProperDeviceFromSettingsMenu)),
                            // Toast.LENGTH_SHORT).show();
                            showToastMessage(R.string.SelectProperDeviceFromSettingsMenu);
                            showPrinterDialog();
                            return;
                        }

                        // handlePrinterResp();

                    }
                }).setCancelable(true);
                AlertDialog alert = builder.create();
                alert.show();

                dialogFontSize(alert);
            } else {
                isPrinted = true;
                handlePrinterResp();
            }
        } catch (Exception e) {
            Toast.makeText(getApplicationContext(), e.getLocalizedMessage(), Toast.LENGTH_LONG).show();
            // handleException(e.getStackTrace()[0].getFileName() + "| " + e.getLocalizedMessage() + " in " + e.getStackTrace()[0].getMethodName() + " Line " +
            // e.getStackTrace()[0].getLineNumber());
        }
    }
    /*-----------------------------------------------------------------handlePrinterResp-----------------------------------------------------------------*/
    public void handlePrinterResp() {
        try {
            if (isPrinted) {
                isPrinted = false;

                if ((AVL_Service.pref.getBoolean("BlueBambooDevice", false) || AVL_Service.pref.getBoolean("BluetoothMeter", false)) && reciept.contains("THANK YOU")) {

                    Handler h = new Handler();
                    Runnable r = new Runnable() {
                        public void run() {
                            RePrintDialog();
                        }
                    };

                    h.postDelayed(r, 500);

                } else {
                    if (bluebambooPrinter != null && bluebambooPrinter.isConnectionAlive()) {
                        bluebambooPrinter.flush();
                        bluebambooPrinter = null;
                    }

                    if (reciept.contains("THANK YOU") && isNewTrip == 1) {

                        setContentView(mainView);
                        currentView = mainView;
                        Fare = "0";
                        Extras = "0";
                        Tip = "0";
                        Distance = 0.00;
                        setMeterData = true;
                        currentTrip = null;
                        paymentView = null;
                        TripPaymentDataReceivedFromVeriFone = "";
                        sortTripList();
                        // tripAdapter.notifyDataSetChanged();
                    }
                    reciept = "";
                }// else

            } else
                showPrinterDialog();
        } catch (Exception e) {
            Toast.makeText(getApplicationContext(), e.getLocalizedMessage(), Toast.LENGTH_LONG).show();

        }
    }

    /*-----------------------------------------------------------------leavepaymentScreen-----------------------------------------------------------------*/
    private void leavepaymentScreen() {
        try {

            // bMerchantCopyPrinted = false;
            setContentView(mainView);
            currentView = mainView;
            Fare = "0";
            Extras = "0";
            Tip = "0";
            Distance = 0.00;
            setMeterData = true;
            currentTrip = null;
            paymentView = null;
            reciept = "";

            sortTripList();
        } catch (Exception ex) {
            LogException("[Exception in going bakc from payment screeb]" + "[leavepaymentScreen]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }

    /*-----------------------------------------------------------------RePrintDialog-----------------------------------------------------------------*/
    public void RePrintDialog() {
        try {
            final AlertDialog rePrintDialog = new AlertDialog.Builder(TaxiPlexer.this)
                    .setIcon(android.R.drawable.ic_dialog_alert)
                    .setTitle(Farsi.Convert(getResources().getString(R.string.Print_Inquiry)))
                    .setMessage(Farsi.Convert(getResources().getString(R.string.Doyouwanttoprintcustomerreceipt)))
                    .setCancelable(false)
                    .setPositiveButton(Farsi.Convert(getResources().getString(R.string.Yes)), new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {

                            try {
                                reciept = "";

                                String helpline = AVL_Service.ASCS_HelpLine_Number;
                                if (AVL_Service.ASCS_HelpLine_Number.length() < 10) {
                                    helpline = "0" + helpline;
                                }

                                String temp = helpline;
                                if (helpline.length() == 10) {
                                    helpline = temp.substring(0, 3) + "-" + temp.substring(3, 6) + "-" + temp.substring(6, 10);

                                }
                                if (!AVL_Service.pref.getBoolean("VeriFoneDevice", false)) {
                                    reciept = reciept + helpline;
                                }
                                if (!AVL_Service.pref.getBoolean("VeriFoneDevice", false)) {
                                    if (!AVL_Service.CompanyURL.equalsIgnoreCase("")) {
                                        reciept = reciept + "\n" + AVL_Service.CompanyURL;
                                    }
                                }

                                Date date = new Date();
                                reciept = reciept + "\n\nVeh #"
                                        + AVL_Service.pref.getString("VehicleID", " ")
                                        + "\nDRIVER #"
                                        + AVL_Service.pref.getString("DriverID", " ")
                                        + "\nDate :"
                                        + displayDateFormat.format(date)
                                        + "\nStart :"
                                        + displayTimeFormat.format(currentTrip.PUTime)
                                        + "\nEnd :"
                                        + displayTimeFormat.format(currentTrip.DOTime)
                                        + "\nMiles :"
                                        + dFormat.format(Distance)
                                        + "\nCNF#  :"
                                        + currentTrip.ConfirmNumber;

                                if (currentTrip.paymentMethod.contains("Credit"))
                                    reciept = reciept + "\n\nCC# xxx" + (currentTrip.creditCardNum.length() > 12 ? currentTrip.creditCardNum.substring(12) : "") + "\nAuth :" + currentTrip.authCode;

                                else if (currentTrip.paymentMethod.contains("Call& R-V"))
                                    reciept = reciept + "\n\nCC# xxx"
                                            + (currentTrip.creditCardNum.length() > 12 ? currentTrip.creditCardNum.substring(12) : "")
                                            + "\nAuth :"
                                            + currentTrip.authCode
                                            + "\nPaid :$"
                                            + dFormat.format(Float.parseFloat(mjm_CardAmt.trim().equalsIgnoreCase("") ? "0.00" : Float.toString(total - Float.parseFloat(mjm_RemainingAmt))))
                                            + "\nOwed :$"
                                            + dFormat.format(Float.parseFloat(mjm_RemainingAmt.trim().equalsIgnoreCase("") ? "0.00" : dFormat.format(Float.parseFloat(mjm_RemainingAmt))))
                                            + "\nCC Bal :$"
                                            + dFormat.format(Float.parseFloat(mjm_Balance.trim().equalsIgnoreCase("") ? "0.00" : dFormat.format(Float.parseFloat(mjm_Balance))));

                                reciept = reciept + "\n\nFare  :$"
                                        + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(Float
                                        .parseFloat(Fare.trim().equalsIgnoreCase("") ? "0.0" : Fare)))
                                        + "\nExtras:$"
                                        + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(ParseFloatFromString(Extras)))
                                        + "\nTip $:"
                                        + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(ParseFloatFromString(Tip)));
                                if (currentTrip.PromotionalValue > 0) {
                                    reciept = reciept + "\nDiscount:$"
                                            + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(currentTrip.PromotionalValue));
                                }
                                reciept = reciept + "\n\nTotal $:" + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(total));

                                if (AVL_Service.ShowClientPhoneNoOnReceipt) {
                                    if (ttfCustomerPhoneNo != null)
                                        currentTrip.clientPhoneNumber = ttfCustomerPhoneNo.getText().toString();
                                    reciept = reciept + "\n" + currentTrip.clientPhoneNumber.trim() + "\n\n";
                                } else
                                    reciept = reciept + "\n\n";
                                reciept = reciept + "X________\nCustomer Copy\n\nTHANK YOU!";

                                String CompanyName = null;
                                if (AVL_Service.CompanyName_Receipt.length() > 0) {
                                    CompanyName = AVL_Service.pref.getString("Company", "Payment Receipt");
                                    AVL_Service.pref.edit().putString("Company", AVL_Service.CompanyName_Receipt).commit();
                                }
                                if (!AVL_Service.pref.getBoolean("VeriFoneDevice", false)) {
                                    reciept = AVL_Service.pref.getString("Company", "Payment Receipt") + "\n" + reciept;
                                } else {
                                    int companyNameAllowedLength = 255 - reciept.length() + 1;
                                    reciept = (AVL_Service.pref.getString("Company", "Payment Receipt").length() <= companyNameAllowedLength ? AVL_Service.pref.getString("Company", "Payment Receipt") : (AVL_Service.pref
                                            .getString("Company", "Payment Receipt").substring(0, companyNameAllowedLength - 2))) + reciept;
                                }
                                if (AVL_Service.CompanyName_Receipt.length() > 0) {
                                    AVL_Service.pref.edit().putString("Company", CompanyName).commit();
                                }

                                if (AVL_Service.pref.getBoolean("BlueBambooDevice", false)) {
                                    if (bluebambooPrinter != null && bluebambooPrinter.isConnectionAlive()) {
                                        bluebambooPrinter.print(reciept);
                                    } else {
                                        showPrinterDialog();
                                    }
                                } else if (AVL_Service.pref.getBoolean("BluetoothMeter", false))

                                    if (reciept.length() > 127) {

                                        if (meterType().equalsIgnoreCase("centrodyne")) {
                                            int lReceiptLength = reciept.length();
                                            int lLastNewLineIndexofFirstReceipt = 0;
                                            int lLastNewLineIndexof2ndReceipt = 0;
                                            String lReceipt = reciept.substring(0, 127);
                                            lLastNewLineIndexofFirstReceipt = lReceipt.lastIndexOf('\n');
                                            lReceipt = reciept.substring(0, lLastNewLineIndexofFirstReceipt);
                                            lReceipt = "2" + lReceipt + "\n_______";
                                            taxiMeterReciept = new PrinterMessage(lReceipt, meterType());
                                            // 2nd
                                            if (lReceiptLength >= lLastNewLineIndexofFirstReceipt + 128) {
                                                lReceipt = reciept.substring(lLastNewLineIndexofFirstReceipt, lLastNewLineIndexofFirstReceipt + 128);
                                                lLastNewLineIndexof2ndReceipt = lReceipt.lastIndexOf('\n');
                                                lReceipt = reciept.substring(lLastNewLineIndexofFirstReceipt, lLastNewLineIndexofFirstReceipt + lLastNewLineIndexof2ndReceipt);
                                                lReceipt = "2" + lReceipt + "\n_______";
                                                taxiMeterReciept2 = new PrinterMessage(lReceipt, meterType());
                                                // 3rd

                                                lReceipt = reciept.substring(lLastNewLineIndexofFirstReceipt + lLastNewLineIndexof2ndReceipt, lReceiptLength);
                                                lReceipt = "2" + lReceipt + "\n_______";
                                                taxiMeterReciept3 = new PrinterMessage(lReceipt, meterType());
                                            } else {
                                                lReceipt = reciept.substring(lLastNewLineIndexofFirstReceipt, lReceiptLength);
                                                lReceipt = "2" + lReceipt + "\n_______";
                                                taxiMeterReciept2 = new PrinterMessage(lReceipt, meterType());
                                                taxiMeterReciept3 = new PrinterMessage("2", meterType());
                                            }
                                        } else if (AVL_Service.pref.getBoolean("VeriFoneDevice", false)) {
                                            reciept = "2" + reciept;
                                            taxiMeterReciept = new PrinterMessage(reciept, meterType());
                                        } else {

                                            int lReceiptLength = reciept.length();
                                            int lLastNewLineIndexofFirstReceipt = 0;
                                            int lLastNewLineIndexof2ndReceipt = 0;
                                            String lReceipt = reciept.substring(0, 127);
                                            lLastNewLineIndexofFirstReceipt = lReceipt.lastIndexOf('\n');
                                            lReceipt = reciept.substring(0, lLastNewLineIndexofFirstReceipt);
                                            taxiMeterReciept = new PrinterMessage(lReceipt, meterType());
                                            // 2nd
                                            if (lReceiptLength >= lLastNewLineIndexofFirstReceipt + 128) {
                                                lReceipt = reciept.substring(lLastNewLineIndexofFirstReceipt, lLastNewLineIndexofFirstReceipt + 128);
                                                lLastNewLineIndexof2ndReceipt = lReceipt.lastIndexOf('\n');
                                                lReceipt = reciept.substring(lLastNewLineIndexofFirstReceipt, lLastNewLineIndexofFirstReceipt + lLastNewLineIndexof2ndReceipt);
                                                taxiMeterReciept2 = new PrinterMessage(lReceipt, meterType());
                                                // 3rd

                                                lReceipt = reciept.substring(lLastNewLineIndexofFirstReceipt + lLastNewLineIndexof2ndReceipt, lReceiptLength);
                                                taxiMeterReciept3 = new PrinterMessage(lReceipt, meterType());
                                            } else {
                                                lReceipt = reciept.substring(lLastNewLineIndexofFirstReceipt, lReceiptLength);
                                                taxiMeterReciept2 = new PrinterMessage(lReceipt, meterType());
                                                taxiMeterReciept3 = new PrinterMessage("", meterType());
                                            }
                                        }
                                    }
                                if (taxiMeterPrinter != null && taxiMeterPrinter.isConnectionAlive()) {
                                    PrinterTurn = 0;
                                    taxiMeterPrinter.FlushPrinterDataFromBuffer();
                                    Date dt1 = new Date(System.currentTimeMillis());
                                    boolean ischeck1 = true;
                                    while (ischeck1) {
                                        Date dt2 = new Date(System.currentTimeMillis());
                                        long difference = dt2.getTime() - dt1.getTime();
                                        if (difference > 200)
                                            break;
                                    }
                                    taxiMeterPrinter.write(taxiMeterReciept);

                                    if (meterType().equalsIgnoreCase("centrodyne")) {
                                        int Printertime = 0;
                                        if (taxiMeterReciept2 != null && Printertime == 0) {

                                            Date dt = new Date(System.currentTimeMillis());
                                            boolean ischeck = true;
                                            while (ischeck) {
                                                Date dt2 = new Date(System.currentTimeMillis());
                                                long difference = dt2.getTime() - dt.getTime();
                                                if (difference > 3000)
                                                    break;
                                            }
                                            taxiMeterPrinter.FlushPrinterDataFromBuffer();

                                            boolean is2nd = taxiMeterPrinter.write(taxiMeterReciept2);
                                            if (is2nd) {
                                                taxiMeterReciept2 = null;
                                                Printertime = 1;
                                            }

                                        }
                                        if (taxiMeterReciept3 != null && taxiMeterReciept2 == null && Printertime == 1) {

                                            Date dt2 = new Date(System.currentTimeMillis());
                                            boolean ischeck2 = true;
                                            while (ischeck2) {
                                                Date dt3 = new Date(System.currentTimeMillis());
                                                long difference = dt3.getTime() - dt2.getTime();
                                                if (difference > 3000)
                                                    break;
                                            }
                                            taxiMeterPrinter.FlushPrinterDataFromBuffer();

                                            boolean is3rd = taxiMeterPrinter.write(taxiMeterReciept3);
                                            if (is3rd) {
                                                taxiMeterReciept3 = null;
                                                Printertime = 0;
                                            }

                                        }
                                    }
                                } else if (Meter != null && Meter.isConnectionAlive()) {
                                    taxiMeterPrinter = Meter;
                                    taxiPrinter = taxiMeter;
                                    AVL_Service.pref.edit().putString("PrinterAddress", AVL_Service.pref.getString("MeterAddress", "")).commit();
                                    PrinterTurn = 0;
                                    taxiMeterPrinter.FlushPrinterDataFromBuffer();
                                    Date dt1 = new Date(System.currentTimeMillis());
                                    boolean ischeck1 = true;
                                    while (ischeck1) {
                                        Date dt2 = new Date(System.currentTimeMillis());
                                        long difference = dt2.getTime() - dt1.getTime();
                                        if (difference > 200)
                                            break;
                                    }
                                    taxiMeterPrinter.write(taxiMeterReciept);

                                    if (meterType().equalsIgnoreCase("centrodyne")) {
                                        int Printertime = 0;
                                        if (taxiMeterReciept2 != null && Printertime == 0) {

                                            Date dt = new Date(System.currentTimeMillis());
                                            boolean ischeck = true;
                                            while (ischeck) {
                                                Date dt2 = new Date(System.currentTimeMillis());
                                                long difference = dt2.getTime() - dt.getTime();
                                                if (difference > 3000)
                                                    break;
                                            }
                                            taxiMeterPrinter.FlushPrinterDataFromBuffer();

                                            boolean is2nd = taxiMeterPrinter.write(taxiMeterReciept2);
                                            if (is2nd) {
                                                taxiMeterReciept2 = null;
                                                Printertime = 1;
                                            }

                                        }
                                        if (taxiMeterReciept3 != null && taxiMeterReciept2 == null && Printertime == 1) {

                                            Date dt2 = new Date(System.currentTimeMillis());
                                            boolean ischeck2 = true;
                                            while (ischeck2) {
                                                Date dt3 = new Date(System.currentTimeMillis());
                                                long difference = dt3.getTime() - dt2.getTime();
                                                if (difference > 3000)
                                                    break;
                                            }
                                            taxiMeterPrinter.FlushPrinterDataFromBuffer();

                                            boolean is3rd = taxiMeterPrinter.write(taxiMeterReciept3);
                                            if (is3rd) {
                                                taxiMeterReciept3 = null;
                                                Printertime = 0;
                                            }

                                        }
                                    }
                                } else
                                    showPrinterDialog();

                                RePrintDialog();
                            } catch (Exception e) {
                                handleException("[Exception in recipet printing confirmation dialog]" + "[RePrintDialog]" + "[" + e.getLocalizedMessage() + "]");
                            }

                        } // onClick

                    })
                    .setNegativeButton(Farsi.Convert(getResources().getString(R.string.No)), new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {

                            if (bluebambooPrinter != null && bluebambooPrinter.isConnectionAlive()) {
                                bluebambooPrinter.flush();
                                bluebambooPrinter = null;
                            }

                            setContentView(mainView);
                            currentView = mainView;
                            Fare = "0";
                            Extras = "0";
                            Tip = "0";
                            Distance = 0.00;
                            setMeterData = true;
                            currentTrip = null;
                            paymentView = null;
                            TripPaymentDataReceivedFromVeriFone = "";
                            // tripAdapter.notifyDataSetChanged();
                            try {
                                sortTripList();
                            } catch (Exception e) {
                                // TODO Auto-generated catch block
                                e.printStackTrace();
                            }
                            reciept = "";
                            mjm_Balance = "";
                            dialog.dismiss();

                        } // onClick

                    })
                    .create();
            rePrintDialog.show();

            dialogFontSize(rePrintDialog);

            ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
            scheduler.schedule(new Runnable() {

                @Override
                public void run() {
                    runOnUiThread(new Runnable() {
                        public void run() {
                            if (rePrintDialog.isShowing())
                                rePrintDialog.getButton(AlertDialog.BUTTON_NEGATIVE).performClick();
                        }
                    });

                }
            }, AVL_Service.SDReprintTimeOutSec, TimeUnit.SECONDS);

        } catch (Exception e) {
            handleException("[Exception in RePrintDialog]" + "[RePrintDialog]" + "[" + e.getLocalizedMessage() + "]");
        }
    }
    /*-----------------------------------------------------------------getDeviceName-----------------------------------------------------------------*/
    private String getDeviceName(String name) {
        if (name.contains("P25"))
            return "BlueBambooPrinter";
        else if (name.contains("Amp'ed"))
            return "VivoTech 8800";
        else if (name.contains("eb101"))
            return "Taxi Meter";
        else if (name.contains("Regency"))
            return "Taxi Meter";
        else
            // if (name.trim().length() == 4)
            // try {
            // if (Integer.parseInt(name) > 0)
            // return "Taxi Meter";
            // } catch (NumberFormatException nfe) {
            // return name;
            // }
            return name;
    }

	/*--------------------------------------------------------------showVivotechDialog-----------------------------------------------------------------*/

    void showVivotechDialog() {
        if (mBluetoothAdapter == null)
            mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
        if (mBluetoothAdapter == null) {
            // Device does not support Bluetooth
            Log.w(getClass().getSimpleName(), "Bluetooth not supported.");
            Toast.makeText(getApplicationContext(), "Bluetooth not supported!", Toast.LENGTH_LONG).show();
        } else {
            Set<BluetoothDevice> pairedDevices = mBluetoothAdapter.getBondedDevices();
            // If there are paired devices
            btDevices = null;
            btDevices = new String[pairedDevices.size()];
            if (pairedDevices.size() > 0) {
                // Loop through paired devices
                int i = 0;
                for (BluetoothDevice device : pairedDevices) {
                    // Add the name and address to a String array
                    // Log.w(getClass().getSimpleName(), "Paired Device - Name: " + device.getName() + " Address: " + device.getAddress());

                    btDevices[i] = getDeviceName(device.getName()) + "\n" + device.getAddress();
                    i++;

                }// for
            }// if
        }
        CharSequence[] btitems = new CharSequence[btDevices.length];
        for (int i = 0; i < btDevices.length; i++) {
            SpannableString ss1 = new SpannableString(btDevices[i]);

            switch (Integer.parseInt(Fonts[AVL_Service.pref.getInt("FontPosition", 4)])) {
                case -8 :
                    ss1.setSpan(new RelativeSizeSpan(.25f), 0, ss1.length(), 0);
                    break;
                case -6 :
                    ss1.setSpan(new RelativeSizeSpan(.50f), 0, ss1.length(), 0);
                    break;
                case -4 :
                    ss1.setSpan(new RelativeSizeSpan(.75f), 0, ss1.length(), 0);
                    break;
                case -2 :
                    ss1.setSpan(new RelativeSizeSpan(1f), 0, ss1.length(), 0);
                    break;
                case 0 :
                    ss1.setSpan(new RelativeSizeSpan(1.25f), 0, ss1.length(), 0);
                    break;
                case 2 :
                    ss1.setSpan(new RelativeSizeSpan(1.50f), 0, ss1.length(), 0);
                    break;
                case 4 :
                    ss1.setSpan(new RelativeSizeSpan(1.75f), 0, ss1.length(), 0);
                    break;
                case 6 :
                    ss1.setSpan(new RelativeSizeSpan(2.0f), 0, ss1.length(), 0);
                    break;
                case 8 :
                    ss1.setSpan(new RelativeSizeSpan(2.25f), 0, ss1.length(), 0);
                    break;
            }
            btitems[i] = ss1;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
        builder.setTitle(Farsi.Convert(getResources().getString(R.string.Select_Vivotech_Device))).setItems(btitems, new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {

                String macAddress = "";

                StringTokenizer st = new StringTokenizer(btDevices[which], "\n");
                while (st.hasMoreTokens()) {
                    String DeviceAddress = st.nextToken();
                    if (BluetoothAdapter.checkBluetoothAddress(DeviceAddress)) {
                        macAddress = DeviceAddress;
                        break;
                    }
                }

                if (connectToVivotech(macAddress)) {
                    Toast.makeText(TaxiPlexer.this, "Connected to Vivotech!", Toast.LENGTH_SHORT).show();
                    AVL_Service.pref.edit().putString("VivotechAddress", macAddress).commit();

                } else
                    Toast.makeText(TaxiPlexer.this, "Failed to Connect to Vivotech", Toast.LENGTH_LONG).show();

            }
        });
        AlertDialog alert = builder.create();
        alert.show();

        dialogFontSize(alert);
    }

    /*--------------------------------------------------------------receivedNoShowResponse----------------------------------------------------------*/
    @Override
    public void receivedNoShowResponse(String msg) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.NoShowResp, msg).sendToTarget();

    }

    /*--------------------------------------------------------------handleNoShowResponse------------------------------------------------------------*/
    protected void handleNoShowResponse(String msg) {
        try {
            String[] response = msg.split(Character.toString(Constants.BODYSEPARATOR));
            response = response[1].split("\\" + Character.toString(Constants.COLSEPARATOR));
            // boolean inOtherTripsArray = false;
            if (response.length == 3) {
                if (response[0].equalsIgnoreCase("A")) {
                    for (Trip thisTrip : arrayListOftrips) {
                        if (thisTrip.tripNumber.equalsIgnoreCase(response[1])) {
                            thisTrip.state = States.NOSHOW;
                            // synchronized (arrayListOfOtherTrips) {
                            // synchronized (arrayListOfTreatedTrips) {
                            // arrayListOfOtherTrips.remove(thisTrip);
                            // arrayListOfTreatedTrips.add(thisTrip);
                            // arrayListOfTreatedTrips.notifyAll();
                            // }
                            // arrayListOfOtherTrips.notifyAll();
                            // }

                            // inOtherTripsArray = true;
                            // break;
                        }// if
                    }// for

                    // if (!inOtherTripsArray)
                    // for (Trip thisTrip : arrayListOfTreatedTrips) {
                    // if (thisTrip.tripNumber.equalsIgnoreCase(response[1])) {
                    // thisTrip.state = States.NOSHOW;
                    // // break;
                    // }// if
                    // }//
                    if (TTS)
                        onRadioClick(getDataFromResourse(response[2])); // Drop all pending entries in the playback queue.
                    else {
                        // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.NoShowApproved)), Toast.LENGTH_LONG).show();
                        showToastMessage(R.string.NoShowApproved);
                        manifestSound.start();
                    }

                    Fare = "0";
                    Extras = "0";
                    Tip = "0";
                    currentTrip = null;
                    setContentView(mainView);
                    currentView = mainView;

                } else {

                    // for (Trip thisTrip : arrayListOfOtherTrips) {
                    // if (thisTrip.tripNumber.equalsIgnoreCase(response[1])) {
                    // thisTrip.state = States.IRTPU;
                    // inOtherTripsArray = true;
                    // // break;
                    // }// if
                    // }// for
                    //
                    // if (!inOtherTripsArray)
                    // for (Trip thisTrip : arrayListOfTreatedTrips) {
                    // if (thisTrip.tripNumber.equalsIgnoreCase(response[1])) {
                    // thisTrip.state = States.IRTPU;
                    // // break;
                    // }// if
                    // }//

                    for (Trip thisTrip : arrayListOftrips) {
                        if (thisTrip.tripNumber.equalsIgnoreCase(response[1])) {
                            thisTrip.state = States.IRTPU;
                            // break;
                        }// if
                    }// for

                    if (TTS)
                        onRadioClick(getDataFromResourse(response[2])); // Drop all pending entries in the playback queue.
                    else {
                        manifestSound.start();
                        // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.NoShowNotApproved)), Toast.LENGTH_LONG).show();
                        showToastMessage(R.string.NoShowNotApproved);
                    }
                }
                setAppState();
                sortTripList();

            }// if
            else
                Toast.makeText(getApplicationContext(), "Invalid NOSHOW response recieved\n" + msg.substring(msg.indexOf(Constants.BODYSEPARATOR)), Toast.LENGTH_LONG).show();
        } catch (Exception e) {
            handleException("[Exception in handleNoShowResponse]" + "[handleNoShowResponse]" + "[" + e.getLocalizedMessage() + "]" + msg);
        }
    }

    /*--------------------------------------------------------------receivedBookinResponse----------------------------------------------------------*/
    @Override
    public void receivedBookinResponse(String msg) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.BookInResponse, msg).sendToTarget();

    }

    /*--------------------------------------------------------------handleBookinResp----------------------------------------------------------------*/
    protected void handleBookinResp(String msg) {
        try {
            String[] columns = msg.split(Character.toString(Constants.BODYSEPARATOR));
            columns = columns[1].split("\\" + Character.toString(Constants.COLSEPARATOR));
            try {
                lastBookedZone = bookedZoneValue.getText().toString();
                bookedZone = columns[2];
                avlZone = columns[6];
                bookedStand = columns[4];

                if (columns[2].equalsIgnoreCase("Unknown") || columns[2].equalsIgnoreCase("None") || columns[2].equalsIgnoreCase("0") || columns[2].equalsIgnoreCase("UNKWN")) {
                    bookedZoneValue.setText(Farsi.Convert(getResources().getString(R.string.Unknown)));

                } else
                    bookedZoneValue.setText(columns[2]);

                CurrentBookedZone = columns[2];
                zoneRankValue.setText(columns[3]);
                if (columns[4].equalsIgnoreCase("Unknown") || columns[4].equalsIgnoreCase("None") || columns[4].equalsIgnoreCase("0") || columns[4].equalsIgnoreCase("UNKWN"))
                    bookedStandValue.setText(Farsi.Convert(getResources().getString(R.string.Unknown)));
                else
                    bookedStandValue.setText(columns[4]);

                standRankValue.setText(columns[5]);
                avlZoneValue.setText(columns[6]);
            } catch (Exception e) {
                exception("[Exception in handleBookinResp]" + "[handleBookinResp]" + "[" + e.getLocalizedMessage() + "]" + msg);
            }
            if (AVL_Service.pref.getString("AppLanguage", "en").equalsIgnoreCase("en")) {
                if (TTS) {

                    if (columns[1].trim().contains("Rank Updated")) {
                        mTTS.speak(columns[1], TextToSpeech.QUEUE_FLUSH, null);
                    } else if (columns[1].contains("Driver Requested Zone")) {
                        mTTS.speak(columns[1], TextToSpeech.QUEUE_FLUSH, null);
                    } else {
                        if (AVL_Service.tempMap != null) {
                            String value = AVL_Service.tempMap.get(columns[2]);
                            if (value != null) {
                                // mTTS.speak(columns[1] + value, TextToSpeech.QUEUE_FLUSH, null);
                                mTTS.speak("Booked in zone" + AVL_Service.tempMap.get(value), TextToSpeech.QUEUE_FLUSH, null);
                            } else {
                                mTTS.speak("Booked in zone" + AVL_Service.tempMap.get(columns[2]), TextToSpeech.QUEUE_FLUSH, null);
                            }
                        } else
                            mTTS.speak("Booked in zone" + AVL_Service.tempMap.get(columns[2]), TextToSpeech.QUEUE_FLUSH, null);
                    }

                }
                // mTTS.speak(columns[1], TextToSpeech.QUEUE_FLUSH, null);

            } else
                onRadioClick(getDataFromResourseForSplitStrings(columns[1])); // Drop all pending entries in the playback queue.

            if (mainView.isShown()) {
                // if ((System.currentTimeMillis() - lastZFT) / 1000 > 60)

                handleShowProgress(Farsi.Convert(getResources().getString(R.string.UpdatingZoneList)));
                schedulerForhandleBookinResp = Executors.newSingleThreadScheduledExecutor();
                schedulerForhandleBookinResp.schedule(new Runnable() {

                    @Override
                    public void run() {
                        runOnUiThread(new Runnable() {
                            public void run() {
                                hideProgressDialog();
                                // Toast.makeText(getApplicationContext(), "Zone list will be updated shortlty.", Toast.LENGTH_LONG).show();

                            }
                        });

                    }
                }, 15, TimeUnit.SECONDS);
                serviceHandle.sendMessageToServer("ZFT", "SDHS", MsgType.ZFTReq, AckType.NEW, MsgValidity.Medium, MsgPriority.Normal);

            }
        } catch (Exception ex) {
            LogException("[Exception in handleBookinResp]" + "[handleBookinResp]" + "[" + ex.getLocalizedMessage() + "]" + msg);
        }
    }
    /*--------------------------------------------------------------receivedPaymentResp-------------------------------------------------------------*/
    @Override
    public void receivedPaymentResp(String msg) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.PaymentResponse, msg).sendToTarget();
    }

    /*--------------------------------------------------------------handlePaymentResp---------------------------------------------------------------*/
    protected void handlePaymentResp(String paymentResp) {
        try {
            LogException("[paymentResp]" + "[paymentResp]" + paymentResp);
            isNewTrip = 1;
            String CurrentTripDropZone = currentTrip.DOzone;

            uploadSignatureFile(currentTrip);

            if (AVL_Service.enableDialiePackageOnDevice) {
                // if (!AVL_Service.bShuttle)
                {
                    PaymentCompleted();
                    // VacantFrame();
                }
            }
            if (paymentResp.length() == 0) {
                paymentResp = "cash" + Constants.BODYSEPARATOR + "1^Cash Payment Successful";

                Distance = currentTrip.Distance;
                Fare = currentTrip.Fare;
                Extras = currentTrip.Extras;
                Tip = currentTrip.Tip;
                total = currentTrip.total;
                mjm_Balance = currentTrip.mjm_Balance;
                mjm_RemainingAmt = "0";
                mjm_CardAmt = currentTrip.ActualPayment;
                isNewTrip = 0;
            } else if (paymentResp.length() == 1) {
                paymentResp = "cash" + Constants.BODYSEPARATOR + "1^Cash Payment Successful";
                isNewTrip = 2;
            }

            Date date = new Date();
            String[] columns = paymentResp.split(Character.toString(Constants.BODYSEPARATOR));
            columns = columns[1].split("\\" + Character.toString(Constants.COLSEPARATOR));
            if (currentTrip != null) {
                if (columns[0].equalsIgnoreCase("1")) {
                    reciept = "";

                    String HtmlReceipt = "";

                    String helpline = AVL_Service.ASCS_HelpLine_Number;
                    if (AVL_Service.ASCS_HelpLine_Number.length() < 10) {
                        helpline = "0" + helpline;
                    }

                    String temp = helpline;
                    if (helpline.length() == 10) {
                        helpline = temp.substring(0, 3) + "-" + temp.substring(3, 6) + "-" + temp.substring(6, 10);

                    }
                    if (!AVL_Service.pref.getBoolean("VeriFoneDevice", false)) {
                        reciept = reciept + helpline;
                        HtmlReceipt = HtmlReceipt + helpline;
                    }
                    if (!AVL_Service.pref.getBoolean("VeriFoneDevice", false)) {
                        if (!AVL_Service.CompanyURL.equalsIgnoreCase("")) {
                            reciept = reciept + "\n" + AVL_Service.CompanyURL;
                            HtmlReceipt = HtmlReceipt + "@" + AVL_Service.CompanyURL;
                        }
                    }
                    reciept = reciept + "\n\nVeh #"
                            + AVL_Service.pref.getString("VehicleID", " ")
                            + "\nDRIVER #"
                            + AVL_Service.pref.getString("DriverID", " ")
                            + "\nDate :"
                            + displayDateFormat.format(date)
                            + "\nStart :"
                            + displayTimeFormat.format(currentTrip.PUTime)
                            + "\nEnd :"
                            + displayTimeFormat.format(currentTrip.DOTime)
                            + "\nMiles :"
                            + dFormat.format(Distance)
                            + "\nCNF#  :"
                            + currentTrip.ConfirmNumber;

                    HtmlReceipt = HtmlReceipt + "@@Veh #"
                            + AVL_Service.pref.getString("VehicleID", " ")
                            + "@DRIVER #"
                            + AVL_Service.pref.getString("DriverID", " ")
                            + "@Date :"
                            + displayDateFormat.format(date)
                            + "@Start :"
                            + displayTimeFormat.format(currentTrip.PUTime)
                            + "@End :"
                            + displayTimeFormat.format(currentTrip.DOTime)
                            + "@Miles :"
                            + dFormat.format(Distance)
                            + "@CNF#  :"
                            + currentTrip.ConfirmNumber;

                    if (currentTrip.paymentMethod.contains("Credit")) {
                        reciept = reciept + "\n\nCC# xxx" + (currentTrip.creditCardNum.length() > 12 ? currentTrip.creditCardNum.substring(12) : "") + "\nAuth :" + currentTrip.authCode;
                        HtmlReceipt = HtmlReceipt + "@@CC# xxx" + (currentTrip.creditCardNum.length() > 12 ? currentTrip.creditCardNum.substring(12) : "") + "@Auth :" + currentTrip.authCode;
                    }

                    else if (currentTrip.paymentMethod.contains("Call& R-V")) {
                        reciept = reciept + "\n\nCC# xxx"
                                + (currentTrip.creditCardNum.length() > 12 ? currentTrip.creditCardNum.substring(12) : "")
                                + "\nAuth :"
                                + currentTrip.authCode
                                + "\nPaid :$"
                                + dFormat.format(Float.parseFloat(mjm_CardAmt.trim().equalsIgnoreCase("") ? "0.00" : Float.toString(total - Float.parseFloat(mjm_RemainingAmt))))
                                + "\nOwed :$"
                                + dFormat.format(Float.parseFloat(mjm_RemainingAmt.trim().equalsIgnoreCase("") ? "0.00" : dFormat.format(Float.parseFloat(mjm_RemainingAmt))))
                                + "\nCC Bal :$"
                                + dFormat.format(Float.parseFloat(mjm_Balance.trim().equalsIgnoreCase("") ? "0.00" : dFormat.format(Float.parseFloat(mjm_Balance))));

                        HtmlReceipt = HtmlReceipt + "@@CC# xxx"
                                + (currentTrip.creditCardNum.length() > 12 ? currentTrip.creditCardNum.substring(12) : "")
                                + "@Auth :"
                                + currentTrip.authCode
                                + "@Paid :$"
                                + dFormat.format(Float.parseFloat(mjm_CardAmt.trim().equalsIgnoreCase("") ? "0.00" : Float.toString(total - Float.parseFloat(mjm_RemainingAmt))))
                                + "@Owed :$"
                                + dFormat.format(Float.parseFloat(mjm_RemainingAmt.trim().equalsIgnoreCase("") ? "0.00" : dFormat.format(Float.parseFloat(mjm_RemainingAmt))))
                                + "@CC Bal :$"
                                + dFormat.format(Float.parseFloat(mjm_Balance.trim().equalsIgnoreCase("") ? "0.00" : dFormat.format(Float.parseFloat(mjm_Balance))));
                    }

                    if (isNewTrip == 2) {
                        if ((Float.parseFloat(Tip.trim().equalsIgnoreCase("") ? "0.0" : Tip) == 0)) {
                            reciept = reciept + "\n\nFare  :$"
                                    + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(Float
                                    .parseFloat(Fare.trim().equalsIgnoreCase("") ? "0.00" : Fare)))
                                    + "\nExtras:$"
                                    + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(ParseFloatFromString(Extras)));

                            if (currentTrip.PromotionalValue > 0) {
                                reciept = reciept + "\nDiscount:$"
                                        + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(currentTrip.PromotionalValue));
                            }

                            reciept = reciept + "\n\nSub Total:$"
                                    + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(Math
                                    .round((ParseFloatFromString(Extras) + ParseFloatFromString(Fare) - currentTrip.PromotionalValue) * 100.0) / 100.0))
                                    + "\n\nTip :"
                                    + (Float.parseFloat(Tip.trim().equalsIgnoreCase("") ? "0.0" : Tip) == 0 ? "_____" : "$" + dFormat.format(ParseFloatFromString(Tip)))
                                    + "\n\nTotal :"
                                    + (Float.parseFloat(Tip.trim().equalsIgnoreCase("") ? "0.0" : Tip) == 0 ? "_____" : "$" + dFormat.format(total));
                        } else {
                            reciept = reciept + "\n\nFare  :$"
                                    + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(Float
                                    .parseFloat(Fare.trim().equalsIgnoreCase("") ? "0.0" : Fare)))
                                    + "\nExtras:$"
                                    + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(ParseFloatFromString(Extras)))
                                    + "\nTip $:"
                                    + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(ParseFloatFromString(Tip)));
                            if (currentTrip.PromotionalValue > 0) {
                                reciept = reciept + "\nDiscount:$"
                                        + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(currentTrip.PromotionalValue));
                            }
                            reciept = reciept + "\n\nTotal $:" + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(total));
                        }
                    } else {
                        reciept = reciept + "\n\nFare  :$"
                                + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(Float
                                .parseFloat(Fare.trim().equalsIgnoreCase("") ? "0.0" : Fare)))
                                + "\nExtras:$"
                                + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(ParseFloatFromString(Extras)))
                                + "\nTip $:"
                                + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(ParseFloatFromString(Tip)));
                        HtmlReceipt = HtmlReceipt + "@@Fare  :$"
                                + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(Float
                                .parseFloat(Fare.trim().equalsIgnoreCase("") ? "0.0" : Fare)))
                                + "@Extras:$"
                                + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(ParseFloatFromString(Extras)))
                                + "@Tip $:"
                                + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(ParseFloatFromString(Tip)));
                        if (currentTrip.PromotionalValue > 0) {
                            reciept = reciept + "\nDiscount:$" + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(currentTrip.PromotionalValue));
                            HtmlReceipt = HtmlReceipt + "@Discount:$" + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(currentTrip.PromotionalValue));
                        }
                        reciept = reciept + "\n\nTotal $:" + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(total));
                        HtmlReceipt = HtmlReceipt + "@@Total $:" + (AVL_Service.hideCostOnSDByFundingSource.contains(currentTrip.fundingSource) ? "xx.xx" : dFormat.format(total));

                    }

                    if (AVL_Service.ShowClientPhoneNoOnReceipt) {
                        if (ttfCustomerPhoneNo != null)
                            currentTrip.clientPhoneNumber = ttfCustomerPhoneNo.getText().toString();
                        reciept = reciept + "\n\n" + currentTrip.clientPhoneNumber.trim() + "\n\n";
                        HtmlReceipt = HtmlReceipt + "@@" + currentTrip.clientPhoneNumber.trim() + "\n\n";

                    } else {
                        reciept = reciept + "\n\n";
                        HtmlReceipt = HtmlReceipt + "@@";
                    }

                    reciept = reciept + "X________\nMerchant Copy\n\nTHANK YOU!";
                    HtmlReceipt = HtmlReceipt + "@Customer Copy@@THANK YOU";

                    String CompanyName = null;
                    if (AVL_Service.CompanyName_Receipt.length() > 0) {
                        CompanyName = AVL_Service.pref.getString("Company", "Payment Receipt");
                        AVL_Service.pref.edit().putString("Company", AVL_Service.CompanyName_Receipt).commit();
                    }
                    if (!AVL_Service.pref.getBoolean("VeriFoneDevice", false)) {
                        reciept = AVL_Service.pref.getString("Company", "Payment Receipt") + "\n" + reciept;
                    } else {
                        int companyNameAllowedLength = 255 - reciept.length() + 1;
                        reciept = (AVL_Service.pref.getString("Company", "Payment Receipt").length() <= companyNameAllowedLength ? AVL_Service.pref.getString("Company", "Payment Receipt") : (AVL_Service.pref
                                .getString("Company", "Payment Receipt").substring(0, companyNameAllowedLength - 2))) + reciept;
                    }
                    HtmlReceipt = AVL_Service.pref.getString("Company", "Payment Receipt") + "@" + HtmlReceipt;
                    if (AVL_Service.CompanyName_Receipt.length() > 0) {
                        AVL_Service.pref.edit().putString("Company", CompanyName).commit();
                    }

                    if (isNewTrip == 1 && arrayListOftrips.indexOf(currentTrip) >= 0) {
                        currentTrip.Distance = Distance;
                        currentTrip.Fare = Fare;
                        currentTrip.Extras = Extras;
                        currentTrip.Tip = Tip;
                        currentTrip.total = total;
                        currentTrip.mjm_Balance = mjm_Balance;
                        synchronized (arrayListOftrips) {
                            arrayListOftrips.remove(arrayListOftrips.get(arrayListOftrips.indexOf(currentTrip)));
                            arrayListOftrips.add(currentTrip);
                            arrayListOftrips.notifyAll();
                        }

                        sortTripList();
                    }


                    if (isNewTrip != 2  && AVL_Service.SDEnableReceiptEmail)
                    sendEmail(currentTrip.tripNumber,HtmlReceipt);

                    if (AVL_Service.pref.getBoolean("BluetoothMeter", false) || AVL_Service.pref.getBoolean("BlueBambooDevice", false)) {
                        if ((currentTrip.paymentMethod.equalsIgnoreCase("Cash") && isNewTrip == 2) || (AVL_Service.showReceiptPrintingDialog && isNewTrip == 2)
                                || (AVL_Service.pref.getBoolean("VeriFoneDevice", false) && AVL_Service.showReceiptPrintingDialog)
                                || (currentTrip.paymentMethod.equalsIgnoreCase("Cash") && isNewTrip == 1 && !AVL_Service.SDEnableTwoStepPaymentProcessing)
                                || (AVL_Service.showReceiptPrintingDialog && isNewTrip == 1 && !AVL_Service.SDEnableTwoStepPaymentProcessing && currentTrip.paymentMethod.equalsIgnoreCase("Voucher"))
                                || (AVL_Service.showReceiptPrintingDialog && isNewTrip == 1 && !EnableTwoStepPaymentProcessingforcredit && currentTrip.paymentMethod.equalsIgnoreCase("Credit Card"))) {
                            AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                            builder.setIcon(android.R.drawable.ic_dialog_alert).setTitle(Farsi.Convert(getResources().getString(R.string.PrintInquiry))).setMessage(
                                    Farsi.Convert(getResources().getString(R.string.Doyouwanttoprintmerchantreceipt))).setCancelable(false).setPositiveButton(
                                    Farsi.Convert(getResources().getString(R.string.Yes)),
                                    new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int which) {

                                            cashBtn.setEnabled(false);
                                            creditBtn.setEnabled(false);
                                            voucherBtn.setEnabled(false);
                                            creditdisable = true;
                                            //
                                            PrintReceipt();
                                        }
                                    }).setNegativeButton(Farsi.Convert(getResources().getString(R.string.No)), new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    dialog.dismiss();
                                    if ((currentTrip.paymentMethod.contains("Credit") || currentTrip.paymentMethod.contains("Call")) && bMerchantCopyPrinted == false) {
                                        bMerchantCopyPrinted = true;
                                        creditBtn.setText(AVL_Service.SDPaymentButtonCaptionFor2ndStep);
                                        cashBtn.setVisibility(View.GONE);
                                        voucherBtn.setVisibility(View.GONE);
                                        creditBtn.performClick();
                                    } else if (currentTrip.paymentMethod.contains("Voucher") && bMerchantCopyPrinted == false) {
                                        bMerchantCopyPrinted = true;
                                        voucherBtn.setText(AVL_Service.SDPaymentButtonCaptionFor2ndStep);
                                        cashBtn.setVisibility(View.GONE);
                                        creditBtn.setVisibility(View.GONE);
                                        voucherBtn.performClick();

                                    } else if (currentTrip.paymentMethod.contains("Cash") && bMerchantCopyPrinted == false) {
                                        bMerchantCopyPrinted = true;
                                        voucherBtn.setVisibility(View.GONE);
                                        creditBtn.setVisibility(View.GONE);
                                        cashBtn.setText(AVL_Service.SDPaymentButtonCaptionFor2ndStep);
                                        cashBtn.performClick();
                                    } else {
                                        ClosePaymentScreen();
                                    }

                                }
                            });
                            AlertDialog alert = builder.create();
                            alert.show();

                            dialogFontSize(alert);
                        } else if (isNewTrip == 2 || isNewTrip == 0
                                || AVL_Service.pref.getBoolean("VeriFoneDevice", false)
                                || (isNewTrip == 1 && !AVL_Service.SDEnableTwoStepPaymentProcessing && currentTrip.paymentMethod.equalsIgnoreCase("Voucher"))
                                || (isNewTrip == 1 && !EnableTwoStepPaymentProcessingforcredit && currentTrip.paymentMethod.equalsIgnoreCase("Credit Card")))
                            PrintReceipt();
                        else {
                            isPrinted = true;
                            handlePrinterResp();
                        }
                    } else
                        PrintReceipt();

                    // }
                    if (isNewTrip == 1)
                        if (lastRequestedBookedZone.equalsIgnoreCase("998"))
                            isAutoZoneOnDevice = "1";

                    if (isNewTrip == 1) {
                        boolean activeTripPresent = true;
                        for (Trip t : arrayListOftrips) {
                            if (!t.state.equalsIgnoreCase(States.DROPPED) && !t.state.equalsIgnoreCase(States.NOSHOW) && !t.state.equalsIgnoreCase(States.CANCELLED)) {
                                activeTripPresent = false;
                                break;
                            }
                        }
                        if (activeTripPresent) {
                            final  String tempcurrenttripdropzone = CurrentTripDropZone;
                            ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
                            scheduler.schedule(new Runnable() {

                                @Override
                                public void run() {

                                    String BookedZone = bookedZoneValue.getText().toString().trim();
                                    if (BookedZone.equalsIgnoreCase("None") || BookedZone.length() == 0
                                            || BookedZone.equalsIgnoreCase("0")
                                            || BookedZone.equalsIgnoreCase("unknown")
                                            || BookedZone.equalsIgnoreCase("unkwn")) {
                                        String AVLZone = avlZoneValue.getText().toString().trim();

                                        if (AVLZone.equalsIgnoreCase("None") || AVLZone.length() == 0
                                                || AVLZone.equalsIgnoreCase("0")
                                                || AVLZone.equalsIgnoreCase("unknown")
                                                || AVLZone.equalsIgnoreCase("unkwn")) {
                                            if (tempcurrenttripdropzone.equalsIgnoreCase("None") || tempcurrenttripdropzone.length() == 0
                                                    || tempcurrenttripdropzone.equalsIgnoreCase("0")
                                                    || tempcurrenttripdropzone.equalsIgnoreCase("unknown")
                                                    || tempcurrenttripdropzone.equalsIgnoreCase("unkwn"))
                                                zoneBookIn(lastRequestedBookedZone, isAutoZoneOnDevice); // 3rd Priority
                                            else
                                                zoneBookIn(tempcurrenttripdropzone, isAutoZoneOnDevice); // / 2nd Priority

                                        } else
                                            zoneBookIn(AVLZone, isAutoZoneOnDevice); // 1st Priority
                                    }

                                    isAutoZoneOnDevice = "0";

                                }
                            }, 4, TimeUnit.SECONDS);

                        }
                    }
                    AVL_Service.pref.edit().putString("EstimateFare", "0").commit();
                    AVL_Service.pref.edit().putString("FlaggerDrop", "Unknown").commit();

                    if (isNewTrip == 1)
                        handleShowCustomToast(getDataFromResourse(columns[1]), R.drawable.icondone);

                } else {
                    hideProgressDialog();
                    AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                    builder.setIcon(R.drawable.declined).setTitle(Farsi.Convert(getResources().getString(R.string.PaymentResponse))).setMessage(getDataFromResourse(columns[1])).setPositiveButton(
                            Farsi.Convert(getResources().getString(R.string.ok)),
                            null);
                    AlertDialog alert = builder.create();
                    alert.show();

                    dialogFontSize(alert);
                }

            }
        } catch (Exception e) {
            handleException("[Exception in handlePaymentResp]" + "[handlePaymentResp]" + "[" + e.getLocalizedMessage() + "]" + paymentResp);
        }
    }
    /*--------------------------------------------------------------uploadSignatureFile---------------------------------------------------------------*/
    private void uploadSignatureFile(Trip curntTrip) {
        final Trip currTrip = curntTrip;
        if (currTrip.signatureURL != null)
            new Thread() {
                @SuppressLint("NewApi")
                @Override
                public void run() {
                    try {
                        Bitmap bm;
                        BitmapFactory.Options options = new BitmapFactory.Options();

                        options.inSampleSize = 1;
                        options.inPurgeable = true;
                        if (!signType.equalsIgnoreCase("R")) {
                            File f = new File(currTrip.signatureURL, "signature.jpg");
                            bm = BitmapFactory.decodeStream(new FileInputStream(f));
                        } else {
                            bm = BitmapFactory.decodeResource(getApplicationContext().getResources(), R.drawable.puts);

                        }

                        ByteArrayOutputStream baos = new ByteArrayOutputStream();
                        bm.compress(Bitmap.CompressFormat.PNG, 40, baos);
                        // generate base64 string of image
                        String encodedImage = Base64.encodeToString(baos.toByteArray(), Base64.DEFAULT);

                        if (signType.equalsIgnoreCase("Rep")) {
                            signType = "R";
                        }

                        StringBuffer envelope = new StringBuffer(
                                "<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><UploadSignature xmlns=\"http://Itcurves.net/\"><ServiceID>" + currTrip.tripNumber
                                        + "</ServiceID><RefID>"
                                        + currTrip.ConfirmNumber
                                        + "</RefID><StreetAddress>"
                                        + AVL_Service.pref.getString("Address", "Unknown Address")
                                        + "</StreetAddress><vSigType>"
                                        + signType
                                        + "</vSigType><Base64Image>"
                                        + encodedImage
                                        + "</Base64Image></UploadSignature></soap:Body></soap:Envelope>");

                        // Calling Web Service and Parsing Response
                        WS_Response wsResponse = CallingWS.submit(AVL_Service.webServiceURL, AVL_Service.soapAction_UploadSignature, envelope.toString());
                        if (wsResponse != null && !wsResponse.error) {
                            Boolean status = true;
                        } else
                            for (IMessageListener list1 : AVL_Service.msg_listeners.values())
                                list1.exception("Signature Upload Failed.\n" + wsResponse.errorString);

                        File dir = getFilesDir();
                        File file = new File(dir, "signature.jpg");
                        boolean deleted = file.delete();
                        // if (deleted) {
                        // Toast.makeText(this, "Deleted", Toast.LENGTH_LONG).show();
                        // } else {
                        // Toast.makeText(this, "Not Deleted", Toast.LENGTH_LONG).show();
                        // }

                    } catch (Exception e) {
                        for (IMessageListener list : AVL_Service.msg_listeners.values())
                            list.exception(e.getStackTrace()[0].getFileName() + "| "
                                    + e.getLocalizedMessage()
                                    + " in "
                                    + e.getStackTrace()[0].getMethodName()
                                    + " Line "
                                    + e.getStackTrace()[0].getLineNumber());
                    }
                }// run

            }.start();
    }

    /*--------------------------------------------------------------ClosePaymentScreen---------------------------------------------------------------*/
    private void ClosePaymentScreen() {
        try {
            if (bluebambooPrinter != null && bluebambooPrinter.isConnectionAlive()) {
                bluebambooPrinter.flush();
                bluebambooPrinter = null;
            }

            setContentView(mainView);
            currentView = mainView;
            // tripAdapter.notifyDataSetChanged();
            Fare = "0";
            Extras = "0";
            Tip = "0";
            Distance = 0.00;
            setMeterData = true;
            currentTrip = null;
            paymentView = null;
            sortTripList();
            TripPaymentDataReceivedFromVeriFone = "";
            reciept = "";
            mjm_Balance = "";
            signType = "";
            tempSignType = "";
        } catch (Exception ex) {
            LogException("[Exception in closing payment screen]" + "[ClosePaymentScreen]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }

    /*--------------------------------------------------------------PrintReceipt---------------------------------------------------------------*/
    private void PrintReceipt() {
        try {

            if (AVL_Service.pref.getBoolean("BlueBambooDevice", false)) {
                if (bluebambooPrinter == null || !bluebambooPrinter.isConnectionAlive()) {
                    showPrinterDialog();

                    isPrinted = bluebambooPrinter.print(reciept);
                    if (bMerchantCopyPrinted == true)
                        handlePrinterResp();
                    else {
                        bMerchantCopyPrinted = true;
                        if (currentTrip.TripPayStatus == 2 && Double.parseDouble(Tip) > Double.parseDouble(OldTip)) {
                            creditBtn.setEnabled(true);
                            creditBtn.setText(AVL_Service.SDPaymentButtonCaptionFor2ndStep);
                            creditBtn.performClick();
                        } else {
                            cashBtn.setEnabled(true);
                            creditBtn.setEnabled(true);
                            voucherBtn.setEnabled(true);
                            if (currentTrip.paymentMethod.contains("Voucher")) {
                                voucherBtn.setText(AVL_Service.SDPaymentButtonCaptionFor2ndStep);
                                cashBtn.setVisibility(View.GONE);
                                creditBtn.setVisibility(View.GONE);
                            } else if (currentTrip.paymentMethod.contains("Credit")) {
                                creditBtn.setText(AVL_Service.SDPaymentButtonCaptionFor2ndStep);
                                cashBtn.setVisibility(View.GONE);
                                voucherBtn.setVisibility(View.GONE);
                            } else if (currentTrip.paymentMethod.contains("Cash")) {
                                cashBtn.setText(AVL_Service.SDPaymentButtonCaptionFor2ndStep);
                                voucherBtn.setVisibility(View.GONE);
                                creditBtn.setVisibility(View.GONE);
                            }
                        }
                    }
                } else {
                    isPrinted = bluebambooPrinter.print(reciept);
                    if (bMerchantCopyPrinted == true)
                        handlePrinterResp();
                    else {
                        bMerchantCopyPrinted = true;
                        if (currentTrip.TripPayStatus == 2 && Double.parseDouble(Tip) > Double.parseDouble(OldTip)) {
                            creditBtn.setEnabled(true);
                            creditBtn.setText(AVL_Service.SDPaymentButtonCaptionFor2ndStep);
                            creditBtn.performClick();
                        } else {
                            cashBtn.setEnabled(true);
                            creditBtn.setEnabled(true);
                            voucherBtn.setEnabled(true);
                            if (currentTrip.paymentMethod.contains("Voucher")) {
                                voucherBtn.setText(AVL_Service.SDPaymentButtonCaptionFor2ndStep);
                                cashBtn.setVisibility(View.GONE);
                                creditBtn.setVisibility(View.GONE);
                            } else if (currentTrip.paymentMethod.contains("Credit")) {
                                creditBtn.setText(AVL_Service.SDPaymentButtonCaptionFor2ndStep);
                                cashBtn.setVisibility(View.GONE);
                                voucherBtn.setVisibility(View.GONE);
                            } else if (currentTrip.paymentMethod.contains("Cash")) {
                                cashBtn.setText(AVL_Service.SDPaymentButtonCaptionFor2ndStep);
                                voucherBtn.setVisibility(View.GONE);
                                creditBtn.setVisibility(View.GONE);
                            }
                        }
                    }
                }

            } else if (AVL_Service.pref.getBoolean("BluetoothMeter", false)) {
                if (meterType().equalsIgnoreCase("centrodyne")) {
                    if (reciept.length() < 127) {
                        reciept = "2" + reciept + "\n_______";
                        taxiMeterReciept = new PrinterMessage(reciept, meterType());
                        taxiMeterReciept2 = null;
                    } else {
                        int lReceiptLength = reciept.length();
                        int lLastNewLineIndexofFirstReceipt = 0;
                        int lLastNewLineIndexof2ndReceipt = 0;
                        String lReceipt = reciept.substring(0, 127);
                        lLastNewLineIndexofFirstReceipt = lReceipt.lastIndexOf('\n');
                        lReceipt = reciept.substring(0, lLastNewLineIndexofFirstReceipt);
                        lReceipt = "2" + lReceipt + "\n_______";
                        taxiMeterReciept = new PrinterMessage(lReceipt, meterType());
                        // 2nd
                        if (lReceiptLength >= lLastNewLineIndexofFirstReceipt + 128) {
                            lReceipt = reciept.substring(lLastNewLineIndexofFirstReceipt, lLastNewLineIndexofFirstReceipt + 128);
                            lLastNewLineIndexof2ndReceipt = lReceipt.lastIndexOf('\n');
                            lReceipt = reciept.substring(lLastNewLineIndexofFirstReceipt, lLastNewLineIndexofFirstReceipt + lLastNewLineIndexof2ndReceipt);
                            lReceipt = "2" + lReceipt + "\n_______";
                            taxiMeterReciept2 = new PrinterMessage(lReceipt, meterType());
                            // 3rd

                            lReceipt = reciept.substring(lLastNewLineIndexofFirstReceipt + lLastNewLineIndexof2ndReceipt, lReceiptLength);
                            lReceipt = "2" + lReceipt + "\n_______";
                            taxiMeterReciept3 = new PrinterMessage(lReceipt, meterType());
                        } else {
                            lReceipt = reciept.substring(lLastNewLineIndexofFirstReceipt, lReceiptLength);
                            lReceipt = "2" + lReceipt + "\n_______";
                            taxiMeterReciept2 = new PrinterMessage(lReceipt, meterType());
                            taxiMeterReciept3 = new PrinterMessage("2", meterType());
                        }
                    }
                } else if (AVL_Service.pref.getBoolean("VeriFoneDevice", false)) {
                    reciept = "2" + reciept;
                    taxiMeterReciept = new PrinterMessage(reciept, meterType());
                } else {
                    if (reciept.length() < 127) {
                        taxiMeterReciept = new PrinterMessage(reciept, meterType());
                        taxiMeterReciept2 = null;
                    } else {
                        int lReceiptLength = reciept.length();
                        int lLastNewLineIndexofFirstReceipt = 0;
                        int lLastNewLineIndexof2ndReceipt = 0;
                        String lReceipt = reciept.substring(0, 127);
                        lLastNewLineIndexofFirstReceipt = lReceipt.lastIndexOf('\n');
                        lReceipt = reciept.substring(0, lLastNewLineIndexofFirstReceipt);
                        taxiMeterReciept = new PrinterMessage(lReceipt, meterType());
                        // 2nd
                        if (lReceiptLength >= lLastNewLineIndexofFirstReceipt + 128) {
                            lReceipt = reciept.substring(lLastNewLineIndexofFirstReceipt, lLastNewLineIndexofFirstReceipt + 128);
                            lLastNewLineIndexof2ndReceipt = lReceipt.lastIndexOf('\n');
                            lReceipt = reciept.substring(lLastNewLineIndexofFirstReceipt, lLastNewLineIndexofFirstReceipt + lLastNewLineIndexof2ndReceipt);
                            taxiMeterReciept2 = new PrinterMessage(lReceipt, meterType());
                            // 3rd

                            lReceipt = reciept.substring(lLastNewLineIndexofFirstReceipt + lLastNewLineIndexof2ndReceipt, lReceiptLength);
                            taxiMeterReciept3 = new PrinterMessage(lReceipt, meterType());
                        } else {
                            lReceipt = reciept.substring(lLastNewLineIndexofFirstReceipt, lReceiptLength);
                            taxiMeterReciept2 = new PrinterMessage(lReceipt, meterType());
                            taxiMeterReciept3 = new PrinterMessage("", meterType());
                        }
                    }
                }

                if (taxiMeterPrinter != null) {
                    if (taxiMeterPrinter.isConnectionAlive()) {
                        isPrinted = taxiMeterPrinter.write(taxiMeterReciept);
                        if (meterType().equalsIgnoreCase("centrodyne")) {
                            int Printertime = 0;
                            if (taxiMeterReciept2 != null && Printertime == 0) {

                                Date dt = new Date(System.currentTimeMillis());
                                boolean ischeck = true;
                                while (ischeck) {
                                    Date dt2 = new Date(System.currentTimeMillis());
                                    long difference = dt2.getTime() - dt.getTime();
                                    if (difference > 3000)
                                        break;
                                }
                                taxiMeterPrinter.FlushPrinterDataFromBuffer();

                                boolean is2nd = taxiMeterPrinter.write(taxiMeterReciept2);
                                if (is2nd) {
                                    taxiMeterReciept2 = null;
                                    Printertime = 1;
                                }

                            }
                            if (taxiMeterReciept3 != null && taxiMeterReciept2 == null && Printertime == 1) {

                                Date dt1 = new Date(System.currentTimeMillis());
                                boolean ischeck1 = true;
                                while (ischeck1) {
                                    Date dt2 = new Date(System.currentTimeMillis());
                                    long difference = dt2.getTime() - dt1.getTime();
                                    if (difference > 3000)
                                        break;
                                }
                                taxiMeterPrinter.FlushPrinterDataFromBuffer();

                                boolean is3rd = taxiMeterPrinter.write(taxiMeterReciept3);
                                if (is3rd) {
                                    taxiMeterReciept3 = null;
                                    Printertime = 0;
                                }

                            }
                        }
                        if (bMerchantCopyPrinted == true)
                            handlePrinterResp();
                        else {
                            bMerchantCopyPrinted = true;
                            if (currentTrip.TripPayStatus == 2 && Double.parseDouble(Tip) > Double.parseDouble(OldTip)) {
                                creditBtn.setEnabled(true);
                                creditBtn.setText(AVL_Service.SDPaymentButtonCaptionFor2ndStep);
                                creditBtn.performClick();
                            } else {
                                cashBtn.setEnabled(true);
                                creditBtn.setEnabled(true);
                                voucherBtn.setEnabled(true);
                                if (currentTrip.paymentMethod.contains("Voucher")) {
                                    voucherBtn.setText(AVL_Service.SDPaymentButtonCaptionFor2ndStep);
                                    cashBtn.setVisibility(View.GONE);
                                    creditBtn.setVisibility(View.GONE);
                                } else if (currentTrip.paymentMethod.contains("Credit")) {
                                    creditBtn.setText(AVL_Service.SDPaymentButtonCaptionFor2ndStep);
                                    cashBtn.setVisibility(View.GONE);
                                    voucherBtn.setVisibility(View.GONE);
                                } else if (currentTrip.paymentMethod.contains("Cash")) {
                                    cashBtn.setText(AVL_Service.SDPaymentButtonCaptionFor2ndStep);
                                    voucherBtn.setVisibility(View.GONE);
                                    creditBtn.setVisibility(View.GONE);
                                }
                            }
                        }
                    } else
                        showPrinterDialog();
                } else if (Meter != null && Meter.isConnectionAlive()) {
                    taxiMeterPrinter = Meter;
                    taxiPrinter = taxiMeter;
                    AVL_Service.pref.edit().putString("PrinterAddress", AVL_Service.pref.getString("MeterAddress", "")).commit();
                    isPrinted = taxiMeterPrinter.write(taxiMeterReciept);
                    if (meterType().equalsIgnoreCase("centrodyne")) {
                        int Printertime = 0;
                        if (taxiMeterReciept2 != null && Printertime == 0) {

                            Date dt = new Date(System.currentTimeMillis());
                            boolean ischeck = true;
                            while (ischeck) {
                                Date dt2 = new Date(System.currentTimeMillis());
                                long difference = dt2.getTime() - dt.getTime();
                                if (difference > 3000)
                                    break;
                            }
                            taxiMeterPrinter.FlushPrinterDataFromBuffer();

                            boolean is2nd = taxiMeterPrinter.write(taxiMeterReciept2);
                            if (is2nd) {
                                taxiMeterReciept2 = null;
                                Printertime = 1;
                            }

                        }
                        if (taxiMeterReciept3 != null && taxiMeterReciept2 == null && Printertime == 1) {

                            Date dt1 = new Date(System.currentTimeMillis());
                            boolean ischeck1 = true;
                            while (ischeck1) {
                                Date dt2 = new Date(System.currentTimeMillis());
                                long difference = dt2.getTime() - dt1.getTime();
                                if (difference > 3000)
                                    break;
                            }
                            taxiMeterPrinter.FlushPrinterDataFromBuffer();

                            boolean is3rd = taxiMeterPrinter.write(taxiMeterReciept3);
                            if (is3rd) {
                                taxiMeterReciept3 = null;
                                Printertime = 0;
                            }

                        }
                    }

                    if (bMerchantCopyPrinted == true)
                        handlePrinterResp();
                    else {
                        bMerchantCopyPrinted = true;
                        if (currentTrip.TripPayStatus == 2 && tip > 0) {
                            creditBtn.performClick();
                        } else {
                            cashBtn.setEnabled(true);
                            creditBtn.setEnabled(true);
                            voucherBtn.setEnabled(true);
                            if (currentTrip.paymentMethod.contains("Voucher")) {
                                voucherBtn.setText(AVL_Service.SDPaymentButtonCaptionFor2ndStep);
                                cashBtn.setVisibility(View.GONE);
                                creditBtn.setVisibility(View.GONE);
                            } else if (currentTrip.paymentMethod.contains("Credit")) {
                                creditBtn.setText(AVL_Service.SDPaymentButtonCaptionFor2ndStep);
                                cashBtn.setVisibility(View.GONE);
                                voucherBtn.setVisibility(View.GONE);
                            } else if (currentTrip.paymentMethod.contains("Cash")) {
                                cashBtn.setText(AVL_Service.SDPaymentButtonCaptionFor2ndStep);
                                voucherBtn.setVisibility(View.GONE);
                                creditBtn.setVisibility(View.GONE);
                            }
                        }
                    }
                } else
                    showPrinterDialog();
            } else {
                isPrinted = true;
                bMerchantCopyPrinted = true;
                handlePrinterResp();
            }

        } catch (Exception e) {
            handleException("[Exception in printing receipt]" + "[PrintReceipt]" + "[" + e.getLocalizedMessage() + "]");
        }
    }
    /*--------------------------------------------------------------receivedTurnONGPS---------------------------------------------------------------*/
    @Override
    public void receivedTurnONGPS() {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.turnGPSON).sendToTarget();
    }

    /*--------------------------------------------------------------handleTurnONGPS-----------------------------------------------------------------*/
    private void handleTurnONGPS() {
        if (enableGPSDialog == null || !enableGPSDialog.isShowing())
            try {
                final Intent intent = new Intent(getApplicationContext(), TaxiPlexer.class); // Updated, if driver was dangling on device, it will redirects to started
                // Application
                intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP); // and enforce it to enable GPS
                startActivity(intent);

                if (TaxiPlexer.SHOW_GPS_PAGE == false)
                    TaxiPlexer.SHOW_GPS_PAGE = true;

                enableGPSDialog = new AlertDialog.Builder(TaxiPlexer.this)
                        .setIcon(android.R.drawable.ic_dialog_alert)
                        .setTitle(Farsi.Convert(getResources().getString(R.string.EnableGPS)))
                        .setMessage(Farsi.Convert(getResources().getString(R.string.PleaseEnableGPS)))
                        .setPositiveButton(Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {

                            @Override
                            public void onClick(DialogInterface dialog, int which) {

                                startActivityForResult(new Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS), 0);

                            } // onClick

                        })
                        .setCancelable(false)
                        .show(); // updated so, it must enable GPS

                // setNegativeButton("Cancel", null)
            } catch (Exception ex) {
                LogException("[Exception in handleTurnONGPS]" + "[handleTurnONGPS]" + "[" + ex.getLocalizedMessage() + "]");
            }
    }

    /*--------------------------------------------------------------received ZFT--------------------------------------------------------------------*/
    @Override
    public void receivedZFT(String[] rows) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.ZFT, rows).sendToTarget();
    }

    /*--------------------------------------------------------------handleZoneFareTaxi--------------------------------------------------------------*/
    @SuppressWarnings("deprecation")
    @SuppressLint("NewApi")
    private void handleZoneFareTaxi(String[] msg) {

        try {
            tempZoneFareTaxi = msg;
            if (!state.equalsIgnoreCase(States.DROPPED)) {

                try {
                    // zonePanel = null;
                    // if (zonePanel == null)
                    // tabHost.setCurrentTab(ZoneIndex);
                    if (zonePanel != null) {
                        zonePanel.removeAllViews();

                        array.clear();
                        // Updated, making 2D Array to send it for sorting
                        for (int row = 0; row < msg.length; row++)
                            array.add(msg[row].split("\\" + Character.toString(Constants.COLSEPARATOR)));

                        // Label clicked state
                        if (fareclicked)
                            fareSort();
                        else if (array.get(0)[1].contains("$"))
                            for (int row = 0; row < msg.length; row++)
                                zonePanel.addView(addZone(array.get(row)[0], (array.get(row)[1]).split("\\%"), array.get(row)[2], array.get(row)[3]));
                        else
                            for (int row = 0; row < msg.length; row++)
                                zonePanel.addView(addZone(array.get(row)[0], array.get(row)[1], array.get(row)[2], array.get(row)[3], Double.valueOf(array.get(row)[4]), Double
                                        .valueOf(array.get(row)[5])));

                        for (int i = 0; i < zonePanel.getChildCount(); i++) {
                            if (((String) ((TextView) zonePanel.getChildAt(i).findViewById(ID.ZoneLbl)).getText()).equalsIgnoreCase((bookedZone))) {
                                if (!bookedStand.contains("None")) {
                                    drawable = ((Button) zonePanel.getChildAt(i).findViewById(ID.StandBtn)).getBackground();
                                    drawable.setColorFilter(Color.YELLOW, Mode.SRC_IN);
                                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                                        ((Button) zonePanel.getChildAt(i).findViewById(ID.StandBtn)).setBackground(drawable);
                                    else
                                        ((Button) zonePanel.getChildAt(i).findViewById(ID.StandBtn)).setBackgroundDrawable(drawable);

                                    zonePanel.recomputeViewAttributes(zonePanel.getChildAt(i).findViewById(ID.StandBtn));
                                }

                                // change by hamza
                                drawable = ((Button) zonePanel.getChildAt(i).findViewById(ID.ZoneBtn)).getBackground();
                                drawable.setColorFilter(Color.YELLOW, Mode.SRC_IN);

                                drawable1 = ((Button) zonePanel.getChildAt(i).findViewById(ID.StandBtn)).getBackground();
                                drawable1.setColorFilter(Color.YELLOW, Mode.SRC_IN);

                                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN) {
                                    ((Button) zonePanel.getChildAt(i).findViewById(ID.ZoneBtn)).setBackground(drawable);
                                    ((Button) zonePanel.getChildAt(i).findViewById(ID.StandBtn)).setBackground(drawable1);
                                } else {
                                    ((Button) zonePanel.getChildAt(i).findViewById(ID.ZoneBtn)).setBackgroundDrawable(drawable);
                                    ((Button) zonePanel.getChildAt(i).findViewById(ID.StandBtn)).setBackgroundDrawable(drawable1);
                                }

                                ((TextView) zonePanel.getChildAt(i).findViewById(ID.ZoneLbl)).setTextColor(Color.YELLOW);
                                zonePanel.recomputeViewAttributes(zonePanel.getChildAt(i).findViewById(ID.ZoneBtn));

                                final int count = i;

                                // Toast.makeText(TaxiPlexer.this, String.valueOf(x) + String.valueOf(count * y), Toast.LENGTH_LONG).show();
                                scrollPanelzone.post(new Runnable() {
                                    public void run() {
                                        try {
                                            scrollPanelzone.scrollTo(zonePanel.getChildAt(count).getLeft(), (count) * zonePanel.getChildAt(count).getHeight());
                                        } catch (Exception e){

                                        }
                                    }
                                });

                            } else if (((String) ((TextView) zonePanel.getChildAt(i).findViewById(ID.ZoneLbl)).getText()).equalsIgnoreCase((avlZone)) && (bookedZone.equalsIgnoreCase("Unknown") || bookedZone.equalsIgnoreCase("0") || bookedZone.equalsIgnoreCase("None") || bookedZone.equalsIgnoreCase("UnKWN"))) {

                                drawable = ((Button) zonePanel.getChildAt(i).findViewById(ID.ZoneBtn)).getBackground();
                                drawable.setColorFilter(Color.YELLOW, Mode.SRC_IN);

                                drawable1 = ((Button) zonePanel.getChildAt(i).findViewById(ID.StandBtn)).getBackground();
                                drawable1.setColorFilter(Color.YELLOW, Mode.SRC_IN);

                                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN) {
                                    ((Button) zonePanel.getChildAt(i).findViewById(ID.ZoneBtn)).setBackground(drawable);
                                    ((Button) zonePanel.getChildAt(i).findViewById(ID.StandBtn)).setBackground(drawable1);
                                } else {
                                    ((Button) zonePanel.getChildAt(i).findViewById(ID.ZoneBtn)).setBackgroundDrawable(drawable);
                                    ((Button) zonePanel.getChildAt(i).findViewById(ID.StandBtn)).setBackgroundDrawable(drawable1);
                                }

                                ((TextView) zonePanel.getChildAt(i).findViewById(ID.ZoneLbl)).setTextColor(Color.YELLOW);
                                zonePanel.recomputeViewAttributes(zonePanel.getChildAt(i).findViewById(ID.ZoneBtn));

                                final int count = i;

                                // Toast.makeText(TaxiPlexer.this, String.valueOf(x) + String.valueOf(count * y), Toast.LENGTH_LONG).show();
                                scrollPanelzone.post(new Runnable() {
                                    public void run() {
                                        try {
                                            scrollPanelzone.scrollTo(zonePanel.getChildAt(count).getLeft(), (count) * zonePanel.getChildAt(count).getHeight());
                                        } catch (Exception e){

                                        }
                                    }
                                });

                            } else if (((String) ((TextView) zonePanel.getChildAt(i).findViewById(ID.ZoneLbl)).getText()).equalsIgnoreCase((lastBookedZone))) {
                                if (bookedStand.equalsIgnoreCase("None")) {
                                    // change by hamza
                                    drawable = ((Button) zonePanel.getChildAt(i).findViewById(ID.StandBtn)).getBackground();
                                    // drawable.setColorFilter(Color.WHITE, Mode.SRC_IN);
                                    drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), Mode.SRC_IN);
                                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                                        ((Button) zonePanel.getChildAt(i).findViewById(ID.StandBtn)).setBackground(drawable);
                                    else
                                        ((Button) zonePanel.getChildAt(i).findViewById(ID.StandBtn)).setBackgroundDrawable(drawable);

                                    zonePanel.recomputeViewAttributes(zonePanel.getChildAt(i).findViewById(ID.StandBtn));
                                }
                                drawable = ((Button) zonePanel.getChildAt(i).findViewById(ID.ZoneBtn)).getBackground();
                                // drawable.setColorFilter(Color.WHITE, Mode.SRC_IN);
                                drawable.setColorFilter(Color.parseColor(AVL_Service.HEXColor), Mode.SRC_IN);

                                // change by hamza
                                drawable1 = ((Button) zonePanel.getChildAt(i).findViewById(ID.StandBtn)).getBackground();
                                drawable1.setColorFilter(Color.parseColor(AVL_Service.HEXColor), Mode.SRC_IN);
                                // end

                                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN) {
                                    ((Button) zonePanel.getChildAt(i).findViewById(ID.ZoneBtn)).setBackground(drawable);
                                    ((Button) zonePanel.getChildAt(i).findViewById(ID.StandBtn)).setBackground(drawable1);
                                } else {
                                    ((Button) zonePanel.getChildAt(i).findViewById(ID.ZoneBtn)).setBackgroundDrawable(drawable);
                                    ((Button) zonePanel.getChildAt(i).findViewById(ID.StandBtn)).setBackgroundDrawable(drawable1);
                                }

                                ((TextView) zonePanel.getChildAt(i).findViewById(ID.ZoneLbl)).setTextColor(Color.LTGRAY);
                                zonePanel.recomputeViewAttributes(zonePanel.getChildAt(i).findViewById(ID.ZoneBtn));
                            }
                        }// for
                        zonePanel.refreshDrawableState();
                        lastUpdated = System.currentTimeMillis();
                        lastUpdated_MWall = System.currentTimeMillis();
                    }
                    if(AVL_Service.SDOnlyNearZoneMode) {
                        NearByZoneButton.performClick();
                        NearByAllZones = true;
                    }
                } catch (Exception e) {
                    handleException("[Exception in handleZoneFareTaxi]" + "[handleZoneFareTaxi]" + "[" + e.getLocalizedMessage() + "]");
                }
            }// if

            hideProgressDialog();

        } catch (Exception ex) {
            LogException(ex.toString());
        }
    }

    /*--------------------------------------------------------------faresort(updated)---------------------------------------------------------------*/
    private void fareSort() {
        try {
            fare.setTextColor(Color.YELLOW);
            // drawable = bookAVLButton.getBackground();
            // drawable.setColorFilter(Color.WHITE, Mode.SRC_IN);
            fare.setText("\u2191" + Farsi.Convert(getResources().getString(R.string.FareVehicle)));

            if (fareclicked)
                Collections.sort(array, new Comparator<String[]>() {
                    @Override
                    public int compare(String[] zft_row1, String[] zft_row2) {
                        int fareRow1 = Integer.parseInt(zft_row1[2]);
                        int fareRow2 = Integer.parseInt(zft_row2[2]);

                        if (fareRow2 == fareRow1)
                            return 0;
                        else if (fareRow2 > fareRow1)
                            return 1;
                        else if (fareRow2 < fareRow1)
                            return -1;
                        return 0;
                    }
                });
            else {
                Collections.sort(array, new Comparator<String[]>() {
                    @Override
                    public int compare(String[] zft_row1, String[] zft_row2) {
                        return zft_row1[0].compareTo(zft_row2[0]);
                    }
                });
                fare.setText(Farsi.Convert(getResources().getString(R.string.FareVehicle)));
                fare.setTextColor(Color.WHITE);
            }

            zonePanel.removeAllViews();

            if (array.get(0)[1].contains("$"))
                for (int row = 0; row < array.size(); row++)
                    zonePanel.addView(addZone(array.get(row)[0], (array.get(row)[1]).split("\\%"), array.get(row)[2], array.get(row)[3]));

            else
                for (int row = 0; row < array.size(); row++)
                    zonePanel.addView(addZone(array.get(row)[0], array.get(row)[1], array.get(row)[2], array.get(row)[3], Double.valueOf(array.get(row)[4]), Double.valueOf(array.get(row)[5])));

            // for (int row = 0; row < array.size(); row++) {
            // zonePanel.addView(addZone(array.get(row)[0], array.get(row)[1].split("%"), array.get(row)[2], array.get(row)[3]));// , Double.valueOf(array.get(row)[4]),
            // // Double.valueOf(array.get(row)[5])));
            // }

        } catch (Exception ex) {
            LogException("[Exception in sorting fare taxi in zone list]" + "[fareSort]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }

    /*--------------------------------------------------------------SetAllZones---------------------------------------------------------------*/
    private void SetAllZones() {
        try {
            zonePanel.removeAllViews();

            if (array.get(0)[1].contains("$"))
                for (int row = 0; row < array.size(); row++)
                    zonePanel.addView(addZone(array.get(row)[0], (array.get(row)[1]).split("\\%"), array.get(row)[2], array.get(row)[3]));

            else
                for (int row = 0; row < array.size(); row++)
                    zonePanel.addView(addZone(array.get(row)[0], array.get(row)[1], array.get(row)[2], array.get(row)[3], Double.valueOf(array.get(row)[4]), Double.valueOf(array.get(row)[5])));

            SetBookedZoneBackground();
        } catch (Exception ex) {
            LogException("[Exception in setting zone on zone panel]" + "[SetAllZones]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }

    /*--------------------------------------------------------------SetNearByZone---------------------------------------------------------------*/
    private void SetNearByZone(String pNearByZone) {
        try {
            String[] tempZones = pNearByZone.split(", ");
            if (tempZones.length > 0) {
                zonePanel.removeAllViews();

                if (array.get(0)[1].contains("$")) {
                    for (int lZone = 0; lZone < tempZones.length; lZone++)
                        for (int row = 0; row < array.size(); row++) {
                            if (tempZones[lZone].toString().trim().equalsIgnoreCase(array.get(row)[0].toString().trim())) {
                                zonePanel.addView(addZone(array.get(row)[0], (array.get(row)[1]).split("\\%"), array.get(row)[2], array.get(row)[3]));
                                break;
                            }
                        }
                }

                else {
                    for (int lZone = 0; lZone < tempZones.length; lZone++)
                        for (int row = 0; row < array.size(); row++) {
                            if (tempZones[lZone].toString().trim().equalsIgnoreCase(array.get(row)[0].toString().trim())) {
                                zonePanel.addView(addZone(array.get(row)[0], array.get(row)[1], array.get(row)[2], array.get(row)[3], Double.valueOf(array.get(row)[4]), Double
                                        .valueOf(array.get(row)[5])));
                                break;
                            }
                        }
                }
            }

            SetBookedZoneBackground();
        } catch (Exception ex) {
            LogException("[Exception in setting near by zone ]" + "[SetNearByZone]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }

    /*------------------------------------------------------SetBookedZoneBackground---------------------------------------------------------------*/
    @SuppressWarnings("deprecation")
    @SuppressLint("NewApi")
    private void SetBookedZoneBackground() {
        try {
            for (int i = 0; i < zonePanel.getChildCount(); i++) {
                if (((String) ((TextView) zonePanel.getChildAt(i).findViewById(ID.ZoneLbl)).getText()).equalsIgnoreCase((bookedZone))) {
                    if (!bookedStand.contains("None")) {
                        drawable = ((Button) zonePanel.getChildAt(i).findViewById(ID.StandBtn)).getBackground();
                        drawable.setColorFilter(Color.YELLOW, Mode.SRC_IN);
                        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                            ((Button) zonePanel.getChildAt(i).findViewById(ID.StandBtn)).setBackground(drawable);
                        else
                            ((Button) zonePanel.getChildAt(i).findViewById(ID.StandBtn)).setBackgroundDrawable(drawable);

                        zonePanel.recomputeViewAttributes(zonePanel.getChildAt(i).findViewById(ID.StandBtn));
                    }
                    drawable = ((Button) zonePanel.getChildAt(i).findViewById(ID.ZoneBtn)).getBackground();
                    drawable.setColorFilter(Color.YELLOW, Mode.SRC_IN);
                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                        ((Button) zonePanel.getChildAt(i).findViewById(ID.ZoneBtn)).setBackground(drawable);
                    else
                        ((Button) zonePanel.getChildAt(i).findViewById(ID.ZoneBtn)).setBackgroundDrawable(drawable);

                    ((TextView) zonePanel.getChildAt(i).findViewById(ID.ZoneLbl)).setTextColor(Color.YELLOW);
                    zonePanel.recomputeViewAttributes(zonePanel.getChildAt(i).findViewById(ID.ZoneBtn));
                } else if (((String) ((TextView) zonePanel.getChildAt(i).findViewById(ID.ZoneLbl)).getText()).equalsIgnoreCase((lastBookedZone))) {
                    if (bookedStand.equalsIgnoreCase("None")) {
                        drawable = ((Button) zonePanel.getChildAt(i).findViewById(ID.StandBtn)).getBackground();
                        drawable.setColorFilter(Color.WHITE, Mode.SRC_IN);
                        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                            ((Button) zonePanel.getChildAt(i).findViewById(ID.StandBtn)).setBackground(drawable);
                        else
                            ((Button) zonePanel.getChildAt(i).findViewById(ID.StandBtn)).setBackgroundDrawable(drawable);

                        zonePanel.recomputeViewAttributes(zonePanel.getChildAt(i).findViewById(ID.StandBtn));
                    }
                    drawable = ((Button) zonePanel.getChildAt(i).findViewById(ID.ZoneBtn)).getBackground();
                    drawable.setColorFilter(Color.WHITE, Mode.SRC_IN);
                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                        ((Button) zonePanel.getChildAt(i).findViewById(ID.ZoneBtn)).setBackground(drawable);
                    else
                        ((Button) zonePanel.getChildAt(i).findViewById(ID.ZoneBtn)).setBackgroundDrawable(drawable);

                    ((TextView) zonePanel.getChildAt(i).findViewById(ID.ZoneLbl)).setTextColor(Color.LTGRAY);
                    zonePanel.recomputeViewAttributes(zonePanel.getChildAt(i).findViewById(ID.ZoneBtn));
                }
            }// for
        } catch (Exception ex) {
            LogException("[Exception in changing back ground of booked zone]" + "[SetBookedZoneBackground]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }

    /*--------------------------------------------------------------received Manifest---------------------------------------------------------------*/
    @Override
    public void receivedManifest(String manifest) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.Manifest, manifest).sendToTarget();

    }

    /*--------------------------------------------------------------handleManifest------------------------------------------------------------------*/
    private void handleManifest(String msg) {
        try {
            manifestSound.start();
            String[] manifest = msg.split(Character.toString(Constants.BODYSEPARATOR));
            String[] header = manifest[0].split("\\" + Character.toString(Constants.COLSEPARATOR));
            final String destinationID = header[2]; // getting the SourceID from recieved Packet

            // manifest[1] = manifestNumber~StartZone~EndZone~StartTime~EndTime
            manifest = manifest[1].split("\\" + Character.toString(Constants.ROWSEPARATOR));
            manifestNumber = manifest[0];
            long ValidityTime = 40;
            if (manifest.length > 5) {
                try {
                    ValidityTime = Long.valueOf(manifest[5]);
                    if (ValidityTime <= 0)
                        ValidityTime = 40;
                } catch (Exception ex) {
                    ValidityTime = 40;
                }
            }
            final AlertDialog this_manifestDialog;
            if (manifestDialog != null)
                if (manifestDialog.isShowing())
                    manifestDialog.dismiss();
            if (!AVL_Service.SDShowProceedToPickupOnTripOffer) {
                this_manifestDialog = manifestDialog = new AlertDialog.Builder(TaxiPlexer.this).setIcon(android.R.drawable.ic_dialog_alert).setTitle(
                        Farsi.Convert(getResources().getString(R.string.Manifest_Assignment))).setMessage(
                        Farsi.Convert(getResources().getString(R.string.Manifest_Start_Zone)) + " :"
                                + manifest[1]
                                + "\n"
                                + Farsi.Convert(getResources().getString(R.string.Manifest_End_Zone))
                                + " :"
                                + manifest[2]
                                + "\n\n"
                                + Farsi.Convert(getResources().getString(R.string.Manifest_Start_Time))
                                + " :"
                                + manifest[3]
                                + "\n\n"
                                + Farsi.Convert(getResources().getString(R.string.Manifest_End_Time))
                                + " :"
                                + manifest[4]).setPositiveButton(Farsi.Convert(getResources().getString(R.string.Accept)), new DialogInterface.OnClickListener() {

                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                + AVL_Service.pref.getString("LastLongitude", "0")
                                + Constants.COLSEPARATOR
                                + manifestNumber
                                + Constants.COLSEPARATOR
                                + States.ACCEPTED, destinationID, MsgType.ManifestResponse, AckType.NEW, MsgValidity.Short, MsgPriority.Normal);

                        if (tripAdapter == null)
                            tabHost.setCurrentTab(TripIndex);
                        // manifestNum.setText(manifestNumber);
                    } // onClick
                }).setNegativeButton(Farsi.Convert(getResources().getString(R.string.Decline)), new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                + AVL_Service.pref.getString("LastLongitude", "0")
                                + Constants.COLSEPARATOR
                                + manifestNumber
                                + Constants.COLSEPARATOR
                                + States.REJECTED, destinationID, MsgType.ManifestResponse, AckType.NEW, MsgValidity.Short, MsgPriority.Normal);
                    } // onClick
                }).show();
            } else {
                this_manifestDialog = manifestDialog = new AlertDialog.Builder(TaxiPlexer.this).setIcon(android.R.drawable.ic_dialog_alert).setTitle(
                        Farsi.Convert(getResources().getString(R.string.Manifest_Assignment))).setMessage(
                        Farsi.Convert(getResources().getString(R.string.Manifest_Start_Zone)) + " :"
                                + manifest[1]
                                + "\n"
                                + Farsi.Convert(getResources().getString(R.string.Manifest_End_Zone))
                                + " :"
                                + manifest[2]
                                + "\n\n"
                                + Farsi.Convert(getResources().getString(R.string.Manifest_Start_Time))
                                + " :"
                                + manifest[3]
                                + "\n\n"
                                + Farsi.Convert(getResources().getString(R.string.Manifest_End_Time))
                                + " :"
                                + manifest[4]).setPositiveButton(R.string.ProceedToPickup, new DialogInterface.OnClickListener() {

                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                + AVL_Service.pref.getString("LastLongitude", "0")
                                + Constants.COLSEPARATOR
                                + manifestNumber
                                + Constants.COLSEPARATOR
                                + States.ACCEPTED, destinationID, MsgType.ManifestResponse, AckType.NEW, MsgValidity.Short, MsgPriority.Normal);

                        if (tripAdapter == null)
                            tabHost.setCurrentTab(TripIndex);
                        // manifestNum.setText(manifestNumber);
                    } // onClick
                }).show();
            }

            ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
            scheduler.schedule(new Runnable() {

                @Override
                public void run() {
                    if (this_manifestDialog.isShowing()) {

                        serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                + AVL_Service.pref.getString("LastLongitude", "0")
                                + Constants.COLSEPARATOR
                                + manifestNumber
                                + Constants.COLSEPARATOR
                                + States.REJECTED, destinationID, MsgType.ManifestResponse, AckType.NEW, MsgValidity.Short, MsgPriority.Normal);
                        this_manifestDialog.dismiss();
                    }
                }
            }, ValidityTime, TimeUnit.SECONDS);
        } catch (Exception e) {
            handleException("[Exception in handleManifest]" + "[handleManifest]" + "[" + e.getLocalizedMessage() + "]" + msg);

            serviceHandle.sendMessageToServer("", "SDHS", MsgType.ManifestReq, AckType.NEW, MsgValidity.Medium, MsgPriority.AboveNormal);
        }
    }

    /*--------------------------------------------------------------invalidServerIP-----------------------------------------------------------------*/
    @Override
    public void invalidServerIP(String invalidIP) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.invalidIP, invalidIP).sendToTarget();

    }

    /*--------------------------------------------------------------handleInvalidServerIP-----------------------------------------------------------*/
    private void handleInvalidServerIP(String msg) {
        Toast.makeText(getApplicationContext(), msg, Toast.LENGTH_LONG).show();
        showDialog(SERVERS);
    }

    /*--------------------------------------------------------------handleInvalidServerIP-----------------------------------------------------------*/
    private void handleEnableLoginBtn(Boolean value) {
        try {
            if (value) {
                if (loginView == null) {
                    loginView = createLoginView();
                }
                setContentView(loginView);
                currentView = loginView;
            } else {
                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                    btnLogin.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                    btnLogin.setText(R.string.handshake);
                } else
                    btnLogin.setText(Farsi.Convert(getResources().getString(R.string.handshake)));
            }
            // btnLogin.setEnabled(value);
        } catch (Exception ex) {
            LogException("[Exception in enabling login button]" + "[handleEnableLoginBtn]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }

    /*--------------------------------------------------------------receivedAppUpdate---------------------------------------------------------------*/
    @Override
    public void receivedAppUpdate(String appUpdate) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.newAppOnServer, appUpdate).sendToTarget();

    }

    /*--------------------------------------------------------------handleAppUpdate-----------------------------------------------------------------*/
    private void handleAppUpdate(String msg) {
        try {
            final String msgUpdate = msg;
            Toast.makeText(getApplicationContext(), msgUpdate.split("\\$")[0], Toast.LENGTH_LONG).show();
            AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
            builder
                    .setIcon(android.R.drawable.ic_dialog_alert)
                    .setTitle(Farsi.Convert(getResources().getString(R.string.SoftwareUpdateNotification)))
                    .setMessage(msgUpdate.split("\\$")[0])
                    .setPositiveButton(Farsi.Convert(getResources().getString(R.string.UpdateNow)), new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {

                            try {

                                if (msgUpdate.contains(".apk"))
                                    new DownloadFilesTask().execute(msgUpdate.split("\\$")[1].trim());
                                else {
                                    Intent intent = new Intent(Intent.ACTION_VIEW);
                                    intent.setData(Uri.parse(msgUpdate.split("\\$")[1].trim()));
                                    startActivity(intent);
                                    // uninstallation
                                    Uri packageURI = Uri.parse("package:" + CabDispatch.PACKAGE_NAME);
                                    Intent uninstallIntent = new Intent(Intent.ACTION_DELETE, packageURI);
                                    startActivity(uninstallIntent); // with new one
                                }

                            } catch (Exception e) {
                                handleException("TaxiPlexer: handleAppUpdate()| Bad Update Link " + msgUpdate.split("\\$")[1].trim());
                            }
                        } // onClick

                    })
                    .setNegativeButton(Farsi.Convert(getResources().getString(R.string.UpdateLater)), new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {

                            Message lmsg = new Message();
                            lmsg.obj = msgUpdate;
                            lmsg.what = MsgType.Reminder;
                            msgHandler.sendMessageDelayed(lmsg, 60000);

                        } // onClick

                    });
            AlertDialog alert = builder.create();
            alert.show();

            dialogFontSize(alert);
        } catch (Exception ex) {
            LogException("[Exception in updating application]" + "[handleAppUpdate]" + "[" + ex.getLocalizedMessage() + "]" + msg);
        }

    }

    /*--------------------------------------------------------------handleReminder------------------------------------------------------------------*/
    protected void handleReminder(final String msg) {
        try {
            AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
            builder
                    .setIcon(android.R.drawable.ic_dialog_alert)
                    .setTitle(Farsi.Convert(getResources().getString(R.string.SoftwareUpdateNotification)))
                    .setMessage(msg.split("\\$")[0])
                    .setPositiveButton(Farsi.Convert(getResources().getString(R.string.RestartNow)), new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {

                            Intent intent = new Intent(getApplicationContext(), TaxiPlexer.class);
                            intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
                            PendingIntent pendingIntent = PendingIntent.getActivity(getApplicationContext(), 0, intent, 0);
                            AlarmManager mgr = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
                            mgr.set(AlarmManager.RTC, System.currentTimeMillis() + 2000, pendingIntent);
                            logoff_Quit(Farsi.Convert(getResources().getString(R.string.ShuttingDown)));
                        } // onClick

                    })
                    .setNegativeButton(Farsi.Convert(getResources().getString(R.string.RemindLater)), new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {

                            Message lmsg = new Message();
                            lmsg.obj = msg;
                            lmsg.what = MsgType.Reminder;
                            msgHandler.sendMessageDelayed(lmsg, 60000);

                        } // onClick

                    });
            AlertDialog alert = builder.create();
            alert.show();

            dialogFontSize(alert);
        } catch (Exception ex) {
            LogException("[Exception in reminder of app update]" + "[handleReminder]" + "[" + ex.getLocalizedMessage() + "]" + msg);
        }

    }

    /*--------------------------------------------------------------handleTabberClick-----------------------------------------------------------------*/
    public void handleTabberClick() {

        SetApplicationLocal();
        mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
        try {
            if (_isLoggedInOnce) {
                new Thread(new Runnable() {

                    @Override
                    public void run() {
                        runOnUiThread(new Runnable() {
                            public void run() {

                                if (connectionMeterProgress == null) {
                                    connectionMeterProgress = ProgressDialog.show(TaxiPlexer.this, "", "Connecting to Meter. . .");
                                    connectionMeterProgress.setCancelable(false);
                                    connectionMeterProgress.setCanceledOnTouchOutside(false);
                                }
                            }
                        });
                        if (AVL_Service.pref.getBoolean("BluetoothMeter", false)) {
                            if (Meter == null) {
                                if (connectToMeter(AVL_Service.pref.getString("MeterAddress", ""))) {
                                    // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.ConnectiontoMeterSuccessfull)),
                                    // Toast.LENGTH_SHORT).show();
                                    if (!pairingrequest) {
                                        runOnUiThread(new Runnable() {
                                            public void run() {
                                                showToastMessage(R.string.ConnectiontoMeterSuccessfull);
                                                tvTaxiMeter.setText(Farsi.Convert(getResources().getString(R.string.Connected)));
                                                tvTaxiMeter.setTextColor(Color.GREEN);
                                                curr_MeterState = getResources().getString(R.string.Connected);
                                                tvTaxiMeter.setText(Farsi.Convert(getResources().getString(R.string.Connected)));// Azhar
                                                // ConnectToMeter.setEnabled(false);
                                                ConnectToMeter.setVisibility(Button.GONE);

                                                if (AVL_Service.pref.getString("MeterAddress", "").equalsIgnoreCase(AVL_Service.pref.getString("PrinterAddress", ""))) {
                                                    taxiMeterPrinter = Meter;
                                                    taxiPrinter = taxiMeter;
                                                }
                                                tabHost.getTabWidget().getChildAt(ZoneIndex).requestFocusFromTouch();
                                            }
                                        });
                                    }

                                    // msgHandler.sendMessageDelayed(msgHandler.obtainMessage(MsgType.connectVivotech), 1000);
                                } else if (AVL_Service.pref.getString("MeterAddress", "").trim().length() < 17) {
                                    runOnUiThread(new Runnable() {
                                        public void run() {

                                            showMeterDialog();
                                        }
                                    });
                                } else {
                                    // showToastMessage("Meter Not Found with MAC Address " + AVL_Service.pref.getString("MeterAddress", ""));
                                    if (!pairingrequest)
                                        runOnUiThread(new Runnable() {
                                            public void run() {

                                                Toast.makeText(TaxiPlexer.this, "Meter Not Found with MAC Address " + AVL_Service.pref.getString("MeterAddress", ""), Toast.LENGTH_LONG).show();
                                            }
                                        });
                                    if (!pairingrequest) {
                                        if (Meter != null) {
                                            Meter.cancel();
                                            Meter = null;
                                        }
                                        if (taxiMeterPrinter != null) {
                                            taxiMeterPrinter.cancel();
                                            taxiMeterPrinter = null;
                                        }
                                    }
                                }

                            } else {
                                runOnUiThread(new Runnable() {
                                    public void run() {
                                        ConnectToMeter.setVisibility(Button.GONE);
                                    }
                                });
                                long CurrentTime = System.currentTimeMillis();
                                boolean isDisConnected = false;
                                isDisConnected = (AVL_Service.pref.getBoolean("VeriFoneDevice", false) && IsVerifoneCMD8Received && ((CurrentTime - VerifoneCMD8LastTime) > (AVL_Service.pref.getLong(
                                        "HeartBeatTimer",
                                        10000) * 3)));
                                if (isDisConnected) {

                                    if (Meter != null) {
                                        Meter.cancel();
                                        Meter = null;
                                    }
                                    if (taxiMeterPrinter != null) {
                                        taxiMeterPrinter.cancel();
                                        taxiMeterPrinter = null;
                                    }

                                    // Meter = null;

                                    curr_MeterState = getResources().getString(R.string.NotConnected);

                                    // ConnectToMeter.setEnabled(true);
                                    runOnUiThread(new Runnable() {
                                        public void run() {

                                            tvTaxiMeter.setText(Farsi.Convert(getResources().getString(R.string.NotConnected)));// Azhar
                                            ConnectToMeter.setVisibility(Button.VISIBLE);
                                        }
                                    });
                                    // showMeterDialog();
                                } else {
                                    if (!isDisConnected)
                                        isDisConnected = !(Meter.isConnectionAlive());
                                    if (isDisConnected) {
                                        if (connectToMeter(AVL_Service.pref.getString("MeterAddress", ""))) {
                                            // Toast.makeText(getApplicationContext(), Farsi.Convert(getResources().getString(R.string.ReconnectedtoMeter)),
                                            // Toast.LENGTH_SHORT).show();
                                            if (!pairingrequest) {
                                                runOnUiThread(new Runnable() {
                                                    public void run() {
                                                        showToastMessage(R.string.ReconnectedtoMeter);
                                                        curr_MeterState = getResources().getString(R.string.Connected);
                                                        tvTaxiMeter.setText(Farsi.Convert(getResources().getString(R.string.Connected)));// Azhar
                                                        // ConnectToMeter.setEnabled(false);
                                                        ConnectToMeter.setVisibility(Button.GONE);
                                                        if (AVL_Service.pref.getString("MeterAddress", "").equalsIgnoreCase(AVL_Service.pref.getString("PrinterAddress", ""))) {
                                                            taxiMeterPrinter = Meter;
                                                            taxiPrinter = taxiMeter;
                                                        }
                                                        tabHost.getTabWidget().getChildAt(ZoneIndex).requestFocusFromTouch();
                                                    }
                                                });
                                            }
                                            // msgHandler.sendMessageDelayed(msgHandler.obtainMessage(MsgType.connectVivotech), 1000);
                                        } else {

                                            if (Meter != null) {
                                                Meter.cancel();
                                                Meter = null;
                                            }
                                            if (taxiMeterPrinter != null) {
                                                taxiMeterPrinter.cancel();
                                                taxiMeterPrinter = null;
                                            }

                                            Meter = null;
                                            curr_MeterState = getResources().getString(R.string.NotConnected);
                                            runOnUiThread(new Runnable() {
                                                public void run() {

                                                    tvTaxiMeter.setText(Farsi.Convert(getResources().getString(R.string.NotConnected)));// Azhar
                                                    // ConnectToMeter.setEnabled(true);
                                                    ConnectToMeter.setVisibility(Button.VISIBLE);
                                                    // showMeterDialog();
                                                }
                                            });
                                        }
                                    } else {
                                        curr_MeterState = getResources().getString(R.string.Connected);
                                        runOnUiThread(new Runnable() {
                                            public void run() {

                                                tvTaxiMeter.setText(Farsi.Convert(getResources().getString(R.string.Connected)));// Azhar
                                            }
                                        });
                                    }
                                }
                            }
                            if (!curr_MeterState.equalsIgnoreCase(prev_MeterState)) {
                                runOnUiThread(new Runnable() {
                                    public void run() {

                                        setMeterStatus(true, "0", mBluetoothAdapter.isEnabled());
                                    }
                                });
                            }

                        }// if Meter checkbox clicked

                        runOnUiThread(new Runnable() {

                            @Override
                            public void run() {
                                if (connectionMeterProgress != null) {
                                    if (connectionMeterProgress.isShowing()) {
                                        connectionMeterProgress.dismiss();
                                        connectionMeterProgress = null;
                                    }
                                }
                            }
                        });

                    }
                }).start();
            }
        } catch (Exception e) {
            Toast.makeText(getApplicationContext(), e.getLocalizedMessage(), Toast.LENGTH_LONG).show();
            runOnUiThread(new Runnable() {

                @Override
                public void run() {
                    connectionMeterProgress.dismiss();
                }
            });
            // handleException(e.getStackTrace()[0].getFileName() + "| " + e.getLocalizedMessage() + " in " + e.getStackTrace()[0].getMethodName() + " Line " +
            // e.getStackTrace()[0].getLineNumber());
        }
    }
    /*------------------------------------------------------------connectToMeter--------------------------------------------------------------------*/
    public boolean connectToMeter(String MeterAddress) {
        //
        // lmsg.obj = "Connecting to Meter ...";
        // lmsg.what = MsgType.showProgress;
        // TaxiPlexer.this.handler.sendMessage(lmsg);
        try {
            if (BluetoothAdapter.checkBluetoothAddress(MeterAddress)) {

                taxiMeter = mBluetoothAdapter.getRemoteDevice(MeterAddress);
                // long CurrentTime = System.currentTimeMillis();
                // boolean isDisConnected = false;
                // isDisConnected = (AVL_Service.pref.getBoolean("VeriFoneDevice", false) && IsVerifoneCMD8Received && ((CurrentTime - VerifoneCMD8LastTime) >
                // (AVL_Service.pref.getLong(
                // "HeartBeatTimer",
                // 10000) * 3)));
                if (taxiMeterPrinter != null && MeterAddress.equalsIgnoreCase(taxiMeterPrinter.getAddress()) && taxiMeterPrinter.isConnectionAlive()) {// &&
                    // !isDisConnected
                    // ) {
                    Meter = taxiMeterPrinter;
                    taxiMeter = taxiPrinter;
                    return true;
                } else {
                    if (Meter == null)
                        Meter = new Meter_Bluetooth(taxiMeter);

                    boolean connect = Meter.connect();
                    if (connect) {
                        // hideProgressDialog();
                        if (!pairingrequest) {
                            if (AVL_Service.pref.getBoolean("VeriFoneDevice", false))
                                Meter_Bluetooth.isVerifone = true;
                            Meter.start();
                        } else {

                            Thread.sleep(2000);

                        }
                        return true;
                    } else {
                        // hideProgressDialog()
                        if (!pairingrequest) {
                            if (Meter != null) {
                                Meter.cancel();
                                Meter = null;
                            }
                            if (taxiMeterPrinter != null) {
                                taxiMeterPrinter.cancel();
                                taxiMeterPrinter = null;
                            }
                        }
                        return false;
                    }
                }// else
            }// if
            else {
                return false;
            }
        } catch (Exception ex) {
            // new AlertDialog.Builder(TaxiPlexer.this).setMessage("hello").setPositiveButton("ok", null).create().show();
            try {
                if (taxiMeter.getBondState() == BluetoothDevice.BOND_BONDED) {

                    if (mBluetoothAdapter != null) {
                        mBluetoothAdapter.disable();
                    }
                    mBluetoothAdapter = null;
                    bluetoothExecption = true;
                }
            } catch (Exception e) {
            }
            LogException("[Exception in connecting to meter]" + "[connectToMeter]" + "[" + ex.getLocalizedMessage() + "]");
        }
        return false;
    }
    /*------------------------------------------------------------connectToPrinter------------------------------------------------------------------*/
    public boolean connectToPrinter(String PrinterAddress) {
        try {
            //
            //
            // lmsg.obj = "Connecting to Printer...";
            // lmsg.what = MsgType.showProgress;
            // TaxiPlexer.this.handler.sendMessage(lmsg);

            if (BluetoothAdapter.checkBluetoothAddress(PrinterAddress)) {

                taxiPrinter = mBluetoothAdapter.getRemoteDevice(PrinterAddress);

                if (Meter != null && PrinterAddress.equalsIgnoreCase(Meter.getAddress())) {
                    if (!Meter.isConnectionAlive()) {
                        Meter = null;

                        new Thread(new Runnable() {

                            @Override
                            public void run() {
                                runOnUiThread(new Runnable() {
                                    public void run() {
                                        connectionMeterProgress = ProgressDialog.show(TaxiPlexer.this, "", "Connecting to Meter. . .");
                                        connectionMeterProgress.setCancelable(false);
                                        connectionMeterProgress.setCanceledOnTouchOutside(false);
                                    }
                                });
                                connectToMeter(AVL_Service.pref.getString("MeterAddress", ""));
                                runOnUiThread(new Runnable() {

                                    @Override
                                    public void run() {
                                        connectionMeterProgress.dismiss();
                                    }
                                });

                            }
                        });

                    }
                    taxiMeterPrinter = Meter;
                    taxiPrinter = taxiMeter;
                    AVL_Service.pref.edit().putString("PrinterAddress", AVL_Service.pref.getString("MeterAddress", "")).commit();
                    return true;
                } else {
                    // Printer = new Meter_Bluetooth();
                    bluebambooPrinter = new BlueBamboo_Bluetooth();
                    Toast.makeText(getApplicationContext(), "New Printer", Toast.LENGTH_LONG).show();
                    mBluetoothAdapter.cancelDiscovery();

                    if (bluebambooPrinter.connectToBluetooth(taxiPrinter)) {
                        bluebambooPrinter.startReceiveThread();
                        return true;
                    } else {
                        return false;
                    }
                }
            }// if
            else {
                return false;
            }
        } catch (Exception ex) {
            LogException("[Exception in connecting to printer]" + "[connectToPrinter]" + "[" + ex.getLocalizedMessage() + "]");
        }
        return false;
    }

    /*--------------------------------------------------------------checkVivoConnectivity----------------------------------------------------------------------*/
    private boolean checkVivoConnectivity() {
        try {
            if (Vivotech != null) {
                if (!Vivotech.isConnectionAlive())
                    if (connectToVivotech(AVL_Service.pref.getString("VivotechAddress", ""))) {
                        Toast.makeText(getApplicationContext(), "Connection to Vivotech Device successful", Toast.LENGTH_SHORT).show();
                        return true;
                    } else {
                        showVivotechDialog();
                        return false;
                    }
                else
                    return true;
            } else if (connectToVivotech(AVL_Service.pref.getString("VivotechAddress", ""))) {
                Toast.makeText(TaxiPlexer.this, "Connected to Vivotech!", Toast.LENGTH_SHORT).show();
                return true;
            } else
                showVivotechDialog();
        } catch (Exception ex) {
            LogException("[Exception in checkVivoConnectivity]" + "[checkVivoConnectivity]" + "[" + ex.getLocalizedMessage() + "]");
        }
        return false;
    }

    /*------------------------------------------------------------connectToVivotech--------------------------------------------------------------------*/
    public boolean connectToVivotech(String VivotechAddress) {

        if (BluetoothAdapter.checkBluetoothAddress(VivotechAddress)) {

            VivotechDevice = mBluetoothAdapter.getRemoteDevice(VivotechAddress);

            Vivotech = new Vivotech_Bluetooth();

            if (Vivotech.connectToBluetooth(VivotechDevice)) {
                Vivotech.start();
                return true;
            } else {
                return false;
            }
        }// if
        else {
            return false;
        }
    }

    /*--------------------------------------------------------------connectToVivotech-----------------------------------------------------------------*/
    public void connectToVivotech() {
        if (AVL_Service.pref.getBoolean("VivotechDevice", false)) {
            if (Vivotech != null) {
                if (!Vivotech.isConnectionAlive()) {
                    Vivotech.interrupt();
                    Vivotech = null;
                    if (connectToVivotech(AVL_Service.pref.getString("VivotechAddress", ""))) {
                        Toast.makeText(getApplicationContext(), "Connection to Vivotech Device successful", Toast.LENGTH_SHORT).show();
                        tabHost.getTabWidget().getChildAt(ZoneIndex).requestFocusFromTouch();
                        VivotechScreen.showScreen(Screen.WELCOME);
                    } else
                        showVivotechDialog();
                }// if
            } else {

                if (connectToVivotech(AVL_Service.pref.getString("VivotechAddress", ""))) {
                    Toast.makeText(TaxiPlexer.this, "Connected to Vivotech!", Toast.LENGTH_SHORT).show();
                    VivotechScreen.showScreen(Screen.WELCOME);
                } else
                    showVivotechDialog();

            }
        }// if Vivotech

    }

    /*--------------------------------------------------------------exception-----------------------------------------------------------------------*/
    @Override
    public void exception(String exception) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.exception, exception).sendToTarget();

    }

    /*--------------------------------------------------------------handleException-----------------------------------------------------------------*/
    public void handleException(String exception) {
        try {
            handleHideProgress();
            if (exception != null) {
                SimpleDateFormat lDateFormat = new SimpleDateFormat("MMddyyyyHHmmssSSS", Locale.US);

                // String[] msgToShow = exception.split("\\|");
                // String errMsg = msgToShow[msgToShow.length > 0 ? (msgToShow.length - 1) : 0];
                // if (!exception.contains("peer") && !exception.contains("parse")
                // && !exception.contains("element")
                // && !exception.contains("null")
                // && !exception.contains("socket closed")
                // && !exception.contains("Service discovery failed")
                // && !exception.contains("InvalidMeterMessageException")
                // && !exception.contains("SYNC:"))
                // Toast.makeText(getApplicationContext(), getDataFromResourse(errMsg), Toast.LENGTH_LONG).show();
                showToastMessageFromString(exception);
                if (!isPreviousException.equalsIgnoreCase(exception)) {
                    serviceHandle.sendMessageToServer(
                            AVL_Service.tm.getDeviceId() + Constants.COLSEPARATOR + lDateFormat.format(new Date()) + Constants.COLSEPARATOR + exception,
                            "SDHS",
                            MsgType.exception,
                            AckType.NEW,
                            MsgValidity.Short,
                            MsgPriority.AboveNormal);
                    isPreviousException = exception;
                }
            }

        } catch (Exception ex) {
            Log.w("handleException", ex.toString());
        }
    }
	/*--------------------------------------------------------------exceptionToast-----------------------------------------------------------------------*/

    @Override
    public void exceptionToast(String exception) {
        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.exceptionToast, exception).sendToTarget();
    }

    /*--------------------------------------------------------------handleExceptionToast-----------------------------------------------------------------------*/
    public void handleExceptionToast(String exception) {
        try {
            handleHideProgress();
            if (exception != null) {
                String[] msgToShow = exception.split("\\|");
                String errMsg = msgToShow[msgToShow.length > 0 ? (msgToShow.length - 1) : 0];
                if (!errMsg.contains("peer") && !errMsg.contains("parse")
                        && !errMsg.contains("element")
                        && !errMsg.contains("null")
                        && !errMsg.contains("socket closed")
                        && !errMsg.contains("Service discovery failed"))
                    Toast.makeText(getApplicationContext(), errMsg, Toast.LENGTH_LONG).show();
            }
        } catch (Exception ex) {
            LogException(ex.toString());
        }
    }

    /*--------------------------------------------------------------LogException-----------------------------------------------------------------------*/
    @Override
    public void LogException(String ExceptionText) {
        try {
            if (AVL_Service.AllowDetailedLogInFileAndSQL) {
                handleException(ExceptionText);
                // WriteinLogFile(ExceptionText);
            }
        } catch (Exception ex) {

        }
    }

    /*--------------------------------------------------------------receivedForcedLogout-----------------------------------------------------------------------*/
    @Override
    public void receivedForcedLogout(String msg) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.ORSDLOGGEDOUT, msg).sendToTarget();

    }

    /*--------------------------------------------------------------handleForcedLogout-----------------------------------------------------------------*/
    public void handleForcedLogout(String msg) {
        try {
            if (serviceHandle.loggedIn()) {
                if (AVL_Service.SDEnableMeterLocking && AVL_Service.pref.getBoolean("PulsarMeter", false)) {
                    if (Meter == null) {
                        handleShowCustomToast("You can't quit, as Meter is not locked.", 0);

                        setMeterStatus(true, "EndShift", mBluetoothAdapter.isEnabled());
                        receivedLogoffResponse(new String[]{"1", "You are Succefffully Logged off,  Good Bye"});
                        serviceHandle.sendMessageToServer(
                                AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR + AVL_Service.pref.getString("LastLongitude", "0"),
                                "SDHS",
                                MsgType.LogoffReq,
                                AckType.NEW,
                                MsgValidity.Medium,
                                MsgPriority.AboveNormal);
                    } else if (Meter != null) {
                        if (!Meter.isConnectionAlive()) {
                            handleShowCustomToast("You can't quit, as Meter is not locked.", 0);

                            setMeterStatus(true, "EndShift", mBluetoothAdapter.isEnabled());
                            receivedLogoffResponse(new String[]{"1", "You are Succefffully Logged off,  Good Bye"});
                            serviceHandle.sendMessageToServer(
                                    AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR + AVL_Service.pref.getString("LastLongitude", "0"),
                                    "SDHS",
                                    MsgType.LogoffReq,
                                    AckType.NEW,
                                    MsgValidity.Medium,
                                    MsgPriority.AboveNormal);
                        } else {
                            exitApp = true;
                            AVL_Service.pref.edit().putBoolean("restart", true).commit();
                            _isLoggedInOnce = false;
                            logoff_Quit(msg);
                            lockHandler.removeCallbacksAndMessages(null);
                        }
                    }
                }
            } else if (!AVL_Service.SDEnableMeterLocking || _quitApp || !_isLoggedInOnce) {
                exitApp = true;
                AVL_Service.pref.edit().putBoolean("restart", true).commit();
                _isLoggedInOnce = false;
                logoff_Quit(msg);
                lockHandler.removeCallbacksAndMessages(null);

            } else
                handleShowCustomToast("You can't quit, as Meter is not locked.", 0);
        } catch (Exception ex) {
            LogException("[Exception in force log out]" + "[handleForcedLogout]" + "[" + ex.getLocalizedMessage() + "]" + msg);
        }
    }

    /*--------------------------------------------------------------receivedWallTrips-----------------------------------------------------------------------*/
    @Override
    public void receivedWallTrips(ArrayList<WallTrip> wallTripArray) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.wallTripsArray, wallTripArray).sendToTarget();

    }

    /*--------------------------------------------------------------handleWallTrips-----------------------------------------------------------------------*/
    public void handleWallTrips(ArrayList<WallTrip> wallTripArray) {
        try {
            if (wallPanel == null)
                tabHost.setCurrentTab(wallIndex);
            if (tabHostWall != null)
                tabHostWall.setCurrentTab(0);

            if (arrayListOfWallTrips != null)
                arrayListOfWallTrips.clear();

            ArrayList<WallTrip> Temp_arrayListofWT = new ArrayList<WallTrip>();

            for (int i = 0; i < Removeable_WallTripsList.size(); i++) {
                for (int j = 0; j < wallTripArray.size(); j++)
                    if (wallTripArray.get(j).tripNumber.equalsIgnoreCase(Removeable_WallTripsList.get(i)))
                        Temp_arrayListofWT.add(wallTripArray.get(j));
            }
            wallTripArray.removeAll(Temp_arrayListofWT);
            arrayListOfWallTrips.addAll(wallTripArray);

            // Setting badge to show number of Wall Trips
            if (arrayListOfWallTrips.size() > 0) {
                wallbadge.setText(String.valueOf(arrayListOfWallTrips.size()));
                wallbadge.show();
            } else
                wallbadge.setVisibility(BadgeView.GONE);

            if (isSortWallTrips1Pressed) {
                new Thread(new Runnable() {

                    @Override
                    public void run() {
                        sortWallTrips();
                    }
                }).start();
            } else
                wallTripAdapter.notifyDataSetChanged();

        } catch (Exception e) {
            handleException("[Exception in handleWallTrips]" + "[handleWallTrips]" + "[" + e.getLocalizedMessage() + "]");
        }
    }

    /*--------------------------------------------------------------receivedWallTrips-----------------------------------------------------------------------*/
    @Override
    public void receivedManifestWallTrips(ArrayList<ManifestWallTrip> manifestWallTripArray) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.manifestwallTripsArray, manifestWallTripArray).sendToTarget();

    }

    /*--------------------------------------------------------------handleManifestWallTrips-----------------------------------------------------------------------*/
    public void handleManifestWallTrips(ArrayList<ManifestWallTrip> manifestWallTripArray) {
        try {
            if (manifestWallPanel == null)
                tabHost.setCurrentTab(wallIndex);
            if (tabHostWall != null)
                tabHostWall.setCurrentTab(1);

            if (arrayListOfmanifestWallTrips != null)
                arrayListOfmanifestWallTrips.clear();

            arrayListOfmanifestWallTrips.addAll(manifestWallTripArray);

            // Setting badge to show number of Wall Trips
            if (arrayListOfmanifestWallTrips.size() > 0) {
                manifestbadge.setText(String.valueOf(arrayListOfmanifestWallTrips.size()));
                manifestbadge.show();
            } else
                manifestbadge.setVisibility(BadgeView.GONE);

            manifestWallTripAdapter.notifyDataSetChanged();

        } catch (Exception e) {
            handleException("[Exception in handleManifestWallTrips]" + "[handleManifestWallTrips]" + "[" + e.getLocalizedMessage() + "]");
        }
    }

    /*--------------------------------------------------------------receivedCannedMessages-----------------------------------------------------------------------*/
    @Override
    public void receivedCannedMessages(ArrayList<CannedMessage> cMsgs) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.messageHistoryArray, cMsgs).sendToTarget();

    }

    /*--------------------------------------------------------------handleCannedMessages-----------------------------------------------------------------------*/
    public void handleCannedMessages(ArrayList<CannedMessage> cMsgs) {
        try {
            // if (msgsPannel == null)
            // tabHost.setCurrentTab(messagesIndex);

            synchronized (arrayListOfCMsgs) {
                if (arrayListOfCMsgs != null)
                    arrayListOfCMsgs.clear();

                arrayListOfCMsgs.addAll(cMsgs);
                arrayListOfCMsgs.notifyAll();

            }

            // cannnedMessagesAdapter.notifyDataSetChanged();

        } catch (Exception e) {
            handleException("[Exception in adding canned messages]" + "[handleCannedMessages]" + "[" + e.getLocalizedMessage() + "]");
        }
    }
    // ////////////////////////////////////////////////////////////////////////
    // INetworkServer Status Listener methods //
    // Processes state changes from the service. //
    // ////////////////////////////////////////////////////////////////////////

    /*--------------------------------------------------------------networkServiceStarted-----------------------------------------------------------*/
    // @Override
    public void networkServiceStarted(IAVL_Service servHandle) {
        try {
            Log.w(getClass().getSimpleName(), "networkServiceStarted called.");
            serviceHandle = servHandle;

            serviceHandle.addMessageListener(this);

            if (!serviceHandle.loggedIn()) {
                loginView = null;
                loginView = createLoginView();
                loginView.setKeepScreenOn(true);

                mainView = loginView;
                setContentView(mainView);
                setDefaultKeyMode(DEFAULT_KEYS_DIALER);

            } else {
                tabView = createTabbarView();
                tabView.setKeepScreenOn(true);
                setContentView(tabView);
                mainView = tabView;
            }
            currentView = mainView;
            if (!AVL_Service.isNetworkReachable) {
                ((CabDispatch) getApplicationContext()).stopService();
                ((CabDispatch) getApplicationContext()).startService();
            }
        } catch (Exception ex) {
            LogException("[Exception in starting network service]" + "[networkServiceStarted]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }

    /*--------------------------------------------------------------networkServiceStoppped---------------------------------------------------*/
    @Override
    public void networkServiceStoppped(IAVL_Service service) {
        serviceHandle.removeMessageListener(this);
        Log.w(getClass().getSimpleName(), "networkServiceStoppped called.");
    }

    /*--------------------------------------------------------------startVoiceRecognitionActivity---------------------------------------------------*/
    protected void startVoiceRecognitionActivity(int Code) {

        try {
            while (mTTS.isSpeaking())
                Thread.sleep(100);

            Intent intent = new Intent(TaxiPlexer.this, VoiceRecognition.class);
            startActivityForResult(intent, Code);
        } catch (InterruptedException e) {
            handleException(e.getStackTrace()[0].getFileName() + "| " + e.getLocalizedMessage() + " in " + e.getStackTrace()[0].getMethodName() + " Line " + e.getStackTrace()[0].getLineNumber());
        } catch (ActivityNotFoundException ex) {
            handleException("Voice Recognition Not Supported");
        } catch (Exception ex) {
            LogException("[Exception in starting voice recognition activity]" + "[startVoiceRecognitionActivity]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }

    /*--------------------------------------------------------------sendTransaction-----------------------------------------------------------------------*/
    private void sendCAWTransaction(TransactionType transType, String amount, String gatewayReferenceNumber) {
        showProgressDialog(Farsi.Convert(getResources().getString(R.string.Processing_Credit_Card)));
        try {
            final Transaction trans = new Transaction(this);

            if (CreditCard_CAW == null)
                CreditCard_CAW = new CreditCard();

            if ((transType != TransactionType.FORCE && transType != TransactionType.VOID) || gatewayReferenceNumber.equals("")) {
                CreditCard_CAW.setCardNumber(currentTrip.creditCardNum);
                CreditCard_CAW.setExpirationDate(currentTrip.creditCardExpiry);
            }

            if (transType == TransactionType.FORCE) {
                title = "Post Auth Results";
            } else if (transType == TransactionType.AUTH_ONLY) {
                title = "Pre Auth Results";
            } else if (transType == TransactionType.SALE) {
                title = "Sale Results";
            }

            if (currentTrip.creditCardNum.charAt(0) == '7') {
                CreditCard_CAW.setExpirationDate("0000");
                currentTrip.cardType = CreditCardType.PATHFINDER.getFullName();
                if ((transType == TransactionType.SALE) || (transType == TransactionType.FORCE))
                    trans.setTransactionType(TransactionType.CHARGE);
                else if (transType == TransactionType.AUTH_ONLY)
                    trans.setTransactionType(TransactionType.AUTH_ONLY);
            } else {
                trans.setTransactionType(transType);
                if (!currentTrip.creditCardNum.contains("xx"))
                    currentTrip.cardType = CreditCardType.determineCreditCardType(currentTrip.creditCardNum).getFullName();
            }
            if (transType == TransactionType.VOID || transType == TransactionType.FORCE) {
                trans.setOriginalApprovalCode(currentTrip.authCode);
                trans.setOriginalGrandTotal(currentTrip.preAuthAmount);
                trans.setOriginalTransactionType(TransactionType.AUTH_ONLY);
                trans.setOriginalTransactionId(currentTrip.transactionID);
                trans.setOriginalGatewayreferenceNumber(gatewayReferenceNumber);
            }

            currentTrip.transType = trans.getTransactionType();

            trans.setCreditCard(CreditCard_CAW);
            trans.setAmount(amount);
            trans.setInvoiceNumber(currentTrip.ConfirmNumber);
            // trans.setAddress(AVL_Service.address.length()>20?AVL_Service.address.substring(0, 19)|AVL_Service.address);
            trans.setZipCode("");
            trans.setCVVCode("");
            trans.setClerkNumber(AVL_Service.pref.getString("DriverID", "0"));
            trans.addTransactionListener(this);
            trans.submit(this);

            CreditCard_CAW = null;
        } catch (Exception e) {
            if (currentTrip.cardType != null && currentTrip.cardType == CreditCardType.UNKWN.getFullName()) {
                handleException("[Exception in sending caw transaction]" + "[sendCAWTransaction]" + "[" + e.getLocalizedMessage() + "]");
                runOnUiThread(new Runnable() {
                    public void run() {
                        creditBtn.setEnabled(true);
                        cashBtn.setEnabled(true);
                        voucherBtn.setEnabled(true);

                    }
                });
            } else {
                handleException("[Exception in sending caw transaction]" + "[sendCAWTransaction]" + "[" + e.getLocalizedMessage() + "]");
                runOnUiThread(new Runnable() {
                    public void run() {
                        creditBtn.setEnabled(true);
                        cashBtn.setEnabled(true);
                        voucherBtn.setEnabled(true);

                    }
                });
            }
            hideProgressDialog();
            CreditCard_CAW = null;
            return;
        }
    }

    /*--------------------------------------------------------------transactionCompleted-----------------------------------------------------------------------*/
    @Override
    public void transactionCompleted(final HostResponse hostResponse, final TransactionError transError) {
        runOnUiThread(new Runnable() {
            public void run() {
                try {
                    hideProgressDialog();
                    final StringBuffer strBuf = new StringBuffer();
                    if (hostResponse != null) {
                        strBuf.append("Transaction Id: ");
                        strBuf.append(hostResponse.getTransactionID());
                        currentTrip.transactionID = hostResponse.getTransactionID();
                        strBuf.append("\nResponse: ");
                        strBuf.append(hostResponse.getResponseText());
                        strBuf.append("\nApproval Code: ");
                        strBuf.append(hostResponse.getApprovalCode());
                        currentTrip.authCode = hostResponse.getApprovalCode();
                        if (hostResponse.getAvsResponseText().length() > 0) {
                            strBuf.append("\nAVS Response: ");
                            strBuf.append(hostResponse.getAvsResponseText());
                        }
                        if (hostResponse.getCvvResponseText().length() > 0) {
                            strBuf.append("\nCVV Response: ");
                            strBuf.append(hostResponse.getCvvResponseText());
                        }
                        if (hostResponse.getResponseCode().equalsIgnoreCase(HostResponse.RESP_CODE_APPROVED) || hostResponse.getResponseCode().equalsIgnoreCase(HostResponse.RESP_CODE_APPROVED_DUPE)) {

                            if ((currentTrip.transType == TransactionType.SALE) || (currentTrip.transType == TransactionType.FORCE) || (currentTrip.transType == TransactionType.CHARGE)) {
                                sendTripResponse(States.DROPPED);
                                receivedPaymentResp("Header" + Constants.BODYSEPARATOR + "1^CreditCard Payment successful");

                            } else if (currentTrip.transType == TransactionType.AUTH_ONLY) {
                                currentTrip.preAuthAmount = hostResponse.getGrandTotal();
                                currentTrip.CAW_GatewayRef = hostResponse.getGatewayReferenceNumber();
                                if (currentView.getId() == PAYMENTVIEW) {
                                    runOnUiThread(new Runnable() {

                                        @Override
                                        public void run() {
                                            ttfCCExpiry.setText("");
                                            ttfCCNumber.setEnabled(false);
                                            ttfCCExpiry.setEnabled(false);
                                            FundingSource.addView(preAuthorization);
                                            lblPreAuthAmount.setText(Double.toString(Math.round((Double.parseDouble(holdAmount)) * 100.0) / 100.0));

                                        }
                                    });

                                    if (AVL_Service.pref.getBoolean("BluetoothMeter", false) || AVL_Service.pref.getBoolean("BlueBambooDevice", false))
                                        runOnUiThread(new Runnable() {

                                            @Override
                                            public void run() {

                                                PromotionCode.setEnabled(false);
                                                discountBtn.setEnabled(false);
                                                handlePaymentResp("A");

                                            }
                                        });
                                    else
                                        bMerchantCopyPrinted = true;
                                }

                            }
                            if(!currentTrip.bCopayAllowedOnPaymentScreen){
                                tempFare = "0";
                                tempExtras = "0";
                            } else {
                                String  temptotal = ttfTotal.getText().toString();
                                temptotal = String.valueOf(Float.parseFloat(temptotal) - Float.parseFloat(currentTrip.Copay));
                                ttfTotal.setText(temptotal);
                            }
                            serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                    + AVL_Service.pref.getString("LastLongitude", "0")
                                    + Constants.COLSEPARATOR
                                    + currentTrip.tripNumber
                                    + Constants.COLSEPARATOR
                                    + currentTrip.paymentMethod
                                    + Constants.COLSEPARATOR
                                    + String.valueOf(Float.parseFloat(Fare) + Float.parseFloat(tempFare))
                                    + Constants.COLSEPARATOR
                                    + String.valueOf(Float.parseFloat(Extras) + Float.parseFloat(tempExtras))
                                    + Constants.COLSEPARATOR
                                    + Tip
                                    + Constants.COLSEPARATOR
                                    + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                                    + Constants.COLSEPARATOR
                                    + "xxxxxxxxxxxx"
                                    + (currentTrip.creditCardNum.length() > 11 ? currentTrip.creditCardNum.substring(currentTrip.creditCardNum.length() - 4) : "")
                                    + Constants.COLSEPARATOR
                                    + currentTrip.cardType
                                    + Constants.COLSEPARATOR
                                    + currentTrip.cardProcessor
                                    + Constants.COLSEPARATOR
                                    + currentTrip.ConfirmNumber
                                    + Constants.COLSEPARATOR
                                    + currentTrip.authCode
                                    + Constants.COLSEPARATOR
                                    + AVL_Service.pref.getString("VehicleID", "0")
                                    + Constants.COLSEPARATOR
                                    + "0"
                                    + Constants.COLSEPARATOR
                                    + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                                    + Constants.COLSEPARATOR
                                    + "Driver-"
                                    + AVL_Service.pref.getString("DriverID", "unknown")
                                    + Constants.COLSEPARATOR
                                    + currentTrip.authCode
                                    + Constants.COLSEPARATOR
                                    + currentTrip.tripNumber
                                    + Constants.COLSEPARATOR
                                    + "1"
                                    + Constants.COLSEPARATOR
                                    + currentTrip.transactionID
                                    + Constants.COLSEPARATOR
                                    + currentTrip.transType.toString()
                                    + Constants.COLSEPARATOR
                                    + AVL_Service.pref.getString("DriverID", "Driver")
                                    + Constants.COLSEPARATOR
                                    + "0"
                                    + Constants.COLSEPARATOR
                                    + "0"
                                    + Constants.COLSEPARATOR
                                    + MRMS_DateFormat.format(currentTrip.PUTime)
                                    + Constants.COLSEPARATOR
                                    + ((dFormat.format(Distance).equalsIgnoreCase("0.00")) ? currentTrip.miles : dFormat.format(Distance))
                                    + Constants.COLSEPARATOR
                                    + ActualPaymentAmount
                                    + Constants.COLSEPARATOR
                                    + currentTrip.PromotionalCode
                                    + Constants.COLSEPARATOR
                                    + currentTrip.PromotionalValue, "SDHS", MsgType.Payment, AckType.NEW, MsgValidity.Short, MsgPriority.Highest);

                        } else if ((transError != null) && (currentView.getId() == PAYMENTVIEW)) {
                            runOnUiThread(new Runnable() {
                                public void run() {

                                    ttfCCExpiry.setText("");

                                    creditBtn.setEnabled(true);
                                    cashBtn.setEnabled(true);
                                    voucherBtn.setEnabled(true);
                                    bMerchantCopyPrinted = false;

                                }
                            });
                        }

                    } else {
                        strBuf.append("Response: No Host Response");
                        runOnUiThread(new Runnable() {
                            public void run() {
                                ttfCCNumber.setText("");
                                ttfCCExpiry.setText("");

                                creditBtn.setEnabled(true);
                                cashBtn.setEnabled(true);
                                voucherBtn.setEnabled(true);

                            }
                        });
                    }

                    strBuf.append("\nDetails: ");
                    strBuf.append((transError != null ? transError.getMessage() : "Details Not Available"));

                    final AlertDialog dialog = new AlertDialog.Builder(TaxiPlexer.this).setTitle(title).setMessage(strBuf.toString()).create();
                    dialog.setButton(Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int whichButton) {
                            System.gc();
                            dialog.dismiss();
                            runOnUiThread(new Runnable() {
                                public void run() {
                                    creditBtn.setEnabled(true);
                                    cashBtn.setEnabled(true);
                                    voucherBtn.setEnabled(true);

                                }
                            });
                        }
                    });
                    dialog.show();

                    dialogFontSize(dialog);
                } catch (Exception e) {
                    exception("[Exception in caw transaction response]" + "[transactionCompleted]" + "[" + e.getLocalizedMessage() + "]");
                }
            }
        });
        hideProgressDialog();
    }
	/*------------------------------------------------SendSlimCDTransaction------------------------------------------------------------------------*/

    private void SendSlimCDTransaction(final String TransactionType, final String Amount) {
        handleShowProgress(Farsi.Convert(getResources().getString(R.string.Processing_Credit_Card)));

        try {
            // Set request and make call for response from server.
            ProcessTransactionRequest request = getProcessTransRequest(TransactionType, Amount);
            itcurves.ncs.webhandler.TransactUtil.getProcessTransaction(request, TaxiPlexer.this);

        } catch (Exception e) {
            exception("[Exception in sending slimcd transaction]" + "[SendSlimCDTransaction]" + "[" + e.getLocalizedMessage() + "]");
        }
    }
    /*------------------------------------------------SendAuthorizeTransaction------------------------------------------------------------------------*/
    private void SendAuthorizeTransaction(final String TransactionType, final String Amount) {
        handleShowProgress(Farsi.Convert(getResources().getString(R.string.Processing_Credit_Card)));
        new Thread() {
            @Override
            public void run() {

                WS_Response tempResponse = null;
                try {
                    if (TransactionType.equalsIgnoreCase("Sale")) {
                        title = "Sale Results";
                        StringBuffer envelope = new StringBuffer(
                                "<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><Process_Sale xmlns=\"http://Itcurves.net/\"><request><CardNumber>")
                                .append(currentTrip.creditCardNum)
                                .append("</CardNumber><ExpirationDate>")
                                .append(currentTrip.creditCardExpiry.substring(2, 4) + currentTrip.creditCardExpiry.substring(0, 2))
                                .append("</ExpirationDate><PaymentAmt>")
                                .append(Amount)
                                .append("</PaymentAmt><DeviceID>")
                                .append(AVL_Service.pref.getString("VehicleID", "0"))
                                .append("</DeviceID><JobID>")
                                .append(currentTrip.ConfirmNumber)
                                .append("</JobID><ReadMethodType>")
                                .append(currentTrip.creditCardTrackII.equalsIgnoreCase("") ? "Keyed" : "Swiped")
                                .append("</ReadMethodType><Track2>")
                                .append(currentTrip.creditCardTrackII.equalsIgnoreCase("") ? currentTrip.creditCardTrackII : ";" + currentTrip.creditCardTrackII + "?")
                                .append("</Track2></request></Process_Sale></soap:Body></soap:Envelope>");
                        // Calling Web Service and Parsing Response
                        tempResponse = CallingWS.submit(AVL_Service.webServiceURL, AVL_Service.soapAction_ProcessSale, envelope.toString());
                    } else if (TransactionType.equalsIgnoreCase("PreAuth")) {
                        title = "Pre Auth Results";
                        StringBuffer envelope = new StringBuffer(
                                "<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><Process_PreAuth xmlns=\"http://Itcurves.net/\"><request><CardNumber>")
                                .append(currentTrip.creditCardNum)
                                .append("</CardNumber><ExpiryDate>")
                                .append(currentTrip.creditCardExpiry.substring(2, 4) + currentTrip.creditCardExpiry.substring(0, 2))
                                .append("</ExpiryDate><PaymentAmt>")
                                .append(Amount)
                                .append("</PaymentAmt><DeviceID>")
                                .append(AVL_Service.pref.getString("VehicleID", "0"))
                                .append("</DeviceID><JobID>")
                                .append(currentTrip.ConfirmNumber)
                                .append("</JobID><ReadMethodType>")
                                .append(currentTrip.creditCardTrackII.equalsIgnoreCase("") ? "Keyed" : "Swiped")
                                .append("</ReadMethodType><Track2>")
                                .append(currentTrip.creditCardTrackII.equalsIgnoreCase("") ? currentTrip.creditCardTrackII : ";" + currentTrip.creditCardTrackII + "?")
                                .append("</Track2></request></Process_PreAuth></soap:Body></soap:Envelope>");
                        // Calling Web Service and Parsing Response
                        tempResponse = CallingWS.submit(AVL_Service.webServiceURL, AVL_Service.soapAction_ProcessPreAuth, envelope.toString());
                    } else if (TransactionType.equalsIgnoreCase("PostAuth")) {
                        title = "Post Auth Results";
                        StringBuffer envelope = new StringBuffer(
                                "<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><Process_PostAuth xmlns=\"http://Itcurves.net/\"><request><PaymentAmt>")
                                .append(Amount)
                                .append("</PaymentAmt><DeviceID>")
                                .append(AVL_Service.pref.getString("VehicleID", "0"))
                                .append("</DeviceID><TransactionId>")
                                .append(currentTrip.transactionID)
                                .append("</TransactionId><AuthCode>")
                                .append(currentTrip.authCode)
                                .append("</AuthCode><CardType>")
                                .append(currentTrip.cardType)
                                .append("</CardType><ReadMethodType>")
                                        // .append(currentTrip.creditCardTrackII.equalsIgnoreCase("") ? "Keyed" : "Swiped")
                                .append("Swiped")
                                .append("</ReadMethodType></request></Process_PostAuth></soap:Body></soap:Envelope>");
                        // Calling Web Service and Parsing Response
                        tempResponse = CallingWS.submit(AVL_Service.webServiceURL, AVL_Service.soapAction_ProcessPostAuth, envelope.toString());
                    }

                    if (tempResponse != null && tempResponse.responseType != null
                            && (tempResponse.responseType.equalsIgnoreCase("Process_SaleResult") || tempResponse.responseType.equalsIgnoreCase("Process_PreAuthResult") || tempResponse.responseType
                            .equalsIgnoreCase("Process_PostAuthResult"))) {

                        final StringBuffer strBuf = new StringBuffer();

                        strBuf.append("Transaction Id: ");
                        strBuf.append(tempResponse.cc_AuthorizeDotNet_MJM.get_TransactionId());
                        currentTrip.transactionID = tempResponse.cc_AuthorizeDotNet_MJM.get_TransactionId();
                        strBuf.append("\nResponse: ");
                        strBuf.append(tempResponse.cc_AuthorizeDotNet_MJM.get_ResultCode());
                        strBuf.append("\nApproval Code: ");
                        strBuf.append(tempResponse.cc_AuthorizeDotNet_MJM.get_AuthCode());
                        currentTrip.authCode = tempResponse.cc_AuthorizeDotNet_MJM.get_AuthCode();

                        if ((tempResponse.responseType.equalsIgnoreCase("Process_SaleResult") && tempResponse.cc_AuthorizeDotNet_MJM.get_ResultCode().equalsIgnoreCase("success")) || (tempResponse.responseType
                                .equalsIgnoreCase("Process_PostAuthResult") && tempResponse.cc_AuthorizeDotNet_MJM.get_ResultCode().equalsIgnoreCase("success"))) {
                            sendTripResponse(States.DROPPED);
                            // receivedPaymentResp("Header" + Constants.BODYSEPARATOR + "1^CreditCard Payment successful");
                            if(!currentTrip.bCopayAllowedOnPaymentScreen){
                                tempFare = "0";
                                tempExtras = "0";
                            } else {
                                String  temptotal = ttfTotal.getText().toString();
                                temptotal = String.valueOf(Float.parseFloat(temptotal) - Float.parseFloat(currentTrip.Copay));
                                ttfTotal.setText(temptotal);
                            }
                            serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                    + AVL_Service.pref.getString("LastLongitude", "0")
                                    + Constants.COLSEPARATOR
                                    + currentTrip.tripNumber
                                    + Constants.COLSEPARATOR
                                    + currentTrip.paymentMethod
                                    + Constants.COLSEPARATOR
                                    + String.valueOf(Float.parseFloat(Fare) + Float.parseFloat(tempFare))
                                    + Constants.COLSEPARATOR
                                    + String.valueOf(Float.parseFloat(Extras) + Float.parseFloat(tempExtras))
                                    + Constants.COLSEPARATOR
                                    + Tip
                                    + Constants.COLSEPARATOR
                                    + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                                    + Constants.COLSEPARATOR
                                    + "xxxxxxxxxxxx"
                                    + (currentTrip.creditCardNum.length() > 11 ? currentTrip.creditCardNum.substring(currentTrip.creditCardNum.length() - 4) : "")
                                    + Constants.COLSEPARATOR
                                    + currentTrip.cardType
                                    + Constants.COLSEPARATOR
                                    + currentTrip.cardProcessor
                                    + Constants.COLSEPARATOR
                                    + currentTrip.ConfirmNumber
                                    + Constants.COLSEPARATOR
                                    + currentTrip.authCode
                                    + Constants.COLSEPARATOR
                                    + AVL_Service.pref.getString("VehicleID", "0")
                                    + Constants.COLSEPARATOR
                                    + "0"
                                    + Constants.COLSEPARATOR
                                    + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                                    + Constants.COLSEPARATOR
                                    + "Driver-"
                                    + AVL_Service.pref.getString("DriverID", "unknown")
                                    + Constants.COLSEPARATOR
                                    + currentTrip.authCode
                                    + Constants.COLSEPARATOR
                                    + currentTrip.tripNumber
                                    + Constants.COLSEPARATOR
                                    + "1"
                                    + Constants.COLSEPARATOR
                                    + currentTrip.transactionID
                                    + Constants.COLSEPARATOR
                                    + ((TransactionType.equalsIgnoreCase("PostAuth")) ? "Sale" : TransactionType)
                                    + Constants.COLSEPARATOR
                                    + AVL_Service.pref.getString("DriverID", "Driver")
                                    + Constants.COLSEPARATOR
                                    + "0"
                                    + Constants.COLSEPARATOR
                                    + "0"
                                    + Constants.COLSEPARATOR
                                    + MRMS_DateFormat.format(currentTrip.PUTime)
                                    + Constants.COLSEPARATOR
                                    + ((dFormat.format(Distance).equalsIgnoreCase("0.00")) ? currentTrip.miles : dFormat.format(Distance))
                                    + Constants.COLSEPARATOR
                                    + ActualPaymentAmount
                                    + Constants.COLSEPARATOR
                                    + currentTrip.PromotionalCode
                                    + Constants.COLSEPARATOR
                                    + currentTrip.PromotionalValue, "SDHS", MsgType.Payment, AckType.NEW, MsgValidity.Short, MsgPriority.Highest);

                            receivedPaymentResp("Authorize_Header" + Constants.BODYSEPARATOR + "1^CreditCard Payment successful");

                        } else if (tempResponse.responseType.equalsIgnoreCase("Process_PreAuthResult") && tempResponse.cc_AuthorizeDotNet_MJM.get_ResultCode().equalsIgnoreCase("success")) {
                            currentTrip.preAuthAmount = tempResponse.cc_AuthorizeDotNet_MJM.get_Amount1();
                            if(!currentTrip.bCopayAllowedOnPaymentScreen){
                                tempFare = "0";
                                tempExtras = "0";
                            } else {
                                String  temptotal = ttfTotal.getText().toString();
                                temptotal = String.valueOf(Float.parseFloat(temptotal) - Float.parseFloat(currentTrip.Copay));
                                ttfTotal.setText(temptotal);
                            }
                            serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                    + AVL_Service.pref.getString("LastLongitude", "0")
                                    + Constants.COLSEPARATOR
                                    + currentTrip.tripNumber
                                    + Constants.COLSEPARATOR
                                    + currentTrip.paymentMethod
                                    + Constants.COLSEPARATOR
                                    + String.valueOf(Float.parseFloat(Fare) + Float.parseFloat(tempFare))
                                    + Constants.COLSEPARATOR
                                    + String.valueOf(Float.parseFloat(Extras) + Float.parseFloat(tempExtras))
                                    + Constants.COLSEPARATOR
                                    + Tip
                                    + Constants.COLSEPARATOR
                                    + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                                    + Constants.COLSEPARATOR
                                    + "xxxxxxxxxxxx"
                                    + (currentTrip.creditCardNum.length() > 11 ? currentTrip.creditCardNum.substring(currentTrip.creditCardNum.length() - 4) : "")
                                    + Constants.COLSEPARATOR
                                    + currentTrip.cardType
                                    + Constants.COLSEPARATOR
                                    + currentTrip.cardProcessor
                                    + Constants.COLSEPARATOR
                                    + currentTrip.ConfirmNumber
                                    + Constants.COLSEPARATOR
                                    + currentTrip.authCode
                                    + Constants.COLSEPARATOR
                                    + AVL_Service.pref.getString("VehicleID", "0")
                                    + Constants.COLSEPARATOR
                                    + "0"
                                    + Constants.COLSEPARATOR
                                    + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                                    + Constants.COLSEPARATOR
                                    + "Driver-"
                                    + AVL_Service.pref.getString("DriverID", "unknown")
                                    + Constants.COLSEPARATOR
                                    + currentTrip.authCode
                                    + Constants.COLSEPARATOR
                                    + currentTrip.tripNumber
                                    + Constants.COLSEPARATOR
                                    + "1"
                                    + Constants.COLSEPARATOR
                                    + currentTrip.transactionID
                                    + Constants.COLSEPARATOR
                                    + ((TransactionType.equalsIgnoreCase("PostAuth")) ? "Sale" : TransactionType)
                                    + Constants.COLSEPARATOR
                                    + AVL_Service.pref.getString("DriverID", "Driver")
                                    + Constants.COLSEPARATOR
                                    + "0"
                                    + Constants.COLSEPARATOR
                                    + "0"
                                    + Constants.COLSEPARATOR
                                    + MRMS_DateFormat.format(currentTrip.PUTime)
                                    + Constants.COLSEPARATOR
                                    + ((dFormat.format(Distance).equalsIgnoreCase("0.00")) ? currentTrip.miles : dFormat.format(Distance))
                                    + Constants.COLSEPARATOR
                                    + ActualPaymentAmount
                                    + Constants.COLSEPARATOR
                                    + currentTrip.PromotionalCode
                                    + Constants.COLSEPARATOR
                                    + currentTrip.PromotionalValue, "SDHS", MsgType.Payment, AckType.NEW, MsgValidity.Short, MsgPriority.Highest);
                            if (currentView.getId() == PAYMENTVIEW) {

                                if (AVL_Service.pref.getBoolean("BluetoothMeter", false) || AVL_Service.pref.getBoolean("BlueBambooDevice", false)) {
                                    runOnUiThread(new Runnable() {

                                        @Override
                                        public void run() {

                                            ttfCCExpiry.setText("");
                                            ttfCCNumber.setEnabled(false);
                                            ttfCCExpiry.setEnabled(false);
                                            FundingSource.addView(preAuthorization);
                                            lblPreAuthAmount.setText(Double.toString(Math.round((Double.parseDouble(Amount)) * 100.0) / 100.0));
                                            PromotionCode.setEnabled(false);
                                            discountBtn.setEnabled(false);
                                            handlePaymentResp("A");

                                        }
                                    });

                                } else
                                    bMerchantCopyPrinted = true;
                            }
                        } else if (tempResponse.cc_AuthorizeDotNet_MJM.get_ResultCode().equalsIgnoreCase("failure") && (currentView.getId() == PAYMENTVIEW)) {

                            runOnUiThread(new Runnable() {
                                public void run() {
                                    ttfCCNumber.setText("");
                                    ttfCCExpiry.setText("");

                                    creditBtn.setEnabled(true);
                                    cashBtn.setEnabled(true);
                                    voucherBtn.setEnabled(true);
                                    bMerchantCopyPrinted = false;

                                }
                            });

                        }

                        strBuf.append("\nDetails: ");
                        strBuf.append(tempResponse.cc_AuthorizeDotNet_MJM.get_Message());

                        runOnUiThread(new Runnable() {
                            public void run() {
                                final AlertDialog dialog = new AlertDialog.Builder(TaxiPlexer.this).setTitle(title).setMessage(strBuf.toString()).create();
                                dialog.setButton(Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {
                                    public void onClick(DialogInterface dialog, int whichButton) {
                                        System.gc();
                                        dialog.dismiss();
                                    }
                                });
                                dialog.show();

                                dialogFontSize(dialog);
                            }
                        });
                    }
                } catch (Exception e) {
                    exception("[Exception in sending Authorize transaction]" + "[SendAuthorizeTransaction]" + "[" + e.getLocalizedMessage() + "]");
                }
                hideProgressDialog();
            }// run

        }.start();

    }

    /*--------------------------------------------------------------SendMJMGiftCardSale-----------------------------------------------------------------------*/
    public void SendMJMGiftCardSale() {
        handleShowProgress(Farsi.Convert(getResources().getString(R.string.Processing_Credit_Card)));

        new Thread(new Runnable() {

            @Override
            public void run() {
                WS_Response tempResponse = null;

                try {
                    StringBuffer envelope = new StringBuffer(
                            "<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><Process_Inquiry xmlns=\"http://Itcurves.net/\"><request><ServiceID>")
                            .append(currentTrip.tripNumber)
                            .append("</ServiceID><TripType>Calln R-V</TripType><RequestID>")
                            .append(currentTrip.tripNumber)
                            .append("</RequestID><UserID>")
                            .append(AVL_Service.pref.getString("DriverID", "0"))
                            .append("</UserID><ReadyToSettle>false</ReadyToSettle><PickUpDate>")
                            .append(MJM_GiftCard1.format(currentTrip.PUTime) + "T" + MJM_GiftCard2.format(currentTrip.PUTime))
                            .append("</PickUpDate><PickUpLatitude>")
                            .append(currentTrip.PUlat)
                            .append("</PickUpLatitude><PickUpLongitude>")
                            .append(currentTrip.PUlong)
                            .append("</PickUpLongitude>")
                            .append("<CardNumber>")
                            .append(currentTrip.creditCardNum)
                            .append("</CardNumber><ExpirationDate>")
                            .append(currentTrip.creditCardExpiry.substring(2, 4) + currentTrip.creditCardExpiry.substring(0, 2))
                            .append("</ExpirationDate>")
                            .append("<DeviceID>")
                            .append(AVL_Service.pref.getString("VehicleID", "0"))
                            .append("</DeviceID><JobID>")
                            .append(currentTrip.ConfirmNumber)
                            .append("</JobID><ReadMethodType>")
                            .append(currentTrip.creditCardTrackII.equalsIgnoreCase("") ? "Keyed" : "Swiped")
                            .append("</ReadMethodType><Track2>")
                            .append(currentTrip.creditCardTrackII.equalsIgnoreCase("") ? currentTrip.creditCardTrackII : ";" + currentTrip.creditCardTrackII + "?")
                            .append("</Track2></request></Process_Inquiry></soap:Body></soap:Envelope>");

                    // Calling Web Service and Parsing Response
                    tempResponse = CallingWS.submit(AVL_Service.webServiceURL, AVL_Service.soapAction_Process_Inquiry, envelope.toString());

                    if (tempResponse != null && tempResponse.responseType != null && tempResponse.responseType.equalsIgnoreCase("Process_InquiryResult")) {
                        mjmMaxChargeAmt = tempResponse.cc_AuthorizeDotNet_MJM.get_MaxCardCharge();
                        if (Float.parseFloat(tempResponse.cc_AuthorizeDotNet_MJM.get_BalanceAmt()) <= Float.parseFloat(tempResponse.cc_AuthorizeDotNet_MJM.get_MaxCardCharge())) {
                            if (Float.parseFloat(tempResponse.cc_AuthorizeDotNet_MJM.get_BalanceAmt()) < Float.parseFloat(ttfTotal.getText().toString())) {
                                final StringBuffer strBuf = new StringBuffer();

                                if (tempResponse.cc_AuthorizeDotNet_MJM.get_BalanceAmt() != null) {
                                    mjm_CardAmt = tempResponse.cc_AuthorizeDotNet_MJM.get_BalanceAmt();
                                    mjm_RemainingAmt = String.valueOf(total - ParseFloatFromString(tempResponse.cc_AuthorizeDotNet_MJM.get_BalanceAmt()));
                                }
                                strBuf.setLength(0);
                                strBuf.append("Trip Total: ");
                                strBuf.append("$" + (dFormat.format(total)).toString());
                                strBuf.append("\nCard Balance: ");
                                strBuf.append("$" + dFormat.format(Float.parseFloat(tempResponse.cc_AuthorizeDotNet_MJM.get_BalanceAmt())));
                                strBuf.append("\nMax Card Charge: ");
                                strBuf.append("$" + mjmMaxChargeAmt);
                                strBuf.append("\nRemaining: ");
                                strBuf.append("$" + dFormat.format(Float.parseFloat(mjm_RemainingAmt)) + "\n");

                                strBuf.append("\nTrip total exceeds card balance. Please collect remaining $" + dFormat.format(Float.parseFloat(mjm_RemainingAmt))
                                        + " from the passenger in Cash or other form of payment.");
                                ActualPaymentAmount = dFormat.format(ParseFloatFromString(tempResponse.cc_AuthorizeDotNet_MJM.get_BalanceAmt()));

                                runOnUiThread(new Runnable() {
                                    public void run() {
                                        final AlertDialog dialog = new AlertDialog.Builder(TaxiPlexer.this)
                                                .setTitle(Farsi.Convert(getResources().getString(R.string.Insufficient_Card_Balance)))
                                                .setMessage(strBuf.toString())
                                                .setCancelable(false)
                                                .create();
                                        dialog.setButton(DialogInterface.BUTTON_POSITIVE, Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {
                                            public void onClick(DialogInterface dialog, int whichButton) {
                                                handleShowProgress(Farsi.Convert(getResources().getString(R.string.Processing_Credit_Card)));
                                                mJMsale_Thread.start();

                                            }
                                        });
                                        dialog.setButton(DialogInterface.BUTTON_NEGATIVE, Farsi.Convert(getResources().getString(R.string.Cancel)), new DialogInterface.OnClickListener() {

                                            @Override
                                            public void onClick(DialogInterface dialog, int which) {
                                                System.gc();
                                                dialog.dismiss();
                                                ActualPaymentAmount = (dFormat.format(total)).toString();
                                            }
                                        });
                                        dialog.show();

                                        dialogFontSize(dialog);
                                    }
                                });

                                runOnUiThread(new Runnable() {
                                    public void run() {
                                        creditBtn.setEnabled(true);
                                        cashBtn.setEnabled(true);
                                        voucherBtn.setEnabled(true);
                                    }
                                });
                            } else {
                                if (tempResponse.cc_AuthorizeDotNet_MJM.get_BalanceAmt() != null) {
                                    mjm_CardAmt = String.valueOf(total);
                                    mjm_RemainingAmt = "0";
                                }
                                runOnUiThread(new Runnable() {
                                    public void run() {
                                        handleShowProgress(Farsi.Convert(getResources().getString(R.string.Processing_Credit_Card)));
                                        mJMsale_Thread.start();
                                    }
                                });

                            }
                        } else if (Float.parseFloat(tempResponse.cc_AuthorizeDotNet_MJM.get_BalanceAmt()) > Float.parseFloat(tempResponse.cc_AuthorizeDotNet_MJM.get_MaxCardCharge())) {
                            if (Float.parseFloat(tempResponse.cc_AuthorizeDotNet_MJM.get_MaxCardCharge()) < Float.parseFloat(ttfTotal.getText().toString())) {
                                final StringBuffer strBuf = new StringBuffer();

                                if (tempResponse.cc_AuthorizeDotNet_MJM.get_BalanceAmt() != null) {
                                    mjm_CardAmt = tempResponse.cc_AuthorizeDotNet_MJM.get_BalanceAmt();
                                    // mjmMaxChargeAmt = tempResponse.cc_AuthorizeDotNet_MJM.get_MaxCardCharge();
                                    mjm_RemainingAmt = String.valueOf(total - ParseFloatFromString(tempResponse.cc_AuthorizeDotNet_MJM.get_MaxCardCharge()));
                                }
                                strBuf.setLength(0);
                                strBuf.append("Trip Total: ");
                                strBuf.append("$" + (dFormat.format(total)).toString());
                                strBuf.append("\nCard Balance: ");
                                strBuf.append("$" + dFormat.format(Float.parseFloat(tempResponse.cc_AuthorizeDotNet_MJM.get_BalanceAmt())));
                                strBuf.append("\nMax Card Charge: ");
                                strBuf.append("$" + mjmMaxChargeAmt);
                                strBuf.append("\nRemaining: ");
                                strBuf.append("$" + dFormat.format(Float.parseFloat(mjm_RemainingAmt)) + "\n");

                                strBuf.append("\nTrip total exceeds card balance. Please collect remaining $" + dFormat.format(Float.parseFloat(mjm_RemainingAmt))
                                        + " from the passenger in Cash or other form of payment.");
                                ActualPaymentAmount = dFormat.format(ParseFloatFromString(tempResponse.cc_AuthorizeDotNet_MJM.get_MaxCardCharge()));

                                runOnUiThread(new Runnable() {
                                    public void run() {
                                        final AlertDialog dialog = new AlertDialog.Builder(TaxiPlexer.this)
                                                .setTitle(Farsi.Convert(getResources().getString(R.string.Insufficient_Card_Balance)))
                                                .setMessage(strBuf.toString())
                                                .setCancelable(false)
                                                .create();
                                        dialog.setButton(DialogInterface.BUTTON_POSITIVE, Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {
                                            public void onClick(DialogInterface dialog, int whichButton) {
                                                handleShowProgress(Farsi.Convert(getResources().getString(R.string.Processing_Credit_Card)));
                                                mJMsale_Thread.start();

                                            }
                                        });
                                        dialog.setButton(DialogInterface.BUTTON_NEGATIVE, Farsi.Convert(getResources().getString(R.string.Cancel)), new DialogInterface.OnClickListener() {

                                            @Override
                                            public void onClick(DialogInterface dialog, int which) {
                                                System.gc();
                                                dialog.dismiss();
                                                ActualPaymentAmount = (dFormat.format(total)).toString();
                                            }
                                        });
                                        dialog.show();

                                        dialogFontSize(dialog);
                                    }
                                });

                                runOnUiThread(new Runnable() {
                                    public void run() {
                                        creditBtn.setEnabled(true);
                                        cashBtn.setEnabled(true);
                                        voucherBtn.setEnabled(true);
                                    }
                                });
                            } else {
                                if (tempResponse.cc_AuthorizeDotNet_MJM.get_BalanceAmt() != null) {
                                    mjm_CardAmt = String.valueOf(total);
                                    mjm_RemainingAmt = "0";
                                }
                                runOnUiThread(new Runnable() {
                                    public void run() {
                                        handleShowProgress(Farsi.Convert(getResources().getString(R.string.Processing_Credit_Card)));
                                        mJMsale_Thread.start();
                                    }
                                });

                            }
                        }
                    } else if (tempResponse == null) {
                        exception("[null response from mjm]" + "[SendMJMGiftCardSale]");
                        runOnUiThread(new Runnable() {
                            public void run() {
                                creditBtn.setEnabled(true);
                                cashBtn.setEnabled(true);
                                voucherBtn.setEnabled(true);
                            }
                        });
                    }

                } catch (Exception e) {
                    exception("[Exception in sending mjm transaction]" + "[SendMJMGiftCardSale]" + "[" + e.getLocalizedMessage() + "]");
                }
                hideProgressDialog();

            }
        }).start();

        mJMsale_Thread = new Thread(new Runnable() {

            @Override
            public void run() {
                WS_Response tempResponse = null;

                try {
                    // runOnUiThread(new Runnable() {
                    // public void run() {
                    // creditBtn.setEnabled(false);
                    // }
                    // });
                    StringBuffer envelope = new StringBuffer(
                            "<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><Process_Sale xmlns=\"http://Itcurves.net/\"><request><TripType>")
                            .append("Calln R-V</TripType><RequestID>")
                            .append(currentTrip.tripNumber)
                            .append("</RequestID><UserID>")
                            .append(AVL_Service.pref.getString("DriverID", "0"))
                            .append("</UserID><ReadyToSettle>false</ReadyToSettle><DropOffDate>")
                                    // .append("2013-01-23T15:46:27")
                            .append(MJM_GiftCard1.format(currentTrip.DOTime) + "T" + MJM_GiftCard2.format(currentTrip.DOTime))
                            .append("</DropOffDate><DropOffLatitude>")
                            .append(currentTrip.DOlat)
                            .append("</DropOffLatitude><DropOffLongitude>")
                            .append(currentTrip.DOlong)
                            .append("</DropOffLongitude><PassengerCount>1</PassengerCount><TripDistance>")
                            .append(currentTrip.miles)
                            .append("</TripDistance><TripDuration>30</TripDuration><FareAmt>")
                            .append(ttfFare.getText().toString())
                            .append("</FareAmt><TipAmt>")
                            .append(ttfTip.getText().toString())
                            .append("</TipAmt><TollAmt>0</TollAmt><Extras>")
                            .append(ttfExtras.getText().toString())
                            .append("</Extras><CardNumber>")
                            .append(currentTrip.creditCardNum)
                            .append("</CardNumber><ExpirationDate>")
                            .append(currentTrip.creditCardExpiry.substring(2, 4) + currentTrip.creditCardExpiry.substring(0, 2))
                            .append("</ExpirationDate><PaymentAmt>")
                            .append(ParseFloatFromString(ttfTotal.getText().toString()) > ParseFloatFromString(mjmMaxChargeAmt) ? ParseFloatFromString(mjmMaxChargeAmt) : ttfTotal.getText().toString())
                            .append("</PaymentAmt><DeviceID>")
                            .append(AVL_Service.pref.getString("VehicleID", "0"))
                            .append("</DeviceID><JobID>")
                            .append(currentTrip.ConfirmNumber)
                            .append("</JobID><ReadMethodType>")
                            .append(currentTrip.creditCardTrackII.equalsIgnoreCase("") ? "Keyed" : "Swiped")
                            .append("</ReadMethodType><Track2>")
                            .append(currentTrip.creditCardTrackII.equalsIgnoreCase("") ? currentTrip.creditCardTrackII : ";" + currentTrip.creditCardTrackII + "?")
                            .append("</Track2></request></Process_Sale></soap:Body></soap:Envelope>");

                    // Calling Web Service and Parsing Response
                    tempResponse = CallingWS.submit(AVL_Service.webServiceURL, AVL_Service.soapAction_ProcessSale, envelope.toString());

                    if (tempResponse != null && tempResponse.responseType != null && tempResponse.responseType.equalsIgnoreCase("Process_SaleResult")) {

                        final StringBuffer strBuf = new StringBuffer();
                        final StringBuffer isTransactionSuccess = new StringBuffer();
                        isTransactionSuccess.append("Success");
                        strBuf.append("Transaction Id: ");
                        strBuf.append(tempResponse.cc_AuthorizeDotNet_MJM.get_TransactionId());
                        currentTrip.transactionID = tempResponse.cc_AuthorizeDotNet_MJM.get_TransactionId();
                        strBuf.append("\nResponse: ");
                        strBuf.append(tempResponse.cc_AuthorizeDotNet_MJM.get_ResultCode());
                        strBuf.append("\nApproval Code: ");
                        strBuf.append(tempResponse.cc_AuthorizeDotNet_MJM.get_AuthCode());
                        currentTrip.authCode = tempResponse.cc_AuthorizeDotNet_MJM.get_AuthCode();
                        mjm_Balance = tempResponse.cc_AuthorizeDotNet_MJM.get_BalanceAmt();
                        strBuf.append("\nBalance: ");
                        strBuf.append("$" + tempResponse.cc_AuthorizeDotNet_MJM.get_BalanceAmt());

                        title = "Sale Results";
                        if ((tempResponse.responseType.equalsIgnoreCase("Process_SaleResult") && tempResponse.cc_AuthorizeDotNet_MJM.get_ResultCode().equalsIgnoreCase("success")) || (tempResponse.responseType
                                .equalsIgnoreCase("Process_PostAuthResult") && tempResponse.cc_AuthorizeDotNet_MJM.get_ResultCode().equalsIgnoreCase("1"))) {
                            currentTrip.promptInquiryDialog = true;
                            sendTripResponse(States.DROPPED);
                            isTransactionSuccess.setLength(0);
                            isTransactionSuccess.append("Success");
                            receivedPaymentResp("MJM_Header" + Constants.BODYSEPARATOR + "1^CreditCard Payment successful");
                            if(!currentTrip.bCopayAllowedOnPaymentScreen){
                                tempFare = "0";
                                tempExtras = "0";
                            } else {
                                String  temptotal = ttfTotal.getText().toString();
                                temptotal = String.valueOf(Float.parseFloat(temptotal) - Float.parseFloat(currentTrip.Copay));
                                ttfTotal.setText(temptotal);
                            }
                            serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                                    + AVL_Service.pref.getString("LastLongitude", "0")
                                    + Constants.COLSEPARATOR
                                    + currentTrip.tripNumber
                                    + Constants.COLSEPARATOR
                                    + "Credit Card"
                                    + Constants.COLSEPARATOR
                                    + String.valueOf(Float.parseFloat(Fare) + Float.parseFloat(tempFare))
                                    + Constants.COLSEPARATOR
                                    + String.valueOf(Float.parseFloat(Extras) + Float.parseFloat(tempExtras))
                                    + Constants.COLSEPARATOR
                                    + Tip
                                    + Constants.COLSEPARATOR
                                    + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                                    + Constants.COLSEPARATOR
                                    // + "xxxxxxxxxxxx"
                                    // + (currentTrip.creditCardNum.length() > 12 ? currentTrip.creditCardNum.substring(12) : "")
                                    + currentTrip.creditCardNum
                                    + Constants.COLSEPARATOR
                                    + "MJM Card"
                                    + Constants.COLSEPARATOR
                                    + currentTrip.cardProcessor
                                    + Constants.COLSEPARATOR
                                    + currentTrip.ConfirmNumber
                                    + Constants.COLSEPARATOR
                                    + currentTrip.authCode
                                    + Constants.COLSEPARATOR
                                    + AVL_Service.pref.getString("VehicleID", "0")
                                    + Constants.COLSEPARATOR
                                    + "0"
                                    + Constants.COLSEPARATOR
                                    + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                                    + Constants.COLSEPARATOR
                                    + "Driver-"
                                    + AVL_Service.pref.getString("DriverID", "unknown")
                                    + Constants.COLSEPARATOR
                                    + currentTrip.authCode
                                    + Constants.COLSEPARATOR
                                    + currentTrip.tripNumber
                                    + Constants.COLSEPARATOR
                                    + "1"
                                    + Constants.COLSEPARATOR
                                    + currentTrip.transactionID
                                    + Constants.COLSEPARATOR
                                    + "Sale"
                                    + Constants.COLSEPARATOR
                                    + AVL_Service.pref.getString("DriverID", "Driver")
                                    + Constants.COLSEPARATOR
                                    + "0"
                                    + Constants.COLSEPARATOR
                                    + "0"
                                    + Constants.COLSEPARATOR
                                    + MRMS_DateFormat.format(currentTrip.PUTime)
                                    + Constants.COLSEPARATOR
                                    + ((dFormat.format(Distance).equalsIgnoreCase("0.00")) ? currentTrip.miles : dFormat.format(Distance))
                                    + Constants.COLSEPARATOR
                                    + ActualPaymentAmount
                                    + Constants.COLSEPARATOR
                                    + currentTrip.PromotionalCode
                                    + Constants.COLSEPARATOR
                                    + currentTrip.PromotionalValue, "SDHS", MsgType.Payment, AckType.NEW, MsgValidity.Short, MsgPriority.Highest);

                            // receivedPaymentResp("Header" + Constants.BODYSEPARATOR + "1^CreditCard Payment successful");

                        } else if (tempResponse.cc_AuthorizeDotNet_MJM.get_ResultCode().equalsIgnoreCase("failure") && (currentView.getId() == PAYMENTVIEW)) {

                            runOnUiThread(new Runnable() {
                                public void run() {
                                    // ttfCCNumber.setText("");
                                    // ttfCCExpiry.setText("");
                                    creditBtn.setEnabled(true);
                                    cashBtn.setEnabled(true);
                                    voucherBtn.setEnabled(true);
                                }
                            });

                        }

                        strBuf.append("\nDetails: ");
                        strBuf.append(tempResponse.cc_AuthorizeDotNet_MJM.get_Message());

                        runOnUiThread(new Runnable() {
                            public void run() {

                                final AlertDialog dialog = new AlertDialog.Builder(TaxiPlexer.this).setTitle(Farsi.Convert(getResources().getString(R.string.Transaction_Result))).setMessage(
                                        strBuf.toString()).create();
                                dialog.setButton(DialogInterface.BUTTON_NEUTRAL, Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {
                                    public void onClick(DialogInterface dialog, int whichButton) {
                                        System.gc();
                                        dialog.dismiss();
                                    }
                                });
                                dialog.show();

                                dialogFontSize(dialog);
                            }

                        });
                    } else if (tempResponse == null) {
                        exception("[null response from mjm]" + "[SendMJMGiftCardSale]");
                        runOnUiThread(new Runnable() {
                            public void run() {
                                creditBtn.setEnabled(true);
                                cashBtn.setEnabled(true);
                                voucherBtn.setEnabled(true);
                            }
                        });
                    }

                } catch (Exception e) {
                    exception("[Exception in sending mjm transaction]" + "[SendMJMGiftCardSale]" + "[" + e.getLocalizedMessage() + "]");
                }
                hideProgressDialog();

            }// run
        });
    }

    public void SendVantivTransaction(float m_amount) {
        m_roamPayApi.roamPayApiCall(generateCreditSaleInputParameters(String.valueOf(m_amount)), m_roamPayApiHandler);

    }
    /*--------------------------------------------------------------getName-----------------------------------------------------------------------*/
    @Override
    public String getName() {
        return getLocalClassName();
    }

    /*--------------------------------------------------------------handleCreditCardData-----------------------------------------------------------------*/
    public void handleCreditCardData(itcurves.ncs.CreditCard ccInfo) {

        try {

            CreditCard_ITC = ccInfo;

            if (CreditCard_ITC.getCardNumber().charAt(0) == '7')
                CreditCard_ITC.setExpirationDate("0000");

            if (CreditCard_CAW == null)
                CreditCard_CAW = new CreditCard();
            CreditCard_CAW.setCardHolderName(CreditCard_ITC.getCardHolderName());
            CreditCard_CAW.setCardNumber(CreditCard_ITC.getCardNumber());
            CreditCard_CAW.setExpirationDate(CreditCard_ITC.getExpirationDate());
            CreditCard_CAW.setTrack1Data(CreditCard_ITC.getTrack1Data());
            CreditCard_CAW.setTrack2Data(CreditCard_ITC.getTrack2Data());
            currentTrip.creditCardNum = CreditCard_ITC.getCardNumber();
            currentTrip.creditCardExpiry = CreditCard_ITC.getExpirationDate();
            currentTrip.cardType = CreditCard_ITC.getCardType().getFullName();
            currentTrip.creditCardTrackII = CreditCard_ITC.getTrack2Data();
            if (currentTrip.authCode.trim().length() < 2 && (currentTrip.state.equalsIgnoreCase(States.IRTPU) || currentTrip.state.equalsIgnoreCase(States.ATLOCATION) || currentTrip.state
                    .equalsIgnoreCase(States.PICKEDUP))
                    && currentView.getId() == TRIPDETAILVIEW) {
                if (AVL_Service.pref.getBoolean("AllowCreditCard", true)) {
                    if (currentTrip.paymentMethod.equalsIgnoreCase("Call& R-V")) {
                        if (AVL_Service.CardMappings.containsKey(CreditCard_ITC.getCardType().getFullName().toUpperCase()))
                            if (AVL_Service.CardMappings.get(CreditCard_ITC.getCardType().getFullName().toUpperCase()).getCardProcessingCompany().equalsIgnoreCase("MJM"))
                                showInquiryDialog(ccInfo);
                    } else if (currentTrip.authCode.trim().length() < 2)
                        showPreAuthDialog(ccInfo);
                    else if (currentTrip.authCode.trim().length() > 2)
                        Toast.makeText(getApplication(), "Current Trip Already has Credit Card on Hold for $" + currentTrip.preAuthAmount, Toast.LENGTH_LONG).show();
                } else
                    showToastMessage(R.string.Credit_Card_Feature_is_disabled_by_Admin);
                // Toast.makeText(getApplication(), "Credit Card Feature is disabled by Admin.", Toast.LENGTH_LONG).show();

            } else if (currentView.getId() == PAYMENTVIEW && currentTrip.authCode.trim().length() < 2) {
                ttfCCNumber.setText(CreditCard_ITC.getCardNumber());
                ttfCCExpiry.setText(CreditCard_ITC.getExpirationDate());
            } else if (currentTrip.authCode.trim().length() > 2)
                Toast.makeText(getApplication(), "Current Trip Already has Credit Card on Hold for $" + currentTrip.preAuthAmount, Toast.LENGTH_LONG).show();

        } catch (Exception e) {
            handleException("[Exception in getting credit card data]" + "[handleCreditCardData]" + "[" + e.getLocalizedMessage() + "]");
        }
    }

    /*--------------------------------------------------------------receivedCreditCardData-----------------------------------------------------------------*/
    @Override
    public void receivedCreditCardData(itcurves.ncs.CreditCard ccInfo) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.CreditCardData, ccInfo).sendToTarget();
    }

    /*--------------------------------------------------------------receivedSystemBroadCast-----------------------------------------------------------------*/
    @Override
    public void receivedSystemBroadCast(String action) {

        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.systemBroadcast, action).sendToTarget();
    }

    /*--------------------------------------------------------------handleSystemBroadcast-----------------------------------------------------------------*/
    private void handleSystemBroadcast(String action) {
        try {
            Toast.makeText(getApplicationContext(), action, Toast.LENGTH_SHORT).show();
            if (action.equalsIgnoreCase("android.intent.action.ACTION_POWER_DISCONNECTED") && AVL_Service.pref.getBoolean("ForceDeviceOnCradle", false)) {
                scheduler_power = Executors.newSingleThreadScheduledExecutor();
                scheduler_power.schedule(new Runnable() {

                    @Override
                    public void run() {
                        runOnUiThread(new Runnable() {
                            public void run() {
                                logoff_Quit("Shutting Down .... ");

                            }
                        });

                    }
                }, Long.valueOf(AVL_Service.timerForCradleLogout), TimeUnit.MILLISECONDS);
            } else if (action.equalsIgnoreCase("android.intent.action.ACTION_POWER_CONNECTED") && AVL_Service.pref.getBoolean("ForceDeviceOnCradle", false)) {
                if (scheduler_power != null)
                    if (!scheduler_power.isShutdown()) {
                        scheduler_power.shutdownNow();
                        // Toast.makeText(TaxiPlexer.this, "Scheduler stopped", Toast.LENGTH_LONG).show();
                    }
            } else if (action.equalsIgnoreCase("android.intent.action.ACTION_SHUTDOWN")) {
                if (serviceHandle.loggedIn())
                    AVL_Service.pref.edit().putString("IsProperLoggedOff", "0").commit();
            }
        } catch (Exception ex) {
            LogException("[Exception in system broadcast]" + "[handleSystemBroadcast]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }

    /*--------------------------------------------------------------receivedSDInactiveRequest-----------------------------------------------------------------*/
    @Override
    public void receivedSDInactiveRequest(String Body) {
        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.SDINACTIVITYREQUEST, Body).sendToTarget();

    }

    /*--------------------------------------------------------------handleSDInactiveRequest-----------------------------------------------------------------*/
    private void handleSDInactiveRequest(String Body) {
        try {
            String body[] = Body.split("\\" + Constants.COLSEPARATOR);
            RingerCount = AVL_Service.SDRingerCountForTripOffer;
            if (RingerCount > 0) {
                if (getApplicationContext().getPackageName().contains("infonetmytaxi"))
                    soundPool.play(tripSoundMyTaxi, 1, 1, 0, 0, 1);
                else
                    soundPool.play(tripSound, 1, 1, 0, 0, 1);
                RingerCount--;
            }

            tripinactivitySound = new Runnable() {

                @Override
                public void run() {
                    if (getApplicationContext().getPackageName().contains("infonetmytaxi"))
                        soundPool.play(tripSoundMyTaxi, 1, 1, 0, 0, 1);
                    else
                        soundPool.play(tripSound, 1, 1, 0, 0, 1);
                    if (RingerCount > 0) {
                        handlerForTripinactivity.postDelayed(tripinactivitySound, 2000);
                        RingerCount--;
                    }
                }
            };

            handlerForTripinactivity = new Handler();
            if (RingerCount > 0) {
                handlerForTripinactivity.postDelayed(tripinactivitySound, 2000);
                RingerCount--;
            }

            if (aDialog == null) {
                AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);

                // final AlertDialog aDialog;ConfirmInactive
                aDialog = builder.setIcon(android.R.drawable.ic_dialog_alert).setTitle(Farsi.Convert(getResources().getString(R.string.ConfirmInactive))).setMessage(body[0] + ".").setPositiveButton(
                        Farsi.Convert(getResources().getString(R.string.Yes)),
                        new DialogInterface.OnClickListener() {

                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                handlerForTripinactivity.removeCallbacksAndMessages(null);
                                serviceHandle.sendMessageToServer("y", "SDHS", MsgType.SDINACTIVITYRESPONSE, AckType.NEW, MsgValidity.Medium, MsgPriority.Normal);
                            }
                        }).create();
                aDialog.setCancelable(false);
                aDialog.show();

                dialogFontSize(aDialog);
                ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
                scheduler.schedule(new Runnable() {

                    @Override
                    public void run() {
                        runOnUiThread(new Runnable() {
                            public void run() {
                                if (aDialog.isShowing()) {
                                    handlerForTripinactivity.removeCallbacksAndMessages(null);
                                    serviceHandle.sendMessageToServer("n", "SDHS", MsgType.SDINACTIVITYRESPONSE, AckType.NEW, MsgValidity.Medium, MsgPriority.Normal);

                                    aDialog.dismiss();
                                }
                            }
                        });

                    }
                }, Integer.parseInt(body[1]), TimeUnit.SECONDS);
            } else {
                if (!(aDialog.isShowing())) {
                    AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                    // final AlertDialog aDialog;
                    aDialog = builder.setIcon(android.R.drawable.ic_dialog_alert).setTitle(Farsi.Convert(getResources().getString(R.string.ConfirmInactive))).setMessage(
                            getDataFromResourse(body[0]) + ".").setPositiveButton(Farsi.Convert(getResources().getString(R.string.Yes)), new DialogInterface.OnClickListener() {

                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            handlerForTripinactivity.removeCallbacksAndMessages(null);
                            serviceHandle.sendMessageToServer("y", "SDHS", MsgType.SDINACTIVITYRESPONSE, AckType.NEW, MsgValidity.Medium, MsgPriority.Normal);
                        }
                    }).create();
                    aDialog.setCancelable(false);
                    aDialog.show();

                    dialogFontSize(aDialog);
                    ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
                    scheduler.schedule(new Runnable() {

                        @Override
                        public void run() {
                            runOnUiThread(new Runnable() {
                                public void run() {
                                    if (aDialog.isShowing()) {
                                        handlerForTripinactivity.removeCallbacksAndMessages(null);
                                        serviceHandle.sendMessageToServer("n", "SDHS", MsgType.SDINACTIVITYRESPONSE, AckType.NEW, MsgValidity.Medium, MsgPriority.Normal);

                                        aDialog.dismiss();
                                    }
                                }
                            });

                        }
                    }, Integer.parseInt(body[1]), TimeUnit.SECONDS);
                }
            }
        } catch (Exception ex) {
            LogException("[Exception in handling inactivity request]" + "[handleSDInactiveRequest]" + "[" + ex.getLocalizedMessage() + "]" + Body);
        }
    }

    /*--------------------------------------------------------------receivedSDBreakEnded-----------------------------------------------------------------*/
    @Override
    public void receivedSDBreakEnded(String Body) {
        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.SDBREAKENDED, Body).sendToTarget();

    }

    /*--------------------------------------------------------------handleSDBreakEnded-----------------------------------------------------------------*/
    @SuppressWarnings("deprecation")
    @SuppressLint("NewApi")
    private void handleSDBreakEnded(String Body) {
        try {
            if (break_status == 1) {
                break_status = 0;

                if (tabberView_breakBtn != null) {
                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                        tabberView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                        tabberView_breakBtn.setText(breakBtnLabel);
                    } else
                        tabberView_breakBtn.setText(Farsi.Convert(breakBtnLabel));

                    // tabberView_breakBtn.setTextColor(Color.WHITE);
                    drawable = tabberView_breakBtn.getBackground();
                    drawable.setColorFilter(Color.parseColor(AVL_Service.SDBreakColor), Mode.SRC_IN);
                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                        tabberView_breakBtn.setBackground(drawable);
                    else
                        tabberView_breakBtn.setBackgroundDrawable(drawable);
                }
                if (tripView_breakBtn != null) {
                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                        tripView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                        tripView_breakBtn.setText(breakBtnLabel);
                    } else
                        tripView_breakBtn.setText(Farsi.Convert(breakBtnLabel));

                    // tripView_breakBtn.setTextColor(Color.WHITE);
                    drawable = tripView_breakBtn.getBackground();
                    drawable.setColorFilter(Color.parseColor(AVL_Service.SDBreakColor), Mode.SRC_IN);
                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                        tripView_breakBtn.setBackground(drawable);
                    else
                        tripView_breakBtn.setBackgroundDrawable(drawable);
                }
                if (estimateView_breakBtn != null) {
                    // estimateView_breakBtn.setTextColor(Color.WHITE);
                    drawable = estimateView_breakBtn.getBackground();
                    drawable.setColorFilter(Color.parseColor(AVL_Service.SDBreakColor), Mode.SRC_IN);
                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                        estimateView_breakBtn.setBackground(drawable);
                    else
                        estimateView_breakBtn.setBackgroundDrawable(drawable);
                }
                if (paymentView_breakBtn != null) {
                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                        paymentView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                        paymentView_breakBtn.setText(breakBtnLabel);
                    } else
                        paymentView_breakBtn.setText(Farsi.Convert(breakBtnLabel));

                    // paymentView_breakBtn.setTextColor(Color.WHITE);
                    drawable = paymentView_breakBtn.getBackground();
                    drawable.setColorFilter(Color.parseColor(AVL_Service.SDBreakColor), Mode.SRC_IN);
                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                        paymentView_breakBtn.setBackground(drawable);
                    else
                        paymentView_breakBtn.setBackgroundDrawable(drawable);
                }

                AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                builder.setIcon(android.R.drawable.ic_dialog_alert).setTitle("").setMessage(Farsi.Convert(getResources().getString(R.string.BreakEndedbyDispatcher))).setPositiveButton(
                        Farsi.Convert(getResources().getString(R.string.ok)),
                        new DialogInterface.OnClickListener() {

                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                dialog.dismiss();
                            }
                        }).setCancelable(false);

                AlertDialog alert = builder.create();
                alert.show();

                dialogFontSize(alert);
            }
        } catch (Exception e) {
            handleException("[Exception in handleSDBreakEnded]" + "[handleSDBreakEnded]" + "[" + e.getLocalizedMessage() + "]" + Body);
        }
    }

	/*--------------------------------------------------------------SD_BookOut-----------------------------------------------------------------*/

    @Override
    public void SD_BookOut() {
        runOnUiThread(new Runnable() {

            @Override
            public void run() {
                try {
                    bookedZoneValue.setText(Farsi.Convert(getResources().getString(R.string.Unknown)));
                    CurrentBookedZone = "None";
                    zoneRankValue.setText("0");
                    bookedStandValue.setText(Farsi.Convert(getResources().getString(R.string.Unknown)));
                    standRankValue.setText("0");
                    avlZoneValue.setText(Farsi.Convert(getResources().getString(R.string.Unknown)));

                    IsActiveRespDialog = new AlertDialog.Builder(TaxiPlexer.this)
                            .setIcon(android.R.drawable.ic_dialog_alert)
                            .setTitle(Farsi.Convert(getResources().getString(R.string.WARNING)))
                            .setMessage(Farsi.Convert(getResources().getString(R.string.InactiveMessage)))
                            .setPositiveButton(Farsi.Convert(getResources().getString(R.string.Yes)), new DialogInterface.OnClickListener() {

                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    serviceHandle.sendMessageToServer("yy", "SDHS", MsgType.SDINACTIVITYRESPONSE, AckType.NEW, MsgValidity.Medium, MsgPriority.Normal);

                                }
                            })
                            .setCancelable(false)
                            .show();
                } catch (Exception ex) {
                    LogException("[Exception in booking out of zone ]" + "[SD_BookOut]" + "[" + ex.getLocalizedMessage() + "]");
                }
            }
        });

    }

    /*--------------------------------------------------------------onEmergencyButtonClicked-----------------------------------------------------------------*/
    private final OnClickListener emergencyButtonLintener = new OnClickListener() {

        private long firstClickTime = 0;
        @Override
        public void onClick(View v) {
            try {
                if ((System.currentTimeMillis() - firstClickTime) < 700) {
                    if (AVL_Service.loggedIn) {
                        // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.Messagehasbeensentdispatch)), Toast.LENGTH_SHORT).show();
                        showToastMessage(R.string.Messagehasbeensentdispatch);
                        serviceHandle.sendMessageToServer(
                                AVL_Service.pref.getString("DriverID", "0") + Constants.COLSEPARATOR + AVL_Service.pref.getString("VehicleID", "0"),
                                "SDHS",
                                MsgType.Emergency,
                                AckType.NEW,
                                MsgValidity.Medium,
                                MsgPriority.Highest);
                    }
                }
                firstClickTime = System.currentTimeMillis();
            } catch (Exception ex) {
                LogException("[Exception in emergency button click]" + "[emergencyButtonLintener]" + "[" + ex.getLocalizedMessage() + "]");
            }
        }

    };

    /*--------------------------------------------------------------onBreakButtonClicked-----------------------------------------------------------------*/
    private final OnClickListener breakButtonLintener = new OnClickListener() {

        private long firstClickTime = 0;

        @SuppressWarnings("deprecation")
        @SuppressLint("NewApi")
        @Override
        public void onClick(View v) {
            try {
                if (AVL_Service.SDBreakActionOnSingleTap) {

                    boolean sendBreak = true;
                    if (totalBreaksTaken < 0)
                        totalBreaksTaken = AVL_Service.sdTotalBreaksTaken;
                    if (totalBreaksTaken >= 0) {
                        if (break_status == 0) {
                            if (totalBreaksTaken <= AVL_Service.sdMaxAllowedBreaksInOneDay) {
                                break_status = 1;
                                if (tabberView_breakBtn != null) {
                                    // tabberView_breakBtn.setTextColor(Color.BLACK);
                                    drawable = tabberView_breakBtn.getBackground();
                                    drawable.setColorFilter(Color.parseColor(AVL_Service.SDResumeColor), Mode.SRC_IN);
                                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                                        tabberView_breakBtn.setBackground(drawable);
                                    else
                                        tabberView_breakBtn.setBackgroundDrawable(drawable);
                                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                                        tabberView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                                        tabberView_breakBtn.setText(resumeButtonLabel);
                                    } else
                                        tabberView_breakBtn.setText(Farsi.Convert(resumeButtonLabel));

                                }
                                if (tripView_breakBtn != null) {
                                    // tripView_breakBtn.setTextColor(Color.BLACK);
                                    drawable = tripView_breakBtn.getBackground();
                                    drawable.setColorFilter(Color.parseColor(AVL_Service.SDResumeColor), Mode.SRC_IN);
                                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                                        tripView_breakBtn.setBackground(drawable);
                                    else
                                        tripView_breakBtn.setBackgroundDrawable(drawable);
                                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                                        tripView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                                        tripView_breakBtn.setText(resumeButtonLabel);
                                    } else
                                        tripView_breakBtn.setText(Farsi.Convert(resumeButtonLabel));
                                }
                                if (estimateView_breakBtn != null) {
                                    // estimateView_breakBtn.setTextColor(Color.BLACK);
                                    drawable = estimateView_breakBtn.getBackground();
                                    drawable.setColorFilter(Color.parseColor(AVL_Service.SDResumeColor), Mode.SRC_IN);
                                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                                        estimateView_breakBtn.setBackground(drawable);
                                    else
                                        estimateView_breakBtn.setBackgroundDrawable(drawable);
                                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                                        estimateView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                                        estimateView_breakBtn.setText(resumeButtonLabel);
                                    } else
                                        estimateView_breakBtn.setText(Farsi.Convert(resumeButtonLabel));
                                }
                                if (paymentView_breakBtn != null) {
                                    // paymentView_breakBtn.setTextColor(Color.BLACK);
                                    drawable = paymentView_breakBtn.getBackground();
                                    drawable.setColorFilter(Color.parseColor(AVL_Service.SDResumeColor), Mode.SRC_IN);
                                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                                        paymentView_breakBtn.setBackground(drawable);
                                    else
                                        paymentView_breakBtn.setBackgroundDrawable(drawable);
                                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                                        paymentView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                                        paymentView_breakBtn.setText(resumeButtonLabel);
                                    } else
                                        paymentView_breakBtn.setText(Farsi.Convert(resumeButtonLabel));
                                }
                                if (topUpView_breakBtn != null) {
                                    // topUpView_breakBtn.setTextColor(Color.BLACK);
                                    drawable = topUpView_breakBtn.getBackground();
                                    drawable.setColorFilter(Color.parseColor(AVL_Service.SDResumeColor), Mode.SRC_IN);
                                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                                        topUpView_breakBtn.setBackground(drawable);
                                    else
                                        topUpView_breakBtn.setBackgroundDrawable(drawable);
                                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                                        topUpView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                                        topUpView_breakBtn.setText(resumeButtonLabel);
                                    } else
                                        topUpView_breakBtn.setText(Farsi.Convert(resumeButtonLabel));
                                }
                            } else {
                                sendBreak = false;
                                // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.AllowedLimitofBreaks)), Toast.LENGTH_LONG).show();
                                showToastMessage(R.string.AllowedLimitofBreaks);
                            }
                        } else if (break_status == 1) {
                            break_status = 0;

                            if (tabberView_breakBtn != null) {
                                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                                    tabberView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                                    tabberView_breakBtn.setText(breakBtnLabel);
                                } else
                                    tabberView_breakBtn.setText(Farsi.Convert(breakBtnLabel));

                                // tabberView_breakBtn.setTextColor(Color.WHITE);
                                drawable = tabberView_breakBtn.getBackground();
                                drawable.setColorFilter(Color.parseColor(AVL_Service.SDBreakColor), Mode.SRC_IN);
                                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                                    tabberView_breakBtn.setBackground(drawable);
                                else
                                    tabberView_breakBtn.setBackgroundDrawable(drawable);
                            }
                            if (tripView_breakBtn != null) {
                                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                                    tripView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                                    tripView_breakBtn.setText(breakBtnLabel);
                                } else
                                    tripView_breakBtn.setText(Farsi.Convert(breakBtnLabel));

                                // tripView_breakBtn.setTextColor(Color.WHITE);
                                drawable = tripView_breakBtn.getBackground();
                                drawable.setColorFilter(Color.parseColor(AVL_Service.SDBreakColor), Mode.SRC_IN);
                                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                                    tripView_breakBtn.setBackground(drawable);
                                else
                                    tripView_breakBtn.setBackgroundDrawable(drawable);
                            }
                            if (estimateView_breakBtn != null) {
                                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                                    estimateView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                                    estimateView_breakBtn.setText(breakBtnLabel);
                                } else
                                    estimateView_breakBtn.setText(Farsi.Convert(breakBtnLabel));

                                // estimateView_breakBtn.setTextColor(Color.WHITE);
                                drawable = estimateView_breakBtn.getBackground();

                                drawable.setColorFilter(Color.parseColor(AVL_Service.SDBreakColor), Mode.SRC_IN);
                                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                                    estimateView_breakBtn.setBackground(drawable);
                                else
                                    estimateView_breakBtn.setBackgroundDrawable(drawable);
                            }
                            if (paymentView_breakBtn != null) {
                                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                                    paymentView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                                    paymentView_breakBtn.setText(breakBtnLabel);
                                } else
                                    paymentView_breakBtn.setText(Farsi.Convert(breakBtnLabel));

                                // paymentView_breakBtn.setTextColor(Color.WHITE);
                                drawable = paymentView_breakBtn.getBackground();
                                drawable.setColorFilter(Color.parseColor(AVL_Service.SDBreakColor), Mode.SRC_IN);
                                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                                    paymentView_breakBtn.setBackground(drawable);
                                else
                                    paymentView_breakBtn.setBackgroundDrawable(drawable);
                            }
                            if (topUpView_breakBtn != null) {
                                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                                    topUpView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                                    topUpView_breakBtn.setText(breakBtnLabel);
                                } else
                                    topUpView_breakBtn.setText(Farsi.Convert(breakBtnLabel));

                                // topUpView_breakBtn.setTextColor(Color.WHITE);
                                drawable = topUpView_breakBtn.getBackground();
                                drawable.setColorFilter(Color.parseColor(AVL_Service.SDBreakColor), Mode.SRC_IN);
                                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                                    topUpView_breakBtn.setBackground(drawable);
                                else
                                    topUpView_breakBtn.setBackgroundDrawable(drawable);
                            }

                        }
                        if (sendBreak) {

                            showToastMessage(R.string.Messagehasbeensentdispatch);
                            serviceHandle.sendMessageToServer(String.valueOf(break_status), "SDHS", MsgType.SDONBREAK, AckType.NEW, MsgValidity.Medium, MsgPriority.Normal);
                            if (break_status == 1)
                                totalBreaksTaken++;

                        }
                    } else {
                        // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.DevicefetchingBreakStats)), Toast.LENGTH_SHORT).show();
                        showToastMessage(R.string.DevicefetchingBreakStats);
                    }

                } else {

                    if ((System.currentTimeMillis() - firstClickTime) < 700) {
                        boolean sendBreak = true;
                        if (totalBreaksTaken < 0)
                            totalBreaksTaken = AVL_Service.sdTotalBreaksTaken;
                        if (totalBreaksTaken >= 0) {
                            if (break_status == 0) {
                                if (totalBreaksTaken <= AVL_Service.sdMaxAllowedBreaksInOneDay) {
                                    break_status = 1;
                                    if (tabberView_breakBtn != null) {
                                        // tabberView_breakBtn.setTextColor(Color.BLACK);
                                        drawable = tripView_breakBtn.getBackground();
                                        drawable.setColorFilter(Color.parseColor(AVL_Service.SDResumeColor), Mode.SRC_IN);
                                        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                                            tripView_breakBtn.setBackground(drawable);
                                        else
                                            tripView_breakBtn.setBackgroundDrawable(drawable);
                                        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                                            tabberView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                                            tabberView_breakBtn.setText(resumeButtonLabel);
                                        } else
                                            tabberView_breakBtn.setText(Farsi.Convert(resumeButtonLabel));

                                    }
                                    if (tripView_breakBtn != null) {
                                        // tripView_breakBtn.setTextColor(Color.BLACK);
                                        drawable = tripView_breakBtn.getBackground();
                                        drawable.setColorFilter(Color.parseColor(AVL_Service.SDResumeColor), Mode.SRC_IN);
                                        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                                            tripView_breakBtn.setBackground(drawable);
                                        else
                                            tripView_breakBtn.setBackgroundDrawable(drawable);
                                        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                                            tripView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                                            tripView_breakBtn.setText(resumeButtonLabel);
                                        } else
                                            tripView_breakBtn.setText(Farsi.Convert(resumeButtonLabel));
                                    }
                                    if (estimateView_breakBtn != null) {
                                        // estimateView_breakBtn.setTextColor(Color.BLACK);
                                        drawable = estimateView_breakBtn.getBackground();
                                        drawable.setColorFilter(Color.parseColor(AVL_Service.SDResumeColor), Mode.SRC_IN);
                                        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                                            estimateView_breakBtn.setBackground(drawable);
                                        else
                                            estimateView_breakBtn.setBackgroundDrawable(drawable);
                                        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                                            estimateView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                                            estimateView_breakBtn.setText(resumeButtonLabel);
                                        } else
                                            estimateView_breakBtn.setText(Farsi.Convert(resumeButtonLabel));
                                    }
                                    if (paymentView_breakBtn != null) {
                                        // paymentView_breakBtn.setTextColor(Color.BLACK);
                                        drawable = paymentView_breakBtn.getBackground();
                                        drawable.setColorFilter(Color.parseColor(AVL_Service.SDResumeColor), Mode.SRC_IN);
                                        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                                            paymentView_breakBtn.setBackground(drawable);
                                        else
                                            paymentView_breakBtn.setBackgroundDrawable(drawable);
                                        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                                            paymentView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                                            paymentView_breakBtn.setText(resumeButtonLabel);
                                        } else
                                            paymentView_breakBtn.setText(Farsi.Convert(resumeButtonLabel));
                                    }
                                    if (topUpView_breakBtn != null) {
                                        // topUpView_breakBtn.setTextColor(Color.BLACK);
                                        drawable = topUpView_breakBtn.getBackground();
                                        drawable.setColorFilter(Color.parseColor(AVL_Service.SDResumeColor), Mode.SRC_IN);
                                        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                                            topUpView_breakBtn.setBackground(drawable);
                                        else
                                            topUpView_breakBtn.setBackgroundDrawable(drawable);
                                        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                                            topUpView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                                            topUpView_breakBtn.setText(resumeButtonLabel);
                                        } else
                                            topUpView_breakBtn.setText(Farsi.Convert(resumeButtonLabel));
                                    }
                                } else {
                                    sendBreak = false;
                                    // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.AllowedLimitofBreaks)), Toast.LENGTH_LONG).show();
                                    showToastMessage(R.string.AllowedLimitofBreaks);
                                }
                            } else if (break_status == 1) {
                                break_status = 0;

                                if (tabberView_breakBtn != null) {
                                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                                        tabberView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                                        tabberView_breakBtn.setText(breakBtnLabel);
                                    } else
                                        tabberView_breakBtn.setText(Farsi.Convert(breakBtnLabel));

                                    // tabberView_breakBtn.setTextColor(Color.WHITE);
                                    drawable = tabberView_breakBtn.getBackground();
                                    drawable.setColorFilter(Color.parseColor(AVL_Service.SDBreakColor), Mode.SRC_IN);
                                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                                        tabberView_breakBtn.setBackground(drawable);
                                    else
                                        tabberView_breakBtn.setBackgroundDrawable(drawable);
                                }
                                if (tripView_breakBtn != null) {
                                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                                        tripView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                                        tripView_breakBtn.setText(breakBtnLabel);
                                    } else
                                        tripView_breakBtn.setText(Farsi.Convert(breakBtnLabel));

                                    // tripView_breakBtn.setTextColor(Color.WHITE);
                                    drawable = tripView_breakBtn.getBackground();
                                    drawable.setColorFilter(Color.parseColor(AVL_Service.SDBreakColor), Mode.SRC_IN);
                                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                                        tripView_breakBtn.setBackground(drawable);
                                    else
                                        tripView_breakBtn.setBackgroundDrawable(drawable);
                                }
                                if (estimateView_breakBtn != null) {
                                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                                        estimateView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                                        estimateView_breakBtn.setText(breakBtnLabel);
                                    } else
                                        estimateView_breakBtn.setText(Farsi.Convert(breakBtnLabel));

                                    // estimateView_breakBtn.setTextColor(Color.WHITE);
                                    drawable = estimateView_breakBtn.getBackground();
                                    drawable.setColorFilter(Color.parseColor(AVL_Service.SDBreakColor), Mode.SRC_IN);
                                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                                        estimateView_breakBtn.setBackground(drawable);
                                    else
                                        estimateView_breakBtn.setBackgroundDrawable(drawable);
                                }
                                if (paymentView_breakBtn != null) {
                                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                                        paymentView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                                        paymentView_breakBtn.setText(breakBtnLabel);
                                    } else
                                        paymentView_breakBtn.setText(Farsi.Convert(breakBtnLabel));

                                    // paymentView_breakBtn.setTextColor(Color.WHITE);
                                    drawable = paymentView_breakBtn.getBackground();
                                    drawable.setColorFilter(Color.parseColor(AVL_Service.SDBreakColor), Mode.SRC_IN);
                                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                                        paymentView_breakBtn.setBackground(drawable);
                                    else
                                        paymentView_breakBtn.setBackgroundDrawable(drawable);
                                }
                                if (topUpView_breakBtn != null) {
                                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                                        topUpView_breakBtn.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                                        topUpView_breakBtn.setText(breakBtnLabel);
                                    } else
                                        topUpView_breakBtn.setText(Farsi.Convert(breakBtnLabel));

                                    // topUpView_breakBtn.setTextColor(Color.WHITE);
                                    drawable = topUpView_breakBtn.getBackground();
                                    drawable.setColorFilter(Color.parseColor(AVL_Service.SDBreakColor), Mode.SRC_IN);
                                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN)
                                        topUpView_breakBtn.setBackground(drawable);
                                    else
                                        topUpView_breakBtn.setBackgroundDrawable(drawable);
                                }

                            }
                            if (sendBreak) {

                                showToastMessage(R.string.Messagehasbeensentdispatch);
                                serviceHandle.sendMessageToServer(String.valueOf(break_status), "SDHS", MsgType.SDONBREAK, AckType.NEW, MsgValidity.Medium, MsgPriority.Normal);
                                if (break_status == 1)
                                    totalBreaksTaken++;

                            }
                        } else {
                            // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.DevicefetchingBreakStats)), Toast.LENGTH_SHORT).show();
                            showToastMessage(R.string.DevicefetchingBreakStats);
                        }
                    }
                    firstClickTime = System.currentTimeMillis();

                }

            } catch (Exception ex) {
                LogException("[Exception in break button click]" + "[breakButtonLintener]" + "[" + ex.getLocalizedMessage() + "]");
            }
        }

    };

    /*--------------------------------------------------------------pttButtonLintener-----------------------------------------------------------------*/
    private final OnClickListener pttButtonLintener = new OnClickListener() {

        @Override
        public void onClick(View v) {
            String custPhone;
            if(AVL_Service.SDEnableAsteriskExtension) {
                try {
                    if (registered) {
                        if (!isCaling) {
                            if (((Button) v).getText().toString().equalsIgnoreCase("D2C")) {
                                custPhone = currentTrip.CustomerPhoneNumberForD2C.replace("-", "");
                                if(custPhone.contains("000000000")) {
                                    if (Integer.valueOf(currentTrip.MARSRefID) > 0)
                                        custPhone = AVL_Service.MARS_HelpLine_Number;
                                    else
                                        custPhone = AVL_Service.ASCS_HelpLine_Number;
                                }
                            }
                            else {
                                if (AVL_Service.SDAsteriskDispatcherExt.length() > 1)
                                    custPhone = AVL_Service.SDAsteriskDispatcherExt;
                                else
                                    custPhone = AVL_Service.ASCS_HelpLine_Number;
                            }
                            try {
                                abtoPhone.startCall(custPhone, accId);
                                activeRemoteContact = custPhone;
                                startAV(false);
                                if (!custPhone.contains("@")) {
                                    activeRemoteContact = String.format("<sip:%1$s@%2$s>", custPhone, domain);
                                } else {
                                    activeRemoteContact = String.format("<sip:%1$s>", custPhone);
                                }
                            } catch (RemoteException e) {
                                e.printStackTrace();
                            }

                        } else {
                            // hangup active call
                            abtoPhone.hangUp();
                        }
                    }
                    else
                        Toast.makeText(TaxiPlexer.this, "Sip Ext. Not Registered", Toast.LENGTH_LONG).show();
                } catch (Exception e) {
                    exception("[Exception in pttButtonLintener]" + "[pttButtonLintener]" + "[" + e.getLocalizedMessage() + "]");
                }
            }
            else {
                if (((Button) v).getText().toString().equalsIgnoreCase("D2C")) {
                    custPhone = currentTrip.CustomerPhoneNumberForD2C.replace("-", "");
                    if(!custPhone.contains("000000000")) {
                        if (Integer.valueOf(currentTrip.MARSRefID) > 0)
                            custPhone = AVL_Service.MARS_HelpLine_Number;
                        else
                            custPhone = AVL_Service.ASCS_HelpLine_Number;
                    }
                }
                else {
                    if (AVL_Service.SDAsteriskDispatcherExt.length() > 1)
                        custPhone = AVL_Service.SDAsteriskDispatcherExt;
                    else
                        custPhone = AVL_Service.ASCS_HelpLine_Number;
                }
                try {
                    Intent callIntent = new Intent(Intent.ACTION_CALL);
                    callIntent.setData(Uri.parse("tel:" + custPhone));
                    startActivity(callIntent);
                } catch (ActivityNotFoundException activityException) {
                    exception("[Exception in making a call]" + "[pttButtonLintener]" + "[" + activityException.getLocalizedMessage() + "]");
                }
            }
        }
    };


    /*------------------------------------------------fetchWallTrips------------------------------------------------------------------------*/
    private void fetchWallTrips(boolean showProgress, final boolean callSortingAfter) {
        try {
            SetApplicationLocal();
            if (showProgress)
                handleShowProgress(Farsi.Convert(getResources().getString(R.string.FetchingWallTrips)));
            new Thread() {
                @Override
                public void run() {
                    try {

                        StringBuffer envelope = new StringBuffer(
                                "<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><GetSpecializedWallTrips xmlns=\"http://Itcurves.net/\"><vLatitude>" + AVL_Service.pref
                                        .getString("LastLatitude", "0.000000")
                                        + "</vLatitude><vLongitude>"
                                        + AVL_Service.pref.getString("LastLongitude", "0.000000")
                                        + "</vLongitude><vVehicleNumber>"
                                        + AVL_Service.pref.getString("VehicleID", "0")
                                        + "</vVehicleNumber></GetSpecializedWallTrips></soap:Body></soap:Envelope>");
                        // StringBuffer envelope = new StringBuffer(
                        // "<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><GetSpecializedWallTrips xmlns=\"http://Itcurves.net/\"><vLatitude>39.1432028263807</vLatitude><vLongitude>-77.2227812837809</vLongitude></GetSpecializedWallTrips></soap:Body></soap:Envelope>");

                        // Calling Web Service and Parsing Response
                        WS_Response tempResponse = CallingWS.submit(AVL_Service.webServiceURL, AVL_Service.soapAction_SpecializedWallTrips, envelope.toString());
                        if (tempResponse != null && tempResponse.responseType != null && tempResponse.responseType.equalsIgnoreCase("GetSpecializedWallTripsResult")) {
                            if (WALLTrips != null && AVL_Service.SDEnableVoiceIfNewTripAddedOnWall) {

                                synchronized (WALLTrips) {
                                    TempWALLTrips.clear();
                                    TempWALLTrips.addAll(WALLTrips);

                                    WALLTrips.clear();
                                    WALLTrips.addAll(tempResponse.wallTrips);
                                    WALLTrips.notifyAll();
                                }

                                if (WALLTrips.size() > 0 && TempWALLTrips.size() > 0) {
                                    for (int counter = 0; counter < WALLTrips.size(); counter++) {
                                        for (int counter1 = 0; counter1 < TempWALLTrips.size(); counter1++) {
                                            if ((WALLTrips.get(counter).tripNumber.equalsIgnoreCase(TempWALLTrips.get(counter1).tripNumber))) {
                                                // Toast.makeText(TaxiPlexer.this, "New Trip has been added to the wall.", Toast.LENGTH_LONG).show();
                                                break;
                                            } else if (counter1 == (TempWALLTrips.size() - 1))
                                                newWallTripSound = true;
                                        }

                                    }
                                } else if (WALLTrips.size() > 0 && TempWALLTrips.size() == 0)
                                    newWallTripSound = true;

                                if (newWallTripSound) {
                                    bidOfferSound.start();
                                    newWallTripSound = false;
                                }
                            } else {
                                synchronized (WALLTrips) {
                                    WALLTrips.clear();
                                    WALLTrips.addAll(tempResponse.wallTrips);
                                    WALLTrips.notifyAll();
                                }
                            }
                            msgHandler.obtainMessage(MsgType.wallTripsArray, tempResponse.wallTrips).sendToTarget();
                            lastUpdated = System.currentTimeMillis();
                        } else {
                            // exception("Fetch WallTrips Failed");
                            fetchSecondaryWallTrips();
                        }
                    } catch (Exception e) {
                        fetchSecondaryWallTrips();

                    }
                    if (!callSortingAfter)
                        hideProgressDialog();
                }// run

            }.start();
        } catch (Exception ex) {
            LogException("[Exception in fetching wall trips]" + "[fetchWallTrips]" + "[" + ex.getLocalizedMessage() + "]");
        }

    }

    /*------------------------------------------------fetchWallTrips------------------------------------------------------------------------*/
    @Override
    public void onLowMemory() {
        // TODO Auto-generated method stub
        super.onLowMemory();
        // Toast.makeText(getApplicationContext(), "onLowMemory", Toast.LENGTH_LONG).show();
        handleException("onLowMemory");
        System.gc();

    }

    /*------------------------------------------------onTrimMemory------------------------------------------------------------------------*/
    @SuppressLint("NewApi")
    @Override
    public void onTrimMemory(int level) {
        // TODO Auto-generated method stub
        int currentapiVersion = android.os.Build.VERSION.SDK_INT;
        if (currentapiVersion >= android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
            super.onTrimMemory(level);

        }
        // handleException("onTrimMemory");

        System.gc();

    }

    /*------------------------------------------------fetchSecondaryWallTrips------------------------------------------------------------------------*/
    private void fetchSecondaryWallTrips() {
        try {

            StringBuffer envelope = new StringBuffer(
                    "<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><GetWallTrips xmlns=\"http://Itcurves.net/\"><vVehicleNumber>"
                            + AVL_Service.pref.getString("VehicleID", "0")
                            + "</vVehicleNumber></GetWallTrips></soap:Body></soap:Envelope>");

            // Calling Web Service and Parsing Response
            WS_Response tempResponse = CallingWS.submit(AVL_Service.webServiceURL, AVL_Service.soapAction_WallTrips, envelope.toString());
            if (tempResponse != null && tempResponse.responseType != null && tempResponse.responseType.equalsIgnoreCase("GetWallTripsResult")) {
                if (WALLTrips != null && AVL_Service.SDEnableVoiceIfNewTripAddedOnWall) {

                    synchronized (WALLTrips) {
                        TempWALLTrips.clear();
                        TempWALLTrips.addAll(WALLTrips);

                        WALLTrips.clear();
                        WALLTrips.addAll(tempResponse.wallTrips);
                        WALLTrips.notifyAll();
                    }

                    if (WALLTrips.size() > 0 && TempWALLTrips.size() > 0) {
                        for (int counter = 0; counter < WALLTrips.size(); counter++) {
                            for (int counter1 = 0; counter1 < TempWALLTrips.size(); counter1++) {
                                if ((WALLTrips.get(counter).tripNumber.equalsIgnoreCase(TempWALLTrips.get(counter1).tripNumber))) {
                                    // Toast.makeText(TaxiPlexer.this, "New Trip has been added to the wall.", Toast.LENGTH_LONG).show();
                                    break;
                                } else if (counter1 == (TempWALLTrips.size() - 1))
                                    newWallTripSound = true;
                            }

                        }
                    } else if (WALLTrips.size() > 0 && TempWALLTrips.size() == 0)
                        newWallTripSound = true;

                    if (newWallTripSound) {
                        bidOfferSound.start();
                        newWallTripSound = false;
                    }
                } else {
                    synchronized (WALLTrips) {
                        WALLTrips.clear();
                        WALLTrips.addAll(tempResponse.wallTrips);
                        WALLTrips.notifyAll();
                    }
                }
                msgHandler.obtainMessage(MsgType.wallTripsArray, tempResponse.wallTrips).sendToTarget();
                lastUpdated = System.currentTimeMillis();
            } else {
                LogException("[fetching Secondary wall trips]" + "[fetchSecondaryWallTrips]");
            }
        } catch (Exception ex) {
            exception("[Exception in fetching Secondary wall trips]" + "[fetchSecondaryWallTrips]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }

    /*------------------------------------------------fetchManifestWallTrips------------------------------------------------------------------------*/
    private void fetchManifestWallTrips(boolean showProgress) {
        try {
            if (showProgress)
                handleShowProgress(Farsi.Convert(getResources().getString(R.string.Fetching_Manifest_Wall)));
            new Thread() {
                @Override
                public void run() {
                    try {

                        StringBuffer envelope = new StringBuffer(
                                "<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><GetManifestSummaryInfo xmlns=\"http://Itcurves.net/\" /></soap:Body></soap:Envelope>");
                        // Calling Web Service and Parsing Response
                        WS_Response tempResponse = CallingWS.submit(AVL_Service.webServiceURL, AVL_Service.soapAction_ManifestWallTrips, envelope.toString());
                        if (tempResponse != null && tempResponse.responseType != null && tempResponse.responseType.equalsIgnoreCase("GetManifestSummaryInfoResult")) {
                            msgHandler.obtainMessage(MsgType.manifestwallTripsArray, tempResponse.manifestWallTrips).sendToTarget();
                            lastUpdated_MWall = System.currentTimeMillis();
                        } else {
                            exception("[fetching Manifest wall trips]" + "[fetchManifestWallTrips]");
                        }
                    } catch (Exception e) {
                        exception("[Exception in fetching Manifest wall trips]" + "[fetchManifestWallTrips]" + "[" + e.getLocalizedMessage() + "]");
                    }
                    hideProgressDialog();
                }// run

            }.start();
        } catch (Exception ex) {
            LogException("[Exception in fetching Manifest wall trips]" + "[fetchManifestWallTrips]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }

    /*---------------------------------------------------------fetchBalnaceofDriver---------------------------------------------------------*/
    private void GetBalanceAndBlackListStatus(int ShowMessageType) {
        handleShowProgress(Farsi.Convert(getResources().getString(R.string.Balance_Check)));
        final RestClient client = new RestClient(AVL_Service.InLoadAPI_URL + "/PPV/CheckAllowedBalance");
        try {
            client.AddParam("driverno", ttfUserid.getText().toString().trim());

        } catch (JSONException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        }
        client.AddHeader("Content-Type", "application/json");
        final int MessageType = ShowMessageType;
        new Thread() {
            @Override
            public void run() {
                try {
                    client.Execute(RestClient.RequestMethod.POST);
                    final String response = client.getResponse();
                    if (client.getResponseCode() == 200) {
                        if (response != null) {
                            JSONObject mainObject = new JSONObject(response);
                            final boolean isAllowed = mainObject.getBoolean("IsAllowed");
                            final String Balance = mainObject.getString("AvailableBalance");
                            BalanceOfDriver = Balance;
                            final String totalRejected = mainObject.getString("TotalTripRejections");
                            final String AllowedRejections = mainObject.getString("AllowedTripRejections");
                            final String IsBlackListed = mainObject.getString("IsBlacklisted");
                            runOnUiThread(new Runnable() {
                                public void run() {
                                    if (AVL_Service.SDUnitOfCurrency.equalsIgnoreCase("SAR"))
                                        balanceValue.setText(Farsi.Convert(getResources().getString(R.string.Riyal)) + " " + Balance);
                                    else
                                        balanceValue.setText(AVL_Service.SDUnitOfCurrency + " " + Balance);
                                    TotalTripRejections = ParseIntFromString(totalRejected);
                                    AllowedTripRejections = ParseIntFromString(AllowedRejections);
                                    IsBlackList = IsBlackListed;
                                    ShowBlackLIstNotify("", MessageType);
                                }
                            });
                        }
                    }


                } catch (Exception e) {
                    exception("[Exception in GetBalanceAndBlackListStatus]" + "[GetBalanceAndBlackListStatus]" + "[" + e.getLocalizedMessage() + "]");
                }
                hideProgressDialog();
            }// run

        }.start();




    }

    /*---------------------------------------------------------ShowBlackLIstNotify---------------------------------------------------------*/
    public void ShowBlackLIstNotify(String MessageToShow, int MessageType) {
        try {
            if (IsBlackList.equalsIgnoreCase("0") && (TotalTripRejections < AllowedTripRejections && TotalTripRejections > 0) && MessageType != 2) {

                MessageToShow += "\n\n";
                MessageToShow += getResources().getString(R.string.YouAreAllowedFor) + " " + (AllowedTripRejections - TotalTripRejections) + " " + getResources().getString(R.string.MoreRejections);
            } else if ((IsBlackList.equalsIgnoreCase("1") || (TotalTripRejections >= AllowedTripRejections)) && MessageType != 2) {
                MessageToShow += "\n\n";
                MessageToShow += getResources().getString(R.string.TemporarilyBlacklisted);

            }
            if (MessageToShow.trim().length() > 0) {
                AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                builder
                        .setIcon(android.R.drawable.ic_dialog_alert)
                        .setTitle(Farsi.Convert(getResources().getString(R.string.AlertBalance)))
                        .setMessage(Farsi.Convert(MessageToShow))
                        .setPositiveButton(Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {

                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                dialog.dismiss();
                            } // onClick

                        });
                AlertDialog alert = builder.create();
                alert.show();

                dialogFontSize(alert);
            }
        } catch (Exception ex) {
        }
    }

    /*---------------------------------------TopupCustomerBalance_Driver-------------------------------------------*/
    private void TopupCustomerBalance_Driver() {
        showProgressDialog(Farsi.Convert(getResources().getString(R.string.Processing)));
        final RestClient client = new RestClient(AVL_Service.InLoadAPI_URL + "/PPV/TopupBalance");
        try {
            client.AddParam("drivernoorcustomerphone", ttfUserid.getText().toString().trim());
            client.AddParam("cardno", AVL_Service.pref.getString("TopUpCardNo", "0000"));
            client.AddParam("persontype", "1");

        } catch (JSONException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        }
        client.AddHeader("Content-Type", "application/json");

        new Thread() {
            @Override
            public void run() {
                try {
                    client.Execute(RestClient.RequestMethod.POST);
                    final String response = client.getResponse();
                    if (client.getResponseCode() == 200) {
                        JSONObject mainObject = new JSONObject(response);
                        final boolean IsUpdated = mainObject.getBoolean("IsUpdated");
                        final String TopupAmount = mainObject.getString("TopupAmount");
                        final String UpdatedAmount = mainObject.getString("UpdatedAmount");

                            runOnUiThread(new Runnable() {
                                public void run() {
                                    if(IsUpdated){
                                        if (AVL_Service.SDUnitOfCurrency.equalsIgnoreCase("SAR")) {
                                            balanceValue.setText(Farsi.Convert(getResources().getString(R.string.Riyal)) + " " + UpdatedAmount);
                                            TopUpAmount_Text.setText(Farsi.Convert(getResources().getString(R.string.Riyal)) + " " + UpdatedAmount);
                                        }else {
                                            balanceValue.setText(AVL_Service.SDUnitOfCurrency + " " + UpdatedAmount);
                                            TopUpAmount_Text.setText(AVL_Service.SDUnitOfCurrency + " " + UpdatedAmount);
                                        }
                                        Toast.makeText(getApplicationContext(), "Account ToppedUp with " + TopupAmount, Toast.LENGTH_LONG).show();
                                    } else{
                                        Toast.makeText(getApplicationContext(), "Top Up Unsuccessfull", Toast.LENGTH_LONG).show();
                                    }

                                }
                            });

                    }


                } catch (Exception e) {
                    exception("[Exception in TopupCustomerBalance_Driver]" + "[TopupCustomerBalance_Driver]" + "[" + e.getLocalizedMessage() + "]");
                }
                hideProgressDialog();
            }// run

        }.start();



    }

    /*------------------------------------------------fetchMessageHistory------------------------------------------------------------------------*/
    private void fetchMessageHistory() {
        try {
            SetApplicationLocal();
            handleShowProgress(Farsi.Convert(getResources().getString(R.string.FetchingMessageHistory)));
            new Thread() {
                @Override
                public void run() {
                    try {

                        StringBuffer envelope = new StringBuffer(
                                "<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><GetMessageHistory xmlns=\"http://Itcurves.net/\"><driverID>" + AVL_Service.pref
                                        .getString("DriverID", "0")
                                        + "</driverID><dtFrom>"
                                        + ""
                                        + "</dtFrom><dtTo>"
                                        + ""
                                        + "</dtTo></GetMessageHistory></soap:Body></soap:Envelope>");
                        // Calling Web Service and Parsing Response
                        WS_Response tempResponse = CallingWS.submit(AVL_Service.webServiceURL, AVL_Service.soapAction_MessageHistory, envelope.toString());
                        if (tempResponse != null && tempResponse.responseType != null && tempResponse.responseType.equalsIgnoreCase("GetMessageHistoryResult")) {
                            msgHandler.obtainMessage(MsgType.messageHistoryArray, tempResponse.cannedMessages).sendToTarget();
                            lastUpdated = System.currentTimeMillis();
                        } else {
                            LogException("[Fetch MEssage History]" + "[fetchMessageHistory]");
                        }
                    } catch (Exception e) {
                        exception("[Exception in fetchMessageHistory]" + "[fetchMessageHistory]" + "[" + e.getLocalizedMessage() + "]");
                    }
                    hideProgressDialog();
                }// run

            }.start();
        } catch (Exception ex) {
            LogException("[Exception in fetchMessageHistory]" + "[fetchMessageHistory]" + "[" + ex.getLocalizedMessage() + "]");
        }
    }

    /*---------------------------------------------------------fetchTripList------------------------------------------------------------------------*/
    private void fetchTripList() {

        LogException("SYNC: Start of fetchTripList");
        handleShowProgress(Farsi.Convert(getResources().getString(R.string.Fetching_Trip_List)));
        new Thread() {
            @Override
            public void run() {
                while (!Thread.currentThread().isInterrupted()) {
                    try {

                        String envelope = "<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><GetAssignedAndPendingTripsInString xmlns=\"http://Itcurves.net/\" ><IDRIVERID>" + AVL_Service.pref
                                .getString("DriverID", "Unknown")
                                + "</IDRIVERID><IVEHICLEID>"
                                + AVL_Service.pref.getString("VehicleID", "0")
                                + "</IVEHICLEID></GetAssignedAndPendingTripsInString></soap:Body></soap:Envelope>";
                        // Calling Web Service and Parsing Response
                        final WS_Response tempResponse = CallingWS.submit(AVL_Service.webServiceURL, AVL_Service.soapAction_TripDetail, envelope);
                        // WS_Response tempResponse = CallingWS.submit("http://192.168.4.51/MRMSWebService/MRMSGlobalService.asmx", AVL_Service.soapAction_TripDetail,
                        // envelope);

                        if (tempResponse != null && tempResponse.responseType != null && tempResponse.responseType.equalsIgnoreCase("GetAssignedAndPendingTripsInStringResult")) {
                            // msgHandler.obtainMessage(MsgType.wallTripsArray, tempResponse.tripList).sendToTarget();
                            Thread.currentThread().interrupt();
                            runOnUiThread(new Runnable() {
                                public void run() {
                                    LogException("[Sync Trip List]" + "[fetchTripList]");

                                }
                            });
                            if (tempResponse.tripList.size() >= 0) {
                                runOnUiThread(new Runnable() {
                                    public void run() {
                                        Toast.makeText(TaxiPlexer.this, "Trip List is synschronized with Back Office", Toast.LENGTH_LONG).show();
                                    }
                                });
                                synchronized (arrayListOftrips) {
                                    arrayListOftrips.removeAll(arrayListOftrips);
                                    arrayListOftrips.notifyAll();

                                }
                                // synchronized (arrayListOfTreatedTrips) {
                                // arrayListOfTreatedTrips.removeAll(arrayListOfTreatedTrips);
                                // arrayListOfTreatedTrips.notifyAll();
                                // }
                                // synchronized (arrayListOfOtherTrips) {
                                // arrayListOfOtherTrips.removeAll(arrayListOfOtherTrips);
                                // arrayListOfOtherTrips.notifyAll();
                                // }

                                // runOnUiThread(new Runnable() {
                                // public void run() {
                                // tripAdapter.notifyDataSetChanged();
                                // }
                                // });

                                // arrayListOftrips.addAll(arrayListOfTreatedTrips);
                                // arrayListOftrips.addAll(arrayListOfOtherTrips);
                                for (tripListIterator = 0; tripListIterator < tempResponse.tripList.size(); tripListIterator++) {
                                    // runOnUiThread(new Runnable() {
                                    // public void run() {
                                    // try {
                                    // LogException("SYNC: tripListIterator Trip Num:" + new Trip("0^1^SDHS" + Constants.BODYSEPARATOR +
                                    // tempResponse.tripList.get(tripListIterator)).tripNumber);
                                    // } catch (ParseException e) {
                                    // // TODO Auto-generated catch block
                                    // e.printStackTrace();
                                    // }
                                    //
                                    // }
                                    // });
                                    if (tripListIterator == tempResponse.tripList.size() - 1)
                                        TaxiPlexer.this.msgHandler
                                                .obtainMessage(MsgType.TripDetails, "0^1^SDHS" + Constants.BODYSEPARATOR + tempResponse.tripList.get(tripListIterator))
                                                .sendToTarget();
                                    else
                                        TaxiPlexer.this.msgHandler
                                                .obtainMessage(MsgType.TripDetails, "0^0^SDHS" + Constants.BODYSEPARATOR + tempResponse.tripList.get(tripListIterator))
                                                .sendToTarget();

                                    // runOnUiThread(new Runnable() {
                                    // public void run() {
                                    // handleTripDetails("0^0^SDHS" + Constants.BODYSEPARATOR + tempResponse.tripList.get(tripListIterator));
                                    // }
                                    // });
                                    android.os.SystemClock.sleep(500);
                                }
                            }
                            // android.os.SystemClock.sleep(5000);

                        }
                    } catch (Exception e) {

                        hideProgressDialog();
                        exception("[Exception in fetchTripList]" + "[fetchTripList]" + "[" + e.getLocalizedMessage() + "]");
                    }
                    runOnUiThread(new Runnable() {
                        public void run() {
                            LogException("[Sync Trip List]" + "[fetchTripList]");

                        }
                    });
                    hideProgressDialog();
                }
            }// run

        }.start();

    }

    /*-------------------------------------------------tripSyncCancelUnAssigned---------------------------------------------------------*/
    private void tripSyncCancelUnAssigned() {

        LogException("[Starting tripSyncCancelUnAssigned]" + "[tripSyncCancelUnAssigned]");

        try {
            if ((tripView != null && tripView.isShown()) || (paymentView != null && paymentView.isShown())) {
                // if (arrayListOfOtherTrips.indexOfTripfromTripNumber(currentTrip.tripNumber) < 0 &&
                // arrayListOfTreatedTrips.indexOfTripfromTripNumber(currentTrip.tripNumber) < 0) {
                // clearTripType = "U";
                // } else if (arrayListOfTreatedTrips.indexOfTripfromTripNumber(currentTrip.tripNumber) >= 0) {
                // if (arrayListOfTreatedTrips.get(arrayListOfTreatedTrips.indexOfTripfromTripNumber(currentTrip.tripNumber)).state.equalsIgnoreCase(States.CANCELLED))
                // clearTripType = "C";
                //
                // }

                if (arrayListOftrips.indexOfTripfromTripNumber(currentTrip.tripNumber) < 0) {
                    clearTripType = "U";
                } else if (arrayListOftrips.get(arrayListOftrips.indexOfTripfromTripNumber(currentTrip.tripNumber)).state.equalsIgnoreCase(States.CANCELLED))
                    clearTripType = "C";

                LogException("[After main condition tripSyncCancelUnAssigned]" + "[tripSyncCancelUnAssigned]");

                if (!clearTripType.equalsIgnoreCase(""))
                    runOnUiThread(new Runnable() {
                        public void run() {
                            // tripAdapter.notifyDataSetChanged();
                            try {
                                sortTripList();
                            } catch (Exception e) {
                                // TODO Auto-generated catch block
                                e.printStackTrace();
                            }
                            if (currentTrip != null) {
                                Fare = "0";
                                Extras = "0";
                                Tip = "0";
                                currentTrip = null;
                                setContentView(mainView);
                                currentView = mainView;
                                // tripAdapter.notifyDataSetChanged();
                                try {
                                    sortTripList();
                                } catch (Exception e) {
                                    // TODO Auto-generated catch block
                                    e.printStackTrace();
                                }
                            }

                            String msg = null;
                            if (clearTripType.equalsIgnoreCase("U"))
                                msg = "Trip Un-Assigned by Dispatcher";
                            else if (clearTripType.equalsIgnoreCase("C"))
                                msg = "Trip Cancelled by Dispatcher";

                            AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                            builder
                                    .setIcon(android.R.drawable.ic_dialog_alert)
                                    .setTitle(Farsi.Convert(getResources().getString(R.string.TripCleared)))
                                    .setMessage(getDataFromResourse(msg))
                                    .setPositiveButton(Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int which) {
                                            dialog.dismiss();
                                        } // onClick
                                    })
                                    .setCancelable(false);
                            AlertDialog alert = builder.create();
                            alert.show();

                            dialogFontSize(alert);

                            if (TTS)
                                onRadioClick(getDataFromResourse(msg)); // Drop all pending entries in the playback queue.
                            else
                                manifestSound.start();
                        }
                    });

            }

            LogException("[Starting tripSyncCancelUnAssigned Before Catch]" + "[tripSyncCancelUnAssigned]");

        } catch (final Exception ex) {

            exception("[Exception in tripSyncCancelUnAssigned]" + "[tripSyncCancelUnAssigned]" + "[" + ex.getLocalizedMessage() + "]");

        }
    }
    /*--------------------------------------------------------------register-----------------------------------------------------------------------*/
    private void register() {
        if (Transaction.isRegistered(this)) {
            try {
                Transaction.loadRegistrationInfo(this);
                Log.w("ChargeAnyWhere", "Loading Registeration info from file");
            } catch (RegistrationException e) {
                handleException("[Exception in registering]" + "[register]" + "[" + e.getLocalizedMessage() + "]");
            }
        } else {
            showProgressDialog(Farsi.Convert(getResources().getString(R.string.Registering_With_Caw)));
            try {
                String LicenseKey = AVL_Service.CCProcessorList.get("CAW").get_UserName();
                String PhoneNo = AVL_Service.CCProcessorList.get("CAW").get_AccountPassword();
                Transaction.processRegistration(this, this, LicenseKey, PhoneNo, PhoneNo);
            } catch (RegistrationException e) {
                handleException("[Exception in registering]" + "[register]" + "[" + e.getLocalizedMessage() + "]");
                hideProgressDialog();
            }
        }
    }

    /*--------------------------------------------------------------forceUnregister-----------------------------------------------------------------------*/
    private void forceUnregister() {
        if (!Transaction.isRegistered(this)) {
            try {
                String LicenseKey = AVL_Service.CCProcessorList.get("CAW").get_UserName();
                String PhoneNo = AVL_Service.CCProcessorList.get("CAW").get_AccountPassword();
                Transaction.processForcedUnregistration(this, this, LicenseKey, PhoneNo, PhoneNo);
                Log.w("ChargeAnyWhere", "ForceUnregister() Called.");
            } catch (Exception e) {
                handleException("[Exception in forceUnregister]" + "[forceUnregister]" + "[" + e.getLocalizedMessage() + "]");
            }
        }
    }

    /*--------------------------------------------------------------registrationCompleted-----------------------------------------------------------------------*/
    @Override
    public void registrationCompleted(final String details, final boolean successful) {
        Log.w("SDK", "registrationCompleted: " + details + " " + successful);
        runOnUiThread(new Runnable() {
            public void run() {
                hideProgressDialog();
                try {
                    if (successful) {
                        retryCount = 0;
                        register();

                        Toast.makeText(TaxiPlexer.this, "ChargeAnyWhere Response - " + details.replace(':', ' '), Toast.LENGTH_SHORT).show();
                        Log.w("ChargeAnyWhere Response - ", details);
                    } else {
                        if (retryCount < 10)
                            if (!details.contains("LicenseKey not registered")) {
                                forceUnregister();
                                ++retryCount;
                            }

                        Log.w("ChargeAnyWhere Response - ", details);
                        if (!details.equalsIgnoreCase("LicenseKey not registered"))
                            LogException("[Caw registeration failed] + [registrationCompleted]" + details.replace(':', ' '));

                    }
                } catch (Exception e) {
                    handleException("[Exception in Caw registeration]" + "[registrationCompleted]" + "[" + e.getLocalizedMessage() + "]");
                }
            }
        });
    }

	/*--------------------------------------------------------------------------------------------------------------------------
	 *---------------------------------------------------- Trip Class ----------------------------------------------------------
	 *--------------------------------------------------------------------------------------------------------------------------
	 */

    public class Trip {

        public String signatureURL;
        protected String creditCardNum;
        protected String creditCardExpiry;
        protected String creditCardTrackII;
        protected String cardProcessor;
        protected TransactionType transType;

        private Trip DropNode = null;
        protected String nodeType;
        protected Date nodeTime;
        protected int nodeColor;
        protected long rcvdTime;

        protected String destID;

        protected String tripNumber;
        public String clientName;
        protected String pickupPOI;
        protected String dropPOI;
        protected String PUaddress;
        protected String DOaddress;
        protected String PUlat;
        protected String PUlong;
        protected String DOlat;
        protected String DOlong;
        protected String PUzone;
        protected String DOzone;
        protected Date PUTime;
        protected Date DOTime;
        protected Date nodetime1;
        protected String Others;
        protected String Copay;
        protected String SharedKey;
        protected String state;
        protected Integer stateWeight;
        protected String ConfirmNumber;
        protected String clientPhoneNumber;
        protected String miles;
        protected String manifestNum;
        protected String transactionID;
        protected String authCode;
        protected String jobID;
        protected String deviceID;
        protected String requestID;
        protected String estimatedCost;
        protected String fundingSource;
        protected String paymentMethod;
        protected String cardType;
        protected String preAuthAmount;
        protected String CAW_GatewayRef;
        protected String pickRemarks;
        protected String dropRemarks;
        protected String pickApartmentNo;
        protected String dropApartmentNo;
        protected String tripType;
        protected long Validity;
        protected boolean allowDirectPickup;
        protected boolean tipApplicable;
        protected boolean maxTipInPercentage;
        protected float maxTip;
        protected float tipAmount1;
        protected float tipAmount2;
        protected float tipAmount3;
        protected float tipAmount4;
        protected double Distance;
        protected String Fare;
        protected String Extras;
        protected String Tip;
        protected float total;
        protected String mjm_Balance;
        protected String CredirCardNumber;
        protected String ActualPayment;
        protected String Owed;
        protected String FavoriteName;
        protected boolean bShowPhoneNumberOnTrip;
        protected boolean promptInquiryDialog;
        protected String iRequestAffiliateID;
        protected String GateID;
        protected int TripPayStatus;
        protected Date manifestStartTime;
        protected boolean AlreadyChecked = false;
        protected float PromotionalValue;
        protected boolean bPromotionInPercentage;
        protected String PromotionalCode;
        protected float Actual_TipPercent;
        protected boolean bWillCallRequest;
        protected boolean binprocess = false;
        protected String MARSRefID = "-1";
        protected String CCGateway = "";
        protected String CustomerPhoneNumberForD2C = "";
        protected boolean bCopayAllowedOnPaymentScreen = false;
        protected String ClassOfServiceID = "";
        String odoMeterStartValue = "0";
        String odoMeterEndValue = "0";

        public Trip(String CN, int i, String MF, Date PUt, String PUz, String DOz) {
            this.ConfirmNumber = CN;
            this.tripNumber = String.valueOf(i);
            this.manifestNum = MF;
            this.PUTime = PUt;
            this.PUzone = PUz;
            this.DOzone = DOz;
            this.tripType = "";
            this.miles = "1.0";
            this.nodeType = "";
            this.nodeTime = PUt;
            this.SharedKey = "";
            this.state = "ACCEPTED";
            this.DOTime = PUt;
            this.bWillCallRequest = false;
        }

        // Constructor for Unshared Trips
        public Trip(String trip) throws ParseException {
            try {

                this.nodeType = "PU\nDO";
                this.preAuthAmount = "0";
                this.creditCardNum = "";
                this.cardType = "Other";
                this.creditCardExpiry = "";
                this.transactionID = "";
                this.transType = TransactionType.AUTH_ONLY;
                this.cardProcessor = "";
                this.creditCardTrackII = "";
                this.tripType = "O";
                this.allowDirectPickup = true;

                String[] tempTrip = trip.split(Character.toString(Constants.BODYSEPARATOR));

                String[] header = tempTrip[0].split("\\" + Character.toString(Constants.COLSEPARATOR));
                destID = header[2]; // getting the SourceID from recieved Packet
                rcvdTime = System.currentTimeMillis() / 1000;
                // tempTrip[1] =
                // "210699^YOLANDA VELEZ^^^4009 22ND AVE, Sacramento, CA 95820^, ,  ^38.5330790653825^-121.463111797348^0^0^SOSAC^UNKWN^101500 07022013^101500 07022013^TC 10 15AM/ PU YOLANDA VELEZ/ TT 5301 F ST # 117/CHG CHC MSSP AUTH# 3793/ SHOW 5% OFF METER DISCOUNT ON CHG SLIP^0.00^0^ACCEPTED^00204956^000-000-0000^0.00^0^0^0^0^0^0^0.0000^CHC/MSSP ^Corporate-V^0^0.0000^0^^^^^^False^True^False^100.00^5.00^10.00^15.00^20.00^0^0^0^0^0^0^0^ ^40";

                tempTrip = tempTrip[1].split("\\^");

                TripFields = tempTrip.length;

                this.tripNumber = tempTrip[0].trim().equalsIgnoreCase("") ? "0" : tempTrip[0];
                this.clientName = tempTrip[1];
                this.pickupPOI = tempTrip[2];
                this.dropPOI = tempTrip[3];
                this.PUaddress = tempTrip[4];
                this.DOaddress = tempTrip[5];
                tempTrip[5].replaceAll(" ", "");
                if (tempTrip[5].trim().length() < 5)
                    this.DOaddress = "";

                this.PUlat = tempTrip[6].trim().equalsIgnoreCase("") ? "0.0" : tempTrip[6];
                this.PUlong = tempTrip[7].trim().equalsIgnoreCase("") ? "0.0" : tempTrip[7];
                this.DOlat = tempTrip[8].trim().equalsIgnoreCase("") ? "0.0" : tempTrip[8];
                this.DOlong = tempTrip[9].trim().equalsIgnoreCase("") ? "0.0" : tempTrip[9];

                this.PUzone = tempTrip[10];
                this.DOzone = tempTrip[11];
                this.PUTime = MRMS_DateFormat.parse(tempTrip[12]);
                this.nodetime1 = MRMS_DateFormat.parse(tempTrip[12]);
                this.DOTime = MRMS_DateFormat.parse(tempTrip[13]);
                this.Others = tempTrip[14];

                this.Copay = tempTrip[15];

                this.SharedKey = tempTrip[16].trim().equalsIgnoreCase("") ? "1" : tempTrip[16]; // "1";
                if (this.SharedKey.equalsIgnoreCase("1")) {
                    long diff = 1000;
                    this.PUTime = new Date(this.PUTime.getTime() - diff);
                }
                this.state = tempTrip[17];
                this.ConfirmNumber = tempTrip[18];
                this.clientPhoneNumber = tempTrip[19];

                this.miles = tempTrip[20].trim().equalsIgnoreCase("") ? "0.0" : tempTrip[20];
                this.manifestNum = tempTrip[21];

                if (this.manifestNum.trim().length() < 2) {
                    this.manifestNum = "";
                }

                if (!this.manifestNum.equalsIgnoreCase("")) {
                    this.manifestStartTime = this.PUTime;
                    for (Trip t : arrayListOftrips) {
                        if (t.manifestNum.equalsIgnoreCase(this.manifestNum)) {
                            if (this.PUTime.before(t.manifestStartTime)) {
                                this.manifestStartTime = this.PUTime;
                                t.manifestStartTime = this.PUTime;
                            } else {
                                this.manifestStartTime = t.manifestStartTime;
                                break;
                            }
                        }
                    }
                } else {
                    this.manifestStartTime = this.PUTime;
                }

                this.transactionID = tempTrip[22];
                this.authCode = tempTrip[23];
                this.jobID = tempTrip[24];
                this.deviceID = tempTrip[25];
                this.requestID = tempTrip[26];

                this.estimatedCost = EstCostforFundingSource = tempTrip[27].trim().equalsIgnoreCase("") ? "0.0" : tempTrip[27];
                this.fundingSource = tempTrip[28];
                // this.fundingSource = "Paratransit Co.";
                // this.paymentMethod = "Call& R-V";
                this.paymentMethod = tempTrip[29];
                this.cardType = tempTrip[30].trim().equalsIgnoreCase("0") ? "Other" : tempTrip[30].trim();
                this.preAuthAmount = tempTrip[31].trim().equalsIgnoreCase("") ? "0.0" : tempTrip[31];
                this.CAW_GatewayRef = tempTrip[32];
                this.pickRemarks = tempTrip[33];
                this.dropRemarks = tempTrip[34];
                this.pickApartmentNo = tempTrip[35];
                this.dropApartmentNo = tempTrip[36];
                this.tripType = tempTrip[37];
                this.allowDirectPickup = Boolean.parseBoolean(tempTrip[38]);
                this.tipApplicable = Boolean.parseBoolean(tempTrip[39].equalsIgnoreCase("") ? "false" : tempTrip[39]);
                this.maxTipInPercentage = Boolean.parseBoolean(tempTrip[40].equalsIgnoreCase("") ? "false" : tempTrip[40]);
                this.maxTip = Float.valueOf(tempTrip[41].equalsIgnoreCase("") ? "0" : tempTrip[41]);
                this.tipAmount1 = Float.valueOf(tempTrip[42].equalsIgnoreCase("") ? "0" : tempTrip[42]);
                this.tipAmount2 = Float.valueOf(tempTrip[43].equalsIgnoreCase("") ? "0" : tempTrip[43]);
                this.tipAmount3 = Float.valueOf(tempTrip[44].equalsIgnoreCase("") ? "0" : tempTrip[44]);
                this.tipAmount4 = Float.valueOf(tempTrip[45].equalsIgnoreCase("") ? "0" : tempTrip[45]);
                if (tempTrip.length > 46)
                    this.Distance = Double.parseDouble(tempTrip[46].equalsIgnoreCase("") ? "0" : tempTrip[46]);
                else
                    this.Distance = 0;
                //
                if (tempTrip.length > 47)
                    this.Fare = tempTrip[47].trim().equalsIgnoreCase("") ? "0" : tempTrip[47];
                else
                    this.Fare = "0";
                //
                if (tempTrip.length > 48)
                    this.Extras = tempTrip[48].trim().equalsIgnoreCase("") ? "0" : tempTrip[48];
                else
                    this.Extras = "0";
                //
                if (tempTrip.length > 49)
                    this.Tip = tempTrip[49].trim().equalsIgnoreCase("") ? "0" : tempTrip[49];
                else
                    this.Tip = "0";

                if (tempTrip.length > 50)
                    this.total = Float.valueOf(tempTrip[50].equalsIgnoreCase("") ? "1000" : tempTrip[50]);
                else
                    this.total = 1000;
                //
                if (tempTrip.length > 51)
                    this.mjm_Balance = tempTrip[51].trim().equalsIgnoreCase("") ? "0" : tempTrip[51];
                else
                    this.mjm_Balance = "0";

                if (tempTrip.length > 52)
                    this.ActualPayment = tempTrip[52].trim().equalsIgnoreCase("") ? "0" : tempTrip[52];
                else
                    this.ActualPayment = "0";

                if (tempTrip.length > 53)
                    this.creditCardNum = tempTrip[53];
                else
                    this.creditCardNum = "xxxx";

                this.promptInquiryDialog = false;

                if (tempTrip.length > 54)
                    this.iRequestAffiliateID = tempTrip[54];
                else
                    this.iRequestAffiliateID = "-1";

                if (tempTrip.length > 55)
                    this.GateID = tempTrip[55];
                else
                    this.GateID = "";

                // if (tempTrip.length > 56)
                // this.bAmountIsAlreadyHold = tempTrip[56];
                // else
                // this.bAmountIsAlreadyHold = "";

                if (tempTrip.length > 57)
                    this.TripPayStatus = Integer.parseInt(tempTrip[57].trim().equalsIgnoreCase("") ? "0" : tempTrip[57]);
                else
                    this.TripPayStatus = 0;

                if (tempTrip.length > 64)
                    this.PromotionalValue = Float.parseFloat(tempTrip[59].trim().equalsIgnoreCase("") ? "0.0" : tempTrip[59]);
                else
                    this.PromotionalValue = 0;

                if (tempTrip.length > 64)
                    this.bPromotionInPercentage = Boolean.parseBoolean(tempTrip[60].equalsIgnoreCase("") ? "false" : tempTrip[60]);
                else
                    this.bPromotionInPercentage = false;

                if (tempTrip.length > 64)
                    this.PromotionalCode = tempTrip[61];
                else
                    this.PromotionalCode = "";

                if (tempTrip.length > 64)
                    this.Actual_TipPercent = Float.parseFloat(tempTrip[62].trim().equalsIgnoreCase("") ? "0.0" : tempTrip[62]);
                else
                    this.Actual_TipPercent = 0;

                if (tempTrip.length > 64)
                    this.bWillCallRequest = Boolean.parseBoolean(tempTrip[63].equalsIgnoreCase("") ? "false" : tempTrip[63]);
                else
                    this.bWillCallRequest = false;

                if (tempTrip.length > 65)
                    this.MARSRefID = tempTrip[64];
                else
                    this.MARSRefID = "-1";

                if (tempTrip.length > 66)
                    this.CCGateway = tempTrip[65];
                else
                    this.CCGateway = "";

                if (tempTrip.length > 67)
                    this.CustomerPhoneNumberForD2C = tempTrip[66];
                else
                    this.CustomerPhoneNumberForD2C = "";

                if (tempTrip.length > 68)
                    this.bCopayAllowedOnPaymentScreen = Boolean.parseBoolean(tempTrip[67].equalsIgnoreCase("") ? "false" : tempTrip[67]);
                else
                    this.bCopayAllowedOnPaymentScreen = false;


                if (tempTrip.length > 69)
                    this.ClassOfServiceID = tempTrip[68];
                else
                    this.ClassOfServiceID = "-1";



                this.Validity = Long.valueOf(tempTrip[tempTrip.length - 1]);
                this.nodeTime = this.PUTime;

                try {
                    if (Double.parseDouble(this.preAuthAmount) > 0) {
                        this.preAuthAmount = Double.toString((Double.parseDouble(this.preAuthAmount) - Double.parseDouble(this.Tip)));
                    }
                } catch (Exception e) {

                }

                if (this.clientName.equalsIgnoreCase("Flagger") && !AVL_Service.pref.getString("FlaggerDrop", "Unknown").equalsIgnoreCase("Unknown"))
                    this.DOaddress = AVL_Service.pref.getString("FlaggerDrop", AVL_Service.pref.getString("Address", "Unknown Address"));
            } catch (Exception ex) {
                LogException("[Exception in parsing Trip]" + "[Trip single node constructor]" + "[" + ex.getLocalizedMessage() + "]");
            }
        }
        // Constructor for Shared Trips
        public Trip(String trip, String nodeType) throws ParseException {
            try {

                this.nodeType = nodeType;
                this.preAuthAmount = "0";
                this.creditCardNum = "";
                this.cardType = "Other";
                this.creditCardExpiry = "";
                this.transactionID = "";
                this.cardProcessor = "";
                this.creditCardTrackII = "";
                this.tripType = "O";
                this.allowDirectPickup = true;

                String[] tempTrip = trip.split(Character.toString(Constants.BODYSEPARATOR));
                String[] header = tempTrip[0].split("\\" + Character.toString(Constants.COLSEPARATOR));
                destID = header[2]; // getting the SourceID from recieved Packet
                rcvdTime = System.currentTimeMillis() / 1000;

                tempTrip = tempTrip[1].split("\\^");
                TripFields = tempTrip.length;

                this.tripNumber = tempTrip[0].trim().equalsIgnoreCase("") ? "0" : tempTrip[0];
                this.clientName = tempTrip[1];
                this.pickupPOI = tempTrip[2];
                this.dropPOI = tempTrip[3];
                this.PUaddress = tempTrip[4];
                this.DOaddress = tempTrip[5];
                tempTrip[5].replaceAll(" ", "");
                if (tempTrip[5].trim().length() < 5)
                    this.DOaddress = "";

                this.PUlat = tempTrip[6].trim().equalsIgnoreCase("") ? "0.0" : tempTrip[6];
                this.PUlong = tempTrip[7].trim().equalsIgnoreCase("") ? "0.0" : tempTrip[7];
                this.DOlat = tempTrip[8].trim().equalsIgnoreCase("") ? "0.0" : tempTrip[8];
                this.DOlong = tempTrip[9].trim().equalsIgnoreCase("") ? "0.0" : tempTrip[9];
                this.PUzone = tempTrip[10];
                this.DOzone = tempTrip[11];
                this.PUTime = MRMS_DateFormat.parse(tempTrip[12]);

                this.DOTime = MRMS_DateFormat.parse(tempTrip[13]);
                this.nodetime1 = MRMS_DateFormat.parse(tempTrip[13]);
                this.Others = tempTrip[14];
                this.Copay = tempTrip[15];
                this.SharedKey = tempTrip[16].trim().equalsIgnoreCase("") ? "1" : tempTrip[16];
                this.state = tempTrip[17];
                this.ConfirmNumber = tempTrip[18];
                this.clientPhoneNumber = tempTrip[19];
                this.miles = tempTrip[20].trim().equalsIgnoreCase("") ? "0.0" : tempTrip[20];
                this.manifestNum = tempTrip[21];

                if (this.manifestNum.trim().length() < 2) {
                    this.manifestNum = "";
                }

                if (!this.manifestNum.equalsIgnoreCase("")) {
                    this.manifestStartTime = this.PUTime;
                    for (Trip t : arrayListOftrips) {
                        if (t.manifestNum.equalsIgnoreCase(this.manifestNum)) {
                            if (this.PUTime.before(t.manifestStartTime)) {
                                this.manifestStartTime = this.PUTime;
                                t.manifestStartTime = this.PUTime;
                            } else {
                                this.manifestStartTime = t.manifestStartTime;
                                break;
                            }
                        }
                    }
                } else {
                    this.manifestStartTime = this.PUTime;
                }

                this.transactionID = tempTrip[22];
                this.authCode = tempTrip[23];
                this.jobID = tempTrip[24];
                this.deviceID = tempTrip[25];
                this.requestID = tempTrip[26];

                this.estimatedCost = EstCostforFundingSource = tempTrip[27].trim().equalsIgnoreCase("") ? "0.0" : tempTrip[27];
                this.fundingSource = tempTrip[28];
                this.paymentMethod = tempTrip[29];
                this.cardType = tempTrip[30].trim().equalsIgnoreCase("0") ? "Other" : tempTrip[30].trim();
                this.preAuthAmount = tempTrip[31].trim().equalsIgnoreCase("") ? "0.0" : tempTrip[31];
                this.CAW_GatewayRef = tempTrip[32];
                this.pickRemarks = tempTrip[33];
                this.dropRemarks = tempTrip[34];
                this.pickApartmentNo = tempTrip[35];
                this.dropApartmentNo = tempTrip[36];
                this.tripType = tempTrip[37];
                this.allowDirectPickup = Boolean.parseBoolean(tempTrip[38]);
                this.tipApplicable = Boolean.parseBoolean(tempTrip[39].equalsIgnoreCase("") ? "false" : tempTrip[39]);
                this.maxTipInPercentage = Boolean.parseBoolean(tempTrip[40].equalsIgnoreCase("") ? "false" : tempTrip[40]);
                this.maxTip = Float.valueOf(tempTrip[41].equalsIgnoreCase("") ? "0" : tempTrip[41]);
                this.tipAmount1 = Float.valueOf(tempTrip[42].equalsIgnoreCase("") ? "0" : tempTrip[42]);
                this.tipAmount2 = Float.valueOf(tempTrip[43].equalsIgnoreCase("") ? "0" : tempTrip[43]);
                this.tipAmount3 = Float.valueOf(tempTrip[44].equalsIgnoreCase("") ? "0" : tempTrip[44]);
                this.tipAmount4 = Float.valueOf(tempTrip[45].equalsIgnoreCase("") ? "0" : tempTrip[45]);
                this.Distance = 0;
                //
                if (tempTrip.length > 47)
                    this.Fare = tempTrip[47].trim().equalsIgnoreCase("") ? "0" : tempTrip[47];
                else
                    this.Fare = "0";
                //
                if (tempTrip.length > 48)
                    this.Extras = tempTrip[48].trim().equalsIgnoreCase("") ? "0" : tempTrip[48];
                else
                    this.Extras = "0";
                //
                if (tempTrip.length > 49)
                    this.Tip = tempTrip[49].trim().equalsIgnoreCase("") ? "0" : tempTrip[49];
                else
                    this.Tip = "0";

                if (tempTrip.length > 50)
                    this.total = Float.valueOf(tempTrip[50].equalsIgnoreCase("") ? "1000" : tempTrip[50]);
                else
                    this.total = 1000;
                //
                if (tempTrip.length > 51)
                    this.mjm_Balance = tempTrip[51].trim().equalsIgnoreCase("") ? "0" : tempTrip[51];
                else
                    this.mjm_Balance = "0";

                if (tempTrip.length > 52)
                    this.ActualPayment = tempTrip[52].trim().equalsIgnoreCase("") ? "0" : tempTrip[52];
                else
                    this.ActualPayment = "0";

                if (tempTrip.length > 53)
                    this.creditCardNum = tempTrip[53];
                else
                    this.creditCardNum = "xxxx";

                if (tempTrip.length > 54)
                    this.iRequestAffiliateID = tempTrip[54];
                else
                    this.iRequestAffiliateID = "-1";

                if (tempTrip.length > 55)
                    this.GateID = tempTrip[55];
                else
                    this.GateID = "";

                // if (tempTrip.length > 56)
                // this.bAmountIsAlreadyHold = tempTrip[56];
                // else
                // this.bAmountIsAlreadyHold = "";

                if (tempTrip.length > 57)
                    this.TripPayStatus = Integer.parseInt(tempTrip[57].trim().equalsIgnoreCase("") ? "0" : tempTrip[57]);
                else
                    this.TripPayStatus = 0;

                if (tempTrip.length > 64)
                    this.PromotionalValue = Float.parseFloat(tempTrip[59].trim().equalsIgnoreCase("") ? "0.0" : tempTrip[59]);
                else
                    this.PromotionalValue = 0;

                if (tempTrip.length > 64)
                    this.bPromotionInPercentage = Boolean.parseBoolean(tempTrip[60].equalsIgnoreCase("") ? "false" : tempTrip[60]);
                else
                    this.bPromotionInPercentage = false;

                if (tempTrip.length > 64)
                    this.PromotionalCode = tempTrip[61];
                else
                    this.PromotionalCode = "";

                if (tempTrip.length > 64)
                    this.Actual_TipPercent = Float.parseFloat(tempTrip[62].trim().equalsIgnoreCase("") ? "0.0" : tempTrip[62]);
                else
                    this.Actual_TipPercent = 0;

                if (tempTrip.length > 64)
                    this.bWillCallRequest = Boolean.parseBoolean(tempTrip[63].equalsIgnoreCase("") ? "false" : tempTrip[63]);
                else
                    this.bWillCallRequest = false;

                if (tempTrip.length > 67)
                    this.MARSRefID = tempTrip[64];
                else
                    this.MARSRefID = "-1";



                if (tempTrip.length > 66)
                    this.CCGateway = tempTrip[65];
                else
                    this.CCGateway = "";

                if (tempTrip.length > 67)
                    this.CustomerPhoneNumberForD2C = tempTrip[66];
                else
                    this.CustomerPhoneNumberForD2C = "";

                if (tempTrip.length > 68)
                    this.bCopayAllowedOnPaymentScreen = Boolean.parseBoolean(tempTrip[67].equalsIgnoreCase("") ? "false" : tempTrip[67]);
                else
                    this.bCopayAllowedOnPaymentScreen = false;


                if (tempTrip.length > 69)
                    this.ClassOfServiceID = tempTrip[68];
                else
                    this.ClassOfServiceID = "-1";

                this.Validity = Long.valueOf(tempTrip[tempTrip.length - 1]);
                this.promptInquiryDialog = false;

                if (nodeType.equalsIgnoreCase("PU"))
                    this.nodeTime = this.PUTime;
                else if (nodeType.equalsIgnoreCase("DO"))
                    this.nodeTime = this.DOTime;

                try {
                    if (Double.parseDouble(this.preAuthAmount) > 0) {
                        this.preAuthAmount = Double.toString((Double.parseDouble(this.preAuthAmount) - Double.parseDouble(this.Tip)));
                    }
                } catch (Exception e) {

                }

                if (this.clientName.equalsIgnoreCase("Flagger") && !AVL_Service.pref.getString("FlaggerDrop", "Unknown").equalsIgnoreCase("Unknown"))
                    this.DOaddress = AVL_Service.pref.getString("FlaggerDrop", "Unknown");
            } catch (Exception ex) {
                LogException("[Exception in parsing Trip]" + "[Trip shared trip constructor]" + "[" + ex.getLocalizedMessage() + "]");
            }
        }

    }// Class Trip

	/*-----------------------------------------------------------------------------------------------------------------------------------------------
	 *------------------------------------------------------------ TripAdapter Class ----------------------------------------------------------------
	 *-----------------------------------------------------------------------------------------------------------------------------------------------
	 */

    private class TripAdapter extends ArrayAdapter<Trip> {

        private final ArrayList<Trip> trips;

        public TripAdapter(Context context, int textViewResourceId, ArrayList<Trip> trips) {

            super(context, textViewResourceId, trips);
            this.trips = trips;
        }

        @Override
        public boolean isEnabled(int position) {
            if (trips.size() > 0) {
                Trip t = trips.get(position);
                if (t.nodeType.equalsIgnoreCase("PU") && t.state.equalsIgnoreCase(States.DROPPED))
                    return false;
                else
                    return true;
            }
            return true;
        }

        @Override
        public boolean areAllItemsEnabled() {
            return false;
        }

        /**
         * Returns the position of the specified item in the array.
         *
         *
         * @param item The item to retrieve the position of.
         *
         * @return The position of the specified item, matching the Trip Number.
         *
         * @author Muhammad Zahid
         */
        @Override
        public int getPosition(Trip item) {
            for (int i = 0; i < trips.size(); i++)
                if (trips.get(i).tripNumber.equals(item.tripNumber)) {
                    if (trips.get(i).nodeType.equals(item.nodeType))
                        return i;
                    else if (!trips.get(i).SharedKey.equalsIgnoreCase(item.SharedKey)) {
                        trips.remove(trips.get(i));
                        if (trips.get(i).SharedKey.equalsIgnoreCase("1")) {
                            for (int j = 0; j < trips.size(); j++)
                                if (trips.get(j).tripNumber.equals(item.tripNumber)) {
                                    trips.remove(trips.get(j));
                                }
                        }

                        return -1;
                    }
                }
            return -1;
        }

        public int getFirstUnfinishedPosition() {
            for (int i = 0; i < trips.size(); i++)
                if (trips.get(i).state.equalsIgnoreCase(States.ACCEPTED) || trips.get(i).state.equalsIgnoreCase(States.IRTPU)
                        || trips.get(i).state.equalsIgnoreCase(States.ATLOCATION)
                        || trips.get(i).state.equalsIgnoreCase(States.CALLOUT)
                        || trips.get(i).state.equalsIgnoreCase(States.PICKEDUP)
                        || trips.get(i).state.equalsIgnoreCase(States.NOSHOWREQ))
                    return i;
            return -1;
        }

        @Override
        public void remove(Trip item) {
            for (int i = 0; i < trips.size(); i++)
                if (trips.get(i).tripNumber.trim().equalsIgnoreCase(item.tripNumber.trim())) {
                    trips.remove(i);
                    --i;
                }
        }

        public void set(int index, Trip t) {
            trips.set(index, t);
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {

            String language = Locale.getDefault().getLanguage();

            Trip t = trips.get(position);
            View v = convertView;

            if (v == null) {
                LayoutInflater vi = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                v = vi.inflate(R.layout.trip_row, null);
            }
            if (t != null) {
                TextView tripNum = (TextView) v.findViewById(R.id.tripID);
                TextView pickupTime = (TextView) v.findViewById(R.id.pickupTime);
                TextView pickzone = (TextView) v.findViewById(R.id.pickzone);
                TextView sharedKey = (TextView) v.findViewById(R.id.sharedKey);
                TextView pickdate = (TextView) v.findViewById(R.id.pickdate);
                TextView dropzone = (TextView) v.findViewById(R.id.dropzone);
                TextView mileage = (TextView) v.findViewById(R.id.mileage);
                ImageView ticon = (ImageView) v.findViewById(R.id.trip_icon);
                ImageView cicon = (ImageView) v.findViewById(R.id.collapse_icon);

                cicon.setVisibility(View.GONE);
                mileage.setVisibility(View.GONE);
                if (t.ConfirmNumber.equalsIgnoreCase(";")) {
                    v.setId(Integer.valueOf(t.tripNumber));
                    tripNum.setText("");
                    pickupTime.setText("");
                    pickzone.setText("");
                    sharedKey.setText("");
                    pickdate.setText("");
                    dropzone.setText("");
                    mileage.setText("");

                    mileage.setVisibility(View.GONE);
                    cicon.setVisibility(View.GONE);
                    ticon.setVisibility(View.GONE);
                    tripNum.setVisibility(View.GONE);
                    pickupTime.setVisibility(View.GONE);
                    pickzone.setVisibility(View.GONE);
                    sharedKey.setVisibility(View.GONE);
                    pickdate.setVisibility(View.GONE);
                    dropzone.setVisibility(View.GONE);

                    v.setBackgroundColor(selectColor(21));

                    return v;

                } else if (t.ConfirmNumber.equalsIgnoreCase("-")) {
                    v.setId(Integer.valueOf(t.tripNumber));

                    tripNum.setText("");
                    pickupTime.setText("");
                    pickzone.setText("");
                    sharedKey.setText("");
                    pickdate.setText("");
                    dropzone.setText("");

                    mileage.setVisibility(View.GONE);
                    cicon.setVisibility(View.VISIBLE);
                    ticon.setVisibility(View.VISIBLE);
                    tripNum.setVisibility(View.VISIBLE);
                    pickupTime.setVisibility(View.VISIBLE);
                    pickzone.setVisibility(View.VISIBLE);
                    sharedKey.setVisibility(View.VISIBLE);
                    pickdate.setVisibility(View.VISIBLE);
                    dropzone.setVisibility(View.VISIBLE);

                    tripNum.setText(t.manifestNum);
                    tripNum.setTextSize(miscFont);
                    tripNum.setTypeface(Typeface.SERIF, Typeface.ITALIC);
                    tripNum.setWidth((int) (screenWidth * 0.28));
                    tripNum.setGravity(Gravity.LEFT);
                    // tripNum.setPadding(screenWidth / 4, 0, 0, 0);

                    pickupTime.setText(displayTimeFormat1.format(t.PUTime));
                    pickupTime.setTextSize(miscFont);
                    pickupTime.setTypeface(Typeface.SERIF, Typeface.ITALIC);
                    pickupTime.setTextColor(Color.GREEN);
                    pickupTime.setPadding(0, 0, 0, 0);
                    pickupTime.setWidth((int) (screenWidth * 0.17));
                    pickupTime.setGravity(Gravity.LEFT);

                    pickzone.setTextSize(miscFont + 1);
                    pickzone.setText(t.PUzone);
                    pickzone.setTypeface(Typeface.SERIF, Typeface.BOLD_ITALIC);
                    pickzone.setTextColor(Color.rgb(255, 249, 191));
                    pickzone.setGravity(Gravity.CENTER);
                    pickzone.setWidth((int) (screenWidth * 0.30));

                    sharedKey.setText("Manifest (" + t.TripPayStatus + ")");
                    sharedKey.setTextSize(miscFont);
                    sharedKey.setTypeface(Typeface.SERIF, Typeface.ITALIC);
                    sharedKey.setTextColor(Color.MAGENTA);
                    sharedKey.setGravity(Gravity.LEFT + Gravity.BOTTOM);
                    sharedKey.setWidth((int) (screenWidth * 0.28));

                    pickdate.setText(displayDateFormat.format(t.PUTime));
                    pickdate.setTextSize(miscFont);
                    pickdate.setTypeface(Typeface.SERIF, Typeface.ITALIC);
                    pickdate.setTextColor(Color.GREEN);
                    pickdate.setPadding(0, 0, 0, 0);
                    pickdate.setWidth((int) (screenWidth * 0.17));
                    pickdate.setGravity(Gravity.LEFT + Gravity.BOTTOM);

                    dropzone.setTextSize(miscFont + 1);
                    dropzone.setTypeface(Typeface.SERIF, Typeface.BOLD_ITALIC);
                    dropzone.setTextColor(Color.rgb(255, 249, 191));
                    dropzone.setGravity(Gravity.CENTER + Gravity.BOTTOM);
                    dropzone.setWidth((int) (screenWidth * 0.30));
                    dropzone.setText(t.DOzone);

                    ticon.setPadding(2, 0, 10, 0);
                    ticon.setAdjustViewBounds(true);
                    ticon.setMaxHeight(screenWidth / 7);
                    ticon.setMaxWidth(screenWidth / 7);
                    ticon.setScaleType(ScaleType.CENTER_CROP);
                    ticon.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                    if (t.state.equalsIgnoreCase(States.ACCEPTED)) {
                        ticon.setImageDrawable(getResources().getDrawable(R.drawable.waiting));
                    } else if (t.state.equalsIgnoreCase(States.IRTPU)) {
                        ticon.setImageDrawable(getResources().getDrawable(R.drawable.irtpu));
                    } else if (t.state.equalsIgnoreCase(States.ATLOCATION)) {
                        ticon.setImageDrawable(getResources().getDrawable(R.drawable.atlocation));
                    } else if (t.state.equalsIgnoreCase(States.PICKEDUP)) {
                        ticon.setImageDrawable(getResources().getDrawable(R.drawable.roadtrip));
                    } else if (t.state.equalsIgnoreCase(States.DROPPED)) {
                        ticon.setImageDrawable(getResources().getDrawable(R.drawable.icondone));
                    }

                    cicon.setPadding(2, 0, 10, 0);
                    cicon.setAdjustViewBounds(true);
                    cicon.setMaxHeight(screenWidth / 10);
                    cicon.setMaxWidth(screenWidth / 10);
                    cicon.setScaleType(ScaleType.CENTER_CROP);
                    cicon.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));

                    if (MFView.get(t.manifestNum))
                        cicon.setImageDrawable(getResources().getDrawable(R.drawable.expand_icon));
                    else
                        cicon.setImageDrawable(getResources().getDrawable(R.drawable.collapse_icon));
                    v.setBackgroundColor(Color.BLACK);
                    return v;

                } else {
                    v.setId(Integer.valueOf(t.tripNumber));

                    tripNum.setText(t.ConfirmNumber);
                    tripNum.setTextSize(miscFont);
                    tripNum.setTypeface(Typeface.SERIF, Typeface.ITALIC);
                    tripNum.setWidth((int) (screenWidth * 0.28));
                    // tripNum.setGravity(Gravity.LEFT);
                    if (t.manifestNum.length() > 1) {
                        tripNum.setTextColor(Color.MAGENTA);
                        // manifestNum.setText(t.manifestNum);
                    } else
                        tripNum.setTextColor(Color.CYAN);
                }

                mileage.setVisibility(View.VISIBLE);
                cicon.setVisibility(View.GONE);
                ticon.setVisibility(View.VISIBLE);
                tripNum.setVisibility(View.VISIBLE);
                pickupTime.setVisibility(View.VISIBLE);
                pickzone.setVisibility(View.VISIBLE);
                sharedKey.setVisibility(View.VISIBLE);
                pickdate.setVisibility(View.VISIBLE);
                dropzone.setVisibility(View.VISIBLE);

                v.setBackgroundColor(Color.BLACK);

                // TextView pickupTime = (TextView) v.findViewById(R.id.pickupTime);
                if (t.bWillCallRequest == true) {
                    pickupTime.setText(Farsi.Convert(getResources().getString(R.string.Will_Call)));
                } else {
                    pickupTime.setText(displayTimeFormat1.format(t.nodetime1));
                }
                pickupTime.setTextSize(miscFont);
                pickupTime.setTypeface(Typeface.SERIF, Typeface.ITALIC);
                pickupTime.setTextColor(Color.GREEN);
                pickupTime.setPadding(0, 0, 0, 0);
                pickupTime.setWidth((int) (screenWidth * 0.17));
                pickupTime.setGravity(Gravity.LEFT);

                // TextView pickzone = (TextView) v.findViewById(R.id.pickzone);
                pickzone.setTextSize(miscFont + 1);
                pickzone.setTypeface(Typeface.SERIF, Typeface.BOLD_ITALIC);
                pickzone.setTextColor(Color.rgb(255, 249, 191));
                pickzone.setGravity(Gravity.CENTER);
                pickzone.setWidth((int) (screenWidth * 0.30));

                // TextView sharedKey = (TextView) v.findViewById(R.id.sharedKey);
                sharedKey.setText((t.SharedKey.equalsIgnoreCase("0") ? "Single" : "Shared") + "-" + t.tripType);
                sharedKey.setTextSize(miscFont);
                sharedKey.setTypeface(Typeface.SERIF, Typeface.ITALIC);
                if (t.SharedKey.equalsIgnoreCase("0"))
                    sharedKey.setTextColor(Color.YELLOW);
                else
                    sharedKey.setTextColor(Color.MAGENTA);
                sharedKey.setGravity(Gravity.LEFT + Gravity.TOP);
                sharedKey.setWidth((int) (screenWidth * 0.28));

                // TextView pickdate = (TextView) v.findViewById(R.id.pickdate);
                pickdate.setText(displayDateFormat.format(t.PUTime));
                pickdate.setTextSize(miscFont);
                pickdate.setTypeface(Typeface.SERIF, Typeface.ITALIC);
                pickdate.setTextColor(Color.GREEN);
                pickdate.setPadding(0, 0, 0, 0);
                pickdate.setWidth((int) (screenWidth * 0.17));
                pickdate.setGravity(Gravity.LEFT);

                // TextView dropzone = (TextView) v.findViewById(R.id.dropzone);
                dropzone.setTextSize(miscFont + 1);
                dropzone.setTypeface(Typeface.SERIF, Typeface.BOLD_ITALIC);
                dropzone.setTextColor(Color.rgb(255, 249, 191));
                dropzone.setGravity(Gravity.CENTER);
                dropzone.setWidth((int) (screenWidth * 0.30));

                if (t.nodeType.equalsIgnoreCase("PU")) {
                    pickzone.setText(t.PUzone);
                    dropzone.setText("\u2193");
                } else if (t.nodeType.equalsIgnoreCase("DO")) {
                    dropzone.setText(t.DOzone);
                    pickzone.setText("\u2191");
                } else if (t.nodeType.equalsIgnoreCase("PU\nDO")) {
                    pickzone.setText(t.PUzone);
                    dropzone.setText(t.DOzone);
                }
                // TextView mileage = (TextView) v.findViewById(R.id.mileage);
                mileage.setText("\n ");
                mileage.setTextSize(miscFont + 1);
                mileage.setWidth((int) (screenWidth * 0.25));
                mileage.setTypeface(Typeface.SERIF, Typeface.BOLD_ITALIC);
                mileage.setTextColor(t.nodeColor);
                mileage.setGravity(Gravity.CENTER_HORIZONTAL);

                // ImageView ticon = (ImageView) v.findViewById(R.id.trip_icon);
                ticon.setPadding(2, 0, 10, 0);
                ticon.setAdjustViewBounds(true);
                ticon.setMaxHeight(screenWidth / 7);
                ticon.setMaxWidth(screenWidth / 7);
                ticon.setScaleType(ScaleType.CENTER_CROP);
                ticon.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
                if (t.state.equalsIgnoreCase(States.ACCEPTED)) {
                    ticon.setImageDrawable(getResources().getDrawable(R.drawable.waiting));
                    if (t.SharedKey.equalsIgnoreCase("1"))
                        mileage.setText(t.nodeType + "\n ");
                    else
                        mileage.setText(t.nodeType);
                } else if (t.state.equalsIgnoreCase(States.IRTPU)) {
                    ticon.setImageDrawable(getResources().getDrawable(R.drawable.irtpu));
                    if (t.SharedKey.equalsIgnoreCase("1"))
                        mileage.setText(t.nodeType + "\n ");
                    else
                        mileage.setText(t.nodeType);
                } else if (t.state.equalsIgnoreCase(States.ATLOCATION)) {
                    ticon.setImageDrawable(getResources().getDrawable(R.drawable.atlocation));
                    if (t.SharedKey.equalsIgnoreCase("1"))
                        mileage.setText(t.nodeType + "\n ");
                    else
                        mileage.setText(t.nodeType);
                } else if (t.state.equalsIgnoreCase(States.PICKEDUP)) {
                    if (t.nodeType.equalsIgnoreCase("PU"))
                        ticon.setImageDrawable(getResources().getDrawable(R.drawable.icondone));
                    else
                        ticon.setImageDrawable(getResources().getDrawable(R.drawable.roadtrip));
                    if (t.SharedKey.equalsIgnoreCase("1"))
                        mileage.setText(t.nodeType + "\n ");
                    else
                        mileage.setText(t.nodeType);
                } else if (t.state.equalsIgnoreCase(States.NOSHOW)) {
                    ticon.setImageDrawable(getResources().getDrawable(R.drawable.noshow));
                    if (t.SharedKey.equalsIgnoreCase("1"))
                        mileage.setText(t.nodeType + "\n ");
                    else
                        mileage.setText(t.nodeType);
                } else if (t.state.equalsIgnoreCase(States.NOSHOWREQ)) {
                    ticon.setImageDrawable(getResources().getDrawable(R.drawable.noshowreq));
                    if (t.SharedKey.equalsIgnoreCase("1"))
                        mileage.setText(t.nodeType + "\n ");
                    else
                        mileage.setText(t.nodeType);
                } else if (t.state.equalsIgnoreCase(States.CANCELLED)) {
                    ticon.setImageDrawable(getResources().getDrawable(R.drawable.iconcancel));
                    if (t.SharedKey.equalsIgnoreCase("1"))
                        mileage.setText(t.nodeType + "\n ");
                    else
                        mileage.setText(t.nodeType);
                } else if (t.state.equalsIgnoreCase(States.CALLOUT)) {
                    ticon.setImageDrawable(getResources().getDrawable(R.drawable.iconcallout));
                    if (t.SharedKey.equalsIgnoreCase("1"))
                        mileage.setText(t.nodeType + "\n ");
                    else
                        mileage.setText(t.nodeType);
                } else if (t.state.equalsIgnoreCase(States.DROPPED)) {
                    ticon.setImageDrawable(getResources().getDrawable(R.drawable.icondone));
                    if (t.nodeType.equalsIgnoreCase("PU")) {
                        mileage.setText(t.nodeType + "\n ");
                        pickzone.setTextColor(Color.DKGRAY);
                        dropzone.setTextColor(Color.DKGRAY);
                        pickupTime.setTextColor(Color.DKGRAY);
                        tripNum.setTextColor(Color.DKGRAY);
                        mileage.setTextColor(Color.DKGRAY);
                    } else {
                        double ans_KM;
                        try {
                            ans_KM = Double.parseDouble(t.miles) * 1.60934;
                            ans_KM = Math.round(ans_KM * 100.0) / 100.0;
                        } catch (NumberFormatException e) {
                            // It's OK to ignore "e" here because returning a default value is the documented behaviour on invalid input.

                            ans_KM = 0.0;
                        }
                        if (AVL_Service.SDUnitOfDistance.equalsIgnoreCase("Mile")) {
                            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                                mileage.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                                mileage.setText(t.miles + "\n" + getResources().getString(R.string.nMiles1));
                            } else
                                mileage.setText(t.miles + "\n" + Farsi.Convert(getResources().getString(R.string.nMiles1)));

                        } else {
                            if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                                mileage.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                                mileage.setText(ans_KM + "\n" + getResources().getString(R.string.nMiles));
                            } else
                                mileage.setText(ans_KM + "\n" + Farsi.Convert(getResources().getString(R.string.nMiles)));

                        }
                    }
                } else {
                    if (t.SharedKey.equalsIgnoreCase("1"))
                        mileage.setText(t.nodeType + "\n ");
                    else
                        mileage.setText(t.nodeType);
                }
            }
            return v;
        }
    } // Trip Adapter Class

	/*-----------------------------------------------------------------------------------------------------------------------------------------------
	 *------------------------------------------------------------ WallTripAdapter Class ------------------------------------------------------------
	 *-----------------------------------------------------------------------------------------------------------------------------------------------
	 */

    private class WallTripAdapter extends ArrayAdapter<WallTrip> {

        private final ArrayList<WallTrip> wallTrips;

        public WallTripAdapter(Context context, int textViewResourceId, ArrayList<WallTrip> trips) {

            super(context, textViewResourceId, trips);
            this.wallTrips = trips;
        }

        @Override
        public boolean areAllItemsEnabled() {
            return false;
        }

        @Override
        public int getPosition(WallTrip item) {
            for (int i = 0; i < wallTrips.size(); i++)
                if (wallTrips.get(i).tripNumber.equals(item.tripNumber))
                    return i;
            return -1;
        }

        @Override
        public void remove(WallTrip item) {
            for (int i = 0; i < wallTrips.size(); i++)
                if (wallTrips.get(i).tripNumber.equals(item.tripNumber)) {
                    wallTrips.remove(i);
                    --i;
                }
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {

            WallTrip wt = wallTrips.get(position);
            View wr = convertView;

            if (wr == null) {
                LayoutInflater vi = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                wr = vi.inflate(R.layout.wall_row, null);
            }
            if (wt != null) {

                if (IsSelectedTripTimeExpired(wt.tripNumber)) {
                    LinearLayout LLBack = (LinearLayout) wr.findViewById(R.id.llback);
                    LLBack.setBackgroundColor(Color.GRAY);
                    LLBack.setEnabled(false);
                } else {
                    LinearLayout LLBack = (LinearLayout) wr.findViewById(R.id.llback);
                    LLBack.setBackgroundColor(Color.BLACK);
                    LLBack.setEnabled(true);
                }

                TextView name = (TextView) wr.findViewById(R.id.name);
                name.setText(wt.CustomerName);
                name.setTextSize(miscFont);
                name.setTypeface(Typeface.SERIF, Typeface.ITALIC);
                if (!AVL_Service.SDShowPassengerNameOnWall)
                    name.setVisibility(View.GONE);

                TextView phone = (TextView) wr.findViewById(R.id.phone);
                phone.setText(wt.PhoneNumber);
                phone.setTextSize(miscFont);
                phone.setTypeface(Typeface.SERIF, Typeface.ITALIC);

                // if (!wt.ShowPhoneNumberOnTrip)
                // phone.setVisibility(View.GONE);

                TextView distanceFromPickUpLocation = (TextView) wr.findViewById(R.id.distanceFromPickUpLocation);
                distanceFromPickUpLocation.setVisibility(View.VISIBLE);
                if (wt.DistanceFromVehicle == -1)
                    distanceFromPickUpLocation.setVisibility(View.GONE);
                else {
                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                        distanceFromPickUpLocation.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                        distanceFromPickUpLocation.setText(Farsi.Convert(getResources().getString(R.string.Distance_From_Pickup_Location)) + dFormat.format(wt.DistanceFromVehicle) + "mi");
                    } else {
                        distanceFromPickUpLocation.setText(Farsi.Convert(getResources().getString(R.string.Distance_From_Pickup_Location)) + dFormat.format(wt.DistanceFromVehicle) + "mi");
                    }

                }
                distanceFromPickUpLocation.setTextSize(miscFont - 2);
                distanceFromPickUpLocation.setTypeface(Typeface.SERIF, Typeface.ITALIC);

                wr.setId(Integer.valueOf(wt.tripNumber));
                TextView tripNum = (TextView) wr.findViewById(R.id.tripID);
                tripNum.setText(wt.ConfirmNumber);
                tripNum.setTextSize(miscFont);
                tripNum.setTypeface(Typeface.SERIF, Typeface.ITALIC);

                TextView pickupTime = (TextView) wr.findViewById(R.id.pickupTime);
                pickupTime.setText(displayTimeFormat1.format(wt.PUTime));
                pickupTime.setTextSize(miscFont);
                pickupTime.setTypeface(Typeface.SERIF, Typeface.ITALIC);

                TextView pickzone = (TextView) wr.findViewById(R.id.pickzone);
                pickzone.setTypeface(Typeface.SERIF, Typeface.BOLD_ITALIC);
                pickzone.setTextColor(Color.rgb(255, 249, 191));
                if (AVL_Service.ShowAddressOnWall) {
                    pickzone.setTextSize(miscFont - 1);
                    pickzone.setText(formatAddressOnOffer(wt.PUaddress));
                } else {
                    pickzone.setTextSize(miscFont + 1);
                    // pickzone.setText(wt.PickupZone);
                    pickzone.setText(" ");
                    // pickzone.setVisibility(View.GONE);

                }

                if (!AVL_Service.pref.getBoolean("ShowWallEstimates", true))
                    pickzone.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.48f));

                TextView estFare = (TextView) wr.findViewById(R.id.fare);
                if (AVL_Service.pref.getBoolean("ShowWallEstimates", true)) {
                    estFare.setTextSize(miscFont + 1);
                    estFare.setTypeface(Typeface.SERIF, Typeface.BOLD_ITALIC);
                    estFare.setText("$" + wt.EstFare);
                } else
                    estFare.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 1.0f));

                TextView levelOfService = (TextView) wr.findViewById(R.id.los);
                levelOfService.setText("A:" + wt.AMBPassengers + "  W:" + wt.WheelChairPassengers);
                levelOfService.setTextSize(miscFont);
                levelOfService.setTypeface(Typeface.SERIF, Typeface.ITALIC);
                if (levelOfService.getText().toString().equalsIgnoreCase("Ambulatory"))
                    levelOfService.setTextColor(Color.YELLOW);
                else
                    levelOfService.setTextColor(Color.MAGENTA);

                TextView pickdate = (TextView) wr.findViewById(R.id.pickdate);
                pickdate.setText(displayDateFormat.format(wt.PUTime));
                pickdate.setTextSize(miscFont);
                pickdate.setTypeface(Typeface.SERIF, Typeface.ITALIC);

                TextView dropzone = (TextView) wr.findViewById(R.id.dropzone);
                dropzone.setTextSize(miscFont + 1);
                dropzone.setTypeface(Typeface.SERIF, Typeface.BOLD_ITALIC);
                dropzone.setTextColor(Color.rgb(255, 249, 191));
                if (AVL_Service.pref.getBoolean("ShowDropZone", true))
                    dropzone.setText(wt.PickupZone + " -> " + wt.DropZone);
                else
                    dropzone.setText(wt.PickupZone + " -> " + "Unknown");
                if (!AVL_Service.pref.getBoolean("ShowWallEstimates", true))
                    dropzone.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.48f));

                TextView mileage = (TextView) wr.findViewById(R.id.mileage);
                if (AVL_Service.pref.getBoolean("ShowWallEstimates", true)) {
                    mileage.setTextSize(miscFont + 1);
                    mileage.setTypeface(Typeface.SERIF, Typeface.BOLD_ITALIC);
                    mileage.setText(wt.EstMiles + "mi");
                } else
                    mileage.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 1.0f));

            }

            wr.setTag(wt.tripNumber);

            return wr;
        }
    } // Wall Trip Adapter Class

	/*-----------------------------------------------------------------------------------------------------------------------------------------------
	 *------------------------------------------------------------ ManifestWallTripAdapter Class ------------------------------------------------------------
	 *-----------------------------------------------------------------------------------------------------------------------------------------------
	 */

    private class ManifestWallTripAdapter extends ArrayAdapter<ManifestWallTrip> {

        private final ArrayList<ManifestWallTrip> manifestWallTrips;

        public ManifestWallTripAdapter(Context context, int textViewResourceId, ArrayList<ManifestWallTrip> mtrips) {

            super(context, textViewResourceId, mtrips);
            this.manifestWallTrips = mtrips;
        }

        @Override
        public boolean areAllItemsEnabled() {
            return false;
        }

        /**
         * Returns the position of the specified item in the array.
         *
         *
         * @param item The item to retrieve the position of.
         *
         * @return The position of the specified item, matching the WallTrip Number.
         *
         * @author Salman Khalid
         */
        @Override
        public int getPosition(ManifestWallTrip item) {
            for (int i = 0; i < manifestWallTrips.size(); i++)
                if (manifestWallTrips.get(i).ManifestNumber.equals(item.ManifestNumber))
                    return i;
            return -1;
        }

        @Override
        public void remove(ManifestWallTrip item) {
            for (int i = 0; i < manifestWallTrips.size(); i++)
                if (manifestWallTrips.get(i).ManifestNumber.equals(item.ManifestNumber)) {
                    manifestWallTrips.remove(i);
                    --i;
                }
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {

            ManifestWallTrip mwt = manifestWallTrips.get(position);
            View wr = convertView;

            if (wr == null) {
                LayoutInflater vi = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                wr = vi.inflate(R.layout.manifestwall_row, null);
            }
            if (mwt != null) {

                TextView manifestNum = (TextView) wr.findViewById(R.id.manifestNumber);
                manifestNum.setText(mwt.ManifestNumber);
                manifestNum.setTextSize(miscFont - 1);
                manifestNum.setTypeface(Typeface.SERIF, Typeface.ITALIC);

                TextView startTime = (TextView) wr.findViewById(R.id.startTime);
                startTime.setText(mwt.RouteStartTime);
                startTime.setTextSize(miscFont);
                startTime.setTypeface(Typeface.SERIF, Typeface.ITALIC);

                TextView endTime = (TextView) wr.findViewById(R.id.endTime);
                endTime.setText(mwt.RouteEndTime);
                endTime.setTextSize(miscFont);
                endTime.setTextColor(Color.rgb(250, 130, 2));
                endTime.setTypeface(Typeface.SERIF, Typeface.ITALIC);

                TextView startZone = (TextView) wr.findViewById(R.id.startZone);
                startZone.setText(mwt.PickupZone);
                startZone.setTextSize(miscFont + 1);
                startZone.setTypeface(Typeface.SERIF, Typeface.ITALIC);

                TextView endZone = (TextView) wr.findViewById(R.id.endZone);
                endZone.setTypeface(Typeface.SERIF, Typeface.ITALIC);
                endZone.setTextSize(miscFont + 1);
                endZone.setText(mwt.PickupZone);

                TextView amulatory = (TextView) wr.findViewById(R.id.amulatory);
                amulatory.setTypeface(Typeface.SERIF, Typeface.ITALIC);
                amulatory.setTextSize(miscFont);
                amulatory.setText("A: " + mwt.MaxAmbulatory);

                TextView wheelchair = (TextView) wr.findViewById(R.id.weelchair);
                wheelchair.setTypeface(Typeface.SERIF, Typeface.ITALIC);
                wheelchair.setTextSize(miscFont);
                wheelchair.setText("W: " + mwt.MaxWC);

                TextView totalTrips = (TextView) wr.findViewById(R.id.totalTrips);
                totalTrips.setTypeface(Typeface.SERIF, Typeface.ITALIC);
                totalTrips.setTextSize(miscFont + 1);
                totalTrips.setTextColor(Color.rgb(255, 249, 191));
                totalTrips.setText(mwt.TotalNoOfTrip + " trip");

                TextView totalDistance = (TextView) wr.findViewById(R.id.totalDistance);
                totalDistance.setTypeface(Typeface.SERIF, Typeface.ITALIC);
                totalDistance.setTextSize(miscFont + 1);
                totalDistance.setTextColor(Color.MAGENTA);
                totalDistance.setText(mwt.TotalDistMile + " mi");

            }

            wr.setTag(mwt.ManifestNumber);

            return wr;
        }
    } // Wall Trip Adapter Class

    /*-----------------------------------------------------------------------------------------------------------------------------------------------
	 *------------------------------------------------------------ CannedMessagesAdapter Class ------------------------------------------------------------
	 *-----------------------------------------------------------------------------------------------------------------------------------------------
	 */
    public class CannedMessagesAdapter extends ArrayAdapter<CannedMessage> {

        private final ArrayList<CannedMessage> cannedMessages;

        public CannedMessagesAdapter(Context context, int textViewResourceId, ArrayList<CannedMessage> messages) {
            super(context, textViewResourceId, messages);
            this.cannedMessages = messages;
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            CannedMessage cm = cannedMessages.get(position);
            View row = convertView;

            if (row == null) {
                LayoutInflater vi = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                row = vi.inflate(R.layout.message_row, null);
            }

            if (cm != null) {

                TextView msgType = (TextView) row.findViewById(R.id.type);
                if (cm.type.equalsIgnoreCase("INBOUND")) {
                    msgType.setTextColor(Color.parseColor("#FDE975"));
                    msgType.setText(Farsi.Convert(getResources().getString(R.string.Me)));
                    msgType.setBackgroundColor(Color.TRANSPARENT);
                } else if (cm.type.equalsIgnoreCase("OUTBOUND")) {
                    msgType.setTextColor(Color.parseColor("#76D4F7"));
                    msgType.setText(cm.sender_name);
                    if (cm.isBroadcast)
                        msgType.setBackgroundColor(Color.GRAY);

                    else
                        msgType.setBackgroundColor(Color.TRANSPARENT);
                }

                msgType.setTextSize(labelFont);

                TextView msgText = (TextView) row.findViewById(R.id.message);
                msgText.setTextSize(labelFont);
                msgText.setText(cm.message);

                TextView time = (TextView) row.findViewById(R.id.dateTime);
                time.setTextSize(labelFont);
                time.setText(cm.dateTime.toString().substring(0, 16));

            }

            return row;
        }
    }
	/*-----------------------------------------------------------------------------------------------------------------------------------------------
	 *---------------------------------------------- AlphanumericPasswordKeyListener Class ----------------------------------------------------------
	 *-----------------------------------------------------------------------------------------------------------------------------------------------
	 */

    public class AlphanumericPasswordKeyListener extends NumberKeyListener {
        @Override
        protected char[] getAcceptedChars() {
            return new char[]{'.', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',
                    'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};
        }

        @Override
        public void clearMetaKeyState(View view, Editable content, int states) {

        }

        @Override
        public int getInputType() {
            return InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD;
        }
    }

	/*-----------------------------------------------------------------------------------------------------------------------------------------------
	 *------------------------------------------------------------ DownloadFilesTask Class ----------------------------------------------------------
	 *-----------------------------------------------------------------------------------------------------------------------------------------------
	 */

    private class DownloadFilesTask extends AsyncTask<String, Integer, String> {

        ProgressDialog progress;
        @Override
        protected void onPreExecute() {
            progress = new ProgressDialog(TaxiPlexer.this);
            progress.setTitle(Farsi.Convert(getResources().getString(R.string.FileDownload)));
            progress.setMessage(Farsi.Convert(getResources().getString(R.string.DownloadingFile)));
            progress.setIndeterminate(false);
            progress.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
            progress.show();
            super.onPreExecute();
        }

        @Override
        protected String doInBackground(String... urls) {
            int count;

            try {
                URL url = new URL(urls[0]);
                HttpURLConnection conexion = (HttpURLConnection) url.openConnection();
                conexion.connect();

                int lenghtOfFile = conexion.getContentLength();
                Log.w("DownloadFilesTask", "Lenght of file: " + lenghtOfFile / 1000 + "Kbytes");

                SDCardRoot = Environment.getExternalStorageDirectory();// Updated and 2permissions in manifest

                file = new File(SDCardRoot, fileName);

                if (file.exists())
                    file.delete();

                InputStream input = new BufferedInputStream(url.openStream());
                FileOutputStream output = new FileOutputStream(file);

                byte data[] = new byte[1024];

                long total = 0;

                while ((count = input.read(data)) != -1) {
                    total += count;
                    publishProgress((int) ((total * 100) / lenghtOfFile));
                    output.write(data, 0, count);
                }

                output.flush();
                output.close();
                input.close();
            } catch (IOException e) {

            }
            return null;
        }

        @Override
        protected void onProgressUpdate(Integer... progres) {
            progress.setProgress(progres[0]);
        }

        @Override
        protected void onPostExecute(String result) {
            progress.dismiss();
            if (file.exists()) {

                Uri path = Uri.fromFile(file);
                Intent intent = new Intent(Intent.ACTION_VIEW, path);
                intent.setDataAndType(path, "application/vnd.android.package-archive");
                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); // By Salman

                try {
                    // Toast.makeText(TaxiPlexer.this, Farsi.Convert(getResources().getString(R.string.Installingnewversion)), Toast.LENGTH_SHORT).show();
                    showToastMessage(R.string.Installingnewversion);
                    startActivity(intent);

                } catch (ActivityNotFoundException e) {
                    handleException("[Exception in Downloading file]" + "[DownloadFilesTask]" + "[" + e.getLocalizedMessage() + "]");
                }

                // uninstallation
                // Uri packageURI = Uri.parse("package:" + CabDispatch.PACKAGE_NAME);
                // Intent uninstallIntent = new Intent(Intent.ACTION_DELETE, packageURI);
                // intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                // startActivity(uninstallIntent); // with new one
            }

            try {
                super.finalize();
            } catch (Throwable e) {

            }
        }
    }// DownloadFilesTask Class

	/*-----------------------------------------------------------------------------------------------------------------------------------------------
	 *------------------------------------------------------- DistanceCalculatorTask_forFlaggerCostEstimation Class ----------------------------------------------------------
	 *-----------------------------------------------------------------------------------------------------------------------------------------------
	 */

    private class DistanceCalculatorTask_forFlaggerCostEstimation extends AsyncTask<String, String, String> {

        ProgressDialog progress;
        private final DistanceCalculator calculator = new DistanceCalculator();

        @Override
        protected void onPreExecute() {

            progress = new ProgressDialog(TaxiPlexer.this);
            progress.setMessage(Farsi.Convert(getResources().getString(R.string.EstimatingDrivingDistance)));
            progress.setIndeterminate(false);
            progress.setProgressStyle(ProgressDialog.STYLE_SPINNER);
            progress.show();

            AVL_Service.pref.edit().putString("LastEstDistance", "0.0").putString("LastEstTime", "0.0").putString("EstimateFare", "0.0").commit();
            super.onPreExecute();
        };

        @Override
        protected String doInBackground(String... loc) {

            return calculator.calculateDrivingDistance(loc[0], loc[1]);
        }

        @Override
        protected void onPostExecute(String result) {

            try {
                // AVL_Service.pref.edit().putString("LastEstDistance", calculator.miles).putString("LastEstTime", calculator.minutes).putString("LastPickupLong",
                // calculator.pickupLong).putString(
                // "LastPickupLat",
                // calculator.pickupLat).putString("LastDropOffLong", calculator.dropOffLong).putString("LastDropOffLat", calculator.dropOffLat).commit();

                int lResponseCode = constantsforgoogleapi.myMap2.get(result);
                // distCalculator.get();
                // handleHideProgress();6y
                distCalculator = null;
                switch (lResponseCode) {
                    case 2 :
                        progress.dismiss();
                        // handleHideProgress();
                        final AlertDialog dialog1 = new AlertDialog.Builder(TaxiPlexer.this).setTitle(Farsi.Convert(getResources().getString(R.string.RequestError))).setMessage(result).create();
                        dialog1.setButton(Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog1, int whichButton) {
                                dialog1.dismiss();
                            }
                        });
                        dialog1.show();

                        dialogFontSize(dialog1);
                        return;
                    // break;
                    case 3 :
                        progress.dismiss();
                        // handleHideProgress();
                        final AlertDialog dialog2 = new AlertDialog.Builder(TaxiPlexer.this).setTitle(Farsi.Convert(getResources().getString(R.string.RequestError))).setMessage(result).create();
                        dialog2.setButton(DialogInterface.BUTTON_POSITIVE, Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog2, int whichButton) {
                                dialog2.dismiss();
                            }
                        });
                        dialog2.show();

                        dialogFontSize(dialog2);
                        return;
                    // break;
                    case 4 :
                        progress.dismiss();
                        // handleHideProgress();
                        final AlertDialog dialog3 = new AlertDialog.Builder(TaxiPlexer.this).setTitle(Farsi.Convert(getResources().getString(R.string.RequestError))).setMessage(result).create();
                        dialog3.setButton(DialogInterface.BUTTON_POSITIVE, Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog3, int whichButton) {
                                dialog3.dismiss();
                            }
                        });
                        dialog3.show();

                        dialogFontSize(dialog3);
                        return;
                    // break;
                    case 5 :
                        progress.dismiss();
                        // handleHideProgress();
                        final AlertDialog dialog4 = new AlertDialog.Builder(TaxiPlexer.this).setTitle(Farsi.Convert(getResources().getString(R.string.RequestError))).setMessage(result).create();
                        dialog4.setButton(DialogInterface.BUTTON_POSITIVE, Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog4, int whichButton) {
                                dialog4.dismiss();
                            }
                        });
                        dialog4.show();

                        dialogFontSize(dialog4);
                        return;

                    case 6 :
                        progress.dismiss();
                        // handleHideProgress();
                        final AlertDialog dialog5 = new AlertDialog.Builder(TaxiPlexer.this).setTitle(Farsi.Convert(getResources().getString(R.string.RequestError))).setMessage(result).create();
                        dialog5.setButton(DialogInterface.BUTTON_POSITIVE, Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog5, int whichButton) {
                                dialog5.dismiss();
                            }
                        });
                        dialog5.show();

                        dialogFontSize(dialog5);
                        return;
                    case 7 :
                        progress.dismiss();
                        // handleHideProgress();
                        final AlertDialog dialog6 = new AlertDialog.Builder(TaxiPlexer.this).setTitle(Farsi.Convert(getResources().getString(R.string.RequestError))).setMessage(result).create();
                        dialog6.setButton(DialogInterface.BUTTON_POSITIVE, Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog6, int whichButton) {
                                dialog6.dismiss();
                            }
                        });
                        dialog6.show();

                        dialogFontSize(dialog6);
                        return;
                    case 8 :
                        progress.dismiss();
                        // handleHideProgress();
                        final AlertDialog dialog7 = new AlertDialog.Builder(TaxiPlexer.this).setTitle(Farsi.Convert(getResources().getString(R.string.RequestError))).setMessage(result).create();
                        dialog7.setButton(DialogInterface.BUTTON_POSITIVE, Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog7, int whichButton) {
                                dialog7.dismiss();
                            }
                        });
                        dialog7.show();

                        dialogFontSize(dialog7);
                        return;
                    case 1 :

                        // handleHideProgress();
                        AVL_Service.pref.edit().putString("FlaggerPick", f_PickUpAddress).commit();
                        AVL_Service.pref.edit().putString("FlaggerDrop", f_DropOffAddress).commit();
                        IsEstimationFromFlaggerEstimation = true;
                        getEstimateFareFromServer();
                        progress.dismiss();
                        break;

                }

                // this.finalize();

            } catch (Throwable e) {
                exception("[Exception in calculating distance]" + "[DistanceCalculatorTask_forFlaggerCostEstimation]" + "[" + e.getLocalizedMessage() + "]");

            }
        }
    }

	/*-----------------------------------------------------------------------------------------------------------------------------------------------
	 *------------------------------------------------------- DistanceCalculatorTask Class ----------------------------------------------------------
	 *-----------------------------------------------------------------------------------------------------------------------------------------------
	 */

    private class DistanceCalculatorTask extends AsyncTask<String, String, String> {

        ProgressDialog progress;
        private final DistanceCalculator calculator = new DistanceCalculator();

        @Override
        protected void onPreExecute() {
            progress = new ProgressDialog(TaxiPlexer.this);
            progress.setMessage(Farsi.Convert(getResources().getString(R.string.EstimatingDrivingDistance)));
            progress.setIndeterminate(false);
            progress.setProgressStyle(ProgressDialog.STYLE_SPINNER);
            progress.show();
            AVL_Service.pref.edit().putString("LastEstDistance", "0.0").putString("LastEstTime", "0.0").putString("EstimateFare", "0.0").commit();
            super.onPreExecute();
        };

        @Override
        protected String doInBackground(String... loc) {

            return calculator.calculateDrivingDistance(loc[0], loc[1]);
        }

        @Override
        protected void onPostExecute(String result) {

            try {
                // AVL_Service.pref.edit().putString("LastEstDistance", calculator.miles).putString("LastEstTime", calculator.minutes).putString("LastPickupLong",
                // calculator.pickupLong).putString(
                // "LastPickupLat",
                // calculator.pickupLat).putString("LastDropOffLong", calculator.dropOffLong).putString("LastDropOffLat", calculator.dropOffLat).commit();

                progress.dismiss();
                this.finalize();

            } catch (Throwable e) {
                e.printStackTrace();
            }
        }
    }
	/*-----------------------------------------------------------------------------------------------------------------------------------------------
	 *------------------------------------------------------- MeterConnectionStatuss Class ----------------------------------------------------------
	 *-----------------------------------------------------------------------------------------------------------------------------------------------
	 */

    private class MeterConnectionStatus extends AsyncTask<String, Void, Boolean> {

        ProgressDialog progressD;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            progressD = new ProgressDialog(TaxiPlexer.this);
            progressD.setTitle(Farsi.Convert(getResources().getString(R.string.Meter_State)));
            progressD.setMessage(Farsi.Convert(getResources().getString(R.string.Connecting)));
            // progressD.setIndeterminate(false);
            // progressD.setProgressStyle(ProgressDialog.STYLE_SPINNER);
            progressD.show();
        }

        @Override
        protected Boolean doInBackground(String... params) {
            // TODO Auto-generated method stub
            try {
                return Meter.connect();

            } catch (Exception e) {
                if (mBluetoothAdapter != null) {
                    mBluetoothAdapter.disable();
                }
                mBluetoothAdapter = null;
                bluetoothExecption = true;
                meterConnectionStatus.cancel(true);
                return false;
            }
        }

        @Override
        protected void onPostExecute(Boolean result) {
            super.onPostExecute(result);
            try {
                if (progressD.isShowing())
                    progressD.dismiss();

            } catch (Exception e) {
                // TODO: handle exception
            }

        }

    }
	/*--------------------------------------------------------------fareEstimationViaMRMS-----------------------------------------------------------------------*/

    private void fareEstimationViaMRMS(final String puAddress, final String doAddress) {
        handleShowProgress(Farsi.Convert(getResources().getString(R.string.EstimatingFare)));
        new Thread() {
            @Override
            public void run() {
                try {

                    StringBuffer envelope = new StringBuffer(
                            "<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><CalculateRouteByStreetAddressWithCostEstimates xmlns=\"http://Itcurves.net/\"><stAddress>")
                            .append(puAddress)
                            .append("</stAddress><EndAddress>")
                            .append(doAddress)
                            .append("</EndAddress><NoOfPassengers>")
                            .append(AVL_Service.pref.getString("PassengerCount", "1"))
                            .append("</NoOfPassengers><NoOfWheelChairs>0</NoOfWheelChairs></CalculateRouteByStreetAddressWithCostEstimates></soap:Body></soap:Envelope>");
                    // Calling Web Service and Parsing Response
                    WS_Response tempResponse = CallingWS.submit(AVL_Service.webServiceURL, AVL_Service.soapAction_CalculateRouteByStreetAddress, envelope.toString());
                    if (tempResponse != null && tempResponse.responseType != null && tempResponse.responseType.equalsIgnoreCase("CalculateRouteByStreetAddressWithCostEstimatesResult")) {
                        msgHandler.obtainMessage(MsgType.EstimatedFareResp, tempResponse.fareEstimation.get_fare()).sendToTarget();
                        currentTrip.miles = tempResponse.fareEstimation.get_distance();
                    } else {
                        LogException("[fareEstimationViaMRMS failed]" + "[fareEstimationViaMRMS]");
                        if (currentTrip != null) {
                            if (ttfFare != null && (Float.parseFloat(Fare.trim().equalsIgnoreCase("") ? "0.0" : Fare) == 0)) {
                                runOnUiThread(new Runnable() {
                                    public void run() {
                                        ttfFare.setText(dFormat.format(0));

                                    }
                                });
                            }

                            currentTrip.estimatedCost = "0";
                        }
                    }
                } catch (Exception e) {
                    exception("[fareEstimationViaMRMS failed]" + "[fareEstimationViaMRMS]" + "[" + e.getLocalizedMessage() + "]");
                }
                hideProgressDialog();
            }// run

        }.start();

    }

    // ////////////////////////////////////////////////////////////////////////
    // Context Menu //
    // ////////////////////////////////////////////////////////////////////////

    private final int MENU_ITEM_QUIT = 0;
    private final int LOGOFF = 1;
    private final int SETTINGS = 2;
    private final int ABOUT = 3;
    private final int HELP = 4;
    private final int CLOSE = 5;

    private static final int ACTION_PRINT = 0;
    private static final int ACTION_TripList = 1;
    private static final int ACTION_CONNECTBT = 2;

    private static final String[] PAYMENT_ACTIONS = {"Print", "Trip List", "Connect Bluetooth"};

    // private static final String[] WALL_ACTIONS = {"Perform Trip"};
    private static final String[] WALL_ACTIONS = new String[1];
    private static final String[] MANIFEST_WALL_ACTIONS = {"Perform Manifest"};
    private Thread mJMsale_Thread;

    /*--------------------------------------------------------------onCreateOptionsMenu-----------------------------------------------------------------------*/
    @Override
    public boolean onCreateOptionsMenu(android.view.Menu menu) {

        return true;
    }

    /*--------------------------------------------------------------onPrepareOptionsMenu-----------------------------------------------------------------------*/
    @Override
    public boolean onPrepareOptionsMenu(Menu menu) {
        try {

            SetApplicationLocal();
            menu.clear();
            menu.add(Menu.NONE, LOGOFF, 0, wrapInSpan(getResources().getString(R.string.EndShift))).setTitleCondensed(getResources().getString(R.string.EndShift)).setIcon(R.drawable.logoff);
            menu.add(Menu.NONE, SETTINGS, 0, wrapInSpan(getResources().getString(R.string.Settings))).setTitleCondensed(getResources().getString(R.string.Settings)).setIcon(R.drawable.settings);
            menu.add(Menu.NONE, ABOUT, 0, wrapInSpan(getResources().getString(R.string.About))).setTitleCondensed(getResources().getString(R.string.About)).setIcon(R.drawable.about);
            menu.add(Menu.NONE, MENU_ITEM_QUIT, 0, wrapInSpan(getResources().getString(R.string.Quit))).setTitleCondensed(getResources().getString(R.string.Quit)).setIcon(R.drawable.quit);
            if (tvsessioncheck == false) {
                menu.add(Menu.NONE, HELP, 0, wrapInSpan(getResources().getString(R.string.ShareScreen))).setTitleCondensed(getResources().getString(R.string.ShareScreen)).setIcon(
                        R.drawable.screenshare);
            } else {
                menu.add(Menu.NONE, CLOSE, 0, wrapInSpan(getResources().getString(R.string.closeShareScreen))).setTitleCondensed(getResources().getString(R.string.closeShareScreen)).setIcon(
                        R.drawable.screenshare);
            }

            if (serviceHandle != null && serviceHandle.loggedIn())
                menu.getItem(0).setEnabled(true);
            else
                menu.getItem(0).setEnabled(false);
        } catch (Exception e) {
            handleException("[Options menu prepare failed]" + "[onPrepareOptionsMenu]" + "[" + e.getLocalizedMessage() + "]");
        }
        return true;
    }
    @SuppressLint("NewApi")
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        SetApplicationLocal();
        mBluetoothAdapter = null;
        mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
        switch (item.getItemId()) {
            case CLOSE :
                ScreenSharingWrapper.session1.stop();
                break;
            case HELP :
                if (cnnxManager.getActiveNetworkInfo() != null ? cnnxManager.getActiveNetworkInfo().isConnected() : false)
                    ScreenSharingWrapper.getInstance().startTeamViewerSession(this);
                break;
            case LOGOFF :
                if(AVL_Service.s != null){
                    try {
                        AVL_Service.s.close();
                    } catch (IOException e) {
                        handleException("[Failed to close socket]" + "[onOptionsItemSelected]" + "[" + e.getLocalizedMessage() + "]");
                    }
                }
                if(AVL_Service.SoftMeterThread !=null)
                    AVL_Service.SoftMeterThread.interrupt();
                // if (AVL_Service.SDEnableMeterLocking && AVL_Service.pref.getBoolean("PulsarMeter", false) && (Meter == null || !Meter.isConnectionAlive())) {
                // EndShiftThenLock(_quitApp);
                // // showToastMessageFromString("Device not connected to meter. Retry after connecting");
                // // ConnectToMeter.performClick();
                // } else {
                if (serviceHandle.loggedIn()) {
                    AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
                    builder.setIcon(android.R.drawable.ic_dialog_alert).setTitle(Farsi.Convert(getResources().getString(R.string.EndShiftConfirmation))).setMessage(
                            Farsi.Convert(getResources().getString(R.string.WantEndShift))).setPositiveButton(Farsi.Convert(getResources().getString(R.string.Yes)), new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            setMeterStatus(true, "EndShift", mBluetoothAdapter.isEnabled());
                            receivedLogoffResponse(new String[]{"1", "You are Succefffully Logged off,  Good Bye"});
                            serviceHandle.sendMessageToServer(
                                    AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR + AVL_Service.pref.getString("LastLongitude", "0"),
                                    "SDHS",
                                    MsgType.LogoffReq,
                                    AckType.NEW,
                                    MsgValidity.Medium,
                                    MsgPriority.AboveNormal);
                            exitApp = false;
                            handleShowProgress(Farsi.Convert(getResources().getString(R.string.UpdatingServer)));
                            if (IsActiveRespDialog != null) {
                                if (IsActiveRespDialog.isShowing())
                                    IsActiveRespDialog.dismiss();
                            }

                            if (aDialog != null) {
                                if (aDialog.isShowing())
                                    aDialog.dismiss();
                            }
                            if (Meter != null) {
                                if (AVL_Service.pref.getBoolean("VeriFoneDevice", false) && (tvTaxiMeter != null && tvTaxiMeter.getText().toString().equalsIgnoreCase("Connected"))) {
                                    customMessage = new CustomMessage("Logg Off", "11");
                                    Meter.writeCustom(customMessage);
                                }
                            }
                            // if (Meter != null) {
                            // if (AVL_Service.SDEnableMeterLocking && AVL_Service.pref.getBoolean("PulsarMeter", false)) {
                            // Meter.lockMeter();
                            // }
                            // Meter.cancel();
                            // Meter = null;
                            // }
                            // if (taxiMeterPrinter != null) {
                            // if (AVL_Service.SDEnableMeterLocking && AVL_Service.pref.getBoolean("PulsarMeter", false)) {
                            // taxiMeterPrinter.lockMeter();
                            // }
                            // taxiMeterPrinter.cancel();
                            // taxiMeterPrinter = null;
                            // }
                            if (bluebambooPrinter != null) {
                                bluebambooPrinter.flush();
                                bluebambooPrinter = null;
                            }
                            if (Vivotech != null) {
                                Vivotech = null;
                                VivotechDevice = null;
                            }
                            // if (mBluetoothAdapter != null) {
                            // mBluetoothAdapter.disable();
                            // }
                            // mBluetoothAdapter = null;
                            tabView = null;
                            tabtempIndex = 0;
                            tabberView_breakBtn = null;
                            reciept = "";

                            System.runFinalization();

                        } // onClick

                    }).setNegativeButton(Farsi.Convert(getResources().getString(R.string.No)), null);
                    AlertDialog alert = builder.create();
                    alert.show();

                    dialogFontSize(alert);
                } else
                    showToastMessage(R.string.You_are_Not_Logged_In);
                // Toast.makeText(getApplicationContext(), "You are Not Logged-In", Toast.LENGTH_SHORT).show();
                // }
                break;
            case SETTINGS :
                showDialog(SERVERS);
                break;
            case MENU_ITEM_QUIT :
                if(AVL_Service.s != null){
                    try {
                        AVL_Service.s.close();
                    } catch (IOException e) {
                        handleException("[Failed to close socket]" + "[onOptionsItemSelected]" + "[" + e.getLocalizedMessage() + "]");
                    }
                }
                if (ScreenSharingWrapper.mIsSessionRunning)
                    ScreenSharingWrapper.session1.stop();
                if (serviceHandle.loggedIn()) {
                    if (AVL_Service.SDEnableMeterLocking && AVL_Service.pref.getBoolean("PulsarMeter", false)) {
                        if (Meter == null) {
                            handleShowCustomToast("You can't quit, as Meter is not locked.", 0);

                            setMeterStatus(true, "EndShift", mBluetoothAdapter.isEnabled());
                            receivedLogoffResponse(new String[]{"1", "You are Succefffully Logged off,  Good Bye"});
                            serviceHandle.sendMessageToServer(
                                    AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR + AVL_Service.pref.getString("LastLongitude", "0"),
                                    "SDHS",
                                    MsgType.LogoffReq,
                                    AckType.NEW,
                                    MsgValidity.Medium,
                                    MsgPriority.AboveNormal);
                        } else if (Meter != null) {
                            if (!Meter.isConnectionAlive()) {
                                handleShowCustomToast("You can't quit, as Meter is not locked.", 0);

                                setMeterStatus(true, "EndShift", mBluetoothAdapter.isEnabled());
                                receivedLogoffResponse(new String[]{"1", "You are Succefffully Logged off,  Good Bye"});
                                serviceHandle.sendMessageToServer(
                                        AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR + AVL_Service.pref.getString("LastLongitude", "0"),
                                        "SDHS",
                                        MsgType.LogoffReq,
                                        AckType.NEW,
                                        MsgValidity.Medium,
                                        MsgPriority.AboveNormal);
                            } else {
                                exitApp = true;
                                AVL_Service.pref.edit().putBoolean("restart", true).commit();
                                _isLoggedInOnce = false;
                                logoff_Quit(Farsi.Convert(getResources().getString(R.string.ShuttingDown)));
                                lockHandler.removeCallbacksAndMessages(null);

                            }
                        }
                    } else {
                        exitApp = true;
                        AVL_Service.pref.edit().putBoolean("restart", true).commit();
                        _isLoggedInOnce = false;
                        logoff_Quit(Farsi.Convert(getResources().getString(R.string.ShuttingDown)));
                        lockHandler.removeCallbacksAndMessages(null);
                    }
                } else if (!AVL_Service.SDEnableMeterLocking || _quitApp || !_isLoggedInOnce) {
                    exitApp = true;
                    AVL_Service.pref.edit().putBoolean("restart", true).commit();
                    _isLoggedInOnce = false;
                    logoff_Quit(Farsi.Convert(getResources().getString(R.string.ShuttingDown)));
                    lockHandler.removeCallbacksAndMessages(null);

                } else
                    handleShowCustomToast("You can't quit, as Meter is not locked.", 0);

                break;
            case ABOUT :
                LayoutInflater li = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                View w = li.inflate(R.layout.warning, null);

                DisplayMetrics metrics = getResources().getDisplayMetrics();
                final TextView aboutTitle = (TextView) w.findViewById(R.id.dialogTitle);
                final TextView aboutText = (TextView) w.findViewById(R.id.dialogText);
                final Button aboutBtn = (Button) w.findViewById(R.id.dialogBtn1);

                aboutTitle.setText(Farsi.Convert(getResources().getString(R.string.About)));
                aboutText.setText(Html.fromHtml("<a href='http://itcurves.net'>" + Farsi.Convert(getResources().getString(R.string.ITCurves))
                        + "</a>"
                        + "<br>"
                        + Farsi.Convert(getResources().getString(R.string.CabDispatch))
                        + "<br>"
                        + Farsi.Convert(getResources().getString(R.string.MRMSDV))
                        + "<br>"
                        + Farsi.Convert(getResources().getString(R.string.Versions))
                        + AVL_Service.appVersion
                        + "<br>"
                        + "Dev : 6.39_90<br>" // 6.30_14 for diamond //6.32_09 for regencytest//6.33_01 for UnoinTaxi
                        + AVL_Service.pref.getString("NTEPNumber", "12-XXP")
                        + "<br>"
                        + "DPI: "
                        + metrics.densityDpi
                        + "<br>"
                        + "Package: "
                        + getApplicationContext().getPackageName()));
                aboutText.setLinkTextColor(Color.WHITE);
                aboutText.setMovementMethod(LinkMovementMethod.getInstance());
                aboutBtn.setText(Farsi.Convert(getResources().getString(R.string.ok)));

                if (android.os.Build.VERSION.SDK_INT <= android.os.Build.VERSION_CODES.HONEYCOMB_MR2)
                    aboutDialog = new AlertDialog.Builder(TaxiPlexer.this).setView(w).setCancelable(false).create();
                else
                    aboutDialog = new AlertDialog.Builder(TaxiPlexer.this, R.style.DialogSlideAnim1).setView(w).setCancelable(false).create();

                aboutDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
                aboutDialog.show();

                aboutBtn.setOnClickListener(new View.OnClickListener() {

                    @Override
                    public void onClick(View v) {
                        aboutDialog.dismiss();

                    }
                });
                break;
            default :
                // Nothing to do, ignore
        }
        return false;
    }
    /*--------------------------------------------------------------sortWallTrips-----------------------------------------------------------------------*/
    private void sortWallTrips() {

        synchronized (arrayListOfWallTrips) {
            if (AVL_Service.WallTripDistanceByGoogle == 1) {


                for (int i = 0; i < arrayListOfWallTrips.size(); i++) {

                    arrayListOfWallTrips.get(i).DistanceFromVehicle = DistanceCalculator.calculateDrivingDistance(Double.valueOf(AVL_Service.pref.getString("LastLatitude", "0")), Double
                            .valueOf(AVL_Service.pref.getString("LastLongitude", "0")), Double.valueOf(arrayListOfWallTrips.get(i).PickUpLat), Double.valueOf(arrayListOfWallTrips.get(i).PickUpLong));
                }
                // hideProgressDialog();
            } else if (AVL_Service.WallTripDistanceByGoogle == 2) {
                for (int i = 0; i < arrayListOfWallTrips.size(); i++) {

                    arrayListOfWallTrips.get(i).DistanceFromVehicle = DistanceCalculator.CalculateDistance(Double.valueOf(AVL_Service.pref.getString("LastLatitude", "0")), Double
                            .valueOf(AVL_Service.pref.getString("LastLongitude", "0")), Double.valueOf(arrayListOfWallTrips.get(i).PickUpLat), Double.valueOf(arrayListOfWallTrips.get(i).PickUpLong)) / 1609;
                }
            }
            Collections.sort(arrayListOfWallTrips, new Comparator<WallTrip>() {

                @Override
                public int compare(WallTrip lhs, WallTrip rhs) {
                    // TODO Auto-generated method stub
                    return Double.compare(lhs.DistanceFromVehicle, rhs.DistanceFromVehicle);
                }
            });
            arrayListOfWallTrips.notifyAll();
        }

        runOnUiThread(new Runnable() {
            public void run() {
                wallTripAdapter.notifyDataSetChanged();
            }
        });
    }
    /*--------------------------------------------------------------logoff_Quit-----------------------------------------------------------------------*/
    private void logoff_Quit(String msg) {
        reciept = "";
        try {
            if (serviceHandle.loggedIn()) {
                mBluetoothAdapter = null;
                mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
                setMeterStatus(true, "Quit", mBluetoothAdapter.isEnabled());

                receivedLogoffResponse(new String[]{"1", "You are Succefffully Logged off, Good Bye"});
                serviceHandle.sendMessageToServer(
                        AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR + AVL_Service.pref.getString("LastLongitude", "0"),
                        "SDHS",
                        MsgType.LogoffReq,
                        AckType.NEW,
                        MsgValidity.Medium,
                        MsgPriority.AboveNormal);

                handleShowProgress(msg);

                Thread shutdown = new Thread(new Runnable() {

                    @Override
                    public void run() {

                        while (myProgress.isShowing() || mTTS.isSpeaking())
                            try {
                                Thread.sleep(500);

                            } catch (InterruptedException e) {
                                handleException("[Quit app failed]" + "[logoff_Quit]" + "[" + e.getLocalizedMessage() + "]");

                            }
                        if (!serviceHandle.loggedIn()) {
                            if (AVL_Service.pref.getString("DriverID", "0").equalsIgnoreCase("8001"))
                                ((CabDispatch) getApplication()).stopService();

                            if (AVL_Service.pref.getBoolean("AudiojJackPeripheral", false))
                                disconnectAJR();
                            if (mTTS != null) {
                                mTTS.stop();
                                mTTS.shutdown();
                            }

                            if (Meter != null) {
                                if (AVL_Service.SDEnableMeterLocking && AVL_Service.pref.getBoolean("PulsarMeter", false)) {
                                    Meter.lockMeter();
                                }
                                Meter.cancel();
                                Meter = null;
                            }
                            if (taxiMeterPrinter != null) {
                                if (AVL_Service.SDEnableMeterLocking && AVL_Service.pref.getBoolean("PulsarMeter", false)) {
                                    taxiMeterPrinter.lockMeter();
                                }
                                taxiMeterPrinter.cancel();
                                taxiMeterPrinter = null;
                            }
                            if (bluebambooPrinter != null) {
                                bluebambooPrinter.flush();
                                bluebambooPrinter = null;
                            }
                            if (Vivotech != null) {
                                Vivotech = null;
                                VivotechDevice = null;
                            }
                            if (mBluetoothAdapter != null) {
                                mBluetoothAdapter.disable();
                            }
                            mBluetoothAdapter = null;

                            System.gc();
                            System.runFinalization();
                            finish();
                        }
                    }// run
                });
                notificationManager.cancelAll();
                System.runFinalization();
                shutdown.start();

            } else {

                notificationManager.cancelAll();
                if (AVL_Service.pref.getString("DriverID", "0").equalsIgnoreCase("8000"))
                    ((CabDispatch) getApplication()).stopService();

                if (Meter != null) {
                    if (AVL_Service.SDEnableMeterLocking && AVL_Service.pref.getBoolean("PulsarMeter", false)) {
                        Meter.lockMeter();
                    }
                    Meter.cancel();
                    Meter = null;
                }
                if (taxiMeterPrinter != null) {
                    if (AVL_Service.SDEnableMeterLocking && AVL_Service.pref.getBoolean("PulsarMeter", false)) {
                        taxiMeterPrinter.lockMeter();
                    }
                    taxiMeterPrinter.cancel();
                    taxiMeterPrinter = null;
                }
                if (bluebambooPrinter != null) {
                    bluebambooPrinter.flush();
                    bluebambooPrinter = null;
                }
                if (Vivotech != null) {
                    Vivotech = null;
                    VivotechDevice = null;
                }
                if (mBluetoothAdapter != null) {
                    mBluetoothAdapter.disable();
                }
                mBluetoothAdapter = null;
                System.runFinalization();
                finish();
            }
        } catch (Exception e) {
            handleException("[Quit app failed]" + "[logoff_Quit]" + "[" + e.getLocalizedMessage() + "]");
        }

    }

	/*--------------------------------------------------------------meterType-----------------------------------------------------------------------*/

    String meterType() {
        if (AVL_Service.pref.getBoolean("BluetoothMeter", false)) {
            if (AVL_Service.pref.getBoolean("CentrodyneMeter", false))
                return "centrodyne";
            else if (AVL_Service.pref.getBoolean("VeriFoneDevice", false))
                return "veriFone";
        } else
            return "";
        return "";

    }

	/*--------------------------------------------------------------ParseFloatFromString-----------------------------------------------------------------------*/

    Float ParseFloatFromString(String pNumber) {
        Float lValue = 0f;
        try {
            if (pNumber.trim().equalsIgnoreCase(""))
                lValue = 0f;

            lValue = Float.valueOf(pNumber);
        } catch (Exception ex) {
            lValue = 0f;
        }
        return Float.valueOf(dFormat.format(lValue));
    }

	/*--------------------------------------------------------------ParseIntFromString-----------------------------------------------------------------------*/

    int ParseIntFromString(String pNumber) {
        int lValue = 0;
        try {
            if (pNumber.trim().equalsIgnoreCase(""))
                lValue = 0;

            lValue = Integer.parseInt(pNumber);
        } catch (Exception ex) {
            lValue = 0;
        }
        return lValue;
    }

	/*--------------------------------------------------------------MDT to Dialie Messages-----------------------------------------------------------------------*/

    public void PingFrame() {
        String Message = "HERE;";
        sendMessageToPIM(Message);
    }

    public void DeviceInformationFrame(String Sim_Number, String network_name, String network_password, String pim_ip_address, String mdt_ip_address, String mdt_device_model,
                                       String mdt_application_version_name, String mdt_application_version_code, String is_clear_network_data_needed) {
		/*
		 * DI;mdt_device_id;sim_number;network_name;network_password;pim_ip_address;mdt
		 * _ip_address;mdt_device_model;mdt_application_version_name;mdt_application_version_code
		 * ;is_clear_network_data_needed;
		 */

        StringBuilder Message = new StringBuilder();
        Message.append("DI;");
        Message.append(AVL_Service.tm.getDeviceId());
        Message.append(";");
        Message.append(Sim_Number);
        Message.append(";");
        Message.append(network_name.trim());
        Message.append(";");
        Message.append(network_password.trim());
        Message.append(";");
        Message.append(pim_ip_address.trim());
        Message.append(";");
        Message.append(mdt_ip_address.trim());
        Message.append(";");
        Message.append(mdt_device_model.trim());
        Message.append(";");
        Message.append(mdt_application_version_name.trim());
        Message.append(";");
        Message.append(mdt_application_version_code.trim());
        Message.append(";");
        Message.append(is_clear_network_data_needed);
        Message.append(";");
        sendMessageToPIM(Message.toString().trim());
    }

    public void UpdateDataTOPIMFrame(String Sim_Number, String network_name, String network_password, String pim_ip_address, String mdt_ip_address, String mdt_device_model,
                                     String mdt_application_version_name, String mdt_application_version_code, String is_clear_network_data_needed) {
        StringBuilder Message = new StringBuilder();
        Message.append("WB;");
        Message.append(AVL_Service.tm.getDeviceId());
        Message.append(";");
        Message.append(Sim_Number);
        Message.append(";");
        Message.append(network_name);
        Message.append(";");
        Message.append(network_password);
        Message.append(";");
        Message.append(pim_ip_address);
        Message.append(";");
        Message.append(mdt_ip_address);
        Message.append(";");
        Message.append(mdt_device_model);
        Message.append(";");
        Message.append(mdt_application_version_name);
        Message.append(";");
        Message.append(mdt_application_version_code);
        Message.append(";");
        Message.append(is_clear_network_data_needed);
        Message.append(";");
        sendMessageToPIM(Message.toString());
    }

    public void AuthenticationFrame(String UserLogin, String UserPassword) {
        StringBuilder Message = new StringBuilder();
        Message.append("AL;");
        Message.append(UserLogin.trim());
        Message.append(";");
        Message.append(UserPassword.trim());
        Message.append(";");
        Message.append(AVL_Service.appVersion.trim());
        Message.append(";");
        sendMessageToPIM(Message.toString().trim());
    }

    public void LogoutFrame() {
        StringBuilder Message = new StringBuilder();
        Message.append("LO;");
        Message.append(MRMS_DateFormat.format(new Date()).trim());
        Message.append(";");
        sendMessageToPIM(Message.toString().trim());
    }

    public void RequestTipReceiptFrame(String card_number, String expiration_month, String expiration_year, String fare_with_extra_amount) {
        StringBuilder Message = new StringBuilder();
        Message.append("PTIP;");
        Message.append(card_number);
        Message.append(";");
        Message.append(expiration_month);
        Message.append(";");
        Message.append(expiration_year);
        Message.append(";");
        Message.append(fare_with_extra_amount);
        Message.append(";");
        sendMessageToPIM(Message.toString());
    }

    public void RequestProcessingReceiptFrame(String card_number, String expiration_month, String expiration_year, String fare_with_extra_amount, String tip_amount, String total_amount,
                                              String approval_number) {

        StringBuilder Message = new StringBuilder();
        Message.append("PPRO;");
        Message.append(card_number);
        Message.append(";");
        Message.append(expiration_month);
        Message.append(";");
        Message.append(expiration_year);
        Message.append(";");
        Message.append(fare_with_extra_amount);
        Message.append(";");
        Message.append(tip_amount);
        Message.append(";");
        Message.append(total_amount);
        Message.append(";");
        Message.append(approval_number);
        Message.append(";");
        sendMessageToPIM(Message.toString());
    }

    public void FlatRateFrame(String Flat_rate_amount, String pExtra, String pDistance, String rate_number) {
        StringBuilder Message = new StringBuilder();
        Message.append("FAR;");
        Message.append(Flat_rate_amount.length() == 0 ? "0" : Flat_rate_amount);
        Message.append(";");
        Message.append(pExtra.length() == 0 ? "0" : pExtra);
        Message.append(";");
        Message.append(pDistance);
        Message.append(";");
        Message.append(rate_number);
        Message.append(";");
        sendMessageToPIM(Message.toString());
    }

    public void RequestDuplicateFrame() {
        StringBuilder Message = new StringBuilder();
        Message.append("DUP;");
        sendMessageToPIM(Message.toString());
    }

    public void AlertFrame() {
        StringBuilder Message = new StringBuilder();
        Message.append("WR;");
        sendMessageToPIM(Message.toString());
    }

    public void LocationFrame() {
        StringBuilder Message = new StringBuilder();
        Message.append("LOC;");
        Message.append(AVL_Service.pref.getString("LastLatitude", "0"));
        Message.append(";");
        Message.append(AVL_Service.pref.getString("LastLongitude", "0"));
        Message.append(";");
        Message.append(AVL_Service.pref.getString("Speed", "0.0"));
        Message.append(";");
        sendMessageToPIM(Message.toString());
    }

    public void RequestDisabilityModeFrame() {
        StringBuilder Message = new StringBuilder();
        Message.append("DISA;");
        sendMessageToPIM(Message.toString());
    }
    public void TimeOffFrame() {
        StringBuilder Message = new StringBuilder();
        Message.append("TOF;");
        sendMessageToPIM(Message.toString());
    }
    public void VacantFrame() {
        StringBuilder Message = new StringBuilder();
        Message.append("VAC;");
        sendMessageToPIM(Message.toString());
    }
    public void HiredFrame() {
        StringBuilder Message = new StringBuilder();
        Message.append("HIR;");
        sendMessageToPIM(Message.toString());
    }
    public void HiredFrameForDispatch(String CustomerName, String pPickAddress, String pPickLatitude, String pPickLongitude, String pDropAddress, String pDropLattitude, String pDropLongitude) {
        StringBuilder Message = new StringBuilder();
        Message.append("HIR;");
        Message.append(CustomerName);
        Message.append(";");
        Message.append(pPickAddress);
        Message.append(";");
        Message.append(pPickLatitude);
        Message.append(";");
        Message.append(pPickLongitude);
        Message.append(";");
        Message.append(pDropAddress);
        Message.append(";");
        Message.append(pDropLattitude);
        Message.append(";");
        Message.append(pDropLongitude);
        Message.append(";");
        sendMessageToPIM(Message.toString());
    }
    public void DropOffAddress() {
        StringBuilder Message = new StringBuilder();
        Message.append("DOA;");
        sendMessageToPIM(Message.toString());
    }
    public void PaymentCompleted() {
        StringBuilder Message = new StringBuilder();
        Message.append("PCOM;");
        sendMessageToPIM(Message.toString());
    }

    public static final String PIM_IP_ADDRESS = "pim_ip_address";

    public String ip_user_connected = "";
    public String checkIPPIM() {

        ArrayList<ClientScanResult> clients = getClientList(false, 300);
        if (clients != null && clients.size() > 0) {
            for (ClientScanResult clientScanResult : clients) {
                // String user_connected = clientScanResult.getDevice();
                ip_user_connected = clientScanResult.getIpAddr();
                // pim_ip.setText(ip_user_connected);
                break;
            }
            // if (ip_user_connected.length() > 6)
            // sendIPPIM(ip_user_connected);
        }
        DialiePIMIP = ip_user_connected;
        return ip_user_connected;
    }

    public void sendIPPIM(String ip) {
        sendMessageToPIM("IPPIM;" + ip + ";");
        setPIMIPAddress(TaxiPlexer.this, ip);
        sendDeviceInfo();
    }
    public static boolean setPIMIPAddress(Context ctx, String data) {

        @SuppressWarnings("deprecation")
        SharedPreferences prefs = ctx.getSharedPreferences(SHARED_PREFERENCES_NAME, Context.MODE_WORLD_READABLE);
        return prefs.edit().putString(PIM_IP_ADDRESS, data).commit();
    }
    public static String getPIMIPAddress(Context ctx) {
        @SuppressWarnings("deprecation")
        SharedPreferences prefs = ctx.getSharedPreferences(SHARED_PREFERENCES_NAME, Context.MODE_WORLD_READABLE);
        return prefs.getString(PIM_IP_ADDRESS, "");
    }
    public void sendDeviceInfo() {

        String versionCode = "";
        String versionName = "";
        PackageInfo packageInfo;
        Context mContext = TaxiPlexer.this;
        try {
            packageInfo = TaxiPlexer.this.getPackageManager().getPackageInfo(mContext.getPackageName(), 0);
            versionCode = String.valueOf(packageInfo.versionCode);
            versionName = packageInfo.versionName;
        } catch (NameNotFoundException e) {
            e.printStackTrace();
            Log.e("Version", "Cannot load Version!");
        }

        TelephonyManager tm = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);

        String networkName = "";
        String networkPwd = "";

        Method[] methods = wifiManager.getClass().getDeclaredMethods();
        for (Method m : methods) {
            if (m.getName().equals("getWifiApConfiguration")) {
                WifiConfiguration config;
                try {
                    config = (WifiConfiguration) m.invoke(wifiManager);
                    networkName = config.SSID;
                    networkPwd = config.preSharedKey;
                } catch (IllegalArgumentException e) {
                    e.printStackTrace();
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                } catch (InvocationTargetException e) {
                    e.printStackTrace();
                } catch (Exception e) {
                    // e.printStackTrace();
                }
            }
        }

        tmDevice = "" + tm.getDeviceId();
        simNumber = "" + tm.getSimSerialNumber();
        String pimIp = getPIMIPAddress(TaxiPlexer.this);
        String mdtIp = getLocalIpAddress();
        String manufacturer = Build.MANUFACTURER;
        String model = Build.MODEL;
        if (networkName == null)
            networkName = "";
        if (networkPwd == null)
            networkPwd = "";
        if (tmDevice == null)
            tmDevice = "";
        if (simNumber == null)
            simNumber = "";
        if (pimIp == null)
            pimIp = "";
        if (mdtIp == null)
            mdtIp = "";
        if (manufacturer == null)
            manufacturer = "";
        if (model == null)
            model = "";
        String clearNetworkData = "0";
        sendMessageToPIM("DI" + ";" + tmDevice
                + ";"
                + simNumber
                + ";"
                + networkName
                + ";"
                + networkPwd
                + ";"
                + pimIp
                + ";"
                + mdtIp
                + ";"
                + manufacturer
                + " "
                + model
                + ";"
                + versionCode
                + ";"
                + versionName
                + ";"
                + clearNetworkData
                + ";");
    }
    /*--------------------------------------------------------------Dialie Methods-----------------------------------------------------------------------*/
	/*
	 * public void checkIPPIM() {
	 * String ip_user_connected = "";
	 * ArrayList<ClientScanResult> clients = getClientList(false, 300);
	 * if (clients != null && clients.size() > 0) {
	 * for (ClientScanResult clientScanResult : clients) {
	 * // String user_connected = clientScanResult.getDevice();
	 * ip_user_connected = clientScanResult.getIpAddr();
	 * // pim_ip.setText(ip_user_connected);
	 * }
	 * sendIPPIM(ip_user_connected);
	 * }
	 * }
	 * 
	 * public void sendIPPIM(String ip) {
	 * sendMessageToPIM("IPPIM;" + ip + ";");
	 * setPIMIPAddress(TaxiPlexer.this, ip);
	 * sendDeviceInfo();
	 * }
	 * public static boolean setPIMIPAddress(Context ctx, String data) {
	 * 
	 * @SuppressWarnings("deprecation")
	 * SharedPreferences prefs = ctx.getSharedPreferences(SHARED_PREFERENCES_NAME, Context.MODE_WORLD_READABLE);
	 * return prefs.edit().putString(PIM_IP_ADDRESS, data).commit();
	 * }
	 * public void sendDeviceInfo() {
	 * 
	 * String versionCode = "";
	 * String versionName = "";
	 * PackageInfo packageInfo;
	 * try {
	 * packageInfo = TaxiPlexer.this.getPackageManager().getPackageInfo(taxiplexer.getPackageName(), 0);
	 * versionCode = String.valueOf(packageInfo.versionCode);
	 * versionName = packageInfo.versionName;
	 * } catch (NameNotFoundException e) {
	 * e.printStackTrace();
	 * Log.e("Version", "Cannot load Version!");
	 * }
	 * 
	 * TelephonyManager tm = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
	 * 
	 * String networkName = "";
	 * String networkPwd = "";
	 * 
	 * Method[] methods = mWifimanager.getClass().getDeclaredMethods();
	 * for (Method m: methods) {
	 * if (m.getName().equals("getWifiApConfiguration")) {
	 * WifiConfiguration config;
	 * try {
	 * config = (WifiConfiguration) m.invoke(mWifimanager);
	 * networkName = config.SSID;
	 * networkPwd = config.preSharedKey;
	 * } catch (IllegalArgumentException e) {
	 * e.printStackTrace();
	 * } catch (IllegalAccessException e) {
	 * e.printStackTrace();
	 * } catch (InvocationTargetException e) {
	 * e.printStackTrace();
	 * }
	 * }
	 * }
	 * 
	 * String tmDevice = "" + tm.getDeviceId();
	 * String simNumber = "" + tm.getSimSerialNumber();
	 * String pimIp = getPIMIPAddress(TaxiPlexer.this);
	 * String mdtIp = getLocalIpAddress();
	 * String manufacturer = Build.MANUFACTURER;
	 * String model = Build.MODEL;
	 * if(networkName == null) networkName = "";
	 * if(networkPwd == null) networkPwd = "";
	 * if(tmDevice == null) tmDevice = "";
	 * if(simNumber == null) simNumber = "";
	 * if(pimIp == null) pimIp = "";
	 * if(mdtIp == null) mdtIp = "";
	 * if(manufacturer == null) manufacturer = "";
	 * if(model == null) model = "";
	 * String clearNetworkData = "0";
	 * sendMessageToPIM("DI"+";"+
	 * tmDevice+";"+simNumber+";"+networkName+";"+networkPwd+";"+pimIp+";"+mdtIp+";"+manufacturer+" "+model+";"+versionCode+";"+versionName+";"+clearNetworkData+";");
	 * }
	 */
    public void sendMessageToPIM(String messageToSend) {
        Message msg = messageToPIMHandler.obtainMessage();
        Bundle b = new Bundle();
        b.putString("message", messageToSend);
        msg.setData(b);
        msg.sendToTarget();
    }

    private final Handler messageToPIMHandler = new Handler() {

        @Override
        public void handleMessage(Message msg) {
            String message = msg.getData().getString("message");
            Intent i = new Intent(INTENT_MDT_SENDER);
            i.putExtra("message", message);
            sendBroadcast(i);
        }
    };
    @Override
    protected void onPause() {
        super.onPause();
        if (AVL_Service.enableDialiePackageOnDevice)
            this.unregisterReceiver(mReceiverFromPIM);
    }

    @Override
    protected void onResume() {
        super.onResume();
        if (AVL_Service.enableDialiePackageOnDevice)
            this.registerReceiver(mReceiverFromPIM, new IntentFilter(INTENT_PIM_RECEIVER));
    }
    private final BroadcastReceiver mReceiverFromPIM = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {

            String action = intent.getAction();
            if (action.equalsIgnoreCase(INTENT_PIM_RECEIVER)) {
                Bundle extra = intent.getExtras();
                String data = extra.getString("message");
                translateReceivedMessage(data);
            }
			/*
			 * String action = intent.getAction();
			 * if (action.equalsIgnoreCase(INTENT_PIM_RECEIVER)) {
			 * Bundle extra = intent.getExtras();
			 * String data = extra.getString("message");
			 * // list_data.add(data);
			 * // h.obtainMessage().sendToTarget();
			 * Toast.makeText(getApplicationContext(), data, Toast.LENGTH_SHORT).show();
			 * new AlertDialog.Builder(TaxiPlexer.this).setIcon(android.R.drawable.ic_dialog_alert).setTitle("Dialei").setMessage(data).setPositiveButton("OK", new
			 * DialogInterface.OnClickListener() {
			 * 
			 * @Override
			 * public void onClick(DialogInterface dialog, int which) {
			 * dialog.dismiss();
			 * } // onClick
			 * 
			 * }).show();
			 * }
			 */
        }
    };

    public void translateReceivedMessage(String message) {
        String[] values = null;
        String S = "";
        values = split(message, ";");
        if (values != null && values.length >= 1) {
            if (!values[0].equals("ERR")) {
                if (diale_Authorize) {
                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                        tvBackSeatDevice.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                        tvBackSeatDevice.setText(Farsi.Convert(getResources().getString(R.string.Authenticated)));
                    } else {
                        tvBackSeatDevice.setText(Farsi.Convert(getResources().getString(R.string.Authenticated)));
                    }
                    tvBackSeatDevice.setTextColor(Color.GREEN);
                } else if (diale_Acknowledge) {
                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                        tvBackSeatDevice.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                        tvBackSeatDevice.setText(Farsi.Convert(getResources().getString(R.string.Acknowledged)));
                    } else {
                        tvBackSeatDevice.setText(Farsi.Convert(getResources().getString(R.string.Acknowledged)));
                    }
                    tvBackSeatDevice.setTextColor(Color.GREEN);
                } else {
                    tvBackSeatDevice.setText(R.string.Connected);
                    tvBackSeatDevice.setTextColor(Color.GREEN);
                }
                diale_Connectivity = true;
            }
        }

        if (values != null && values.length >= 1) {
            int lResponseCode = 0;
            String result = null;
            if (values[0].equals("DO")) {

                handleShowProgress(Farsi.Convert(getResources().getString(R.string.Estimating_Driving_Distance)));
                distCalculator = new DistanceCalculatorTask().execute(currentTrip.PUaddress, values[1] + " " + values[2] + " " + values[3] + " " + values[4]);
                try {

                    result = distCalculator.get();
                    lResponseCode = constantsforgoogleapi.myMap2.get(result);

                    if (lResponseCode != 1) {
                        StringBuffer envelope = new StringBuffer(
                                "<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><CalculateRouteByStreetAddress xmlns=\"http://Itcurves.net/\"><stAddress>")
                                .append(currentTrip.PUaddress)
                                .append("</stAddress><EndAddress>")
                                .append(values[1] + " " + values[2] + " " + values[3] + " " + values[4])
                                .append("</EndAddress></CalculateRouteByStreetAddress></soap:Body></soap:Envelope>");
                        // Calling Web Service and Parsing Response
                        WS_Response tempResponse = CallingWS.submit(AVL_Service.webServiceURL, AVL_Service.soapAction_CalculateRouteByStreetAddress, envelope.toString());
                        if (tempResponse != null && tempResponse.responseType != null && tempResponse.responseType.equalsIgnoreCase("CalculateRouteByStreetAddressResult")) {
                            AVL_Service.pref.edit().putString("LastEstDistance", tempResponse.fareEstimation.get_distance()).putString("LastEstTime", tempResponse.fareEstimation.get_time()).commit();
                        } else {
                            LogException("[Translating recieve messag from dialie failed]" + "[translateReceivedMessage]");
                            AVL_Service.pref.edit().putString("LastEstDistance", "").putString("LastEstTime", "").commit();
                        }
                    }
                } catch (Exception e) {
                    exception("[Exception in Translating recieve messag dialie]" + "[translateReceivedMessage]" + "[" + e.getLocalizedMessage() + "]");

                }

                handleHideProgress();

                serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                        + AVL_Service.pref.getString("LastLongitude", "0")
                        + Constants.COLSEPARATOR
                        + currentTrip.tripNumber
                        + Constants.COLSEPARATOR
                        + values[1] // Street,City,State,Zip,DropOffLat,DropOffLong
                        + Constants.COLSEPARATOR
                        + values[2]
                        + Constants.COLSEPARATOR
                        + values[3]
                        + Constants.COLSEPARATOR
                        + values[4]
                        + Constants.COLSEPARATOR
                        + values[5]
                        + Constants.COLSEPARATOR
                        + values[6]
                        + Constants.COLSEPARATOR
                        + AVL_Service.pref.getString("LastEstDistance", "")
                        + Constants.COLSEPARATOR
                        + AVL_Service.pref.getString("LastEstTime", ""), "SDHS", MsgType.SDADDRESSUPDATE, AckType.NEW, MsgValidity.Short, MsgPriority.Highest);
                currentTrip.DOlat = values[5];
                currentTrip.DOlong = values[6];
                currentTrip.DOaddress = values[1] + " " + values[2] + ", " + values[4] + " " + values[3];

            } else if (values[0].equals("ERR")) {

                tvBackSeatDevice.setText(R.string.NotConnected);
                tvBackSeatDevice.setTextColor(Color.RED);
                diale_Connectivity = false;

            } else if (values[0].equals("PINF")) {
                if (values[1].equals("y")) {
                    diale_Acknowledge = true;
                    if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                        tvBackSeatDevice.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                        tvBackSeatDevice.setText(Farsi.Convert(getResources().getString(R.string.Acknowledged)));
                    } else {
                        tvBackSeatDevice.setText(Farsi.Convert(getResources().getString(R.string.Acknowledged)));
                    }
                    tvBackSeatDevice.setTextColor(Color.GREEN);
                    // AuthenticationFrame(AVL_Service.pref.getString("VehicleID", "0"), "123");
                    if (!IsSendToDialieClicked)
                        AuthenticationFrame("0000000", "0000");
                    else
                        IsSendToDialieClicked = false;

                }
            } else if (values[0].equals("WB")) {
                if (tvBackSeatDevice.getText().toString().equalsIgnoreCase("Connected")) {
                    S = "WB";
                }
            } else if (values[0].equals("IN")) {
                // "Authentication Completed frame"
                // if (values[16].equalsIgnoreCase(AVL_Service.pref.getString("DriverID", "0")))
                {
                    diale_Authorize = true;
                    tvBackSeatDevice.setText(Farsi.Convert(getResources().getString(R.string.Authenticated)));
                    tvBackSeatDevice.setTextColor(Color.GREEN);
                }
				/*
				 * String[] authen = new String[values.length - 1];
				 * for (int i = 0; i < authen.length; i++)
				 * authen[i] = values[i + 1];
				 */
            } else if (values[0].equals("POW")) {

                if (values[1].equals("y")) {

                    S = "PIM Pow. (" + values[2] + "%)";
                } else if (values[1].equals("n")) {

                    S = "PIM Not Pow. (" + values[2] + "%)";
                }
            } else if (values[0].equals("INF")) {

                if (values.length > 0)
                    S = values[1];

            } else if (values[0].equals("INFL")) {

                if (values.length > 0)
                    S = values[1];

            } else if (values != null && values[0].equals("DISR")) {
                if (values.length > 0) {
                    S = values[1];
                }
            } else if (values[0].equals("INS")) {

                S = "Authentication Started frame";

            } else if (values[0].equals("IND")) {

                S = "Authentication Declined frame";

            } else if (values[0].equals("INFA")) {

                S = "Authentication Failed frame";

            } else if (values[0].equals("OUT")) {

                // logoff
                S = "Please, log into the system";
            } else if (values[0].equals("VAC")) {
                PIMLastCommandName = "VAC";
                if (!AVL_Service.bShuttle)
                    if (paymentView != null)
                        if (paymentView.isShown())
                            ProcessCashRequest();// if Bshuttle = true please onot call this line
                // Meter is Vacant

            } else if (values[0].equals("VACACK")) {
                PIMLastCommandName = "VAC";
                if (!AVL_Service.bShuttle)
                    if (paymentView != null)
                        if (paymentView.isShown())
                            ProcessCashRequest();// if Bshuttle = true please onot call this line
                // Meter is Vacant

            } else if (values[0].equals("VACW")) {

                S = "Wait for Vacant";

            } else if (values[0].equals("HIR")) {
                PIMLastCommandName = "HIR";
                if (values.length > 3 && values[3].length() > 0)
                    AVL_Service.pref.edit().putString("LastLatitude", values[3]).commit();
                if (values.length > 4 && values[4].length() > 0)
                    AVL_Service.pref.edit().putString("LastLongitude", values[4]).commit();

                AVL_Service.pref.edit().putString("FlaggerDrop", "Unknown").commit();// to clear flagger drop before any use
                AVL_Service.pref.edit().putString("EstimateFare", "0").commit();
                softFlaggerPickUp = true;
                pickedUp();

                if (paymentView != null)
                    if (paymentView.isShown()) {
                        paymentView = null;
                        setContentView(tripView);
                    }
                if (!(currentTrip != null && currentTrip.DOaddress.length() > 5))
                    DropOffAddress();

            } else if (values[0].equals("HIRACK")) {
                PIMLastCommandName = "HIR";
                if (values.length > 3 && values[3].length() > 0)
                    AVL_Service.pref.edit().putString("LastLatitude", values[3]).commit();
                if (values.length > 4 && values[4].length() > 0)
                    AVL_Service.pref.edit().putString("LastLongitude", values[4]).commit();

                AVL_Service.pref.edit().putString("FlaggerDrop", "Unknown").commit();// to clear flagger drop before any use
                AVL_Service.pref.edit().putString("EstimateFare", "0").commit();
                softFlaggerPickUp = true;
                pickedUp();

                if (paymentView != null)
                    if (paymentView.isShown()) {
                        paymentView = null;
                        setContentView(tripView);
                    }
                if (!(currentTrip != null && currentTrip.DOaddress.length() > 5))
                    DropOffAddress();
            } else if (values[0].equals("TOF")) {
                PIMLastCommandName = "TOF";
                if (values.length > 2 && values[2].length() > 0)
                    Fare = values[2];
                if (values.length > 3 && values[3].length() > 0)
                    Extras = values[3];
                if (values.length > 5 && values[5].length() > 0)
                    Tip = values[5];
                if (values.length > 8 && values[8].length() > 0)
                    AVL_Service.pref.edit().putString("LastLatitude", values[8]).commit();
                if (values.length > 9 && values[9].length() > 0)
                    AVL_Service.pref.edit().putString("LastLongitude", values[9]).commit();

                droppedOff("TaxiMeter");

            } else if (values[0].equals("TOFACK")) {
                PIMLastCommandName = "TOF";
                if (values.length > 2 && values[2].length() > 0)
                    Fare = values[2];
                if (values.length > 3 && values[3].length() > 0)
                    Extras = values[3];
                if (values.length > 5 && values[5].length() > 0)
                    Tip = values[5];
                if (values.length > 8 && values[8].length() > 0)
                    AVL_Service.pref.edit().putString("LastLatitude", values[8]).commit();
                if (values.length > 9 && values[9].length() > 0)
                    AVL_Service.pref.edit().putString("LastLongitude", values[9]).commit();

                droppedOff("TaxiMeter");

            } else if (values[0].equals("PROST")) {

                S = "Processing Started.. (" + values[1] + ")";
                cashBtn.setEnabled(false);
                TimeOffFrame();
            } else if (values[0].equals("PROFL")) {

                S = "Processing Failed";
                cashBtn.setEnabled(true);

            } else if (values[0].equals("PRORS")) {// PRORS;approvalCode;transaction_id;card_number;MMYY;fare;extra;tip;total;
                PIMLastCommandName = "PRORS";
                if (!AVL_Service.bShuttle)
                    sendTripResponse(States.DROPPED);
                String CardNumber = "XXXXXXXXXX";
                if (currentTrip != null) {
                    currentTrip.cardProcessor = "Dialie";
                    if (values.length > 1 && values[1].length() > 0)
                        currentTrip.authCode = values[1];
                    if (values.length > 2 && values[2].length() > 0)
                        currentTrip.transactionID = values[2];
                    if (values.length > 3 && values[3].length() > 0) {
                        CardNumber = CardNumber + values[3];
                        currentTrip.CredirCardNumber = CardNumber;
                        currentTrip.creditCardNum = CardNumber;
                        ttfCCNumber.setText(CardNumber);
                    }
                    if (values.length > 4 && values[4].length() > 0) {
                        currentTrip.creditCardExpiry = values[4];
                        ttfCCExpiry.setText(values[4]);
                    }
                    if (values.length > 5 && values[5].length() > 0) {
                        Fare = values[5];
                        ttfFare.setText(Fare);
                    }
                    if (values.length > 6 && values[6].length() > 0) {
                        Extras = values[6];
                        ttfExtras.setText(Extras);
                    }
                    if (values.length > 7 && values[7].length() > 0) {
                        tip = Float.parseFloat(values[7]);
                        ttfTip.setText(Float.toString(tip));
                    }
                    if (values.length > 8 && values[8].length() > 0) {
                        total = Float.parseFloat(values[8]);
                    }
                    currentTrip.preAuthAmount = Float.toString(total);
                    receivedPaymentResp("Dialie_Header" + Constants.BODYSEPARATOR + "1^CreditCard Payment successful");
                    if(!currentTrip.bCopayAllowedOnPaymentScreen){
                        tempFare = "0";
                        tempExtras = "0";
                    } else {
                        String  temptotal = ttfTotal.getText().toString();
                        temptotal = String.valueOf(Float.parseFloat(temptotal) - Float.parseFloat(currentTrip.Copay));
                        ttfTotal.setText(temptotal);
                    }
                    serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                            + AVL_Service.pref.getString("LastLongitude", "0")
                            + Constants.COLSEPARATOR
                            + currentTrip.tripNumber
                            + Constants.COLSEPARATOR
                            + "Credit Card"
                            + Constants.COLSEPARATOR
                            + String.valueOf(Float.parseFloat(Fare) + Float.parseFloat(tempFare))
                            + Constants.COLSEPARATOR
                            + String.valueOf(Float.parseFloat(Extras) + Float.parseFloat(tempExtras))
                            + Constants.COLSEPARATOR
                            + Tip
                            + Constants.COLSEPARATOR
                            + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                            + Constants.COLSEPARATOR
                            + CardNumber
                            + Constants.COLSEPARATOR
                            + "Dialie"
                            + Constants.COLSEPARATOR
                            + currentTrip.cardProcessor
                            + Constants.COLSEPARATOR
                            + currentTrip.ConfirmNumber
                            + Constants.COLSEPARATOR
                            + currentTrip.authCode
                            + Constants.COLSEPARATOR
                            + AVL_Service.pref.getString("VehicleID", "0")
                            + Constants.COLSEPARATOR
                            + "0"
                            + Constants.COLSEPARATOR
                            + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                            + Constants.COLSEPARATOR
                            + "Driver-"
                            + AVL_Service.pref.getString("DriverID", "unknown")
                            + Constants.COLSEPARATOR
                            + currentTrip.authCode
                            + Constants.COLSEPARATOR
                            + currentTrip.tripNumber
                            + Constants.COLSEPARATOR
                            + "1"
                            + Constants.COLSEPARATOR
                            + currentTrip.transactionID
                            + Constants.COLSEPARATOR
                            + "Sale"
                            + Constants.COLSEPARATOR
                            + AVL_Service.pref.getString("DriverID", "Driver")
                            + Constants.COLSEPARATOR
                            + "0"
                            + Constants.COLSEPARATOR
                            + "0"
                            + Constants.COLSEPARATOR
                            + MRMS_DateFormat.format(currentTrip.PUTime)
                            + Constants.COLSEPARATOR
                            + ((dFormat.format(Distance).equalsIgnoreCase("0.00")) ? currentTrip.miles : dFormat.format(Distance))
                            + Constants.COLSEPARATOR
                            + ActualPaymentAmount
                            + Constants.COLSEPARATOR
                            + currentTrip.PromotionalCode
                            + Constants.COLSEPARATOR
                            + currentTrip.PromotionalValue, "SDHS", MsgType.Payment, AckType.NEW, MsgValidity.Short, MsgPriority.Highest);
                    AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this)
                            .setIcon(android.R.drawable.ic_dialog_alert)
                            .setTitle(Farsi.Convert(getResources().getString(R.string.Alert)))
                            .setMessage(Farsi.Convert(getResources().getString(R.string.Payment_successfully_processed)))
                            .setPositiveButton(Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {

                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    dialog.dismiss();
                                } // onClick

                            });
                    AlertDialog alert = builder.create();
                    alert.show();

                    dialogFontSize(alert);
                }
            } else if (values[0].equals("PROFL")) {
                AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this)
                        .setIcon(android.R.drawable.ic_dialog_alert)
                        .setTitle(Farsi.Convert(getResources().getString(R.string.Alert)))
                        .setMessage(Farsi.Convert(getResources().getString(R.string.Credit_Card_processing_Failed)))
                        .setPositiveButton(Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {

                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                dialog.dismiss();
                            } // onClick

                        });
                AlertDialog alert = builder.create();
                alert.show();

                dialogFontSize(alert);
            }

        }
    }

    public static String[] split(String str, String c) { // split string function
        int lenght = str.length();
        int first = 0;
        int last = 0;
        int count = 0;
        for (int i = 0; i < lenght; i++) {
            if (str.substring(i, i + 1).equals(c)) {
                count++;
            }
        }

        String[] array = new String[count];
        int j = 0;
        for (int i = 0; i < lenght; i++) {
            if (str.substring(i, i + 1).equals(c)) {
                last = i + 1;
                array[j] = str.substring(first, last - 1);
                first = last;
                j++;
            }
        }

        return array;
    }

    public ArrayList<ClientScanResult> getClientList(boolean onlyReachables, int reachableTimeout) {
        BufferedReader br = null;
        ArrayList<ClientScanResult> result = null;

        try {
            result = new ArrayList<ClientScanResult>();
            br = new BufferedReader(new FileReader("/proc/net/arp"));
            String line;
            while ((line = br.readLine()) != null) {
                String[] splitted = line.split(" +");

                if ((splitted != null) && (splitted.length >= 4)) {
                    // Basic sanity check
                    String mac = splitted[3];

                    if (mac.matches("..:..:..:..:..:..")) {
                        boolean isReachable = false;
                        // InetAddress.getByName(splitted[0]).isReachable(reachableTimeout);

                        if (!onlyReachables || isReachable) {
                            result.add(new ClientScanResult(splitted[0], splitted[3], splitted[5], isReachable));
                        }
                    }
                }
            }
        } catch (Exception e) {
            Log.e(this.getClass().toString(), e.getMessage());
        } finally {
            try {
                br.close();
            } catch (IOException e) {
                Log.e(this.getClass().toString(), e.getMessage());
            }
        }

        return result;
    }

    public String getLocalIpAddress() {
        try {
            for (Enumeration<NetworkInterface> en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements();) {
                NetworkInterface intf = en.nextElement();
                for (Enumeration<InetAddress> enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements();) {
                    InetAddress inetAddress = enumIpAddr.nextElement();
                    if (!inetAddress.isLoopbackAddress()) {
                        return inetAddress.getHostAddress().toString();
                    }
                }
            }
        } catch (Exception ex) {
            Log.e("IP Address", ex.toString());
        }
        return null;
    }

    public String getDataFromResourse(String ServerMessage) {
        String ResourceData = LocalizedResources.getDesc(ServerMessage);
        if (ResourceData.equalsIgnoreCase("EmptyString")) {
            ResourceData = ServerMessage;
        } else {
            ResourceData = getResources().getString(getResources().getIdentifier(ResourceData, "string", getPackageName()));
        }

        if (ServerMessage.trim().toLowerCase().contains("callout")) {
            String s[] = ServerMessage.split(":");
            ResourceData = ResourceData + " " + s[1];
        }
        return ResourceData;
    }

    public void onRadioClick(String pMessage) {

        if (true) {

            try {
                if (AVL_Service.pref.getString("AppLanguage", "en").equalsIgnoreCase("en")) {
                    if (TTS)
                        mTTS.speak(pMessage, TextToSpeech.QUEUE_FLUSH, null);
                } else {
                    MediaPlayer mp = new MediaPlayer();
                    mp.setDataSource("http://translate.google.com/translate_tts?ie=utf-8&tl=ar&q=" + pMessage.replace(" ", "%20"));
                    mp.prepare();
                    mp.start();
                }
            } catch (IOException e) {
                Log.e(e.getMessage(), "prepare() failed");
            }
        }
    }
    public void generateNoteOnSD(String sFileName, final String sBody) {
        try {
            File root = new File(Environment.getExternalStorageDirectory(), "Notes");
            if (!root.exists()) {
                root.mkdirs();
            }
            File gpxfile = new File(root, sFileName);
            FileWriter writer;
            if (!sBody.equalsIgnoreCase(""))
                writer = new FileWriter(gpxfile, true);
            else
                writer = new FileWriter(gpxfile, false);
            writer.append(sBody);
            writer.flush();
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();

        }
    }

    public String getDataFromResourseForSplitStrings(String pServerMessage) {
        String SDHSMessageSplit = getResources().getString(R.string.SDHSMessageSplit);
        String SDHSValueSplit = getResources().getString(R.string.SDHSValueSplit);
        String ResourceData = "";
        if (pServerMessage.trim().contains(SDHSMessageSplit)) {
            String[] lMessage = pServerMessage.split(SDHSMessageSplit);
            if (lMessage.length > 1) {
                String[] lMessageData = lMessage[0].split(SDHSValueSplit);
                int i = 1;
                while (i < lMessage.length) {
                    if (AVL_Service.pref.getString("AppLanguage", "en").equalsIgnoreCase("en"))
                        ResourceData = ResourceData + getDataFromResourse(lMessageData[i - 1]) + " " + lMessage[i] + " ";
                    else
                        ResourceData = " " + lMessage[i] + " " + getDataFromResourse(lMessageData[i - 1]) + ResourceData;
                    i++;
                    if (i == lMessage.length && i == lMessageData.length)
                        if (AVL_Service.pref.getString("AppLanguage", "en").equalsIgnoreCase("en"))
                            ResourceData = ResourceData + " " + getDataFromResourse(lMessageData[i - 1]);
                        else
                            ResourceData = getDataFromResourse(lMessageData[i - 1]) + " " + ResourceData;
                }
            }
        } else {
            ResourceData = LocalizedResources.getDesc(pServerMessage);
            if (ResourceData.equalsIgnoreCase("EmptyString")) {
                ResourceData = pServerMessage;
            } else {
                ResourceData = getResources().getString(getResources().getIdentifier(ResourceData, "string", getPackageName()));
            }
        }

        return ResourceData;
    }
    public boolean IsSelectedTripTimeExpired(String TripNumber) {
        boolean IsExpired = false;

        for (int i = 0; i < WallTripsList.size(); i++) {
            if (WallTripsList.get(i).equalsIgnoreCase(TripNumber)) {

                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss", Locale.US);
                try {
                    Date OldDate = dateFormat.parse(WallTripsPickTime.get(i));
                    Date NewDate = dateFormat.parse((DateFormat.format("yyyy-MM-dd hh:mm:ss", (new Date()).getTime())).toString());
                    long difinmils = (NewDate.getTime() - OldDate.getTime());
                    long diffinSec = TimeUnit.MILLISECONDS.toSeconds(difinmils);
                    if (diffinSec <= (5 + AVL_Service.pref.getInt("BtnDisableTime", 10))) {
                        IsExpired = true;
                    }
                } catch (ParseException e) {

                    e.printStackTrace();
                }
            }
        }
        return IsExpired;
    }

    public static void WriteinLogFile(String pMessage) {
        SetDirectoryPath();
        String ErrorLogFile = "TaxiPlexer_appLogs.txt";

        File file = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + DocumentDirectoryPath, ErrorLogFile);

        StringBuilder text = new StringBuilder();

        if (file.exists()) {
            // Read text from file
            try {
                BufferedReader br = new BufferedReader(new FileReader(file));
                String line;

                while ((line = br.readLine()) != null) {
                    text.append(line);
                    text.append('\n');
                }
                br.close();
            } catch (IOException e) {
                // You'll need to add proper error handling here
            }
        }
        text.append('\n');
        text.append(pMessage);

        FileWriter writer;
        try {
            writer = new FileWriter(file);
            writer.append(text.toString());
            writer.flush();
            writer.close();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    private static void SetDirectoryPath() {
        DocumentDirectoryPath = "/TaxiPLexerdocs/";// getResources().getString(R.string.documentDirectoryPath);
        File FileDocDirectoryPath = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + DocumentDirectoryPath);

        if (!(FileDocDirectoryPath.exists() && FileDocDirectoryPath.isDirectory()))
            FileDocDirectoryPath.mkdir();
    }

    private void showToastMessage(int MsgID) {
        if ((AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur"))) {
            Toast toast = Toast.makeText(getApplicationContext(), MsgID, Toast.LENGTH_LONG);

            TextView v = (TextView) toast.getView().findViewById(android.R.id.message);
            v.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            v.setTextSize(miscFont);
            toast.show();
        } else {
            Toast.makeText(this, Farsi.Convert(getResources().getString(MsgID)), Toast.LENGTH_LONG).show();
        }

    }

    private void showToastMessageFromString(String Msg) {
        if ((AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur"))) {
            Toast toast = Toast.makeText(getApplicationContext(), Msg, Toast.LENGTH_LONG);

            TextView v = (TextView) toast.getView().findViewById(android.R.id.message);
            v.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
            v.setTextSize(miscFont);
            toast.show();
        } else {
            Toast.makeText(this, Farsi.Convert(Msg), Toast.LENGTH_LONG).show();
        }

    }

    @Override
    public void receivedEmergencyConfirmation() {
        TaxiPlexer.this.msgHandler.obtainMessage(MsgType.EmergencyConfirmation).sendToTarget();

    }

    private void handleEmergencyConfirmation() {
        showToastMessage(R.string.EmergencyMessagesenttodispatchersuccessfully);

    }

    @Override
    public void fetchAssignedAndPendingTrips() {
        fetchTripList();

    }

    // -----------------------------------------------------------------------
    // Interface
    // -----------------------------------------------------------------------

    private void setSwiperControllerValues() {
        if (swiperController == null)
            return;
        SharedPreferences settings = PreferenceManager.getDefaultSharedPreferences(this);
        boolean setDetectDeviceChangePref = settings.getBoolean("setDetectDeviceChangePref", true);
        boolean setFskRequiredPref = settings.getBoolean("setFskRequiredPref", false);
        String setTimeoutlistPref = settings.getString("setTimeoutlistPref", "-1");
        String setKsnChargeUplistPref = settings.getString("setKsnChargeUplistPref", "0.6");
        String setSwipeChargeUplistPref = settings.getString("setSwipeChargeUplistPref", "0.6");

        swiperController.setDetectDeviceChange(setDetectDeviceChangePref);
        swiperController.setFskRequired(setFskRequiredPref);
        swiperController.setSwipeTimeout(Double.parseDouble(setTimeoutlistPref));
        swiperController.setChargeUpTime(Double.parseDouble(setSwipeChargeUplistPref));
        swiperController.setKsnChargeUpTime(Double.parseDouble(setKsnChargeUplistPref));
    }

    private final int REQ_SYSTEM_SETTINGS = 0;

//	@Override
//	public boolean onKeyDown(int keyCode, KeyEvent event) {
//		if (keyCode == KeyEvent.KEYCODE_BACK) {
//			if (swiperController != null) {
//				if (swiperController.getSwiperState() != SwiperControllerState.STATE_IDLE) {
//					swiperController.stopSwiper();
//				}
//				swiperController.deleteSwiper();
//				swiperController = null;
//			}
//			endCallStateService();
//		}
//		return super.onKeyDown(keyCode, event);
//	}

    private Toast toast = null;
    private void setToastMessage(String msg) {
        if (toast == null) {
            toast = Toast.makeText(TaxiPlexer.this, msg, Toast.LENGTH_SHORT);
            toast.setGravity(Gravity.BOTTOM | Gravity.CENTER, 0, 0);
        }
        toast.setText(msg);
        toast.show();
    }

    // -----------------------------------------------------------------------
    // Swiper API
    // -----------------------------------------------------------------------

    private class StateChangedListener implements SwiperStateChangedListener {

        @Override
        public void onCardSwipeDetected() {
            // start = System.currentTimeMillis();
            setToastMessage(Farsi.Convert(getResources().getString(R.string.Reading_card_data)));
        }

        @Override
        public void onDecodeCompleted(HashMap<String, String> decodeData) {
            resetUIControls();

            StringBuilder sb = new StringBuilder();
            for (HashMap.Entry<String, String> entry : decodeData.entrySet()) {
                sb.append(entry.getKey() + ": " + entry.getValue() + "\n");
            }
            String formatID = decodeData.get("formatID");
            String encTrack = decodeData.get("encTrack");
            String ksn = decodeData.get("ksn");
            String partialTrack = decodeData.get("partialTrack");
            String maskedPAN = decodeData.get("maskedPAN");
            String expiryDate = decodeData.get("expiryDate");
            sb.append("packEncTrackData: " + SwiperController.packEncTrackData(formatID, encTrack, partialTrack));
            setToastMessage(Farsi.Convert(getResources().getString(R.string.Decode_Completed)));

            // if (currentTrip != null) {
            // currentTrip.creditCardNum = maskedPAN;
            //
            // }
            ttfCCNumber.setText(maskedPAN);
            ttfCCExpiry.setText(expiryDate.substring(2, 4) + expiryDate.substring(0, 2));

            vantiveEncTrack = SwiperController.packEncTrackData(formatID, encTrack, partialTrack);
            vantivKSN = ksn;
            AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this)
                    .setTitle(Farsi.Convert(getResources().getString(R.string.Swipe_Result)))
                    .setMessage(sb.toString())
                    .setPositiveButton(Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {

                        @Override
                        public void onClick(DialogInterface arg0, int arg1) {
                            arg0.dismiss();

                        }
                    });
            AlertDialog alert = builder.create();
            alert.show();

            dialogFontSize(alert);
        }

        @Override
        public void onDecodeError(DecodeResult decodeResult) {
            resetUIControls();

            if (decodeResult == DecodeResult.DECODE_SWIPE_FAIL) {
                setToastMessage(Farsi.Convert(getResources().getString(R.string.Swipe_fail)));
            } else if (decodeResult == DecodeResult.DECODE_TAP_FAIL) {
                setToastMessage(Farsi.Convert(getResources().getString(R.string.Tap_fail)));
            } else if (decodeResult == DecodeResult.DECODE_CRC_ERROR) {
                setToastMessage(Farsi.Convert(getResources().getString(R.string.CRC_error)));
            } else if (decodeResult == DecodeResult.DECODE_COMM_ERROR) {
                setToastMessage(Farsi.Convert(getResources().getString(R.string.Communication_error)));
            } else if (decodeResult == DecodeResult.DECODE_CARD_NOT_SUPPORTED) {
                setToastMessage(Farsi.Convert(getResources().getString(R.string.Card_not_supported)));
            } else {
                setToastMessage(Farsi.Convert(getResources().getString(R.string.Unknown_decode_error)));
            }
        }

        @Override
        public void onError(String message) {
            resetUIControls();
            setToastMessage(message);
        }

        @Override
        public void onGetKsnCompleted(String ksn) {
            resetUIControls();
            setToastMessage("ksn: " + ksn);
        }

        @Override
        public void onInterrupted() {
            resetUIControls();
            setToastMessage(Farsi.Convert(getResources().getString(R.string.Interrupted)));
        }

        @Override
        public void onNoDeviceDetected() {
            resetUIControls();
            setToastMessage(Farsi.Convert(getResources().getString(R.string.swiper_unplugged)));
        }

        @Override
        public void onTimeout() {
            resetUIControls();
            setToastMessage(Farsi.Convert(getResources().getString(R.string.Timeout)));
        }

        @Override
        public void onWaitingForCardSwipe() {
            setToastMessage(Farsi.Convert(getResources().getString(R.string.Waiting_card_swipe)));
        }

        @Override
        public void onWaitingForDevice() {
            setToastMessage(Farsi.Convert(getResources().getString(R.string.Waiting_for_device)));
        }

        @Override
        public void onDevicePlugged() {
            setToastMessage(Farsi.Convert(getResources().getString(R.string.Checkin_device_for_swiper)));

            try {
                if (swiperController.getSwiperState() == SwiperController.SwiperControllerState.STATE_IDLE) {
                    resetUIControls();
                    // isSwiperHereButton.setEnabled(false);
                    swipeButton.setEnabled(false);
                    swiperController.isSwiperHere();
                }
            } catch (IllegalStateException ex) {
                setToastMessage(Farsi.Convert(getResources().getString(R.string.Invalid_state)));
            }
        }

        @Override
        public void onDeviceUnplugged() {
            setToastMessage(Farsi.Convert(getResources().getString(R.string.swiper_unplugged)));
        }

        @Override
        public void onSwiperHere(boolean isHere) {
            resetUIControls();
            if (isHere) {
                setToastMessage(Farsi.Convert(getResources().getString(R.string.Swiper_is_here)));
                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                    swipeButton.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                    swipeButton.setText(Farsi.Convert(getResources().getString(R.string.SWIPE)));
                } else {
                    swipeButton.setText(Farsi.Convert(getResources().getString(R.string.SWIPE)));
                }

            } else {
                if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                    swipeButton.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                    swipeButton.setText(Farsi.Convert(getResources().getString(R.string.IS_SWIPER_HERE)));
                } else {
                    swipeButton.setText(Farsi.Convert(getResources().getString(R.string.IS_SWIPER_HERE)));
                }
                setToastMessage(Farsi.Convert(getResources().getString(R.string.Swiper_is_not_here)));
            }
        }

    }

    private void startCallStateService() {
        startService(new Intent(INTENT_ACTION_CALL_STATE));
        if (incomingCallServiceReceiver == null) {
            incomingCallServiceReceiver = new IncomingCallServiceReceiver();
            IntentFilter intentFilter = new IntentFilter();
            intentFilter.addAction(SwiperCallStateService.INTENT_ACTION_INCOMING_CALL);
            this.registerReceiver(incomingCallServiceReceiver, intentFilter);
        }
    }

    private void endCallStateService() {
        stopService(new Intent(INTENT_ACTION_CALL_STATE));
        if (incomingCallServiceReceiver != null) {
            this.unregisterReceiver(incomingCallServiceReceiver);
            incomingCallServiceReceiver = null;
        }
    }

    public void resetUIControls() {
        // isSwiperHereButton.setEnabled(true);
        // isSwiperHereButton.setText("IS SWIPER HERE?");
        swipeButton.setEnabled(true);
        // swipeButton.setText("SWIPE");

    }
    // -----------------------------------------------------------------------
    // Private classes
    // -----------------------------------------------------------------------

    private void initViews() {
        // isSwiperHereButton.setText("IS SWIPER HERE?");
        // isSwiperHereButton.setOnClickListener(new OnClickListener() {
        // @Override
        // public void onClick(View arg0) {
        // try {
        // if (swiperController.getSwiperState() == SwiperController.SwiperControllerState.STATE_IDLE) {
        // resetUIControls();
        // isSwiperHereButton.setEnabled(false);
        // swipeButton.setEnabled(false);
        // swiperController.isSwiperHere();
        // }
        // } catch (IllegalStateException ex) {
        // setToastMessage("Invalid state");
        // }
        // }
        // });

        // swipeButton = (Button) findViewById(R.id.swipeButton);
        swipeButton.setText(Farsi.Convert(getResources().getString(R.string.IS_SWIPER_HERE)));
        swipeButton.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View arg0) {
                try {
                    if (swipeButton.getText() == "SWIPE") {
                        resetUIControls();
                        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                            swipeButton.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                            swipeButton.setText(Farsi.Convert(getResources().getString(R.string.STOP)));
                        } else {
                            swipeButton.setText(Farsi.Convert(getResources().getString(R.string.STOP)));
                        }

                        // isSwiperHereButton.setEnabled(false);
                        swiperController.startSwiper();
                    } else if (swipeButton.getText() == "STOP") {
                        resetUIControls();
                        if (AVL_Service.pref.getString("AppLanguage", "").equalsIgnoreCase("ur")) {
                            swipeButton.setTypeface(_Jameel_Noori_Nastaleeq_Kasheeda);
                            swipeButton.setText(Farsi.Convert(getResources().getString(R.string.SWIPE)));
                        } else {
                            swipeButton.setText(Farsi.Convert(getResources().getString(R.string.SWIPE)));
                        }
                        swiperController.stopSwiper();
                    } else {
                        if (swiperController.getSwiperState() == SwiperController.SwiperControllerState.STATE_IDLE) {
                            swiperController.isSwiperHere();
                        }
                    }
                } catch (IllegalStateException ex) {
                    setToastMessage(Farsi.Convert(getResources().getString(R.string.Invalid_state)));
                    ex.printStackTrace();
                }
            }
        });

    }
    // -----------------------------------------------------------------------
    // Inner classes
    // -----------------------------------------------------------------------

    private class IncomingCallServiceReceiver extends BroadcastReceiver {
        @Override
        public void onReceive(Context context, Intent intent) {

            if (intent.getAction().equals(SwiperCallStateService.INTENT_ACTION_INCOMING_CALL)) {
                // //log("received INTENT_ACTION_INCOMING_CALL");
                setToastMessage(Farsi.Convert(getResources().getString(R.string.Incoming_call_detected)));
                try {
                    if (swiperController.getSwiperState() != SwiperControllerState.STATE_IDLE) {
                        swipeButton.setText(Farsi.Convert(getResources().getString(R.string.SWIPE)));
                        swiperController.stopSwiper();
                    }
                } catch (IllegalStateException ex) {
                    setToastMessage(Farsi.Convert(getResources().getString(R.string.Invalid_state)));
                    ex.printStackTrace();
                }
            }
        } // end-of onReceive
    }

    public void setLoggedInState(boolean b) {
        // TODO Auto-generated method stub

    }

    private HashMap<String, String> generateInitiateSessionInputParameters(String username, String userPassword) {
        handleShowProgress(Farsi.Convert(getResources().getString(R.string.Registering_With_Vantiv)));
        HashMap<String, String> params = new HashMap<String, String>();
        params.put(RoamPayApiParams.Username, username);
        params.put(RoamPayApiParams.UserPassword, userPassword);
        return params;
    }

    private HashMap<String, String> generateCreditSaleInputParameters(String amount) {
        handleShowProgress(Farsi.Convert(getResources().getString(R.string.Processing_Credit_Card)));
        HashMap<String, String> params = new HashMap<String, String>();
        params.put(RoamPayApiParams.Action, RoamPayApiAction.CreditSale.toString());
        params.put(RoamPayApiParams.Amount, amount);
        if (!vantiveEncTrack.equalsIgnoreCase("")) {
            params.put(RoamPayApiParams.EncryptedTrack, vantiveEncTrack);
            params.put(RoamPayApiParams.Ksn, vantivKSN);
        } else {
            params.put(RoamPayApiParams.CardNumber, currentTrip.creditCardNum);
            params.put(RoamPayApiParams.CardExp, currentTrip.creditCardExpiry.substring(0, 2) + "/" + currentTrip.creditCardExpiry.substring(2, 4));
        }

        params.put(RoamPayApiParams.OrderId, currentTrip.tripNumber);

        return params;
    }
    /*-----------------------------------------------------------------------------------------------------------------------------------------------
	 *------------------------------------------------------------ RoamPayApiHandlerImpl Class ----------------------------------------------------------------
	 *-----------------------------------------------------------------------------------------------------------------------------------------------
	 */
    private class RoamPayApiHandlerImpl extends RoamPayApiHandler {

        @Override
        public void onInitiateSessionResponse(HashMap<String, String> outputParameters) {
            boolean succeeded = outputParameters.get(RoamPayApiParams.ResponseCode).equals(RoamPayApiResponseCode.Success);
            if (succeeded) {
                setLoggedInState(true);
            }
            hideProgressDialog();
            Toast.makeText(TaxiPlexer.this, getString(succeeded ? R.string.loginSuccess : R.string.loginFailed), Toast.LENGTH_LONG).show();
        }

        @Override
        public void onRoamPayApiResponse(HashMap<String, String> outputParameters) {

            boolean succeeded = outputParameters.get(RoamPayApiParams.ResponseCode).equals(RoamPayApiResponseCode.Success) && outputParameters.get(RoamPayApiParams.Action).equals(
                    RoamPayApiAction.CreditSale.toString());
            StringBuilder m_results = new StringBuilder();
            m_results.append(getString(succeeded ? R.string.cashsaleSuccess : R.string.cashsaleFailed));
            m_results.append("Response Code: " + outputParameters.get(RoamPayApiParams.ResponseCode)
                    + "\nClerk Display: "
                    + outputParameters.get(RoamPayApiParams.ClerkDisplay)
                    + "\nAuth Code: "
                    + outputParameters.get(RoamPayApiParams.AuthCode)
                    + "\nTransaction ID: "
                    + outputParameters.get(RoamPayApiParams.GatewayTransactionId));
            if (succeeded) {
                sendTripResponse(States.DROPPED);

                currentTrip.authCode = outputParameters.get(RoamPayApiParams.AuthCode);
                currentTrip.transactionID = outputParameters.get(RoamPayApiParams.GatewayTransactionId);
                if(!currentTrip.bCopayAllowedOnPaymentScreen){
                    tempFare = "0";
                    tempExtras = "0";
                } else {
                    String  temptotal = ttfTotal.getText().toString();
                    temptotal = String.valueOf(Float.parseFloat(temptotal) - Float.parseFloat(currentTrip.Copay));
                    ttfTotal.setText(temptotal);
                }
                serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                        + AVL_Service.pref.getString("LastLongitude", "0")
                        + Constants.COLSEPARATOR
                        + currentTrip.tripNumber
                        + Constants.COLSEPARATOR
                        + currentTrip.paymentMethod
                        + Constants.COLSEPARATOR
                        + String.valueOf(Float.parseFloat(Fare) + Float.parseFloat(tempFare))
                        + Constants.COLSEPARATOR
                        + String.valueOf(Float.parseFloat(Extras) + Float.parseFloat(tempExtras))
                        + Constants.COLSEPARATOR
                        + Tip
                        + Constants.COLSEPARATOR
                        + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                        + Constants.COLSEPARATOR
                        + "xxxxxxxxxxxx"
                        + (currentTrip.creditCardNum.length() > 11 ? currentTrip.creditCardNum.substring(currentTrip.creditCardNum.length() - 4) : "")
                        + Constants.COLSEPARATOR
                        + currentTrip.cardType
                        + Constants.COLSEPARATOR
                        + currentTrip.cardProcessor
                        + Constants.COLSEPARATOR
                        + currentTrip.ConfirmNumber
                        + Constants.COLSEPARATOR
                        + currentTrip.authCode
                        + Constants.COLSEPARATOR
                        + AVL_Service.pref.getString("VehicleID", "0")
                        + Constants.COLSEPARATOR
                        + "0"
                        + Constants.COLSEPARATOR
                        + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                        + Constants.COLSEPARATOR
                        + "Driver-"
                        + AVL_Service.pref.getString("DriverID", "unknown")
                        + Constants.COLSEPARATOR
                        + currentTrip.authCode
                        + Constants.COLSEPARATOR
                        + currentTrip.tripNumber
                        + Constants.COLSEPARATOR
                        + "1"
                        + Constants.COLSEPARATOR
                        + currentTrip.transactionID
                        + Constants.COLSEPARATOR
                        + "Sale"
                        + Constants.COLSEPARATOR
                        + AVL_Service.pref.getString("DriverID", "Driver")
                        + Constants.COLSEPARATOR
                        + "0"
                        + Constants.COLSEPARATOR
                        + "0"
                        + Constants.COLSEPARATOR
                        + MRMS_DateFormat.format(currentTrip.PUTime)
                        + Constants.COLSEPARATOR
                        + ((dFormat.format(Distance).equalsIgnoreCase("0.00")) ? currentTrip.miles : dFormat.format(Distance))
                        + Constants.COLSEPARATOR
                        + ActualPaymentAmount
                        + Constants.COLSEPARATOR
                        + currentTrip.PromotionalCode
                        + Constants.COLSEPARATOR
                        + currentTrip.PromotionalValue, "SDHS", MsgType.Payment, AckType.NEW, MsgValidity.Short, MsgPriority.Highest);

                vantiveEncTrack = "";
                vantivKSN = "";

                receivedPaymentResp("Vantiv_Header" + Constants.BODYSEPARATOR + "1^CreditCard Payment successful");
            } else {
                runOnUiThread(new Runnable() {
                    public void run() {
                        // ttfCCNumber.setText("");
                        // ttfCCExpiry.setText("");
                        creditBtn.setEnabled(true);
                        cashBtn.setEnabled(true);
                        voucherBtn.setEnabled(true);
                    }
                });
            }

            handleHideProgress();
            AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this)
                    .setTitle(Farsi.Convert(getResources().getString(R.string.Transaction_Result)))
                    .setMessage(m_results.toString())
                    .setPositiveButton(Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {

                        @Override
                        public void onClick(DialogInterface arg0, int arg1) {
                            arg0.dismiss();

                        }
                    });
            AlertDialog alert = builder.create();
            alert.show();

            dialogFontSize(alert);
        }

        @Override
        public void onPingResponse(HashMap<String, String> outputParameters) {
            Log.d(getCallingPackage(), "onPingResponse(): " + outputParameters.toString());
        }

    }
    /*-----------------------------------------------------------------------------------------------------------------------------------------------
	 *------------------------------------------------------------ Callout_Response Class ----------------------------------------------------------------
	 *-----------------------------------------------------------------------------------------------------------------------------------------------
	 */
    public class Callout_Response extends AsyncTask<Void, Void, String[]> {

        String soapAction;
        SoapObject request;
        String result[];
        ProgressDialog progressDialog;
        @Override
        protected void onPreExecute() {
            // TODO Auto-generated method stub
            super.onPreExecute();
            progressDialog = new ProgressDialog(TaxiPlexer.this);
            progressDialog.setMessage(Farsi.Convert(getResources().getString(R.string.Loading)));
            progressDialog.show();
        }

        @Override
        protected String[] doInBackground(Void... params) {

            soapAction = CALLOUT_SOAPAction;

            request = new SoapObject(NAMESPACE, CALLOUT);
            // request.addProperty("arg0", "4275"); // Customer Phone
            request.addProperty("arg0", AVL_Service.ASCS_HelpLine_Number); // Customer Phone
            request.addProperty("arg1", AVL_Service.serverAddress1); // SDHS IP
            request.addProperty("arg2", currentTrip.tripNumber); // Service ID
            request.addProperty("arg3", AVL_Service.tm.getDeviceId()); // IMEI

            try {
                SoapSerializationEnvelope envelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
                // envelope.dotNet = true;
                envelope.setOutputSoapObject(request);

                HttpTransportSE androidHttpTransport = new HttpTransportSE(AVL_Service.SDCentralizedAsteriskService);
                androidHttpTransport.call(soapAction, envelope);
                // to get the response in String Type
                SoapPrimitive response = (SoapPrimitive) envelope.getResponse();
                String resultData = response.toString();
                // String[] arrayData = resultData.split("=");
                // result = arrayData[2].split(";");
                // result[0] = result[0];
                // arrayData = arrayData[3].split(";");
                // result[1] = arrayData[0];
            } catch (Exception e) {
                if (e instanceof IOException) {
                    e.printStackTrace();
                }
                if (e instanceof XmlPullParserException) {
                    e.printStackTrace();
                }
            }
            return result;
        }

        @Override
        protected void onPostExecute(String result[]) {
            if (progressDialog.isShowing())
                progressDialog.dismiss();
            super.onPostExecute(result);
        }

    }// Callout_Response Class

    @Override
    public void sendResponseToActivity(ProcessTransactionReply reply) {
        // Log.i(tag,"A-response"+reply.getResponse());

        // dismiss progress bar.
        hideProgressDialog();

        final StringBuffer strBuf = new StringBuffer();

        strBuf.append("Response: ");
        strBuf.append(reply.getResponse());
        currentTrip.transactionID = String.valueOf(reply.getGateid());
        strBuf.append("\nGate Id: ");
        strBuf.append(String.valueOf(reply.getGateid()));
        strBuf.append("\nAuth Code: ");
        strBuf.append(reply.getAuthcode());
        currentTrip.authCode = reply.getAuthcode();

        if (reply.getResponse().equalsIgnoreCase("Success")) {
            if (currentView.getId() == TRIPDETAILVIEW || bPreAuthOnPaymentView) {
                // currentTrip.transactionID = String.valueOf(reply.getGateid());
                if(!currentTrip.bCopayAllowedOnPaymentScreen){
                    tempFare = "0";
                    tempExtras = "0";
                } else {
                    String  temptotal = ttfTotal.getText().toString();
                    temptotal = String.valueOf(Float.parseFloat(temptotal) - Float.parseFloat(currentTrip.Copay));
                    ttfTotal.setText(temptotal);
                }
                serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                        + AVL_Service.pref.getString("LastLongitude", "0")
                        + Constants.COLSEPARATOR
                        + currentTrip.tripNumber
                        + Constants.COLSEPARATOR
                        + currentTrip.paymentMethod
                        + Constants.COLSEPARATOR
                        + String.valueOf(Float.parseFloat(Fare) + Float.parseFloat(tempFare))
                        + Constants.COLSEPARATOR
                        + String.valueOf(Float.parseFloat(Extras) + Float.parseFloat(tempExtras))
                        + Constants.COLSEPARATOR
                        + Tip
                        + Constants.COLSEPARATOR
                        + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                        + Constants.COLSEPARATOR
                        + "xxxxxxxxxxxx"
                        + (currentTrip.creditCardNum.length() > 11 ? currentTrip.creditCardNum.substring(currentTrip.creditCardNum.length() - 4) : "")
                        + Constants.COLSEPARATOR
                        + currentTrip.cardType
                        + Constants.COLSEPARATOR
                        + currentTrip.cardProcessor
                        + Constants.COLSEPARATOR
                        + currentTrip.ConfirmNumber
                        + Constants.COLSEPARATOR
                        + currentTrip.authCode
                        + Constants.COLSEPARATOR
                        + AVL_Service.pref.getString("VehicleID", "0")
                        + Constants.COLSEPARATOR
                        + "0"
                        + Constants.COLSEPARATOR
                        + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                        + Constants.COLSEPARATOR
                        + "Driver-"
                        + AVL_Service.pref.getString("DriverID", "unknown")
                        + Constants.COLSEPARATOR
                        + currentTrip.authCode
                        + Constants.COLSEPARATOR
                        + currentTrip.tripNumber
                        + Constants.COLSEPARATOR
                        + "1"
                        + Constants.COLSEPARATOR
                        + currentTrip.transactionID
                        + Constants.COLSEPARATOR
                        + SlimCD_TransType
                        + Constants.COLSEPARATOR
                        + AVL_Service.pref.getString("DriverID", "Driver")
                        + Constants.COLSEPARATOR
                        + "0"
                        + Constants.COLSEPARATOR
                        + "0"
                        + Constants.COLSEPARATOR
                        + MRMS_DateFormat.format(currentTrip.PUTime)
                        + Constants.COLSEPARATOR
                        + ((dFormat.format(Distance).equalsIgnoreCase("0.00")) ? currentTrip.miles : dFormat.format(Distance))
                        + Constants.COLSEPARATOR
                        + ActualPaymentAmount
                        + Constants.COLSEPARATOR
                        + currentTrip.PromotionalCode
                        + Constants.COLSEPARATOR
                        + currentTrip.PromotionalValue, "SDHS", MsgType.Payment, AckType.NEW, MsgValidity.Short, MsgPriority.Highest);

                if (bPreAuthOnPaymentView) {

                    ttfCCExpiry.setText("");
                    ttfCCNumber.setEnabled(false);
                    ttfCCExpiry.setEnabled(false);
                    FundingSource.addView(preAuthorization);
                    lblPreAuthAmount.setText(Double.toString(Math.round((Double.parseDouble(holdAmount)) * 100.0) / 100.0));
                }
                bPreAuthOnPaymentView = false;
                currentTrip.preAuthAmount = reply.getApprovedamt();
                if (currentView.getId() == PAYMENTVIEW) {
                    if (AVL_Service.pref.getBoolean("BluetoothMeter", false) || AVL_Service.pref.getBoolean("BlueBambooDevice", false)) {
                        PromotionCode.setEnabled(false);
                        discountBtn.setEnabled(false);
                        handlePaymentResp("A");
                    } else
                        bMerchantCopyPrinted = true;
                }
            } else if (TIP_EDIT_CALLED) {
                TIP_EDIT_CALLED = false;
                sendTripResponse(States.DROPPED);
                if(!currentTrip.bCopayAllowedOnPaymentScreen){
                    tempFare = "0";
                    tempExtras = "0";
                } else {
                    String  temptotal = ttfTotal.getText().toString();
                    temptotal = String.valueOf(Float.parseFloat(temptotal) - Float.parseFloat(currentTrip.Copay));
                    ttfTotal.setText(temptotal);
                }
                serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                        + AVL_Service.pref.getString("LastLongitude", "0")
                        + Constants.COLSEPARATOR
                        + currentTrip.tripNumber
                        + Constants.COLSEPARATOR
                        + currentTrip.paymentMethod
                        + Constants.COLSEPARATOR
                        + String.valueOf(Float.parseFloat(Fare) + Float.parseFloat(tempFare))
                        + Constants.COLSEPARATOR
                        + String.valueOf(Float.parseFloat(Extras) + Float.parseFloat(tempExtras))
                        + Constants.COLSEPARATOR
                        + Tip
                        + Constants.COLSEPARATOR
                        + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                        + Constants.COLSEPARATOR
                        + "xxxxxxxxxxxx"
                        + (currentTrip.creditCardNum.length() > 11 ? currentTrip.creditCardNum.substring(currentTrip.creditCardNum.length() - 4) : "")
                        + Constants.COLSEPARATOR
                        + currentTrip.cardType
                        + Constants.COLSEPARATOR
                        + currentTrip.cardProcessor
                        + Constants.COLSEPARATOR
                        + currentTrip.ConfirmNumber
                        + Constants.COLSEPARATOR
                        + currentTrip.authCode
                        + Constants.COLSEPARATOR
                        + AVL_Service.pref.getString("VehicleID", "0")
                        + Constants.COLSEPARATOR
                        + "0"
                        + Constants.COLSEPARATOR
                        + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                        + Constants.COLSEPARATOR
                        + "Driver-"
                        + AVL_Service.pref.getString("DriverID", "unknown")
                        + Constants.COLSEPARATOR
                        + currentTrip.authCode
                        + Constants.COLSEPARATOR
                        + currentTrip.tripNumber
                        + Constants.COLSEPARATOR
                        + "1"
                        + Constants.COLSEPARATOR
                        + currentTrip.transactionID
                        + Constants.COLSEPARATOR
                        + SlimCD_TransType
                        + Constants.COLSEPARATOR
                        + AVL_Service.pref.getString("DriverID", "Driver")
                        + Constants.COLSEPARATOR
                        + "0"
                        + Constants.COLSEPARATOR
                        + "0"
                        + Constants.COLSEPARATOR
                        + MRMS_DateFormat.format(currentTrip.PUTime)
                        + Constants.COLSEPARATOR
                        + ((dFormat.format(Distance).equalsIgnoreCase("0.00")) ? currentTrip.miles : dFormat.format(Distance))
                        + Constants.COLSEPARATOR
                        + ActualPaymentAmount
                        + Constants.COLSEPARATOR
                        + currentTrip.PromotionalCode
                        + Constants.COLSEPARATOR
                        + currentTrip.PromotionalValue, "SDHS", MsgType.Payment, AckType.NEW, MsgValidity.Short, MsgPriority.Highest);

                receivedPaymentResp("SlimCD_Header" + Constants.BODYSEPARATOR + "1^CreditCard Payment successful");
            } else {
                if(!currentTrip.bCopayAllowedOnPaymentScreen){
                    tempFare = "0";
                    tempExtras = "0";
                } else {
                    String  temptotal = ttfTotal.getText().toString();
                    temptotal = String.valueOf(Float.parseFloat(temptotal) - Float.parseFloat(currentTrip.Copay));
                    ttfTotal.setText(temptotal);
                }
                serviceHandle.sendMessageToServer(AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR
                        + AVL_Service.pref.getString("LastLongitude", "0")
                        + Constants.COLSEPARATOR
                        + currentTrip.tripNumber
                        + Constants.COLSEPARATOR
                        + currentTrip.paymentMethod
                        + Constants.COLSEPARATOR
                        + String.valueOf(Float.parseFloat(Fare) + Float.parseFloat(tempFare))
                        + Constants.COLSEPARATOR
                        + String.valueOf(Float.parseFloat(Extras) + Float.parseFloat(tempExtras))
                        + Constants.COLSEPARATOR
                        + Tip
                        + Constants.COLSEPARATOR
                        + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                        + Constants.COLSEPARATOR
                        + "xxxxxxxxxxxx"
                        + (currentTrip.creditCardNum.length() > 11 ? currentTrip.creditCardNum.substring(currentTrip.creditCardNum.length() - 4) : "")
                        + Constants.COLSEPARATOR
                        + currentTrip.cardType
                        + Constants.COLSEPARATOR
                        + currentTrip.cardProcessor
                        + Constants.COLSEPARATOR
                        + currentTrip.ConfirmNumber
                        + Constants.COLSEPARATOR
                        + currentTrip.authCode
                        + Constants.COLSEPARATOR
                        + AVL_Service.pref.getString("VehicleID", "0")
                        + Constants.COLSEPARATOR
                        + "0"
                        + Constants.COLSEPARATOR
                        + String.valueOf(Float.parseFloat(ttfTotal.getText().toString()) + Float.parseFloat(tempFare) + Float.parseFloat(tempExtras))
                        + Constants.COLSEPARATOR
                        + "Driver-"
                        + AVL_Service.pref.getString("DriverID", "unknown")
                        + Constants.COLSEPARATOR
                        + currentTrip.authCode
                        + Constants.COLSEPARATOR
                        + currentTrip.tripNumber
                        + Constants.COLSEPARATOR
                        + "1"
                        + Constants.COLSEPARATOR
                        + currentTrip.transactionID
                        + Constants.COLSEPARATOR
                        + SlimCD_TransType
                        + Constants.COLSEPARATOR
                        + AVL_Service.pref.getString("DriverID", "Driver")
                        + Constants.COLSEPARATOR
                        + "0"
                        + Constants.COLSEPARATOR
                        + "0"
                        + Constants.COLSEPARATOR
                        + MRMS_DateFormat.format(currentTrip.PUTime)
                        + Constants.COLSEPARATOR
                        + ((dFormat.format(Distance).equalsIgnoreCase("0.00")) ? currentTrip.miles : dFormat.format(Distance))
                        + Constants.COLSEPARATOR
                        + ActualPaymentAmount
                        + Constants.COLSEPARATOR
                        + currentTrip.PromotionalCode
                        + Constants.COLSEPARATOR
                        + currentTrip.PromotionalValue, "SDHS", MsgType.Payment, AckType.NEW, MsgValidity.Short, MsgPriority.Highest);
                if (AVL_Service.CCProcessorList.get("SlimCD").get_MultiStepScenario().equalsIgnoreCase("2") && EnableTwoStepPaymentProcessingforcredit) {
                    ttfCCNumber.setText(currentTrip.creditCardNum);
                    ttfCCNumber.setEnabled(false);
                    ttfCCExpiry.setEnabled(false);
                    ttfFare.setEnabled(false);
                    ttfExtras.setEnabled(false);
                    creditBtn.setText(AVL_Service.SDPaymentButtonCaptionFor2ndStep);
                    creditBtn.setEnabled(true);
                    cashBtn.setVisibility(View.GONE);
                    voucherBtn.setVisibility(View.GONE);
                    PromotionCode.setEnabled(false);
                    discountBtn.setEnabled(false);
                    handlePaymentResp("A");
                } else {
                    sendTripResponse(States.DROPPED);
                    receivedPaymentResp("SlimCD_Header" + Constants.BODYSEPARATOR + "1^CreditCard Payment successful");
                }
            }

        } else {
            creditBtn.setEnabled(true);
            cashBtn.setEnabled(true);
            voucherBtn.setEnabled(true);
            bMerchantCopyPrinted = false;
            currentTrip.TripPayStatus = tempPayStatus;
            // SendSlimCDTransaction("VOID", "");
        }

        strBuf.append("\nDetails: ");
        if (TIP_EDIT_CALLED) {
            TIP_EDIT_CALLED = false;
            strBuf.append("Tip cannot be deducted from Credit Card, you can take cash if available.");
            AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
            builder.setTitle(title).setMessage(Farsi.Convert(getResources().getString(R.string.Tip_cannot_be_deducted))).setPositiveButton(
                    Farsi.Convert(getResources().getString(R.string.ok)),
                    new DialogInterface.OnClickListener() {

                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            sendTripResponse(States.DROPPED);
                            Tip = OldTip;
                            receivedPaymentResp("SlimCD_Header" + Constants.BODYSEPARATOR + "1^CreditCard Payment successful");
                        }
                    }).setNegativeButton(Farsi.Convert(getResources().getString(R.string.Retry)), null);
            AlertDialog alert = builder.create();
            alert.show();

            dialogFontSize(alert);

        } else {
            strBuf.append(reply.getDescription());
            final AlertDialog dialog = new AlertDialog.Builder(TaxiPlexer.this).setTitle(title).setMessage(strBuf.toString()).create();
            dialog.setButton(Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {
                public void onClick(DialogInterface dialog, int whichButton) {
                    if (TIP_EDIT_CALLED)
                        TIP_EDIT_CALLED = false;
                    else {
                        System.gc();
                        dialog.dismiss();
                    }
                }
            });
            dialog.setCancelable(false);
            dialog.show();

            dialogFontSize(dialog);
        }

    }

    private ProcessTransactionRequest getProcessTransRequest(String Trans_type, String Amt) {

        ProcessTransactionRequest request = new ProcessTransactionRequest();

        // Required Fields.

        request.setUsername(AVL_Service.CCProcessorList.get("SlimCD").get_UserName());

        request.setPassword(AVL_Service.CCProcessorList.get("SlimCD").get_AccountPassword());

        request.setClientid(Integer.parseInt(AVL_Service.CCProcessorList.get("SlimCD").get_UserName()));

        request.setSiteid(Integer.parseInt(AVL_Service.CCProcessorList.get("SlimCD").get_iGatewayVariable2()));

        request.setPriceid(Integer.parseInt(AVL_Service.CCProcessorList.get("SlimCD").get_iGatewayVariable3()));

        request.setVersion(AVL_Service.CCProcessorList.get("SlimCD").get_vVersion());

        request.setProduct(AVL_Service.CCProcessorList.get("SlimCD").get_vProduct());
        request.setKey(AVL_Service.CCProcessorList.get("SlimCD").get_vKey());
        request.setClient_transref(currentTrip.ConfirmNumber);

        // UI
        if (Trans_type.equalsIgnoreCase("SALE")) {

            request.setTranstype(Trans_type);
            request.setAmount(Amt);
            if (!currentTrip.creditCardTrackII.equalsIgnoreCase("")) {
                if (checkforIDTech) {
                    checkforIDTech = false;
                    request.setTrackdata(currentTrip.creditCardTrackII);
                } else
                    request.setTrackdata(currentTrip.creditCardTrackII.equalsIgnoreCase("") ? currentTrip.creditCardTrackII : ";" + currentTrip.creditCardTrackII + "?");
                request.setCardpresent("Yes");
                request.setReaderpresent("Yes");
            } else if (!currentTrip.creditCardNum.equalsIgnoreCase("") && !currentTrip.creditCardExpiry.equalsIgnoreCase("")) {
                request.setCardnumber(currentTrip.creditCardNum);
                request.setExpmonth(currentTrip.creditCardExpiry.substring(0, 2));
                request.setExpyear("20" + currentTrip.creditCardExpiry.substring(2, 4));
            } else if (!currentTrip.GateID.trim().equalsIgnoreCase("") && (Integer.parseInt(currentTrip.GateID) > 0)) {
                request.setGateid(Integer.parseInt(currentTrip.GateID));
            }

            title = "Sale Results";

        } else if (Trans_type.equalsIgnoreCase("FORCE")) {
            request.setTranstype(Trans_type);
            request.setAmount(Amt);
            request.setGateid(Integer.parseInt(currentTrip.transactionID));
            title = "Post Auth Results";
        } else if (Trans_type.equalsIgnoreCase("AUTH")) {
            request.setTranstype(Trans_type);
            request.setAmount(Amt);
            title = "Pre Auth Results";
            if (!currentTrip.creditCardTrackII.equalsIgnoreCase("")) {
                if (checkforIDTech) {
                    checkforIDTech = false;
                    request.setTrackdata(currentTrip.creditCardTrackII);
                } else
                    request.setTrackdata(currentTrip.creditCardTrackII.equalsIgnoreCase("") ? currentTrip.creditCardTrackII : ";" + currentTrip.creditCardTrackII + "?");
                request.setCardpresent("Yes");
                request.setReaderpresent("Yes");

            } else if (!currentTrip.creditCardNum.equalsIgnoreCase("") && !currentTrip.creditCardExpiry.equalsIgnoreCase("")) {
                request.setCardnumber(currentTrip.creditCardNum);
                request.setExpmonth(currentTrip.creditCardExpiry.substring(0, 2));
                request.setExpyear("20" + currentTrip.creditCardExpiry.substring(2, 4));
            } else {
                request.setGateid(Integer.parseInt(currentTrip.GateID));
            }
        } else if (Trans_type.equalsIgnoreCase("TIPEDIT")) {
            request.setTranstype(Trans_type);
            request.setGateid(Integer.parseInt(currentTrip.transactionID));
            request.setAmount(String.valueOf(Float.parseFloat(Amt)));
            request.setGratuity(Amt);
            TIP_EDIT_CALLED = true;
            title = "Tip Edit Results";
        }

        request.setDeviceid(AVL_Service.tm.getDeviceId());
        SlimCD_TransType = Trans_type;

        return request;
    }
    void dialogFontSize(AlertDialog dialog) {
        dialog.getWindow().getAttributes();

        TextView textView = (TextView) dialog.findViewById(android.R.id.message);
        if (textView != null)
            textView.setTextSize(miscFont);

        final int alertTitle = TaxiPlexer.this.getResources().getIdentifier("alertTitle", "id", "android");

        TextView textView1 = (TextView) dialog.findViewById(alertTitle);
        if (textView1 != null)
            textView1.setTextSize(miscFont);

        Button btnp = dialog.getButton(Dialog.BUTTON_POSITIVE);

        if (btnp != null)
            btnp.setTextSize(buttonFont);

        Button btnng = dialog.getButton(Dialog.BUTTON_NEGATIVE);

        if (btnng != null)
            btnng.setTextSize(buttonFont);

        Button btnnt = dialog.getButton(Dialog.BUTTON_NEUTRAL);

        if (btnnt != null)
            btnnt.setTextSize(buttonFont);
        return;

    }

    private CharSequence wrapInSpan(CharSequence value) {

        SpannableString ss2 = new SpannableString(value);
        switch (Integer.parseInt(Fonts[AVL_Service.pref.getInt("FontPosition", 4)])) {
            case -8 :
                ss2.setSpan(new RelativeSizeSpan(.25f), 0, ss2.length(), 0);
                break;
            case -6 :
                ss2.setSpan(new RelativeSizeSpan(.50f), 0, ss2.length(), 0);
                break;
            case -4 :
                ss2.setSpan(new RelativeSizeSpan(.75f), 0, ss2.length(), 0);
                break;
            case -2 :
                ss2.setSpan(new RelativeSizeSpan(1f), 0, ss2.length(), 0);
                break;
            case 0 :
                ss2.setSpan(new RelativeSizeSpan(1.25f), 0, ss2.length(), 0);
                break;
            case 2 :
                ss2.setSpan(new RelativeSizeSpan(1.50f), 0, ss2.length(), 0);
                break;
            case 4 :
                ss2.setSpan(new RelativeSizeSpan(1.75f), 0, ss2.length(), 0);
                break;
            case 6 :
                ss2.setSpan(new RelativeSizeSpan(2.0f), 0, ss2.length(), 0);
                break;
            case 8 :
                ss2.setSpan(new RelativeSizeSpan(2.25f), 0, ss2.length(), 0);
                break;
        }
        return ss2;
    }

    private void EndShiftThenLock() {

        // if (serviceHandle.loggedIn()) {
        // AlertDialog.Builder builder = new AlertDialog.Builder(TaxiPlexer.this);
        // builder.setIcon(android.R.drawable.ic_dialog_alert).setTitle(Farsi.Convert(getResources().getString(R.string.EndShiftConfirmation))).setMessage(
        // Farsi.Convert(getResources().getString(R.string.WantEndShift))).setPositiveButton(Farsi.Convert(getResources().getString(R.string.Yes)), new
        // DialogInterface.OnClickListener() {
        // @Override
        // public void onClick(DialogInterface dialog, int which) {
        // setMeterStatus(true, "EndShift", mBluetoothAdapter.isEnabled());
        // receivedLogoffResponse(new String[]{"1", "You are Succefffully Logged off,  Good Bye"});
        // serviceHandle.sendMessageToServer(
        // AVL_Service.pref.getString("LastLatitude", "0") + Constants.COLSEPARATOR + AVL_Service.pref.getString("LastLongitude", "0"),
        // "SDHS",
        // MsgType.LogoffReq,
        // AckType.NEW,
        // MsgValidity.Medium,
        // MsgPriority.AboveNormal);
        exitApp = false;
        handleShowProgress(Farsi.Convert(getResources().getString(R.string.UpdatingServer)));
        if (IsActiveRespDialog != null) {
            if (IsActiveRespDialog.isShowing())
                IsActiveRespDialog.dismiss();
        }

        if (aDialog != null) {
            if (aDialog.isShowing())
                aDialog.dismiss();
        }
        if (Meter != null) {
            if (AVL_Service.pref.getBoolean("VeriFoneDevice", false) && (tvTaxiMeter != null && tvTaxiMeter.getText().toString().equalsIgnoreCase("Connected"))) {
                customMessage = new CustomMessage("Logg Off", "11");
                Meter.writeCustom(customMessage);
            }
        }

        if (bluebambooPrinter != null) {
            bluebambooPrinter.flush();
            bluebambooPrinter = null;
        }
        if (Vivotech != null) {
            Vivotech = null;
            VivotechDevice = null;
        }

        tabView = null;
        tabtempIndex = 0;
        tabberView_breakBtn = null;
        reciept = "";

        System.runFinalization();

        new Thread(new Runnable() {

            @Override
            public void run() {
                runOnUiThread(new Runnable() {

                    @Override
                    public void run() {
                        if (AVL_Service.SDEnableMeterLocking && AVL_Service.pref.getBoolean("PulsarMeter", false) && Meter != null)
                            if (Meter.isConnectionAlive()) {
                                Meter.lockMeter();

                                Meter.cancel();
                                Meter = null;

                                if (taxiMeterPrinter != null) {
                                    taxiMeterPrinter.lockMeter();
                                    taxiMeterPrinter.cancel();
                                    taxiMeterPrinter = null;
                                }

                                if (mBluetoothAdapter != null) {
                                    mBluetoothAdapter.disable();
                                }
                                mBluetoothAdapter = null;
                                IsMeterLockedOnAppQuit = true;
                                new AlertDialog.Builder(TaxiPlexer.this).setMessage(Farsi.Convert(getResources().getString(R.string.Meter_Locked))).setPositiveButton(
                                        Farsi.Convert(getResources().getString(R.string.ok)),
                                        new DialogInterface.OnClickListener() {

                                            @Override
                                            public void onClick(DialogInterface arg0, int arg1) {
                                                arg0.dismiss();
                                                _quitApp = true;
                                                _isLoggedInOnce = false;
                                            }
                                        }).setCancelable(false).create().show();
                            }

                        if (!IsMeterLockedOnAppQuit) {
                            lockHandler.postDelayed(this, 5000);
                            Toast.makeText(TaxiPlexer.this, "Checking...", Toast.LENGTH_LONG).show();
                        }

                    }
                });

            }
        }).start();

        // } // onClick
        //
        // }).setNegativeButton(Farsi.Convert(getResources().getString(R.string.No)), null);
        // AlertDialog alert = builder.create();
        // alert.show();
        //
        // dialogFontSize(alert);
        // } else if (quitApp || !_isLoggedInOnce) {
        // exitApp = true;
        // AVL_Service.pref.edit().putBoolean("restart", true).commit();
        // logoff_Quit(Farsi.Convert(getResources().getString(R.string.ShuttingDown)));
        // } else
        // showToastMessage(R.string.You_are_Not_Logged_In);

    }

    private synchronized Intent prepareIntent(boolean incoming) {
        Intent intent = new Intent(this, StartAVActivityService.class);
        intent.putExtra(ScreenAV.SEND_VIDEO, false);
        intent.putExtra("incoming", incoming);
        intent.putExtra(AbtoPhone.REMOTE_CONTACT, activeRemoteContact);
        intent.putExtra(AbtoPhone.ACCOUNT_ID, accId);

        return intent;
    }

    private synchronized void startAV(boolean incoming) {
        Intent intent = prepareIntent(incoming);
        startService(intent);
    }

    // private class RegisterDialog extends Dialog {
    // public RegisterDialog(Context context) {
    // super(context);
    // setContentView(R.softmeternew.register_dialog);
    //
    // Button regButton = (Button) findViewById(R.id.register_button);
    // final EditText user = (EditText) findViewById(R.id.login);
    // final EditText pass = (EditText) findViewById(R.id.password);
    // final EditText domain = (EditText) findViewById(R.id.domain);
    //
    // regButton.setOnClickListener(new View.OnClickListener() {
    //
    // public void onClick(View v) {
    // // Add account
    // abtoPhone.getConfig().setCodecPriority(Codec.G729, (short) 1);
    // accId = (int) abtoPhone.getConfig().addAccount(domain.getText().toString(), user.getText().toString(), pass.getText().toString(), null, user.getText().toString(),
    // 300, true);
    // Toast.makeText(TaxiPlexer.this, String.valueOf(abtoPhone.getConfig().getCodecPriority(Codec.G729, "wb", (short) 1)), Toast.LENGTH_LONG).show();
    // // And register added account
    // TaxiPlexer.this.domain = domain.getText().toString();
    // if (domain.getText().toString().length() > 0 && pass.getText().toString().length() > 0 && user.getText().toString().length() > 0) {
    // try {
    // abtoPhone.register();
    // } catch (RemoteException e) {
    // exceptionToast(e.toString());
    // }
    // if (registrationWaiting != null) {
    // registrationWaiting.show();
    // }
    // }
    // RegisterDialog.this.dismiss();
    // }
    // });
    // }
    // }

    public class CallDialog extends Dialog {
        public CallDialog(Context context) {
            super(context);
            setContentView(R.layout.register_dialog);

            Button callButton = (Button) findViewById(R.id.register_button);
            callButton.setText(Farsi.Convert(getResources().getString(R.string.Call)));
            final EditText phone = (EditText) findViewById(R.id.login);
            phone.setHint(Farsi.Convert(getResources().getString(R.string.phone)));
            final EditText pass = (EditText) findViewById(R.id.password);
            pass.setVisibility(View.GONE);
            final EditText domain = (EditText) findViewById(R.id.domain);
            domain.setVisibility(View.GONE);

            callButton.setOnClickListener(new View.OnClickListener() {

                public void onClick(View v) {

                    String sipNumber = phone.getText().toString();
                    if (sipNumber != null && !sipNumber.equals("")) {
                        // Start Call
                        try {
                            abtoPhone.startCall(sipNumber, accId);
                            activeRemoteContact = sipNumber;
                            startAV(false);
                            if (!sipNumber.contains("@")) {
                                activeRemoteContact = String.format("<sip:%1$s@%2$s>", sipNumber, domain);
                            } else {
                                activeRemoteContact = String.format("<sip:%1$s>", sipNumber);
                            }
                        } catch (RemoteException e) {
                            e.printStackTrace();
                        }
                        // v.setEnabled(false);
                    }

                    CallDialog.this.dismiss();
                }
            });
        }
    }

    public void onReceiveMsgChallengeResult(int arg0, byte[] arg1) {
        // TODO Auto-generated method stub

    }

    public void onReceiveMsgUpdateFirmwareProgress(int arg0) {
        // TODO Auto-generated method stub

    }

    public void onReceiveMsgUpdateFirmwareResult(int arg0) {
        // TODO Auto-generated method stub

    }

    public boolean getUserGrant(int type, String strMessage) {
        Log.d("Demo Info >>>>> getUserGrant:", strMessage);
        boolean getUserGranted = false;
        switch (type) {
            case uniMagReaderMsg.typeToPowerupUniMag :
                // pop up dialog to get the user grant
                getUserGranted = true;
                break;
            case uniMagReaderMsg.typeToUpdateXML :
                // pop up dialog to get the user grant
                getUserGranted = true;
                break;
            case uniMagReaderMsg.typeToOverwriteXML :
                // pop up dialog to get the user grant
                getUserGranted = true;
                break;
            case uniMagReaderMsg.typeToReportToIdtech :
                // pop up dialog to get the user grant
                getUserGranted = true;
                break;
            default :
                getUserGranted = false;
                break;
        }
        return getUserGranted;
    }

    public void onReceiveMsgAutoConfigCompleted(StructConfigParameters arg0) {
        // TODO Auto-generated method stub

    }

    public void onReceiveMsgAutoConfigProgress(int arg0) {
        // TODO Auto-generated method stub

    }

    public void onReceiveMsgAutoConfigProgress(int arg0, double arg1, String arg2) {
        // TODO Auto-generated method stub

    }

    public void onReceiveMsgCardData(byte flagOfCardData, byte[] cardData) {

        if (cardData.length > 5)
            if (cardData[0] == 0x25 && cardData[1] == 0x45) {
                statusText = "Swipe error. Please try again.";
                msrData = new byte[cardData.length];
                System.arraycopy(cardData, 0, msrData, 0, cardData.length);
                enableSwipeCard = true;
                return;
            }

        byte flag = (byte) (flagOfCardData & 0x04);
        // Log.d("Demo Info >>>>> onReceive flagOfCardData="+flagOfCardData,"CardData="+ getHexStringFromBytes(cardData));

        if (flag == 0x00)
            strMsrData = new String(cardData);
        if (flag == 0x04) {
            // You need to decrypt the data here first.
            strMsrData = new String(cardData);
        }
        msrData = new byte[cardData.length];
        try {
            int startofcc = strMsrData.indexOf(';');

            currentTrip.creditCardTrackII = strMsrData.substring(startofcc + 1, strMsrData.length() - 2);
            int endofcc = currentTrip.creditCardTrackII.indexOf('=');
            String ccnumber = currentTrip.creditCardTrackII.substring(0, endofcc);
            String ccexpiry = currentTrip.creditCardTrackII.substring(endofcc + 3, endofcc + 5);
            ccexpiry = ccexpiry + currentTrip.creditCardTrackII.substring(endofcc + 1, endofcc + 3);

            currentTrip.creditCardNum = ccnumber;
            currentTrip.creditCardExpiry = ccexpiry;

            ttfCCNumber.setText(ccnumber);
            ttfCCExpiry.setText(ccexpiry);
        } catch (Exception e) {

        }
        currentTrip.creditCardTrackII = getHexStringFromBytes(cardData);
        currentTrip.creditCardTrackII = currentTrip.creditCardTrackII.replaceAll(" ", "");
        checkforIDTech = true;
        System.arraycopy(cardData, 0, msrData, 0, cardData.length);
        enableSwipeCard = true;
        handlerforIDtech.post(doUpdateTVS);

    }
    private String getConfigurationFileFromRaw() {
        return getXMLFileFromRaw("idt_unimagcfg_default.xml");
    }

    private boolean isFileExist(String path) {
        if (path == null)
            return false;
        File file = new File(path);
        if (!file.exists()) {
            return false;
        }
        return true;
    }

    private String getXMLFileFromRaw(String fileName) {
        // the target filename in the application path
        String fileNameWithPath = null;
        fileNameWithPath = fileName;

        try {
            InputStream in = getResources().openRawResource(R.raw.idt_unimagcfg_default);
            int length = in.available();
            byte[] buffer = new byte[length];
            in.read(buffer);
            in.close();
            deleteFile(fileNameWithPath);
            FileOutputStream fout = openFileOutput(fileNameWithPath, MODE_PRIVATE);
            fout.write(buffer);
            fout.close();

            // to refer to the application path
            File fileDir = this.getFilesDir();
            fileNameWithPath = fileDir.getParent() + java.io.File.separator + fileDir.getName();
            fileNameWithPath += java.io.File.separator + "idt_unimagcfg_default.xml";

        } catch (Exception e) {
            e.printStackTrace();
            fileNameWithPath = null;
        }
        return fileNameWithPath;
    }

    private final Runnable doConnectUsingProfile = new Runnable() {
        public void run() {
            if (myUniMagReader != null) {
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                myUniMagReader.connectWithProfile(profile);
            }
        }
    };

    private final Runnable doUpdateTVS = new Runnable() {
        public void run() {
            try {
                // CardData cd = new CardData(msrData);

                StringBuffer hexString = new StringBuffer();
                hexString.append("<");
                String fix = null;
                for (int i = 0; i < msrData.length; i++) {
                    fix = Integer.toHexString(0xFF & msrData[i]);
                    if (fix.length() == 1)
                        fix = "0" + fix;
                    hexString.append(fix);
                    if ((i + 1) % 4 == 0 && i != (msrData.length - 1))
                        hexString.append(' ');
                }
                hexString.append(">");

                myUniMagReader.WriteLogIntoFile(hexString.toString());
                // currentTrip.creditCardTrackII = hexString.toString();

                // myUniMagReader.WriteLogIntoFile(cd.toString());
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    };

    public void onReceiveMsgCommandResult(int commandID, byte[] cmdReturn) {

        if (cmdReturn.length > 1) {
            if (6 == cmdReturn[0] && (byte) 0x56 == cmdReturn[1]) {

                return;
            }
        }

        switch (commandID) {
            case uniMagReaderMsg.cmdGetNextKSN :
                if (0 == cmdReturn[0])
                    statusText = "Get Next KSN timeout.";
                else if (6 == cmdReturn[0]) {
                    statusText = "Get Next KSN Succeed.";
                    byte[] ksn = new byte[10];
                    int j = 0;
                    for (int i = 2; i < 12; i++) {
                        ksn[j] = cmdReturn[i];
                        j++;
                    }
                    // stringksn = getHexStringFromBytes(ksn);
                } else
                    statusText = "Get Next KSN failed.";
                break;

            default :
                break;
        }
        msrData = null;
        msrData = new byte[cmdReturn.length];
        System.arraycopy(cmdReturn, 0, msrData, 0, cmdReturn.length);

    }

    public void onReceiveMsgConnected() {
        showToastMessageFromString(Farsi.Convert(getResources().getString(R.string.IDTech_Connected)));
        myUniMagReader.sendCommandGetNextKSN();
        // TODO Auto-generated method stub

    }

    public void onReceiveMsgDisconnected() {
        // TODO Auto-generated method stub
        showToastMessageFromString(Farsi.Convert(getResources().getString(R.string.IDTech_DisConnected)));
    }

    public void onReceiveMsgFailureInfo(int arg0, String arg1) {
        // TODO Auto-generated method stub
        showToastMessageFromString(Farsi.Convert(getResources().getString(R.string.IDTech_Failure)));
    }

    public void onReceiveMsgProcessingCardData() {
        // TODO Auto-generated method stub
        showToastMessageFromString(Farsi.Convert(getResources().getString(R.string.Data_Processed)));
    }

    @Deprecated
    public void onReceiveMsgSDCardDFailed(String arg0) {
        // TODO Auto-generated method stub

    }

    public void onReceiveMsgTimeout(String arg0) {
        // TODO Auto-generated method stub
        showToastMessageFromString(Farsi.Convert(getResources().getString(R.string.IDTech_TimeOut)));
        if (swipeButtonForIDTech != null)
            swipeButtonForIDTech.setEnabled(true);
    }

    public void onReceiveMsgToCalibrateReader() {
        // TODO Auto-generated method stub

    }

    public void onReceiveMsgToConnect() {
        // TODO Auto-generated method stub
        showToastMessageFromString(Farsi.Convert(getResources().getString(R.string.IDTech_PoweringUp)));
    }

    public void onReceiveMsgToSwipeCard() {
        // TODO Auto-generated method stub
        showToastMessageFromString(Farsi.Convert(getResources().getString(R.string.Please_Swipe_Card)));
    }

    private void initializeReader() {

        if (myUniMagReader != null) {
            myUniMagReader.unregisterListen();
            myUniMagReader.release();
            myUniMagReader = null;
        }

        myUniMagReader = new uniMagReader(this, this);
        if (myUniMagReader == null)
            return;

        myUniMagReader.setVerboseLoggingEnable(true);
        myUniMagReader.registerListen();

        // load the XML configuratin file
        fileNameWithPath = getConfigurationFileFromRaw();
        if (!isFileExist(fileNameWithPath)) {
            fileNameWithPath = null;
        }

        if (isUseAutoConfigProfileChecked) {
            if (profileDatabase.updateProfileFromDB()) {
                this.profile = profileDatabase.getProfile();
                Toast.makeText(this, "AutoConfig profile has been loaded.", Toast.LENGTH_LONG).show();
                handlerforIDtech.post(doConnectUsingProfile);
            } else {
                Toast.makeText(this, "No profile found. Please run AutoConfig first.",

                        Toast.LENGTH_LONG).show();
            }
        } else {
            // ///////////////////////////////////////////////////////////////////////////////
            // Network operation is prohibited in the UI Thread if target API is 11 or above.
            // If target API is 11 or above, please use AsyncTask to avoid errors.
            myUniMagReader.setXMLFileNameWithPath(fileNameWithPath);
            myUniMagReader.loadingConfigurationXMLFile(true);
            // //////////////////////////////////////////////////////////////
        }
        // Initializing SDKTool for firmware update
        firmwareUpdateTool = new uniMagSDKTools(this, this);
        firmwareUpdateTool.setUniMagReader(myUniMagReader);
        myUniMagReader.setSDKToolProxy(firmwareUpdateTool.getSDKToolProxy());

    }

    private String getHexStringFromBytes(byte []data)
    {
        if(data.length<=0)
            return null;
        StringBuffer hexString = new StringBuffer();
        String fix = null;
        for (int i = 0; i < data.length; i++) {
            fix = Integer.toHexString(0xFF & data[i]);
            if(fix.length()==1)
                fix = "0"+fix;
            hexString.append(fix);
        }
        fix = null;
        fix = hexString.toString();
        return fix;
    }

    String getcreditcardprocessor() {
        if (Integer.parseInt(currentTrip.MARSRefID) > 0 && currentTrip.CCGateway.trim().length() > 0 && AVL_Service.CCProcessorList.containsKey(currentTrip.CCGateway)) {
            return currentTrip.CCGateway;
        } else {
            return AVL_Service.CardMappings.get(currentTrip.cardType.toUpperCase()).getCardProcessingCompany();
        }

    }

    String getcreditcardprocessorfromcreditITC() {
        if (Integer.parseInt(currentTrip.MARSRefID) > 0 && currentTrip.CCGateway.trim().length() > 0 && AVL_Service.CCProcessorList.containsKey(currentTrip.CCGateway)) {
            return currentTrip.CCGateway;
        } else {
            return AVL_Service.CardMappings.get(CreditCard_ITC.getCardType().getFullName().toUpperCase()).getCardProcessingCompany();
        }

    }

    private void setUpSipExtension(){
        try{
            // Get AbtoPhone instance
            abtoPhone = ((AbtoApplication) getApplication()).getAbtoPhone();

            if (abtoPhone.getActiveCallId() != AbtoPhone.INVALID_CALL_ID) {
                startAV(false);
            }

            // show waiting dialog when initialize abtoPhone, and close it when initialized
            final ProgressDialog dialog = new ProgressDialog(this);
            dialog.setCancelable(false);
            dialog.setMessage(Farsi.Convert(getResources().getString(R.string.Loading)));
            dialog.setCancelable(false);

            // set listener what call when service is initialized. First configuration may take more time.
            abtoPhone.setInitializeListener(new OnInitializeListener() {
                @Override
                public void onInitializeState(OnInitializeListener.InitializeState state, String message) {
                    switch (state) {
                        case START :
                            if (!dialog.isShowing())
                                dialog.show();
                            break;
                        case INFO :
                        case WARNING :
                            Toast.makeText(TaxiPlexer.this, message, Toast.LENGTH_SHORT).show();
                            break;
                        case FAIL :
                            dialog.dismiss();
                            new AlertDialog.Builder(TaxiPlexer.this).setTitle(Farsi.Convert(getResources().getString(R.string.error))).setMessage(message).setPositiveButton("Ok", new DialogInterface.OnClickListener() {

                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    dialog.dismiss();

                                }
                            }).create().show();
                            break;
                        case SUCCESS :
                            dialog.dismiss();
                            break;

                        default :
                            break;
                    }
                }
            });

            // Start initialize
            abtoPhone.initialize();
            if (!abtoPhone.isActive()) {
                dialog.show();
            }// initialization

            // mainButton = (Button) findViewById(R.id.main_button);
            // callUri = (EditText) findViewById(R.id.sip_number);

            registrationWaiting = new ProgressDialog(this);
            registrationWaiting.setMessage(Farsi.Convert(getResources().getString(R.string.Registration_In_Progress)));
            registrationWaiting.setCancelable(false);

            // Set registration event
            abtoPhone.setRegistrationStateListener(new OnRegistrationListener() {

                @Override
                public void onRegistrationFailed(long accId, int statusCode, String statusText) {
                    registered = false;
                    domain = null;
                    registrationWaiting.dismiss();
                    AlertDialog.Builder fail = new AlertDialog.Builder(TaxiPlexer.this);
                    fail.setTitle(Farsi.Convert(getResources().getString(R.string.Registration_Failed)));
                    fail.setMessage(statusCode + " - " + statusText);
                    fail.setPositiveButton(Farsi.Convert(getResources().getString(R.string.ok)), new DialogInterface.OnClickListener() {

                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    });
                    fail.setNegativeButton(Farsi.Convert(getResources().getString(R.string.Retry)), new DialogInterface.OnClickListener(){
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            if (AVL_Service.SDAsteriskServer.length() > 0 && SDAsteriskPwd.length() > 0 && SDAsteriskExt.length() > 0) {

                                try {
                                    abtoPhone.register();
                                } catch (RemoteException e) {
                                    exception("[Exception in setUpSipExtension(Retry Button)]" + "[setUpSipExtension]" + "[" + e.getLocalizedMessage() + "]");

                                }

                                if (registrationWaiting != null) {
                                    registrationWaiting.show();
                                }
                            }
                        }
                    });
                    fail.show();

                }
                @Override
                public void onRegistered(long accId) {
                    registered = true;
                    registrationWaiting.dismiss();
                    Toast.makeText(TaxiPlexer.this, "Sip Ext. Registered Successfully", Toast.LENGTH_LONG).show();

                }

                @Override
                public void onUnRegistered(long arg0) {
                    // TODO Auto-generated method stub

                }

            }); // registration listener

            // Set on Incoming call listener
            abtoPhone.setIncomingCallListener(new OnIncomingCallListener() {

                @Override
                public void OnIncomingCall(String remoteContact, long accountId) {
                    activeRemoteContact = remoteContact;
                    startAV(true);
                }

            }); // incoming call listener

            // Add account
            abtoPhone.getConfig().setCodecPriority(Codec.G729, (short) 1);

            accId = (int) abtoPhone.getConfig().addAccount(AVL_Service.SDAsteriskServer, SDAsteriskExt, SDAsteriskPwd, null, SDAsteriskExt, 300, true);
            AudioManager audioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
            // audioManager.setStreamVolume(AudioManager.STREAM_VOICE_CALL, 20, 0);
            abtoPhone.setSpeakerLevel(audioManager.getStreamMaxVolume(AudioManager.STREAM_VOICE_CALL));
            // Toast.makeText(
            // TaxiPlexer.this,
            // String.valueOf(abtoPhone.getConfig().getCodecPriority(Codec.G729, "wb", (short) 1)) + String.valueOf(abtoPhone.getSpeakerLevel()),
            // Toast.LENGTH_LONG).show();
            // And register added account
            TaxiPlexer.this.domain = AVL_Service.SDAsteriskServer;
            if (AVL_Service.SDAsteriskServer.length() > 0 && SDAsteriskPwd.length() > 0 && SDAsteriskExt.length() > 0) {
                abtoPhone.register();

                if (registrationWaiting != null) {
                    registrationWaiting.show();
                }
            }
            // RegisterDialog.this.dismiss();
        }catch (Exception e){
            exception("[Exception in setUpSipExtension]" + "[setUpSipExtension]" + "[" + e.getLocalizedMessage() + "]");
        }
    }

    public static String fixedLengthString(String string, int length) {
        return String.format("%0"+length+"d", Integer.parseInt(string));
    }


}